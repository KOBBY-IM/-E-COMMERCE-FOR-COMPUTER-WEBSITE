/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={236:(e,t,n)=>{"use strict";var r=n(795),o=[],i=[],a=r.makeRequestCallFromTimer((function(){if(i.length)throw i.shift()}));function u(e){var t;(t=o.length?o.pop():new l).task=e,r(t)}function l(){this.task=null}e.exports=u,l.prototype.call=function(){try{this.task.call()}catch(e){u.onerror?u.onerror(e):(i.push(e),a())}finally{this.task=null,o[o.length]=this}}},795:(e,t,n)=>{"use strict";function r(e){i.length||o(),i[i.length]=e}e.exports=r;var o,i=[],a=0;function u(){for(;a<i.length;){var e=a;if(a+=1,i[e].call(),a>1024){for(var t=0,n=i.length-a;t<n;t++)i[t]=i[t+a];i.length-=a,a=0}}i.length=0,a=0}var l,c,s,f=void 0!==n.g?n.g:self,p=f.MutationObserver||f.WebKitMutationObserver;function d(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof p?(l=1,c=new p(u),s=document.createTextNode(""),c.observe(s,{characterData:!0}),o=function(){l=-l,s.data=l}):o=d(u),r.requestFlush=o,r.makeRequestCallFromTimer=d},146:(e,t,n)=>{"use strict";var r=n(363),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=d(n);o&&o!==h&&e(t,o,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),m=l(n),y=0;y<a.length;++y){var v=a[y];if(!(i[v]||r&&r[v]||m&&m[v]||u&&u[v])){var g=p(n,v);try{c(t,v,g)}catch(e){}}}}return t}},92:(e,t,n)=>{"use strict";var r=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("unable to locate global object")}();e.exports=t=r.fetch,r.fetch&&(t.default=r.fetch.bind(r)),t.Headers=r.Headers,t.Request=r.Request,t.Response=r.Response},228:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,a,u=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in i=Object(arguments[l]))n.call(i,c)&&(u[c]=i[c]);if(t){a=t(i);for(var s=0;s<a.length;s++)r.call(i,a[s])&&(u[a[s]]=i[a[s]])}}return u}},694:(e,t,n)=>{"use strict";var r=n(925);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},556:(e,t,n)=>{e.exports=n(694)()},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},551:(e,t,n)=>{"use strict";var r=n(540),o=n(228),i=n(982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,p={onError:function(e){l=!0,c=e}};function d(e,t,n,r,o,i,a,s,f){l=!1,c=null,u.apply(p,arguments)}var h=null,m=null,y=null;function v(e,t,n){var r=e.type||"unknown-event";e.currentTarget=y(n),function(e,t,n,r,o,i,u,p,h){if(d.apply(this,arguments),l){if(!l)throw Error(a(198));var m=c;l=!1,c=null,s||(s=!0,f=m)}}(r,t,void 0,e),e.currentTarget=null}var g=null,b={};function _(){if(g)for(var e in b){var t=b[e],n=g.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!S[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in S[n]=t,n=t.eventTypes){var o=void 0,i=n[r],u=t,l=r;if(E.hasOwnProperty(l))throw Error(a(99,l));E[l]=i;var c=i.phasedRegistrationNames;if(c){for(o in c)c.hasOwnProperty(o)&&w(c[o],u,l);o=!0}else i.registrationName?(w(i.registrationName,u,l),o=!0):o=!1;if(!o)throw Error(a(98,r,e))}}}}function w(e,t,n){if(x[e])throw Error(a(100,e));x[e]=t,k[e]=t.eventTypes[n].dependencies}var S=[],E={},x={},k={};function O(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!b.hasOwnProperty(t)||b[t]!==r){if(b[t])throw Error(a(102,t));b[t]=r,n=!0}}n&&_()}var T=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),P=null,C=null,j=null;function z(e){if(e=m(e)){if("function"!=typeof P)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),P(e.stateNode,e.type,t))}}function M(e){C?j?j.push(e):j=[e]:C=e}function I(){if(C){var e=C,t=j;if(j=C=null,z(e),t)for(e=0;e<t.length;e++)z(t[e])}}function N(e,t){return e(t)}function R(e,t,n,r,o){return e(t,n,r,o)}function D(){}var A=N,L=!1,F=!1;function B(){null===C&&null===j||(D(),I())}function U(e,t,n){if(F)return e(t,n);F=!0;try{return A(e,t,n)}finally{F=!1,B()}}var W=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,q=Object.prototype.hasOwnProperty,$={},H={};function V(e,t,n,r,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i}var K={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){K[e]=new V(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];K[t]=new V(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){K[e]=new V(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){K[e]=new V(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){K[e]=new V(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){K[e]=new V(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){K[e]=new V(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){K[e]=new V(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){K[e]=new V(e,5,!1,e.toLowerCase(),null,!1)}));var Q=/[\-:]([a-z])/g;function G(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new V(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(Q,G);K[t]=new V(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(Q,G);K[t]=new V(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){K[e]=new V(e,1,!1,e.toLowerCase(),null,!1)})),K.xlinkHref=new V("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){K[e]=new V(e,1,!1,e.toLowerCase(),null,!0)}));var Y=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var o=K.hasOwnProperty(t)?K[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!q.call(H,e)||!q.call($,e)&&(W.test(e)?H[e]=!0:($[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}Y.hasOwnProperty("ReactCurrentDispatcher")||(Y.ReactCurrentDispatcher={current:null}),Y.hasOwnProperty("ReactCurrentBatchConfig")||(Y.ReactCurrentBatchConfig={suspense:null});var J=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,oe=Z?Symbol.for("react.profiler"):60114,ie=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,pe=Z?Symbol.for("react.lazy"):60116,de=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function me(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function ye(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case oe:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case ie:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return ye(e.type);case de:return ye(e.render);case pe:if(e=1===e._status?e._result:null)return ye(e)}return null}function ve(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,o=e._debugSource,i=ye(e.type);n=null,r&&(n=ye(r.type)),r=i,i="",o?i=" (at "+o.fileName.replace(J,"")+":"+o.lineNumber+")":n&&(i=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+i}t+=n,e=e.return}while(e);return t}function ge(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function be(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function _e(e){e._valueTracker||(e._valueTracker=function(e){var t=be(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function we(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=be(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Se(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ge(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function xe(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function ke(e,t){xe(e,t);var n=ge(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Te(e,t.type,n):t.hasOwnProperty("defaultValue")&&Te(e,t.type,ge(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Te(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Pe(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ce(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ge(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ze(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ge(n)}}function Me(e,t){var n=ge(t.value),r=ge(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function Ne(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Re(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ne(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var De,Ae,Le=(Ae=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((De=De||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=De.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Ae(e,t)}))}:Ae);function Fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function Be(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ue={animationend:Be("Animation","AnimationEnd"),animationiteration:Be("Animation","AnimationIteration"),animationstart:Be("Animation","AnimationStart"),transitionend:Be("Transition","TransitionEnd")},We={},qe={};function $e(e){if(We[e])return We[e];if(!Ue[e])return e;var t,n=Ue[e];for(t in n)if(n.hasOwnProperty(t)&&t in qe)return We[e]=n[t];return e}T&&(qe=document.createElement("div").style,"AnimationEvent"in window||(delete Ue.animationend.animation,delete Ue.animationiteration.animation,delete Ue.animationstart.animation),"TransitionEvent"in window||delete Ue.transitionend.transition);var He=$e("animationend"),Ve=$e("animationiteration"),Ke=$e("animationstart"),Qe=$e("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ye=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Ye.get(e);return void 0===t&&(t=new Map,Ye.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ze(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function et(e){if(Je(e)!==e)throw Error(a(188))}function tt(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return et(o),e;if(i===r)return et(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function nt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function rt(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)v(e,t[r],n[r]);else t&&v(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function at(e){if(null!==e&&(ot=nt(ot,e)),e=ot,ot=null,e){if(rt(e,it),ot)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!T)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var ct=[];function st(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>ct.length&&ct.push(e)}function ft(e,t,n,r){if(ct.length){var o=ct.pop();return o.topLevelType=e,o.eventSystemFlags=r,o.nativeEvent=t,o.targetInst=n,o}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=zn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=ut(e.nativeEvent);r=e.topLevelType;var i=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<S.length;l++){var c=S[l];c&&(c=c.extractEvents(r,t,i,o,a))&&(u=nt(u,c))}at(u)}}function dt(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Vt(e,t)}n.set(e,null)}}var ht,mt,yt,vt=!1,gt=[],bt=null,_t=null,wt=null,St=new Map,Et=new Map,xt=[],kt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Tt(e,t,n,r,o){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:o,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":wt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Et.delete(t.pointerId)}}function Ct(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=Tt(t,n,r,o,i),null!==t&&null!==(t=Mn(t))&&mt(t),e):(e.eventSystemFlags|=r,e)}function jt(e){var t=zn(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ze(n)))return e.blockedOn=t,void i.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Mn(t);return null!==n&&mt(n),e.blockedOn=t,!1}return!0}function Mt(e,t,n){zt(e)&&n.delete(t)}function It(){for(vt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=Mn(e.blockedOn))&&ht(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==bt&&zt(bt)&&(bt=null),null!==_t&&zt(_t)&&(_t=null),null!==wt&&zt(wt)&&(wt=null),St.forEach(Mt),Et.forEach(Mt)}function Nt(e,t){e.blockedOn===t&&(e.blockedOn=null,vt||(vt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,It)))}function Rt(e){function t(t){return Nt(t,e)}if(0<gt.length){Nt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Nt(bt,e),null!==_t&&Nt(_t,e),null!==wt&&Nt(wt,e),St.forEach(t),Et.forEach(t),n=0;n<xt.length;n++)(r=xt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<xt.length&&null===(n=xt[0]).blockedOn;)jt(n),null===n.blockedOn&&xt.shift()}var Dt={},At=new Map,Lt=new Map,Ft=["abort","abort",He,"animationEnd",Ve,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Qe,"transitionEnd","waiting","waiting"];function Bt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1],i="on"+(o[0].toUpperCase()+o.slice(1));i={phasedRegistrationNames:{bubbled:i,captured:i+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),At.set(r,i),Dt[o]=i}}Bt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Bt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Bt(Ft,2);for(var Ut="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Ut.length;Wt++)Lt.set(Ut[Wt],0);var qt=i.unstable_UserBlockingPriority,$t=i.unstable_runWithPriority,Ht=!0;function Vt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Qt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Yt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Qt(e,t,n,r){L||D();var o=Yt,i=L;L=!0;try{R(o,e,t,n,r)}finally{(L=i)||B()}}function Gt(e,t,n,r){$t(qt,Yt.bind(null,e,t,n,r))}function Yt(e,t,n,r){if(Ht)if(0<gt.length&&-1<kt.indexOf(e))e=Tt(null,e,t,n,r),gt.push(e);else{var o=Xt(e,t,n,r);if(null===o)Pt(e,r);else if(-1<kt.indexOf(e))e=Tt(o,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,o){switch(t){case"focus":return bt=Ct(bt,e,t,n,r,o),!0;case"dragenter":return _t=Ct(_t,e,t,n,r,o),!0;case"mouseover":return wt=Ct(wt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return St.set(i,Ct(St.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Et.set(i,Ct(Et.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r)){Pt(e,r),e=ft(e,r,null,t);try{U(pt,e)}finally{st(e)}}}}function Xt(e,t,n,r){if(null!==(n=zn(n=ut(r)))){var o=Je(n);if(null===o)n=null;else{var i=o.tag;if(13===i){if(null!==(n=Ze(o)))return n;n=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;n=null}else o!==n&&(n=null)}}e=ft(e,r,n,t);try{U(pt,e)}finally{st(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Zt=["Webkit","ms","Moz","O"];function en(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function tn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=en(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(Jt).forEach((function(e){Zt.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var nn=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function rn(e,t){if(t){if(nn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var an="http://www.w3.org/1999/xhtml";function un(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)dt(t[r],e,n)}function ln(){}function cn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function sn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=sn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sn(r)}}function pn(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pn(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dn(){for(var e=window,t=cn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=cn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn="$",yn="/$",vn="$?",gn="$!",bn=null,_n=null;function wn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Sn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var En="function"==typeof setTimeout?setTimeout:void 0,xn="function"==typeof clearTimeout?clearTimeout:void 0;function kn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function On(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if(n===mn||n===gn||n===vn){if(0===t)return e;t--}else n===yn&&t++}e=e.previousSibling}return null}var Tn=Math.random().toString(36).slice(2),Pn="__reactInternalInstance$"+Tn,Cn="__reactEventHandlers$"+Tn,jn="__reactContainere$"+Tn;function zn(e){var t=e[Pn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[jn]||n[Pn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=On(e);null!==e;){if(n=e[Pn])return n;e=On(e)}return t}n=(e=n).parentNode}return null}function Mn(e){return!(e=e[Pn]||e[jn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function In(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Nn(e){return e[Cn]||null}function Rn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Dn(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function An(e,t,n){(t=Dn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Ln(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Rn(t);for(t=n.length;0<t--;)An(n[t],"captured",e);for(t=0;t<n.length;t++)An(n[t],"bubbled",e)}}function Fn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=Dn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=nt(n._dispatchListeners,t),n._dispatchInstances=nt(n._dispatchInstances,e))}function Bn(e){e&&e.dispatchConfig.registrationName&&Fn(e._targetInst,null,e)}function Un(e){rt(e,Ln)}var Wn=null,qn=null,$n=null;function Hn(){if($n)return $n;var e,t,n=qn,r=n.length,o="value"in Wn?Wn.value:Wn.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return $n=o.slice(e,1<t?1-t:void 0)}function Vn(){return!0}function Kn(){return!1}function Qn(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Vn:Kn,this.isPropagationStopped=Kn,this}function Gn(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Yn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Xn(e){e.eventPool=[],e.getPooled=Gn,e.release=Yn}o(Qn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vn)},persist:function(){this.isPersistent=Vn},isPersistent:Kn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Kn,this._dispatchInstances=this._dispatchListeners=null}}),Qn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Qn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var i=new t;return o(i,n.prototype),n.prototype=i,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,Xn(n),n},Xn(Qn);var Jn=Qn.extend({data:null}),Zn=Qn.extend({data:null}),er=[9,13,27,32],tr=T&&"CompositionEvent"in window,nr=null;T&&"documentMode"in document&&(nr=document.documentMode);var rr=T&&"TextEvent"in window&&!nr,or=T&&(!tr||nr&&8<nr&&11>=nr),ir=String.fromCharCode(32),ar={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},ur=!1;function lr(e,t){switch(e){case"keyup":return-1!==er.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function cr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var sr=!1,fr={eventTypes:ar,extractEvents:function(e,t,n,r){var o;if(tr)e:{switch(e){case"compositionstart":var i=ar.compositionStart;break e;case"compositionend":i=ar.compositionEnd;break e;case"compositionupdate":i=ar.compositionUpdate;break e}i=void 0}else sr?lr(e,n)&&(i=ar.compositionEnd):"keydown"===e&&229===n.keyCode&&(i=ar.compositionStart);return i?(or&&"ko"!==n.locale&&(sr||i!==ar.compositionStart?i===ar.compositionEnd&&sr&&(o=Hn()):(qn="value"in(Wn=r)?Wn.value:Wn.textContent,sr=!0)),i=Jn.getPooled(i,t,n,r),(o||null!==(o=cr(n)))&&(i.data=o),Un(i),o=i):o=null,(e=rr?function(e,t){switch(e){case"compositionend":return cr(t);case"keypress":return 32!==t.which?null:(ur=!0,ir);case"textInput":return(e=t.data)===ir&&ur?null:e;default:return null}}(e,n):function(e,t){if(sr)return"compositionend"===e||!tr&&lr(e,t)?(e=Hn(),$n=qn=Wn=null,sr=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return or&&"ko"!==t.locale?null:t.data}}(e,n))?((t=Zn.getPooled(ar.beforeInput,t,n,r)).data=e,Un(t)):t=null,null===o?t:null===t?o:[o,t]}},pr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function dr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!pr[e.type]:"textarea"===t}var hr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function mr(e,t,n){return(e=Qn.getPooled(hr.change,e,t,n)).type="change",M(n),Un(e),e}var yr=null,vr=null;function gr(e){at(e)}function br(e){if(we(In(e)))return e}function _r(e,t){if("change"===e)return t}var wr=!1;function Sr(){yr&&(yr.detachEvent("onpropertychange",Er),vr=yr=null)}function Er(e){if("value"===e.propertyName&&br(vr))if(e=mr(vr,e,ut(e)),L)at(e);else{L=!0;try{N(gr,e)}finally{L=!1,B()}}}function xr(e,t,n){"focus"===e?(Sr(),vr=n,(yr=t).attachEvent("onpropertychange",Er)):"blur"===e&&Sr()}function kr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return br(vr)}function Or(e,t){if("click"===e)return br(t)}function Tr(e,t){if("input"===e||"change"===e)return br(t)}T&&(wr=lt("input")&&(!document.documentMode||9<document.documentMode));var Pr={eventTypes:hr,_isInputEventSupported:wr,extractEvents:function(e,t,n,r){var o=t?In(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=_r;else if(dr(o))if(wr)a=Tr;else{a=kr;var u=xr}else(i=o.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Or);if(a&&(a=a(e,t)))return mr(a,n,r);u&&u(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Te(o,"number",o.value)}},Cr=Qn.extend({view:null,detail:null}),jr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function zr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=jr[e])&&!!t[e]}function Mr(){return zr}var Ir=0,Nr=0,Rr=!1,Dr=!1,Ar=Cr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Mr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Ir;return Ir=e.screenX,Rr?"mousemove"===e.type?e.screenX-t:0:(Rr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Nr;return Nr=e.screenY,Dr?"mousemove"===e.type?e.screenY-t:0:(Dr=!0,0)}}),Lr=Ar.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Fr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Br={eventTypes:Fr,extractEvents:function(e,t,n,r,o){var i="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(i&&!(32&o)&&(n.relatedTarget||n.fromElement)||!a&&!i)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?zn(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Ar,l=Fr.mouseLeave,c=Fr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Lr,l=Fr.pointerLeave,c=Fr.pointerEnter,s="pointer");if(e=null==a?i:In(a),i=null==t?i:In(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=i,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=i,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=Rn(e))a++;for(e=0,t=c;t;t=Rn(t))e++;for(;0<a-e;)u=Rn(u),a--;for(;0<e-a;)c=Rn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=Rn(u),c=Rn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=Rn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Rn(s);for(s=0;s<u.length;s++)Fn(u[s],"bubbled",l);for(s=r.length;0<s--;)Fn(r[s],"captured",n);return 64&o?[l,n]:[l]}},Ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Wr=Object.prototype.hasOwnProperty;function qr(e,t){if(Ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Wr.call(t,n[r])||!Ur(e[n[r]],t[n[r]]))return!1;return!0}var $r=T&&"documentMode"in document&&11>=document.documentMode,Hr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vr=null,Kr=null,Qr=null,Gr=!1;function Yr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Gr||null==Vr||Vr!==cn(n)?null:(n="selectionStart"in(n=Vr)&&hn(n)?{start:n.selectionStart,end:n.selectionEnd}:{anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Qr&&qr(Qr,n)?null:(Qr=n,(e=Qn.getPooled(Hr.select,Kr,e,t)).type="select",e.target=Vr,Un(e),e))}var Xr={eventTypes:Hr,extractEvents:function(e,t,n,r,o,i){if(!(i=!(o=i||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{o=Xe(o),i=k.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?In(t):window,e){case"focus":(dr(o)||"true"===o.contentEditable)&&(Vr=o,Kr=t,Qr=null);break;case"blur":Qr=Kr=Vr=null;break;case"mousedown":Gr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Gr=!1,Yr(n,r);case"selectionchange":if($r)break;case"keydown":case"keyup":return Yr(n,r)}return null}},Jr=Qn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Zr=Qn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),eo=Cr.extend({relatedTarget:null});function to(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var no={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ro={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},oo=Cr.extend({key:function(e){if(e.key){var t=no[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=to(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ro[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Mr,charCode:function(e){return"keypress"===e.type?to(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?to(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),io=Ar.extend({dataTransfer:null}),ao=Cr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Mr}),uo=Qn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),lo=Ar.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),co={eventTypes:Dt,extractEvents:function(e,t,n,r){var o=At.get(e);if(!o)return null;switch(e){case"keypress":if(0===to(n))return null;case"keydown":case"keyup":e=oo;break;case"blur":case"focus":e=eo;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Ar;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=io;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ao;break;case He:case Ve:case Ke:e=Jr;break;case Qe:e=uo;break;case"scroll":e=Cr;break;case"wheel":e=lo;break;case"copy":case"cut":case"paste":e=Zr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Lr;break;default:e=Qn}return Un(t=e.getPooled(o,t,n,r)),t}};if(g)throw Error(a(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),h=Nn,m=Mn,y=In,O({SimpleEventPlugin:co,EnterLeaveEventPlugin:Br,ChangeEventPlugin:Pr,SelectEventPlugin:Xr,BeforeInputEventPlugin:fr});var so=[],fo=-1;function po(e){0>fo||(e.current=so[fo],so[fo]=null,fo--)}function ho(e,t){fo++,so[fo]=e.current,e.current=t}var mo={},yo={current:mo},vo={current:!1},go=mo;function bo(e,t){var n=e.type.contextTypes;if(!n)return mo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function _o(e){return null!=e.childContextTypes}function wo(){po(vo),po(yo)}function So(e,t,n){if(yo.current!==mo)throw Error(a(168));ho(yo,t),ho(vo,n)}function Eo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,ye(t)||"Unknown",i));return o({},n,{},r)}function xo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||mo,go=yo.current,ho(yo,e),ho(vo,vo.current),!0}function ko(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Eo(e,t,go),r.__reactInternalMemoizedMergedChildContext=e,po(vo),po(yo),ho(yo,e)):po(vo),ho(vo,n)}var Oo=i.unstable_runWithPriority,To=i.unstable_scheduleCallback,Po=i.unstable_cancelCallback,Co=i.unstable_requestPaint,jo=i.unstable_now,zo=i.unstable_getCurrentPriorityLevel,Mo=i.unstable_ImmediatePriority,Io=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Ro=i.unstable_LowPriority,Do=i.unstable_IdlePriority,Ao={},Lo=i.unstable_shouldYield,Fo=void 0!==Co?Co:function(){},Bo=null,Uo=null,Wo=!1,qo=jo(),$o=1e4>qo?jo:function(){return jo()-qo};function Ho(){switch(zo()){case Mo:return 99;case Io:return 98;case No:return 97;case Ro:return 96;case Do:return 95;default:throw Error(a(332))}}function Vo(e){switch(e){case 99:return Mo;case 98:return Io;case 97:return No;case 96:return Ro;case 95:return Do;default:throw Error(a(332))}}function Ko(e,t){return e=Vo(e),Oo(e,t)}function Qo(e,t,n){return e=Vo(e),To(e,t,n)}function Go(e){return null===Bo?(Bo=[e],Uo=To(Mo,Xo)):Bo.push(e),Ao}function Yo(){if(null!==Uo){var e=Uo;Uo=null,Po(e)}Xo()}function Xo(){if(!Wo&&null!==Bo){Wo=!0;var e=0;try{var t=Bo;Ko(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Bo=null}catch(t){throw null!==Bo&&(Bo=Bo.slice(e+1)),To(Mo,Yo),t}finally{Wo=!1}}}function Jo(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Zo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var ei={current:null},ti=null,ni=null,ri=null;function oi(){ri=ni=ti=null}function ii(e){var t=ei.current;po(ei),e.type._context._currentValue=t}function ai(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ui(e,t){ti=e,ri=ni=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Na=!0),e.firstContext=null)}function li(e,t){if(ri!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ri=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ni){if(null===ti)throw Error(a(308));ni=t,ti.dependencies={expirationTime:0,firstContext:t,responders:null}}else ni=ni.next=t;return e._currentValue}var ci=!1;function si(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function fi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function pi(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function di(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function hi(e,t){var n=e.alternate;null!==n&&fi(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function mi(e,t,n,r){var i=e.updateQueue;ci=!1;var a=i.baseQueue,u=i.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,i.shared.pending=null,null!==(l=e.alternate)&&null!==(l=l.updateQueue)&&(l.baseQueue=u)}if(null!==a){l=a.next;var c=i.baseState,s=0,f=null,p=null,d=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===d?(p=d=m,f=c):d=d.next=m,u>s&&(s=u)}else{null!==d&&(d=d.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),_l(u,h.suspenseConfig);e:{var y=e,v=h;switch(u=t,m=n,v.tag){case 1:if("function"==typeof(y=v.payload)){c=y.call(m,c,u);break e}c=y;break e;case 3:y.effectTag=-4097&y.effectTag|64;case 0:if(null==(u="function"==typeof(y=v.payload)?y.call(m,c,u):y))break e;c=o({},c,u);break e;case 2:ci=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=i.effects)?i.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=i.shared.pending))break;h=a.next=u.next,u.next=l,i.baseQueue=a=u,i.shared.pending=null}}null===d?f=c:d.next=p,i.baseState=f,i.baseQueue=d,wl(s),e.expirationTime=s,e.memoizedState=c}}function yi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=o,o=n,"function"!=typeof r)throw Error(a(191,r));r.call(o)}}}var vi=Y.ReactCurrentBatchConfig,gi=(new r.Component).refs;function bi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var _i={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=ul(),o=vi.suspense;(o=pi(r=ll(r,e,o),o)).payload=t,null!=n&&(o.callback=n),di(e,o),cl(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=ul(),o=vi.suspense;(o=pi(r=ll(r,e,o),o)).tag=1,o.payload=t,null!=n&&(o.callback=n),di(e,o),cl(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=ul(),r=vi.suspense;(r=pi(n=ll(n,e,r),r)).tag=2,null!=t&&(r.callback=t),di(e,r),cl(e,n)}};function wi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&qr(n,r)&&qr(o,i))}function Si(e,t,n){var r=!1,o=mo,i=t.contextType;return"object"==typeof i&&null!==i?i=li(i):(o=_o(t)?go:yo.current,i=(r=null!=(r=t.contextTypes))?bo(e,o):mo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=_i,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Ei(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&_i.enqueueReplaceState(t,t.state,null)}function xi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=gi,si(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=li(i):(i=_o(t)?go:yo.current,o.context=bo(e,i)),mi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(bi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&_i.enqueueReplaceState(o,o.state,null),mi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var ki=Array.isArray;function Oi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===gi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ti(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Pi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ul(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=$l(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Oi(e,t,n),r.return=e,r):((r=Wl(n.type,n.key,n.props,null,e.mode,r)).ref=Oi(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Hl(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=ql(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=$l(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Wl(t.type,t.key,t.props,null,e.mode,n)).ref=Oi(e,null,t),n.return=e,n;case te:return(t=Hl(t,e.mode,n)).return=e,t}if(ki(t)||me(t))return(t=ql(t,e.mode,n,null)).return=e,t;Ti(e,t)}return null}function d(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===o?n.type===ne?f(e,t,n.props.children,r,o):c(e,t,n,r):null;case te:return n.key===o?s(e,t,n,r):null}if(ki(n)||me(n))return null!==o?null:f(e,t,n,r,null);Ti(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,o,r.key):c(t,e,r,o);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(ki(r)||me(r))return f(t,e=e.get(n)||null,r,o,null);Ti(t,r)}return null}function m(o,a,u,l){for(var c=null,s=null,f=a,m=a=0,y=null;null!==f&&m<u.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=d(o,f,u[m],l);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===s?c=v:s.sibling=v,s=v,f=y}if(m===u.length)return n(o,f),c;if(null===f){for(;m<u.length;m++)null!==(f=p(o,u[m],l))&&(a=i(f,a,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(o,f);m<u.length;m++)null!==(y=h(f,o,m,u[m],l))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===s?c=y:s.sibling=y,s=y);return e&&f.forEach((function(e){return t(o,e)})),c}function y(o,u,l,c){var s=me(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,m=u,y=u=0,v=null,g=l.next();null!==m&&!g.done;y++,g=l.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=d(o,m,g.value,c);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),u=i(b,u,y),null===f?s=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),s;if(null===m){for(;!g.done;y++,g=l.next())null!==(g=p(o,g.value,c))&&(u=i(g,u,y),null===f?s=g:f.sibling=g,f=g);return s}for(m=r(o,m);!g.done;y++,g=l.next())null!==(g=h(m,o,y,g.value,c))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),u=i(g,u,y),null===f?s=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),s}return function(e,r,i,l){var c="object"==typeof i&&null!==i&&i.type===ne&&null===i.key;c&&(i=i.props.children);var s="object"==typeof i&&null!==i;if(s)switch(i.$$typeof){case ee:e:{for(s=i.key,c=r;null!==c;){if(c.key===s){if(7===c.tag){if(i.type===ne){n(e,c.sibling),(r=o(c,i.props.children)).return=e,e=r;break e}}else if(c.elementType===i.type){n(e,c.sibling),(r=o(c,i.props)).ref=Oi(e,c,i),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}i.type===ne?((r=ql(i.props.children,e.mode,l,i.key)).return=e,e=r):((l=Wl(i.type,i.key,i.props,null,e.mode,l)).ref=Oi(e,r,i),l.return=e,e=l)}return u(e);case te:e:{for(c=i.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Hl(i,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=$l(i,e.mode,l)).return=e,e=r),u(e);if(ki(i))return m(e,r,i,l);if(me(i))return y(e,r,i,l);if(s&&Ti(e,i),void 0===i&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ci=Pi(!0),ji=Pi(!1),zi={},Mi={current:zi},Ii={current:zi},Ni={current:zi};function Ri(e){if(e===zi)throw Error(a(174));return e}function Di(e,t){switch(ho(Ni,t),ho(Ii,e),ho(Mi,zi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Re(null,"");break;default:t=Re(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}po(Mi),ho(Mi,t)}function Ai(){po(Mi),po(Ii),po(Ni)}function Li(e){Ri(Ni.current);var t=Ri(Mi.current),n=Re(t,e.type);t!==n&&(ho(Ii,e),ho(Mi,n))}function Fi(e){Ii.current===e&&(po(Mi),po(Ii))}var Bi={current:0};function Ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||n.data===vn||n.data===gn))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(64&t.effectTag)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Wi(e,t){return{responder:e,props:t}}var qi=Y.ReactCurrentDispatcher,$i=Y.ReactCurrentBatchConfig,Hi=0,Vi=null,Ki=null,Qi=null,Gi=!1;function Yi(){throw Error(a(321))}function Xi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ur(e[n],t[n]))return!1;return!0}function Ji(e,t,n,r,o,i){if(Hi=i,Vi=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,qi.current=null===e||null===e.memoizedState?wa:Sa,e=n(r,o),t.expirationTime===Hi){i=0;do{if(t.expirationTime=0,!(25>i))throw Error(a(301));i+=1,Qi=Ki=null,t.updateQueue=null,qi.current=Ea,e=n(r,o)}while(t.expirationTime===Hi)}if(qi.current=_a,t=null!==Ki&&null!==Ki.next,Hi=0,Qi=Ki=Vi=null,Gi=!1,t)throw Error(a(300));return e}function Zi(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Qi?Vi.memoizedState=Qi=e:Qi=Qi.next=e,Qi}function ea(){if(null===Ki){var e=Vi.alternate;e=null!==e?e.memoizedState:null}else e=Ki.next;var t=null===Qi?Vi.memoizedState:Qi.next;if(null!==t)Qi=t,Ki=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ki=e).memoizedState,baseState:Ki.baseState,baseQueue:Ki.baseQueue,queue:Ki.queue,next:null},null===Qi?Vi.memoizedState=Qi=e:Qi=Qi.next=e}return Qi}function ta(e,t){return"function"==typeof t?t(e):t}function na(e){var t=ea(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ki,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var l=u=i=null,c=o;do{var s=c.expirationTime;if(s<Hi){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,i=r):l=l.next=f,s>Vi.expirationTime&&(Vi.expirationTime=s,wl(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),_l(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==o);null===l?i=r:l.next=u,Ur(r,t.memoizedState)||(Na=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ra(e){var t=ea(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);Ur(i,t.memoizedState)||(Na=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function oa(e){var t=Zi();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ta,lastRenderedState:e}).dispatch=ba.bind(null,Vi,e),[t.memoizedState,e]}function ia(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Vi.updateQueue)?(t={lastEffect:null},Vi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function aa(){return ea().memoizedState}function ua(e,t,n,r){var o=Zi();Vi.effectTag|=e,o.memoizedState=ia(1|t,n,void 0,void 0===r?null:r)}function la(e,t,n,r){var o=ea();r=void 0===r?null:r;var i=void 0;if(null!==Ki){var a=Ki.memoizedState;if(i=a.destroy,null!==r&&Xi(r,a.deps))return void ia(t,n,i,r)}Vi.effectTag|=e,o.memoizedState=ia(1|t,n,i,r)}function ca(e,t){return ua(516,4,e,t)}function sa(e,t){return la(516,4,e,t)}function fa(e,t){return la(4,2,e,t)}function pa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function da(e,t,n){return n=null!=n?n.concat([e]):null,la(4,2,pa.bind(null,t,e),n)}function ha(){}function ma(e,t){return Zi().memoizedState=[e,void 0===t?null:t],e}function ya(e,t){var n=ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function va(e,t){var n=ea();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Xi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ga(e,t,n){var r=Ho();Ko(98>r?98:r,(function(){e(!0)})),Ko(97<r?97:r,(function(){var r=$i.suspense;$i.suspense=void 0===t?null:t;try{e(!1),n()}finally{$i.suspense=r}}))}function ba(e,t,n){var r=ul(),o=vi.suspense;o={expirationTime:r=ll(r,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Vi||null!==i&&i===Vi)Gi=!0,o.expirationTime=Hi,Vi.expirationTime=Hi;else{if(0===e.expirationTime&&(null===i||0===i.expirationTime)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.eagerReducer=i,o.eagerState=u,Ur(u,a))return}catch(e){}cl(e,r)}}var _a={readContext:li,useCallback:Yi,useContext:Yi,useEffect:Yi,useImperativeHandle:Yi,useLayoutEffect:Yi,useMemo:Yi,useReducer:Yi,useRef:Yi,useState:Yi,useDebugValue:Yi,useResponder:Yi,useDeferredValue:Yi,useTransition:Yi},wa={readContext:li,useCallback:ma,useContext:li,useEffect:ca,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ua(4,2,pa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ua(4,2,e,t)},useMemo:function(e,t){var n=Zi();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Zi();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ba.bind(null,Vi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Zi().memoizedState=e},useState:oa,useDebugValue:ha,useResponder:Wi,useDeferredValue:function(e,t){var n=oa(e),r=n[0],o=n[1];return ca((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=oa(!1),n=t[0];return t=t[1],[ma(ga.bind(null,t,e),[t,e]),n]}},Sa={readContext:li,useCallback:ya,useContext:li,useEffect:sa,useImperativeHandle:da,useLayoutEffect:fa,useMemo:va,useReducer:na,useRef:aa,useState:function(){return na(ta)},useDebugValue:ha,useResponder:Wi,useDeferredValue:function(e,t){var n=na(ta),r=n[0],o=n[1];return sa((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=na(ta),n=t[0];return t=t[1],[ya(ga.bind(null,t,e),[t,e]),n]}},Ea={readContext:li,useCallback:ya,useContext:li,useEffect:sa,useImperativeHandle:da,useLayoutEffect:fa,useMemo:va,useReducer:ra,useRef:aa,useState:function(){return ra(ta)},useDebugValue:ha,useResponder:Wi,useDeferredValue:function(e,t){var n=ra(ta),r=n[0],o=n[1];return sa((function(){var n=$i.suspense;$i.suspense=void 0===t?null:t;try{o(e)}finally{$i.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ra(ta),n=t[0];return t=t[1],[ya(ga.bind(null,t,e),[t,e]),n]}},xa=null,ka=null,Oa=!1;function Ta(e,t){var n=Fl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Pa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ca(e){if(Oa){var t=ka;if(t){var n=t;if(!Pa(e,t)){if(!(t=kn(n.nextSibling))||!Pa(e,t))return e.effectTag=-1025&e.effectTag|2,Oa=!1,void(xa=e);Ta(xa,n)}xa=e,ka=kn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Oa=!1,xa=e}}function ja(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;xa=e}function za(e){if(e!==xa)return!1;if(!Oa)return ja(e),Oa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Sn(t,e.memoizedProps))for(t=ka;t;)Ta(e,t),t=kn(t.nextSibling);if(ja(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if(n===yn){if(0===t){ka=kn(e.nextSibling);break e}t--}else n!==mn&&n!==gn&&n!==vn||t++}e=e.nextSibling}ka=null}}else ka=xa?kn(e.stateNode.nextSibling):null;return!0}function Ma(){ka=xa=null,Oa=!1}var Ia=Y.ReactCurrentOwner,Na=!1;function Ra(e,t,n,r){t.child=null===e?ji(t,null,n,r):Ci(t,e.child,n,r)}function Da(e,t,n,r,o){n=n.render;var i=t.ref;return ui(t,o),r=Ji(e,t,n,r,i,o),null===e||Na?(t.effectTag|=1,Ra(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Za(e,t,o))}function Aa(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wl(n.type,null,r,null,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,La(e,t,a,r,o,i))}return a=e.child,o<i&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:qr)(o,r)&&e.ref===t.ref)?Za(e,t,i):(t.effectTag|=1,(e=Ul(a,r)).ref=t.ref,e.return=t,t.child=e)}function La(e,t,n,r,o,i){return null!==e&&qr(e.memoizedProps,r)&&e.ref===t.ref&&(Na=!1,o<i)?(t.expirationTime=e.expirationTime,Za(e,t,i)):Ba(e,t,n,r,i)}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ba(e,t,n,r,o){var i=_o(n)?go:yo.current;return i=bo(t,i),ui(t,o),n=Ji(e,t,n,r,i,o),null===e||Na?(t.effectTag|=1,Ra(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=o&&(e.expirationTime=0),Za(e,t,o))}function Ua(e,t,n,r,o){if(_o(n)){var i=!0;xo(t)}else i=!1;if(ui(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),Si(t,n,r),xi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?li(c):bo(t,c=_o(n)?go:yo.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Ei(t,a,r,c),ci=!1;var p=t.memoizedState;a.state=p,mi(t,r,a,o),l=t.memoizedState,u!==r||p!==l||vo.current||ci?("function"==typeof s&&(bi(t,n,s,r),l=t.memoizedState),(u=ci||wi(t,n,u,r,p,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,fi(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Zo(t.type,u),l=a.context,c="object"==typeof(c=n.contextType)&&null!==c?li(c):bo(t,c=_o(n)?go:yo.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&Ei(t,a,r,c),ci=!1,l=t.memoizedState,a.state=l,mi(t,r,a,o),p=t.memoizedState,u!==r||l!==p||vo.current||ci?("function"==typeof s&&(bi(t,n,s,r),p=t.memoizedState),(s=ci||wi(t,n,u,r,l,p,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return Wa(e,t,n,r,i,o)}function Wa(e,t,n,r,o,i){Fa(e,t);var a=!!(64&t.effectTag);if(!r&&!a)return o&&ko(t,n,!1),Za(e,t,i);r=t.stateNode,Ia.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ci(t,e.child,null,i),t.child=Ci(t,null,u,i)):Ra(e,t,u,i),t.memoizedState=r.state,o&&ko(t,n,!0),t.child}function qa(e){var t=e.stateNode;t.pendingContext?So(0,t.pendingContext,t.pendingContext!==t.context):t.context&&So(0,t.context,!1),Di(e,t.containerInfo)}var $a,Ha,Va,Ka,Qa={dehydrated:null,retryTime:0};function Ga(e,t,n){var r,o=t.mode,i=t.pendingProps,a=Bi.current,u=!1;if((r=!!(64&t.effectTag))||(r=!!(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(a|=1),ho(Bi,1&a),null===e){if(void 0!==i.fallback&&Ca(t),u){if(u=i.fallback,(i=ql(null,o,0,null)).return=t,!(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ql(u,o,n,null)).return=t,i.sibling=n,t.memoizedState=Qa,t.child=i,n}return o=i.children,t.memoizedState=null,t.child=ji(t,null,o,n)}if(null!==e.memoizedState){if(o=(e=e.child).sibling,u){if(i=i.fallback,(n=Ul(e,e.pendingProps)).return=t,!(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(o=Ul(o,i)).return=t,n.sibling=o,n.childExpirationTime=0,t.memoizedState=Qa,t.child=n,o}return n=Ci(t,e.child,i.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=i.fallback,(i=ql(null,o,0,null)).return=t,i.child=e,null!==e&&(e.return=i),!(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,i.child=e;null!==e;)e.return=i,e=e.sibling;return(n=ql(u,o,n,null)).return=t,i.sibling=n,n.effectTag|=2,i.childExpirationTime=0,t.memoizedState=Qa,t.child=i,n}return t.memoizedState=null,t.child=Ci(t,e,i.children,n)}function Ya(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),ai(e.return,t)}function Xa(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=o,a.lastEffect=i)}function Ja(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ra(e,t,r.children,n),2&(r=Bi.current))r=1&r|2,t.effectTag|=64;else{if(null!==e&&64&e.effectTag)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ya(e,n);else if(19===e.tag)Ya(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ho(Bi,r),2&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Xa(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Xa(t,!0,n,null,i,t.lastEffect);break;case"together":Xa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Za(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&wl(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ul(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ul(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function eu(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tu(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return _o(t.type)&&wo(),null;case 3:return Ai(),po(vo),po(yo),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!za(t)||(t.effectTag|=4),Ha(t),null;case 5:Fi(t),n=Ri(Ni.current);var i=t.type;if(null!==e&&null!=t.stateNode)Va(e,t,i,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ri(Mi.current),za(t)){r=t.stateNode,i=t.type;var u=t.memoizedProps;switch(r[Pn]=t,r[Cn]=u,i){case"iframe":case"object":case"embed":Vt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Vt(Ge[e],r);break;case"source":Vt("error",r);break;case"img":case"image":case"link":Vt("error",r),Vt("load",r);break;case"form":Vt("reset",r),Vt("submit",r);break;case"details":Vt("toggle",r);break;case"input":Ee(r,u),Vt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Vt("invalid",r),un(n,"onChange");break;case"textarea":ze(r,u),Vt("invalid",r),un(n,"onChange")}for(var l in rn(i,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):x.hasOwnProperty(l)&&null!=c&&un(n,l)}switch(i){case"input":_e(r),Oe(r,u,!0);break;case"textarea":_e(r),Ie(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===an&&(e=Ne(i)),e===an?"script"===i?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(i,{is:r.is}):(e=l.createElement(i),"select"===i&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,i),e[Pn]=t,e[Cn]=r,$a(e,t,!1,!1),t.stateNode=e,l=on(i,r),i){case"iframe":case"object":case"embed":Vt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)Vt(Ge[c],e);c=r;break;case"source":Vt("error",e),c=r;break;case"img":case"image":case"link":Vt("error",e),Vt("load",e),c=r;break;case"form":Vt("reset",e),Vt("submit",e),c=r;break;case"details":Vt("toggle",e),c=r;break;case"input":Ee(e,r),c=Se(e,r),Vt("invalid",e),un(n,"onChange");break;case"option":c=Pe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=o({},r,{value:void 0}),Vt("invalid",e),un(n,"onChange");break;case"textarea":ze(e,r),c=je(e,r),Vt("invalid",e),un(n,"onChange");break;default:c=r}rn(i,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?tn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===u?"string"==typeof f?("textarea"!==i||""!==f)&&Fe(e,f):"number"==typeof f&&Fe(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?null!=f&&un(n,u):null!=f&&X(e,u,f,l))}switch(i){case"input":_e(e),Oe(e,r,!1);break;case"textarea":_e(e),Ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ge(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Ce(e,!!r.multiple,n,!1):null!=r.defaultValue&&Ce(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=ln)}wn(i,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Ka(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ri(Ni.current),Ri(Mi.current),za(t)?(n=t.stateNode,r=t.memoizedProps,n[Pn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Pn]=t,t.stateNode=n)}return null;case 13:return po(Bi),r=t.memoizedState,64&t.effectTag?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&za(t):(r=null!==(i=e.memoizedState),n||null===i||null!==(i=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=i,i.nextEffect=u):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),n&&!r&&2&t.mode&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||1&Bi.current?Uu===zu&&(Uu=Nu):(Uu!==zu&&Uu!==Nu||(Uu=Ru),0!==Vu&&null!==Lu&&(Ql(Lu,Bu),Gl(Lu,Vu)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ai(),Ha(t),null;case 10:return ii(t),null;case 19:if(po(Bi),null===(r=t.memoizedState))return null;if(i=!!(64&t.effectTag),null===(u=r.rendering)){if(i)eu(r,!1);else if(Uu!==zu||null!==e&&64&e.effectTag)for(u=t.child;null!==u;){if(null!==(e=Ui(u))){for(t.effectTag|=64,eu(r,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(i=r).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=u,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,u=e.dependencies,i.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return ho(Bi,1&Bi.current|2),t.child}u=u.sibling}}else{if(!i)if(null!==(e=Ui(u))){if(t.effectTag|=64,i=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),eu(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*$o()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,i=!0,eu(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=$o()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=$o(),n.sibling=null,t=Bi.current,ho(Bi,i?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function nu(e){switch(e.tag){case 1:_o(e.type)&&wo();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ai(),po(vo),po(yo),64&(t=e.effectTag))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Fi(e),null;case 13:return po(Bi),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return po(Bi),null;case 4:return Ai(),null;case 10:return ii(e),null;default:return null}}function ru(e,t){return{value:e,source:t,stack:ve(t)}}$a=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(){},Va=function(e,t,n,r,i){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Ri(Mi.current),e=null,n){case"input":a=Se(c,a),r=Se(c,r),e=[];break;case"option":a=Pe(c,a),r=Pe(c,r),e=[];break;case"select":a=o({},a,{value:void 0}),r=o({},r,{value:void 0}),e=[];break;case"textarea":a=je(c,a),r=je(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=ln)}for(u in rn(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(x.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(x.hasOwnProperty(u)?(null!=s&&un(i,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},Ka=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var ou="function"==typeof WeakSet?WeakSet:Set;function iu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ve(n)),null!==n&&ye(n.type),t=t.value,null!==e&&1===e.tag&&ye(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function au(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Il(e,t)}else t.current=null}function uu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 3:case 5:case 6:case 4:case 17:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Zo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return}throw Error(a(163))}function lu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function cu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function su(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void cu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Zo(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&yi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}yi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&wn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Rt(n)))))}throw Error(a(163))}function fu(e,t,n){switch("function"==typeof Al&&Al(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Ko(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var o=t;try{n()}catch(e){Il(o,e)}}e=e.next}while(e!==r)}))}break;case 1:au(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Il(e,t)}}(t,n);break;case 5:au(t);break;case 4:vu(e,t,n)}}function pu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&pu(t)}function du(e){return 5===e.tag||3===e.tag||4===e.tag}function hu(e){e:{for(var t=e.return;null!==t;){if(du(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Fe(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||du(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?mu(e,n,t):yu(e,n,t)}function mu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=ln));else if(4!==r&&null!==(e=e.child))for(mu(e,t,n),e=e.sibling;null!==e;)mu(e,t,n),e=e.sibling}function yu(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(yu(e,t,n),e=e.sibling;null!==e;)yu(e,t,n),e=e.sibling}function vu(e,t,n){for(var r,o,i=t,u=!1;;){if(!u){u=i.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:o=!1;break e;case 3:case 4:r=r.containerInfo,o=!0;break e}u=u.return}u=!0}if(5===i.tag||6===i.tag){e:for(var l=e,c=i,s=n,f=c;;)if(fu(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}o?(l=r,c=i.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){r=i.stateNode.containerInfo,o=!0,i.child.return=i,i=i.child;continue}}else if(fu(e,i,n),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(u=!1)}i.sibling.return=i.return,i=i.sibling}}function gu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void lu(3,t);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Cn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&xe(n,r),on(e,o),t=on(e,r),o=0;o<i.length;o+=2){var u=i[o],l=i[o+1];"style"===u?tn(n,l):"dangerouslySetInnerHTML"===u?Le(n,l):"children"===u?Fe(n,l):X(n,u,l,t)}switch(e){case"input":ke(n,r);break;case"textarea":Me(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Ce(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Ce(n,!!r.multiple,r.defaultValue,!0):Ce(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Rt(t.containerInfo)));case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Qu=$o()),null!==n)e:for(e=n;;){if(5===e.tag)i=e.stateNode,r?"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none":(i=e.stateNode,o=null!=(o=e.memoizedProps.style)&&o.hasOwnProperty("display")?o.display:null,i.style.display=en("display",o));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(i=e.child.sibling).return=e,e=i;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void bu(t);case 19:return void bu(t)}throw Error(a(163))}function bu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ou),t.forEach((function(t){var r=Rl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var _u="function"==typeof WeakMap?WeakMap:Map;function wu(e,t,n){(n=pi(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Xu||(Xu=!0,Ju=r),iu(e,t)},n}function Su(e,t,n){(n=pi(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return iu(e,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Zu?Zu=new Set([this]):Zu.add(this),iu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Eu,xu=Math.ceil,ku=Y.ReactCurrentDispatcher,Ou=Y.ReactCurrentOwner,Tu=0,Pu=8,Cu=16,ju=32,zu=0,Mu=1,Iu=2,Nu=3,Ru=4,Du=5,Au=Tu,Lu=null,Fu=null,Bu=0,Uu=zu,Wu=null,qu=1073741823,$u=1073741823,Hu=null,Vu=0,Ku=!1,Qu=0,Gu=500,Yu=null,Xu=!1,Ju=null,Zu=null,el=!1,tl=null,nl=90,rl=null,ol=0,il=null,al=0;function ul(){return(Au&(Cu|ju))!==Tu?1073741821-($o()/10|0):0!==al?al:al=1073741821-($o()/10|0)}function ll(e,t,n){if(!(2&(t=t.mode)))return 1073741823;var r=Ho();if(!(4&t))return 99===r?1073741823:1073741822;if((Au&Cu)!==Tu)return Bu;if(null!==n)e=Jo(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Jo(e,150,100);break;case 97:case 96:e=Jo(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Lu&&e===Bu&&--e,e}function cl(e,t){if(50<ol)throw ol=0,il=null,Error(a(185));if(null!==(e=sl(e,t))){var n=Ho();1073741823===t?(Au&Pu)!==Tu&&(Au&(Cu|ju))===Tu?hl(e):(pl(e),Au===Tu&&Yo()):pl(e),(4&Au)===Tu||98!==n&&99!==n||(null===rl?rl=new Map([[e,t]]):(void 0===(n=rl.get(e))||n>t)&&rl.set(e,t))}}function sl(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,o=null;if(null===r&&3===e.tag)o=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){o=r.stateNode;break}r=r.return}return null!==o&&(Lu===o&&(wl(t),Uu===Ru&&Ql(o,Bu)),Gl(o,t)),o}function fl(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Kl(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function pl(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Go(hl.bind(null,e));else{var t=fl(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=ul();if(r=1073741823===t?99:1===t||2===t?95:0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var o=e.callbackPriority;if(e.callbackExpirationTime===t&&o>=r)return;n!==Ao&&Po(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Go(hl.bind(null,e)):Qo(r,dl.bind(null,e),{timeout:10*(1073741821-t)-$o()}),e.callbackNode=t}}}function dl(e,t){if(al=0,t)return Yl(e,t=ul()),pl(e),null;var n=fl(e);if(0!==n){if(t=e.callbackNode,(Au&(Cu|ju))!==Tu)throw Error(a(327));if(jl(),e===Lu&&n===Bu||vl(e,n),null!==Fu){var r=Au;Au|=Cu;for(var o=bl();;)try{El();break}catch(t){gl(e,t)}if(oi(),Au=r,ku.current=o,Uu===Mu)throw t=Wu,vl(e,n),Ql(e,n),pl(e),t;if(null===Fu)switch(o=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Uu,Lu=null,r){case zu:case Mu:throw Error(a(345));case Iu:Yl(e,2<n?2:n);break;case Nu:if(Ql(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ol(o)),1073741823===qu&&10<(o=Qu+Gu-$o())){if(Ku){var i=e.lastPingedTime;if(0===i||i>=n){e.lastPingedTime=n,vl(e,n);break}}if(0!==(i=fl(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=En(Tl.bind(null,e),o);break}Tl(e);break;case Ru:if(Ql(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=Ol(o)),Ku&&(0===(o=e.lastPingedTime)||o>=n)){e.lastPingedTime=n,vl(e,n);break}if(0!==(o=fl(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==$u?r=10*(1073741821-$u)-$o():1073741823===qu?r=0:(r=10*(1073741821-qu)-5e3,0>(r=(o=$o())-r)&&(r=0),(n=10*(1073741821-n)-o)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=En(Tl.bind(null,e),r);break}Tl(e);break;case Du:if(1073741823!==qu&&null!==Hu){i=qu;var u=Hu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(o=0|u.busyDelayMs,r=(i=$o()-(10*(1073741821-i)-(0|u.timeoutMs||5e3)))<=o?0:o+r-i),10<r){Ql(e,n),e.timeoutHandle=En(Tl.bind(null,e),r);break}}Tl(e);break;default:throw Error(a(329))}if(pl(e),e.callbackNode===t)return dl.bind(null,e)}}return null}function hl(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,(Au&(Cu|ju))!==Tu)throw Error(a(327));if(jl(),e===Lu&&t===Bu||vl(e,t),null!==Fu){var n=Au;Au|=Cu;for(var r=bl();;)try{Sl();break}catch(t){gl(e,t)}if(oi(),Au=n,ku.current=r,Uu===Mu)throw n=Wu,vl(e,t),Ql(e,t),pl(e),n;if(null!==Fu)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Lu=null,Tl(e),pl(e)}return null}function ml(e,t){var n=Au;Au|=1;try{return e(t)}finally{(Au=n)===Tu&&Yo()}}function yl(e,t){var n=Au;Au&=-2,Au|=Pu;try{return e(t)}finally{(Au=n)===Tu&&Yo()}}function vl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,xn(n)),null!==Fu)for(n=Fu.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&wo();break;case 3:Ai(),po(vo),po(yo);break;case 5:Fi(r);break;case 4:Ai();break;case 13:case 19:po(Bi);break;case 10:ii(r)}n=n.return}Lu=e,Fu=Ul(e.current,null),Bu=t,Uu=zu,Wu=null,$u=qu=1073741823,Hu=null,Vu=0,Ku=!1}function gl(e,t){for(;;){try{if(oi(),qi.current=_a,Gi)for(var n=Vi.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Hi=0,Qi=Ki=Vi=null,Gi=!1,null===Fu||null===Fu.return)return Uu=Mu,Wu=t,Fu=null;e:{var o=e,i=Fu.return,a=Fu,u=t;if(t=Bu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(!(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=!!(1&Bi.current),f=i;do{var p;if(p=13===f.tag){var d=f.memoizedState;if(null!==d)p=null!==d.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(p){var m=f.updateQueue;if(null===m){var y=new Set;y.add(l),f.updateQueue=y}else m.add(l);if(!(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var v=pi(1073741823,null);v.tag=2,di(a,v)}a.expirationTime=1073741823;break e}u=void 0,a=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new _u,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(a)){u.add(a);var b=Nl.bind(null,o,l,a);l.then(b,b)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((ye(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ve(a))}Uu!==Du&&(Uu=Iu),u=ru(u,a),f=i;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,hi(f,wu(f,l,t));break e;case 1:l=u;var _=f.type,w=f.stateNode;if(!(64&f.effectTag||"function"!=typeof _.getDerivedStateFromError&&(null===w||"function"!=typeof w.componentDidCatch||null!==Zu&&Zu.has(w)))){f.effectTag|=4096,f.expirationTime=t,hi(f,Su(f,l,t));break e}}f=f.return}while(null!==f)}Fu=kl(Fu)}catch(e){t=e;continue}break}}function bl(){var e=ku.current;return ku.current=_a,null===e?_a:e}function _l(e,t){e<qu&&2<e&&(qu=e),null!==t&&e<$u&&2<e&&($u=e,Hu=t)}function wl(e){e>Vu&&(Vu=e)}function Sl(){for(;null!==Fu;)Fu=xl(Fu)}function El(){for(;null!==Fu&&!Lo();)Fu=xl(Fu)}function xl(e){var t=Eu(e.alternate,e,Bu);return e.memoizedProps=e.pendingProps,null===t&&(t=kl(e)),Ou.current=null,t}function kl(e){Fu=e;do{var t=Fu.alternate;if(e=Fu.return,2048&Fu.effectTag){if(null!==(t=nu(Fu)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}else{if(t=tu(t,Fu,Bu),1===Bu||1!==Fu.childExpirationTime){for(var n=0,r=Fu.child;null!==r;){var o=r.expirationTime,i=r.childExpirationTime;o>n&&(n=o),i>n&&(n=i),r=r.sibling}Fu.childExpirationTime=n}if(null!==t)return t;null!==e&&!(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Fu.firstEffect),null!==Fu.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Fu.firstEffect),e.lastEffect=Fu.lastEffect),1<Fu.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Fu:e.firstEffect=Fu,e.lastEffect=Fu))}if(null!==(t=Fu.sibling))return t;Fu=e}while(null!==Fu);return Uu===zu&&(Uu=Du),null}function Ol(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function Tl(e){var t=Ho();return Ko(99,Pl.bind(null,e,t)),null}function Pl(e,t){do{jl()}while(null!==tl);if((Au&(Cu|ju))!==Tu)throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var o=Ol(n);if(e.firstPendingTime=o,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Lu&&(Fu=Lu=null,Bu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,o=n.firstEffect):o=n:o=n.firstEffect,null!==o){var i=Au;Au|=ju,Ou.current=null,bn=Ht;var u=dn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var p=0,d=-1,h=-1,m=0,y=0,v=u,g=null;t:for(;;){for(var b;v!==l||0!==s&&3!==v.nodeType||(d=p+s),v!==f||0!==c&&3!==v.nodeType||(h=p+c),3===v.nodeType&&(p+=v.nodeValue.length),null!==(b=v.firstChild);)g=v,v=b;for(;;){if(v===u)break t;if(g===l&&++m===s&&(d=p),g===f&&++y===c&&(h=p),null!==(b=v.nextSibling))break;g=(v=g).parentNode}v=b}l=-1===d||-1===h?null:{start:d,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;_n={activeElementDetached:null,focusedElem:u,selectionRange:l},Ht=!1,Yu=o;do{try{Cl()}catch(e){if(null===Yu)throw Error(a(330));Il(Yu,e),Yu=Yu.nextEffect}}while(null!==Yu);Yu=o;do{try{for(u=e,l=t;null!==Yu;){var _=Yu.effectTag;if(16&_&&Fe(Yu.stateNode,""),128&_){var w=Yu.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&_){case 2:hu(Yu),Yu.effectTag&=-3;break;case 6:hu(Yu),Yu.effectTag&=-3,gu(Yu.alternate,Yu);break;case 1024:Yu.effectTag&=-1025;break;case 1028:Yu.effectTag&=-1025,gu(Yu.alternate,Yu);break;case 4:gu(Yu.alternate,Yu);break;case 8:vu(u,s=Yu,l),pu(s)}Yu=Yu.nextEffect}}catch(e){if(null===Yu)throw Error(a(330));Il(Yu,e),Yu=Yu.nextEffect}}while(null!==Yu);if(S=_n,w=dn(),_=S.focusedElem,l=S.selectionRange,w!==_&&_&&_.ownerDocument&&pn(_.ownerDocument.documentElement,_)){null!==l&&hn(_)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(S,_.value.length)):(S=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),s=_.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!S.extend&&u>l&&(s=l,l=u,u=s),s=fn(_,u),f=fn(_,l),s&&f&&(1!==S.rangeCount||S.anchorNode!==s.node||S.anchorOffset!==s.offset||S.focusNode!==f.node||S.focusOffset!==f.offset)&&((w=w.createRange()).setStart(s.node,s.offset),S.removeAllRanges(),u>l?(S.addRange(w),S.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),S.addRange(w))))),w=[];for(S=_;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(S=w[_]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Ht=!!bn,_n=bn=null,e.current=n,Yu=o;do{try{for(_=e;null!==Yu;){var E=Yu.effectTag;if(36&E&&su(_,Yu.alternate,Yu),128&E){w=void 0;var x=Yu.ref;if(null!==x){var k=Yu.stateNode;Yu.tag,w=k,"function"==typeof x?x(w):x.current=w}}Yu=Yu.nextEffect}}catch(e){if(null===Yu)throw Error(a(330));Il(Yu,e),Yu=Yu.nextEffect}}while(null!==Yu);Yu=null,Fo(),Au=i}else e.current=n;if(el)el=!1,tl=e,nl=t;else for(Yu=o;null!==Yu;)t=Yu.nextEffect,Yu.nextEffect=null,Yu=t;if(0===(t=e.firstPendingTime)&&(Zu=null),1073741823===t?e===il?ol++:(ol=0,il=e):ol=0,"function"==typeof Dl&&Dl(n.stateNode,r),pl(e),Xu)throw Xu=!1,e=Ju,Ju=null,e;return(Au&Pu)!==Tu||Yo(),null}function Cl(){for(;null!==Yu;){var e=Yu.effectTag;256&e&&uu(Yu.alternate,Yu),!(512&e)||el||(el=!0,Qo(97,(function(){return jl(),null}))),Yu=Yu.nextEffect}}function jl(){if(90!==nl){var e=97<nl?97:nl;return nl=90,Ko(e,zl)}}function zl(){if(null===tl)return!1;var e=tl;if(tl=null,(Au&(Cu|ju))!==Tu)throw Error(a(331));var t=Au;for(Au|=ju,e=e.current.firstEffect;null!==e;){try{var n=e;if(512&n.effectTag)switch(n.tag){case 0:case 11:case 15:case 22:lu(5,n),cu(5,n)}}catch(t){if(null===e)throw Error(a(330));Il(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Au=t,Yo(),!0}function Ml(e,t,n){di(e,t=wu(e,t=ru(n,t),1073741823)),null!==(e=sl(e,1073741823))&&pl(e)}function Il(e,t){if(3===e.tag)Ml(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Ml(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Zu||!Zu.has(r))){di(n,e=Su(n,e=ru(t,e),1073741823)),null!==(n=sl(n,1073741823))&&pl(n);break}}n=n.return}}function Nl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Lu===e&&Bu===n?Uu===Ru||Uu===Nu&&1073741823===qu&&$o()-Qu<Gu?vl(e,Bu):Ku=!0:Kl(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,pl(e)))}function Rl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(t=ll(t=ul(),e,null)),null!==(e=sl(e,t))&&pl(e)}Eu=function(e,t,n){var r=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||vo.current)Na=!0;else{if(r<n){switch(Na=!1,t.tag){case 3:qa(t),Ma();break;case 5:if(Li(t),4&t.mode&&1!==n&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:_o(t.type)&&xo(t);break;case 4:Di(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,o=t.type._context,ho(ei,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ga(e,t,n):(ho(Bi,1&Bi.current),null!==(t=Za(e,t,n))?t.sibling:null);ho(Bi,1&Bi.current);break;case 19:if(r=t.childExpirationTime>=n,64&e.effectTag){if(r)return Ja(e,t,n);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),ho(Bi,Bi.current),!r)return null}return Za(e,t,n)}Na=!1}}else Na=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=bo(t,yo.current),ui(t,n),o=Ji(null,t,r,e,o,n),t.effectTag|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,_o(r)){var i=!0;xo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,si(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&bi(t,r,u,e),o.updater=_i,t.stateNode=o,o._reactInternalFiber=t,xi(t,r,e,n),t=Wa(null,t,r,!0,i,n)}else t.tag=0,Ra(null,t,o,n),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(o),e=Zo(o,e),i){case 0:t=Ba(null,t,o,e,n);break e;case 1:t=Ua(null,t,o,e,n);break e;case 11:t=Da(null,t,o,e,n);break e;case 14:t=Aa(null,t,o,Zo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ua(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 3:if(qa(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,fi(e,t),mi(t,r,null,n),(r=t.memoizedState.element)===o)Ma(),t=Za(e,t,n);else{if((o=t.stateNode.hydrate)&&(ka=kn(t.stateNode.containerInfo.firstChild),xa=t,o=Oa=!0),o)for(n=ji(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ra(e,t,r,n),Ma();t=t.child}return t;case 5:return Li(t),null===e&&Ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,u=o.children,Sn(r,o)?u=null:null!==i&&Sn(r,i)&&(t.effectTag|=16),Fa(e,t),4&t.mode&&1!==n&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ra(e,t,u,n),t=t.child),t;case 6:return null===e&&Ca(t),null;case 13:return Ga(e,t,n);case 4:return Di(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ci(t,null,r,n):Ra(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Zo(r,o),n);case 7:return Ra(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ra(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,u=t.memoizedProps,i=o.value;var l=t.type._context;if(ho(ei,l._currentValue),l._currentValue=i,null!==u)if(l=u.value,0==(i=Ur(l,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,i):1073741823))){if(u.children===o.children&&!vo.current){t=Za(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&s.observedBits&i){1===l.tag&&((s=pi(n,null)).tag=2,di(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),ai(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Ra(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ui(t,n),r=r(o=li(o,i.unstable_observedBits)),t.effectTag|=1,Ra(e,t,r,n),t.child;case 14:return i=Zo(o=t.type,t.pendingProps),Aa(e,t,o,i=Zo(o.type,i),r,n);case 15:return La(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Zo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,_o(r)?(e=!0,xo(t)):e=!1,ui(t,n),Si(t,r,o),xi(t,r,o,n),Wa(null,t,r,!0,e,n);case 19:return Ja(e,t,n)}throw Error(a(156,t.tag))};var Dl=null,Al=null;function Ll(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Fl(e,t,n,r){return new Ll(e,t,n,r)}function Bl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ul(e,t){var n=e.alternate;return null===n?((n=Fl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wl(e,t,n,r,o,i){var u=2;if(r=e,"function"==typeof e)Bl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return ql(n.children,o,i,t);case ue:u=8,o|=7;break;case re:u=8,o|=1;break;case oe:return(e=Fl(12,n,t,8|o)).elementType=oe,e.type=oe,e.expirationTime=i,e;case ce:return(e=Fl(13,n,t,o)).type=ce,e.elementType=ce,e.expirationTime=i,e;case se:return(e=Fl(19,n,t,o)).elementType=se,e.expirationTime=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case ie:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case pe:u=16,r=null;break e;case de:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fl(u,n,t,o)).elementType=e,t.type=r,t.expirationTime=i,t}function ql(e,t,n,r){return(e=Fl(7,e,r,t)).expirationTime=n,e}function $l(e,t,n){return(e=Fl(6,e,null,t)).expirationTime=n,e}function Hl(e,t,n){return(t=Fl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Kl(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Ql(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Gl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Yl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Xl(e,t,n,r){var o=t.current,i=ul(),u=vi.suspense;i=ll(i,o,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(_o(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(_o(c)){n=Eo(n,c,l);break e}}n=l}else n=mo;return null===t.context?t.context=n:t.pendingContext=n,(t=pi(i,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),di(o,t),cl(o,i),i}function Jl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function ec(e,t){Zl(e,t),(e=e.alternate)&&Zl(e,t)}function tc(e,t,n){var r=new Vl(e,t,n=null!=n&&!0===n.hydrate),o=Fl(3,null,null,2===t?7:1===t?3:0);r.current=o,o.stateNode=r,si(o),e[jn]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);kt.forEach((function(e){dt(e,t,n)})),Ot.forEach((function(e){dt(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var u=o;o=function(){var e=Jl(a);u.call(e)}}Xl(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var l=o;o=function(){var e=Jl(a);l.call(e)}}yl((function(){Xl(t,a,e,o)}))}return Jl(a)}function oc(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}tc.prototype.render=function(e){Xl(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Xl(null,e,null,(function(){t[jn]=null}))},ht=function(e){if(13===e.tag){var t=Jo(ul(),150,100);cl(e,t),ec(e,t)}},mt=function(e){13===e.tag&&(cl(e,3),ec(e,3))},yt=function(e){if(13===e.tag){var t=ul();cl(e,t=ll(t,e,null)),ec(e,t)}},P=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=Nn(r);if(!o)throw Error(a(90));we(r),ke(r,o)}}}break;case"textarea":Me(e,n);break;case"select":null!=(t=n.value)&&Ce(e,!!n.multiple,t,!1)}},N=ml,R=function(e,t,n,r,o){var i=Au;Au|=4;try{return Ko(98,e.bind(null,t,n,r,o))}finally{(Au=i)===Tu&&Yo()}},D=function(){(Au&(1|Cu|ju))===Tu&&(function(){if(null!==rl){var e=rl;rl=null,e.forEach((function(e,t){Yl(t,e),pl(t)})),Yo()}}(),jl())},A=function(e,t){var n=Au;Au|=2;try{return e(t)}finally{(Au=n)===Tu&&Yo()}};var ic={Events:[Mn,In,Nn,O,E,Un,function(e){rt(e,Bn)},M,I,Yt,at,jl,{current:!1}]};!function(e){var t=e.findFiberByHostInstance;!function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Dl=function(e){try{t.onCommitFiberRoot(n,e,void 0,!(64&~e.current.effectTag))}catch(e){}},Al=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(o({},e,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Y.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=tt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))}({findFiberByHostInstance:zn,bundleType:0,version:"16.14.0",rendererPackageName:"react-dom"}),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ic,t.createPortal=oc,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=tt(t))?null:e.stateNode},t.flushSync=function(e,t){if((Au&(Cu|ju))!==Tu)throw Error(a(187));var n=Au;Au|=1;try{return Ko(99,e.bind(null,t))}finally{Au=n,Yo()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(a(200));return rc(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(a(200));return rc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(a(40));return!!e._reactRootContainer&&(yl((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[jn]=null}))})),!0)},t.unstable_batchedUpdates=ml,t.unstable_createPortal=function(e,t){return oc(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nc(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return rc(e,t,n,!1,r)},t.version="16.14.0"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},799:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,s=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,p=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,y=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case s:case f:case i:case u:case a:case d:return e;default:switch(e=e&&e.$$typeof){case c:case p:case y:case m:case l:return e;default:return t}}case o:return t}}}function S(e){return w(e)===f}t.AsyncMode=s,t.ConcurrentMode=f,t.ContextConsumer=c,t.ContextProvider=l,t.Element=r,t.ForwardRef=p,t.Fragment=i,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=d,t.isAsyncMode=function(e){return S(e)||w(e)===s},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===c},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===y},t.isMemo=function(e){return w(e)===m},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===d},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===d||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===l||e.$$typeof===c||e.$$typeof===p||e.$$typeof===g||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=w},363:(e,t,n)=>{"use strict";e.exports=n(799)},989:(e,t)=>{"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,u=60109,l=60110,c=60112,s=60113,f=60120,p=60115,d=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;n=h("react.element"),r=h("react.portal"),o=h("react.fragment"),i=h("react.strict_mode"),a=h("react.profiler"),u=h("react.provider"),l=h("react.context"),c=h("react.forward_ref"),s=h("react.suspense"),f=h("react.suspense_list"),p=h("react.memo"),d=h("react.lazy"),h("react.block"),h("react.server.block"),h("react.fundamental"),h("react.debug_trace_mode"),h("react.legacy_hidden")}t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case s:case f:return e;default:switch(e=e&&e.$$typeof){case l:case c:case d:case p:case u:return e;default:return t}}case r:return t}}}(e)===l}},737:(e,t,n)=>{"use strict";e.exports=n(989)},287:(e,t,n)=>{"use strict";var r=n(228),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,s=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function v(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}function w(){}function S(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(v(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var E=S.prototype=new w;E.constructor=S,r(E,_.prototype),E.isPureReactComponent=!0;var x={current:null},k=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!O.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:x.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var C=/\/+/g,j=[];function z(e,t,n,r){if(j.length){var o=j.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function M(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function I(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var u=!1;if(null===e)u=!0;else switch(o){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case i:case a:u=!0}}if(u)return n(r,e,""===t?"."+R(e,0):t),1;if(u=0,t=""===t?".":t+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=t+R(o=e[l],l);u+=I(o,c,n,r)}else if("function"==typeof(c=null===e||"object"!=typeof e?null:"function"==typeof(c=y&&e[y]||e["@@iterator"])?c:null))for(e=c.call(e),l=0;!(o=e.next()).done;)u+=I(o=o.value,c=t+R(o,l++),n,r);else if("object"===o)throw n=""+e,Error(v(31,"[object Object]"===n?"object with keys {"+Object.keys(e).join(", ")+"}":n,""));return u}function N(e,t,n){return null==e?0:I(e,"",t,n)}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function A(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?L(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+n)),r.push(e))}function L(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(C,"$&/")+"/"),N(e,A,t=z(t,i,r,o)),M(t)}var F={current:null};function B(){var e=F.current;if(null===e)throw Error(v(321));return e}var U={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return L(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;N(e,D,t=z(null,null,t,n)),M(t)},count:function(e){return N(e,(function(){return null}),null)},toArray:function(e){var t=[];return L(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(v(143));return e}},t.Component=_,t.Fragment=u,t.Profiler=c,t.PureComponent=S,t.StrictMode=l,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(v(267,e));var o=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!O.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return B().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,n){return B().useReducer(e,t,n)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.14.0"},540:(e,t,n)=>{"use strict";e.exports=n(287)},463:(e,t)=>{"use strict";var n,r,o,i,a;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,c=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(c,0),e}},s=Date.now();t.unstable_now=function(){return Date.now()-s},n=function(e){null!==u?setTimeout(n,0,e):(u=e,setTimeout(c,0))},r=function(e,t){l=setTimeout(e,t)},o=function(){clearTimeout(l)},i=function(){return!1},a=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,p=window.Date,d=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var v=!1,g=null,b=-1,_=5,w=0;i=function(){return t.unstable_now()>=w},a=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):_=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,E=S.port2;S.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();w=e+_;try{g(!0,e)?E.postMessage(null):(v=!1,g=null)}catch(e){throw E.postMessage(null),e}}else v=!1},n=function(e){g=e,v||(v=!0,E.postMessage(null))},r=function(e,n){b=d((function(){e(t.unstable_now())}),n)},o=function(){h(b),b=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<T(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],u=i+1,l=e[u];if(void 0!==a&&0>T(a,n))void 0!==l&&0>T(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==l&&0>T(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function T(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],C=[],j=1,z=null,M=3,I=!1,N=!1,R=!1;function D(e){for(var t=k(C);null!==t;){if(null===t.callback)O(C);else{if(!(t.startTime<=e))break;O(C),t.sortIndex=t.expirationTime,x(P,t)}t=k(C)}}function A(e){if(R=!1,D(e),!N)if(null!==k(P))N=!0,n(L);else{var t=k(C);null!==t&&r(A,t.startTime-e)}}function L(e,n){N=!1,R&&(R=!1,o()),I=!0;var a=M;try{for(D(n),z=k(P);null!==z&&(!(z.expirationTime>n)||e&&!i());){var u=z.callback;if(null!==u){z.callback=null,M=z.priorityLevel;var l=u(z.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?z.callback=l:z===k(P)&&O(P),D(n)}else O(P);z=k(P)}if(null!==z)var c=!0;else{var s=k(C);null!==s&&r(A,s.startTime-n),c=!1}return c}finally{z=null,M=a,I=!1}}function F(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var B=a;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||I||(N=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return k(P)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=B,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:F(e)}else a=F(e),l=u;return e={id:j++,callback:i,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,x(C,e),null===k(P)&&e===k(C)&&(R?o():R=!0,r(A,l-u))):(e.sortIndex=a,x(P,e),N||I||(N=!0,n(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();D(e);var n=k(P);return n!==z&&null!==z&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<z.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},982:(e,t,n)=>{"use strict";e.exports=n(463)},459:e=>{"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var u=2&r&&n;"object"==typeof u&&!~e.indexOf(u);u=t(u))Object.getOwnPropertyNames(u).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{"use strict";var e,t=o(540),n=o.t(t,2);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},r.apply(this,arguments)}!function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));const i="popstate";function a(e,t){if(!1===e||null==e)throw new Error(t)}function u(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function l(e,t){return{usr:e.state,key:e.key,idx:t}}function c(e,t,n,o){return void 0===n&&(n=null),r({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?f(t):t,{state:n,key:t&&t.key||o||Math.random().toString(36).substr(2,8)})}function s(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&"?"!==n&&(t+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(t+="#"===r.charAt(0)?r:"#"+r),t}function f(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}var p;function d(e,t,n){void 0===n&&(n="/");let r=T(("string"==typeof t?f(t):t).pathname||"/",n);if(null==r)return null;let o=h(e);!function(e){e.sort(((e,t)=>e.score!==t.score?t.score-e.score:function(e,t){let n=e.length===t.length&&e.slice(0,-1).every(((e,n)=>e===t[n]));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((e=>e.childrenIndex)),t.routesMeta.map((e=>e.childrenIndex)))))}(o);let i=null;for(let e=0;null==i&&e<o.length;++e){let t=O(r);i=x(o[e],t)}return i}function h(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");let o=(e,o,i)=>{let u={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};u.relativePath.startsWith("/")&&(a(u.relativePath.startsWith(r),'Absolute route path "'+u.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),u.relativePath=u.relativePath.slice(r.length));let l=z([r,u.relativePath]),c=n.concat(u);e.children&&e.children.length>0&&(a(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),h(e.children,t,c,l)),(null!=e.path||e.index)&&t.push({path:l,score:E(l,e.index),routesMeta:c})};return e.forEach(((e,t)=>{var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?"))for(let n of m(e.path))o(e,t,n);else o(e,t)})),t}function m(e){let t=e.split("/");if(0===t.length)return[];let[n,...r]=t,o=n.endsWith("?"),i=n.replace(/\?$/,"");if(0===r.length)return o?[i,""]:[i];let a=m(r.join("/")),u=[];return u.push(...a.map((e=>""===e?i:[i,e].join("/")))),o&&u.push(...a),u.map((t=>e.startsWith("/")&&""===t?"/":t))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(p||(p={})),new Set(["lazy","caseSensitive","path","id","index","children"]);const y=/^:[\w-]+$/,v=3,g=2,b=1,_=10,w=-2,S=e=>"*"===e;function E(e,t){let n=e.split("/"),r=n.length;return n.some(S)&&(r+=w),t&&(r+=g),n.filter((e=>!S(e))).reduce(((e,t)=>e+(y.test(t)?v:""===t?b:_)),r)}function x(e,t){let{routesMeta:n}=e,r={},o="/",i=[];for(let e=0;e<n.length;++e){let a=n[e],u=e===n.length-1,l="/"===o?t:t.slice(o.length)||"/",c=k({path:a.relativePath,caseSensitive:a.caseSensitive,end:u},l);if(!c)return null;Object.assign(r,c.params);let s=a.route;i.push({params:r,pathname:z([o,c.pathname]),pathnameBase:M(z([o,c.pathnameBase])),route:s}),"/"!==c.pathnameBase&&(o=z([o,c.pathnameBase]))}return i}function k(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),u("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');let r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,((e,t,n)=>(r.push({paramName:t,isOptional:null!=n}),n?"/?([^\\/]+)?":"/([^\\/]+)")));return e.endsWith("*")?(r.push({paramName:"*"}),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),o=t.match(n);if(!o)return null;let i=o[0],a=i.replace(/(.)\/+$/,"$1"),l=o.slice(1);return{params:r.reduce(((e,t,n)=>{let{paramName:r,isOptional:o}=t;if("*"===r){let e=l[n]||"";a=i.slice(0,i.length-e.length).replace(/(.)\/+$/,"$1")}const u=l[n];return e[r]=o&&!u?void 0:(u||"").replace(/%2F/g,"/"),e}),{}),pathname:i,pathnameBase:a,pattern:e}}function O(e){try{return e.split("/").map((e=>decodeURIComponent(e).replace(/\//g,"%2F"))).join("/")}catch(t){return u(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function T(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function P(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function C(e,t){let n=function(e){return e.filter(((e,t)=>0===t||e.route.path&&e.route.path.length>0))}(e);return t?n.map(((t,n)=>n===e.length-1?t.pathname:t.pathnameBase)):n.map((e=>e.pathnameBase))}function j(e,t,n,o){let i;void 0===o&&(o=!1),"string"==typeof e?i=f(e):(i=r({},e),a(!i.pathname||!i.pathname.includes("?"),P("?","pathname","search",i)),a(!i.pathname||!i.pathname.includes("#"),P("#","pathname","hash",i)),a(!i.search||!i.search.includes("#"),P("#","search","hash",i)));let u,l=""===e||""===i.pathname,c=l?"/":i.pathname;if(null==c)u=n;else{let e=t.length-1;if(!o&&c.startsWith("..")){let t=c.split("/");for(;".."===t[0];)t.shift(),e-=1;i.pathname=t.join("/")}u=e>=0?t[e]:"/"}let s=function(e,t){void 0===t&&(t="/");let{pathname:n,search:r="",hash:o=""}="string"==typeof e?f(e):e,i=n?n.startsWith("/")?n:function(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((e=>{".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(n,t):t;return{pathname:i,search:I(r),hash:N(o)}}(i,u),p=c&&"/"!==c&&c.endsWith("/"),d=(l||"."===c)&&n.endsWith("/");return s.pathname.endsWith("/")||!p&&!d||(s.pathname+="/"),s}const z=e=>e.join("/").replace(/\/\/+/g,"/"),M=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),I=e=>e&&"?"!==e?e.startsWith("?")?e:"?"+e:"",N=e=>e&&"#"!==e?e.startsWith("#")?e:"#"+e:"";Error;const R=["post","put","patch","delete"],D=(new Set(R),["get",...R]);function A(){return A=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},A.apply(this,arguments)}new Set(D),new Set([301,302,303,307,308]),new Set([307,308]),Symbol("deferred");const L=t.createContext(null),F=t.createContext(null),B=t.createContext(null),U=t.createContext(null),W=t.createContext({outlet:null,matches:[],isDataRoute:!1}),q=t.createContext(null);function $(){return null!=t.useContext(U)}function H(){return $()||a(!1),t.useContext(U).location}function V(e){t.useContext(B).static||t.useLayoutEffect(e)}function K(){let{isDataRoute:e}=t.useContext(W);return e?function(){let{router:e}=function(e){let n=t.useContext(L);return n||a(!1),n}(ee.UseNavigateStable),n=ne(te.UseNavigateStable),r=t.useRef(!1);return V((()=>{r.current=!0})),t.useCallback((function(t,o){void 0===o&&(o={}),r.current&&("number"==typeof t?e.navigate(t):e.navigate(t,A({fromRouteId:n},o)))}),[e,n])}():function(){$()||a(!1);let e=t.useContext(L),{basename:n,future:r,navigator:o}=t.useContext(B),{matches:i}=t.useContext(W),{pathname:u}=H(),l=JSON.stringify(C(i,r.v7_relativeSplatPath)),c=t.useRef(!1);return V((()=>{c.current=!0})),t.useCallback((function(t,r){if(void 0===r&&(r={}),!c.current)return;if("number"==typeof t)return void o.go(t);let i=j(t,JSON.parse(l),u,"path"===r.relative);null==e&&"/"!==n&&(i.pathname="/"===i.pathname?n:z([n,i.pathname])),(r.replace?o.replace:o.push)(i,r.state,r)}),[n,o,l,u,e])}()}function Q(e,n){let{relative:r}=void 0===n?{}:n,{future:o}=t.useContext(B),{matches:i}=t.useContext(W),{pathname:a}=H(),u=JSON.stringify(C(i,o.v7_relativeSplatPath));return t.useMemo((()=>j(e,JSON.parse(u),a,"path"===r)),[e,u,a,r])}function G(n,r,o,i){$()||a(!1);let{navigator:u}=t.useContext(B),{matches:l}=t.useContext(W),c=l[l.length-1],s=c?c.params:{},p=(c&&c.pathname,c?c.pathnameBase:"/");c&&c.route;let h,m=H();if(r){var y;let e="string"==typeof r?f(r):r;"/"===p||(null==(y=e.pathname)?void 0:y.startsWith(p))||a(!1),h=e}else h=m;let v=h.pathname||"/",g=v;if("/"!==p){let e=p.replace(/^\//,"").split("/");g="/"+v.replace(/^\//,"").split("/").slice(e.length).join("/")}let b=d(n,{pathname:g}),_=function(e,n,r,o){var i;if(void 0===n&&(n=[]),void 0===r&&(r=null),void 0===o&&(o=null),null==e){var u;if(null==(u=r)||!u.errors)return null;e=r.matches}let l=e,c=null==(i=r)?void 0:i.errors;if(null!=c){let e=l.findIndex((e=>e.route.id&&void 0!==(null==c?void 0:c[e.route.id])));e>=0||a(!1),l=l.slice(0,Math.min(l.length,e+1))}let s=!1,f=-1;if(r&&o&&o.v7_partialHydration)for(let e=0;e<l.length;e++){let t=l[e];if((t.route.HydrateFallback||t.route.hydrateFallbackElement)&&(f=e),t.route.id){let{loaderData:e,errors:n}=r,o=t.route.loader&&void 0===e[t.route.id]&&(!n||void 0===n[t.route.id]);if(t.route.lazy||o){s=!0,l=f>=0?l.slice(0,f+1):[l[0]];break}}}return l.reduceRight(((e,o,i)=>{let a,u=!1,p=null,d=null;var h;r&&(a=c&&o.route.id?c[o.route.id]:void 0,p=o.route.errorElement||X,s&&(f<0&&0===i?(re[h="route-fallback"]||(re[h]=!0),u=!0,d=null):f===i&&(u=!0,d=o.route.hydrateFallbackElement||null)));let m=n.concat(l.slice(0,i+1)),y=()=>{let n;return n=a?p:u?d:o.route.Component?t.createElement(o.route.Component,null):o.route.element?o.route.element:e,t.createElement(Z,{match:o,routeContext:{outlet:e,matches:m,isDataRoute:null!=r},children:n})};return r&&(o.route.ErrorBoundary||o.route.errorElement||0===i)?t.createElement(J,{location:r.location,revalidation:r.revalidation,component:p,error:a,children:y(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):y()}),null)}(b&&b.map((e=>Object.assign({},e,{params:Object.assign({},s,e.params),pathname:z([p,u.encodeLocation?u.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?p:z([p,u.encodeLocation?u.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])}))),l,o,i);return r&&_?t.createElement(U.Provider,{value:{location:A({pathname:"/",search:"",hash:"",state:null,key:"default"},h),navigationType:e.Pop}},_):_}function Y(){let e=function(){var e;let n=t.useContext(q),r=function(e){let n=t.useContext(F);return n||a(!1),n}(te.UseRouteError),o=ne(te.UseRouteError);return void 0!==n?n:null==(e=r.errors)?void 0:e[o]}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}const X=t.createElement(Y,null);class J extends t.Component{constructor(e){super(e),this.state={location:e.location,revalidation:e.revalidation,error:e.error}}static getDerivedStateFromError(e){return{error:e}}static getDerivedStateFromProps(e,t){return t.location!==e.location||"idle"!==t.revalidation&&"idle"===e.revalidation?{error:e.error,location:e.location,revalidation:e.revalidation}:{error:void 0!==e.error?e.error:t.error,location:t.location,revalidation:e.revalidation||t.revalidation}}componentDidCatch(e,t){console.error("React Router caught the following error during render",e,t)}render(){return void 0!==this.state.error?t.createElement(W.Provider,{value:this.props.routeContext},t.createElement(q.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function Z(e){let{routeContext:n,match:r,children:o}=e,i=t.useContext(L);return i&&i.static&&i.staticContext&&(r.route.errorElement||r.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(W.Provider,{value:n},o)}var ee=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(ee||{}),te=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(te||{});function ne(e){let n=function(e){let n=t.useContext(W);return n||a(!1),n}(),r=n.matches[n.matches.length-1];return r.route.id||a(!1),r.route.id}const re={};function oe(e){a(!1)}function ie(n){let{basename:r="/",children:o=null,location:i,navigationType:u=e.Pop,navigator:l,static:c=!1,future:s}=n;$()&&a(!1);let p=r.replace(/^\/*/,"/"),d=t.useMemo((()=>({basename:p,navigator:l,static:c,future:A({v7_relativeSplatPath:!1},s)})),[p,s,l,c]);"string"==typeof i&&(i=f(i));let{pathname:h="/",search:m="",hash:y="",state:v=null,key:g="default"}=i,b=t.useMemo((()=>{let e=T(h,p);return null==e?null:{location:{pathname:e,search:m,hash:y,state:v,key:g},navigationType:u}}),[p,h,m,y,v,g,u]);return null==b?null:t.createElement(B.Provider,{value:d},t.createElement(U.Provider,{children:o,value:b}))}function ae(e){let{children:t,location:n}=e;return G(ue(t),n)}function ue(e,n){void 0===n&&(n=[]);let r=[];return t.Children.forEach(e,((e,o)=>{if(!t.isValidElement(e))return;let i=[...n,o];if(e.type===t.Fragment)return void r.push.apply(r,ue(e.props.children,i));e.type!==oe&&a(!1),e.props.index&&e.props.children&&a(!1);let u={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,Component:e.props.Component,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,ErrorBoundary:e.props.ErrorBoundary,hasErrorBoundary:null!=e.props.ErrorBoundary||null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle,lazy:e.props.lazy};e.props.children&&(u.children=ue(e.props.children,i)),r.push(u)})),r}n.startTransition,new Promise((()=>{})),t.Component;var le=t.createContext(null),ce=function(e){e()},se=function(){return ce},fe={notify:function(){},get:function(){return[]}};function pe(e,t){var n,r=fe;function o(){a.onStateChange&&a.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=se(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var a={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=fe)},getListeners:function(){return r}};return a}var de="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?t.useLayoutEffect:t.useEffect;const he=function(e){var n=e.store,r=e.context,o=e.children,i=(0,t.useMemo)((function(){var e=pe(n);return{store:n,subscription:e}}),[n]),a=(0,t.useMemo)((function(){return n.getState()}),[n]);de((function(){var e=i.subscription;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),a!==n.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,a]);var u=r||le;return t.createElement(u.Provider,{value:i},o)};function me(){return me=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},me.apply(null,arguments)}function ye(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.indexOf(r)>=0)continue;n[r]=e[r]}return n}var ve=o(146),ge=o.n(ve),be=o(737),_e=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],we=["reactReduxForwardedRef"],Se=[],Ee=[null,null];function xe(e,t){var n=e[1];return[t.payload,n+1]}function ke(e,t,n){de((function(){return e.apply(void 0,t)}),n)}function Oe(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function Te(e,t,n,r,o,i,a,u,l,c){if(e){var s=!1,f=null,p=function(){if(!s){var e,n,p=t.getState();try{e=r(p,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||l():(i.current=e,u.current=e,a.current=!0,c({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=p,n.trySubscribe(),p(),function(){if(s=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var Pe=function(){return[null,0]};function Ce(e,n){void 0===n&&(n={});var r=n,o=r.getDisplayName,i=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,a=r.methodName,u=void 0===a?"connectAdvanced":a,l=r.renderCountProp,c=void 0===l?void 0:l,s=r.shouldHandleStateChanges,f=void 0===s||s,p=r.storeKey,d=void 0===p?"store":p,h=(r.withRef,r.forwardRef),m=void 0!==h&&h,y=r.context,v=void 0===y?le:y,g=ye(r,_e),b=v;return function(n){var r=n.displayName||n.name||"Component",o=i(r),a=me({},g,{getDisplayName:i,methodName:u,renderCountProp:c,shouldHandleStateChanges:f,storeKey:d,displayName:o,wrappedComponentName:r,WrappedComponent:n}),l=g.pure,s=l?t.useMemo:function(e){return e()};function p(r){var o=(0,t.useMemo)((function(){var e=r.reactReduxForwardedRef,t=ye(r,we);return[r.context,e,t]}),[r]),i=o[0],u=o[1],l=o[2],c=(0,t.useMemo)((function(){return i&&i.Consumer&&(0,be.isContextConsumer)(t.createElement(i.Consumer,null))?i:b}),[i,b]),p=(0,t.useContext)(c),d=Boolean(r.store)&&Boolean(r.store.getState)&&Boolean(r.store.dispatch);Boolean(p)&&Boolean(p.store);var h=d?r.store:p.store,m=(0,t.useMemo)((function(){return function(t){return e(t.dispatch,a)}(h)}),[h]),y=(0,t.useMemo)((function(){if(!f)return Ee;var e=pe(h,d?null:p.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[h,d,p]),v=y[0],g=y[1],_=(0,t.useMemo)((function(){return d?p:me({},p,{subscription:v})}),[d,p,v]),w=(0,t.useReducer)(xe,Se,Pe),S=w[0][0],E=w[1];if(S&&S.error)throw S.error;var x=(0,t.useRef)(),k=(0,t.useRef)(l),O=(0,t.useRef)(),T=(0,t.useRef)(!1),P=s((function(){return O.current&&l===k.current?O.current:m(h.getState(),l)}),[h,S,l]);ke(Oe,[k,x,T,l,P,O,g]),ke(Te,[f,h,v,m,k,x,T,O,g,E],[h,v,m]);var C=(0,t.useMemo)((function(){return t.createElement(n,me({},P,{ref:u}))}),[u,n,P]);return(0,t.useMemo)((function(){return f?t.createElement(c.Provider,{value:_},C):C}),[c,C,_])}var h=l?t.memo(p):p;if(h.WrappedComponent=n,h.displayName=p.displayName=o,m){var y=t.forwardRef((function(e,n){return t.createElement(h,me({},e,{reactReduxForwardedRef:n}))}));return y.displayName=o,y.WrappedComponent=n,ge()(y,n)}return ge()(h,n)}}function je(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function ze(e,t){if(je(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!je(e[n[o]],t[n[o]]))return!1;return!0}function Me(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function Ie(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function Ne(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=Ie(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=Ie(o),o=r(t,n)),o},r}}const Re=[function(e){return"function"==typeof e?Ne(e):void 0},function(e){return e?void 0:Me((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?Me((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}],De=[function(e){return"function"==typeof e?Ne(e):void 0},function(e){return e?void 0:Me((function(){return{}}))}];function Ae(e,t,n){return me({},n,e,t)}const Le=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,u){var l=e(t,n,u);return a?o&&i(l,r)||(r=l):(a=!0,r=l),r}}}(e):void 0},function(e){return e?void 0:function(){return Ae}}];var Fe=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function Be(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function Ue(e,t,n,r,o){var i,a,u,l,c,s=o.areStatesEqual,f=o.areOwnPropsEqual,p=o.areStatePropsEqual,d=!1;return function(o,h){return d?function(o,d){var h,m,y=!f(d,a),v=!s(o,i,d,a);return i=o,a=d,y&&v?(u=e(i,a),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):y?(e.dependsOnOwnProps&&(u=e(i,a)),t.dependsOnOwnProps&&(l=t(r,a)),c=n(u,l,a)):v?(h=e(i,a),m=!p(h,u),u=h,m&&(c=n(u,l,a)),c):c}(o,h):(u=e(i=o,a=h),l=t(r,a),c=n(u,l,a),d=!0,c)}}function We(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=ye(t,Fe),a=n(e,i),u=r(e,i),l=o(e,i);return(i.pure?Ue:Be)(a,u,l,e,i)}var qe=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function $e(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function He(e,t){return e===t}function Ve(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?Ce:n,o=t.mapStateToPropsFactories,i=void 0===o?De:o,a=t.mapDispatchToPropsFactories,u=void 0===a?Re:a,l=t.mergePropsFactories,c=void 0===l?Le:l,s=t.selectorFactory,f=void 0===s?We:s;return function(e,t,n,o){void 0===o&&(o={});var a=o,l=a.pure,s=void 0===l||l,p=a.areStatesEqual,d=void 0===p?He:p,h=a.areOwnPropsEqual,m=void 0===h?ze:h,y=a.areStatePropsEqual,v=void 0===y?ze:y,g=a.areMergedPropsEqual,b=void 0===g?ze:g,_=ye(a,qe),w=$e(e,i,"mapStateToProps"),S=$e(t,u,"mapDispatchToProps"),E=$e(n,c,"mergeProps");return r(f,me({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:w,initMapDispatchToProps:S,initMergeProps:E,pure:s,areStatesEqual:d,areOwnPropsEqual:m,areStatePropsEqual:v,areMergedPropsEqual:b},_))}}const Ke=Ve();var Qe,Ge=o(961),Ye=o.t(Ge,2);Qe=Ge.unstable_batchedUpdates,ce=Qe;var Xe=o(459),Je=o.n(Xe),Ze=o(236),et=o.n(Ze);function tt(e){return tt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},tt(e)}function nt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function rt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),r.forEach((function(t){nt(e,t,n[t])}))}return e}function ot(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var it=/([A-Z])/g,at=function(e){return"-".concat(e.toLowerCase())},ut={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},lt=["Webkit","ms","Moz","O"];Object.keys(ut).forEach((function(e){lt.forEach((function(t){ut[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=ut[e]}))}));var ct=function(e,t){return"number"==typeof t?ut[e]?""+t:t+"px":""+t},st=function(e,t){return pt(ct(e,t))},ft=function(e,t){return Je()(e).toString(36)},pt=function(e){return"!"===e[e.length-10]&&" !important"===e.slice(-11)?e:"".concat(e," !important")},dt="undefined"!=typeof Map,ht=function(){function e(){this.elements={},this.keyOrder=[]}var t=e.prototype;return t.forEach=function(e){for(var t=0;t<this.keyOrder.length;t++)e(this.elements[this.keyOrder[t]],this.keyOrder[t])},t.set=function(t,n,r){if(this.elements.hasOwnProperty(t)){if(r){var o=this.keyOrder.indexOf(t);this.keyOrder.splice(o,1),this.keyOrder.push(t)}}else this.keyOrder.push(t);if(null!=n){if(dt&&n instanceof Map||n instanceof e){var i=this.elements.hasOwnProperty(t)?this.elements[t]:new e;return n.forEach((function(e,t){i.set(t,e,r)})),void(this.elements[t]=i)}if(Array.isArray(n)||"object"!==tt(n))this.elements[t]=n;else{for(var a=this.elements.hasOwnProperty(t)?this.elements[t]:new e,u=Object.keys(n),l=0;l<u.length;l+=1)a.set(u[l],n[u[l]],r);this.elements[t]=a}}else this.elements[t]=n},t.get=function(e){return this.elements[e]},t.has=function(e){return this.elements.hasOwnProperty(e)},t.addStyleType=function(t){var n=this;if(dt&&t instanceof Map||t instanceof e)t.forEach((function(e,t){n.set(t,e,!0)}));else for(var r=Object.keys(t),o=0;o<r.length;o++)this.set(r[o],t[r[o]],!0)},e}();function mt(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function yt(e,t){return e(t={exports:{}},t.exports),t.exports}var vt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}}));mt(vt);var gt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var o={},i=e[t],a=(0,r.default)(t),u=Object.keys(n),l=0;l<u.length;l++){var c=u[l];if(c===t)for(var s=0;s<i.length;s++)o[i[s]+a]=n[t];o[c]=n[c]}return o}return n};var n,r=(n=vt)&&n.__esModule?n:{default:n}}));mt(gt);var bt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,n,r,o);if(u)return u}}}));mt(bt);var _t=yt((function(e,t){function n(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var r=0,o=t.length;r<o;++r)n(e,t[r]);else n(e,t)}}));mt(_t);var wt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)}}));mt(wt);var St=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,a=e.plugins;return function e(u){for(var l in u){var c=u[l];if((0,i.default)(c))u[l]=e(c);else if(Array.isArray(c)){for(var s=[],f=0,p=c.length;f<p;++f){var d=(0,r.default)(a,l,c[f],u,t);(0,o.default)(s,d||c[f])}s.length>0&&(u[l]=s)}else{var h=(0,r.default)(a,l,c,u,t);h&&(u[l]=h),u=(0,n.default)(t,l,u)}}return u}};var n=a(gt),r=a(bt),o=a(_t),i=a(wt);function a(e){return e&&e.__esModule?e:{default:e}}}))),Et=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&"text"===t)return["-webkit-text","text"]}}))),xt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&n.test(e)};var n=/-webkit-|-moz-|-ms-/;e.exports=t.default}));mt(xt);var kt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("calc(")>-1)return o.map((function(e){return t.replace(/calc\(/g,e+"calc(")}))};var n,r=(n=xt)&&n.__esModule?n:{default:n},o=["-webkit-","-moz-",""]})),Ot=mt(kt),Tt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("cross-fade(")>-1)return o.map((function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")}))};var n,r=(n=xt)&&n.__esModule?n:{default:n},o=["-webkit-",""]})),Pt=mt(Tt),Ct=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&r.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0}})),jt=mt(Ct),zt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("filter(")>-1)return o.map((function(e){return t.replace(/filter\(/g,e+"filter(")}))};var n,r=(n=xt)&&n.__esModule?n:{default:n},o=["-webkit-",""]})),Mt=mt(zt),It=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&n.hasOwnProperty(t))return n[t]};var n={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]}}))),Nt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,a){if(Object.prototype.hasOwnProperty.call(r,e)&&(a[r[e]]=n[t]||t),"flex"===e){if(Object.prototype.hasOwnProperty.call(o,t))return void(a.msFlex=o[t]);if(i.test(t))return void(a.msFlex=t+" 1 0%");var u=t.split(/\s/);switch(u.length){case 1:return void(a.msFlex="1 1 "+t);case 2:return void(i.test(u[1])?a.msFlex=u[0]+" "+u[1]+" 0%":a.msFlex=u[0]+" 1 "+u[1]);default:a.msFlex=t}}};var n={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},r={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"},o={auto:"1 1 auto",inherit:"inherit",initial:"0 1 auto",none:"0 0 auto",unset:"unset"},i=/^\d+(\.\d+)?$/})),Rt=mt(Nt),Dt=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?o.WebkitBoxOrient="vertical":o.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?o.WebkitBoxDirection="reverse":o.WebkitBoxDirection="normal"),r.hasOwnProperty(e)&&(o[r[e]]=n[t]||t)};var n={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},r={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"}}))),At=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&i.test(t))return o.map((function(e){return t.replace(i,(function(t){return e+t}))}))};var n,r=(n=xt)&&n.__esModule?n:{default:n},o=["-webkit-","-moz-",""],i=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi})),Lt=mt(At),Ft=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function r(e){return"number"==typeof e&&!isNaN(e)}t.default=function(e,t,n){if("display"===e&&t in i)return i[t];e in a&&(0,a[e])(t,n)};var o=["center","end","start","stretch"],i={"inline-grid":["-ms-inline-grid","inline-grid"],grid:["-ms-grid","grid"]},a={alignSelf:function(e,t){o.indexOf(e)>-1&&(t.msGridRowAlign=e)},gridColumn:function(e,t){if(r(e))t.msGridColumn=e;else{var o=e.split("/").map((function(e){return+e})),i=n(o,2),u=i[0],l=i[1];a.gridColumnStart(u,t),a.gridColumnEnd(l,t)}},gridColumnEnd:function(e,t){var n=t.msGridColumn;r(e)&&r(n)&&(t.msGridColumnSpan=e-n)},gridColumnStart:function(e,t){r(e)&&(t.msGridColumn=e)},gridRow:function(e,t){if(r(e))t.msGridRow=e;else{var o=e.split("/").map((function(e){return+e})),i=n(o,2),u=i[0],l=i[1];a.gridRowStart(u,t),a.gridRowEnd(l,t)}},gridRowEnd:function(e,t){var n=t.msGridRow;r(e)&&r(n)&&(t.msGridRowSpan=e-n)},gridRowStart:function(e,t){r(e)&&(t.msGridRow=e)},gridTemplateColumns:function(e,t){t.msGridColumns=e},gridTemplateRows:function(e,t){t.msGridRows=e},justifySelf:function(e,t){o.indexOf(e)>-1&&(t.msGridColumnAlign=e)}}})),Bt=mt(Ft),Ut=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("image-set(")>-1)return o.map((function(e){return t.replace(/image-set\(/g,e+"image-set(")}))};var n,r=(n=xt)&&n.__esModule?n:{default:n},o=["-webkit-",""]})),Wt=mt(Ut),qt=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(Object.prototype.hasOwnProperty.call(n,e))for(var o=n[e],i=0,a=o.length;i<a;++i)r[o[i]]=t};var n={marginBlockStart:["WebkitMarginBefore"],marginBlockEnd:["WebkitMarginAfter"],marginInlineStart:["WebkitMarginStart","MozMarginStart"],marginInlineEnd:["WebkitMarginEnd","MozMarginEnd"],paddingBlockStart:["WebkitPaddingBefore"],paddingBlockEnd:["WebkitPaddingAfter"],paddingInlineStart:["WebkitPaddingStart","MozPaddingStart"],paddingInlineEnd:["WebkitPaddingEnd","MozPaddingEnd"],borderBlockStart:["WebkitBorderBefore"],borderBlockStartColor:["WebkitBorderBeforeColor"],borderBlockStartStyle:["WebkitBorderBeforeStyle"],borderBlockStartWidth:["WebkitBorderBeforeWidth"],borderBlockEnd:["WebkitBorderAfter"],borderBlockEndColor:["WebkitBorderAfterColor"],borderBlockEndStyle:["WebkitBorderAfterStyle"],borderBlockEndWidth:["WebkitBorderAfterWidth"],borderInlineStart:["WebkitBorderStart","MozBorderStart"],borderInlineStartColor:["WebkitBorderStartColor","MozBorderStartColor"],borderInlineStartStyle:["WebkitBorderStartStyle","MozBorderStartStyle"],borderInlineStartWidth:["WebkitBorderStartWidth","MozBorderStartWidth"],borderInlineEnd:["WebkitBorderEnd","MozBorderEnd"],borderInlineEndColor:["WebkitBorderEndColor","MozBorderEndColor"],borderInlineEndStyle:["WebkitBorderEndStyle","MozBorderEndStyle"],borderInlineEndWidth:["WebkitBorderEndWidth","MozBorderEndWidth"]}}))),$t=mt(yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]}}))),Ht=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(r.hasOwnProperty(e)&&o.hasOwnProperty(t))return n.map((function(e){return e+t}))};var n=["-webkit-","-moz-",""],r={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},o={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0}})),Vt=mt(Ht),Kt=/[A-Z]/g,Qt=/^ms-/,Gt={};function Yt(e){return"-"+e.toLowerCase()}var Xt,Jt=(Xt=Object.freeze({default:function(e){if(Gt.hasOwnProperty(e))return Gt[e];var t=e.replace(Kt,Yt);return Gt[e]=Qt.test(t)?"-"+t:t}}))&&Xt.default||Xt,Zt=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e)};var n,r=(n=Jt)&&n.__esModule?n:{default:n};e.exports=t.default}));mt(Zt);var en=yt((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,l){if("string"==typeof t&&a.hasOwnProperty(e)){var c=function(e,t){if((0,r.default)(e))return e;for(var o=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=o.length;i<a;++i){var l=o[i],c=[l];for(var s in t){var f=(0,n.default)(s);if(l.indexOf(f)>-1&&"order"!==f)for(var p=t[s],d=0,h=p.length;d<h;++d)c.unshift(l.replace(f,u[p[d]]+f))}o[i]=c.join(",")}return o.join(",")}(t,l),s=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-moz-|-ms-/.test(e)})).join(",");if(e.indexOf("Webkit")>-1)return s;var f=c.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter((function(e){return!/-webkit-|-ms-/.test(e)})).join(",");return e.indexOf("Moz")>-1?f:(i["Webkit"+(0,o.default)(e)]=s,i["Moz"+(0,o.default)(e)]=f,c)}};var n=i(Zt),r=i(xt),o=i(vt);function i(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"}})),tn=["Webkit"],nn=["Moz"],rn=["ms"],on=["Webkit","Moz"],an=["Webkit","ms"],un=["Webkit","Moz","ms"],ln=St({plugins:[Et,Ot,Pt,jt,Mt,It,Rt,Dt,Lt,Bt,Wt,qt,$t,Vt,mt(en)],prefixMap:{transform:an,transformOrigin:an,transformOriginX:an,transformOriginY:an,backfaceVisibility:tn,perspective:tn,perspectiveOrigin:tn,transformStyle:tn,transformOriginZ:tn,animation:tn,animationDelay:tn,animationDirection:tn,animationFillMode:tn,animationDuration:tn,animationIterationCount:tn,animationName:tn,animationPlayState:tn,animationTimingFunction:tn,appearance:on,userSelect:un,fontKerning:tn,textEmphasisPosition:tn,textEmphasis:tn,textEmphasisStyle:tn,textEmphasisColor:tn,boxDecorationBreak:tn,clipPath:tn,maskImage:tn,maskMode:tn,maskRepeat:tn,maskPosition:tn,maskClip:tn,maskOrigin:tn,maskSize:tn,maskComposite:tn,mask:tn,maskBorderSource:tn,maskBorderMode:tn,maskBorderSlice:tn,maskBorderWidth:tn,maskBorderOutset:tn,maskBorderRepeat:tn,maskBorder:tn,maskType:tn,textDecorationStyle:on,textDecorationSkip:on,textDecorationLine:on,textDecorationColor:on,filter:tn,fontFeatureSettings:on,breakAfter:un,breakBefore:un,breakInside:un,columnCount:on,columnFill:on,columnGap:on,columnRule:on,columnRuleColor:on,columnRuleStyle:on,columnRuleWidth:on,columns:on,columnSpan:on,columnWidth:on,writingMode:an,flex:an,flexBasis:tn,flexDirection:an,flexGrow:tn,flexFlow:an,flexShrink:tn,flexWrap:an,alignContent:tn,alignItems:tn,alignSelf:tn,justifyContent:tn,order:tn,transitionDelay:tn,transitionDuration:tn,transitionProperty:tn,transitionTimingFunction:tn,backdropFilter:tn,scrollSnapType:an,scrollSnapPointsX:an,scrollSnapPointsY:an,scrollSnapDestination:an,scrollSnapCoordinate:an,shapeImageThreshold:tn,shapeImageMargin:tn,shapeImageOutside:tn,hyphens:un,flowInto:an,flowFrom:an,regionFragment:an,textOrientation:tn,boxSizing:nn,textAlignLast:nn,tabSize:nn,wrapFlow:rn,wrapThrough:rn,wrapMargin:rn,touchAction:rn,textSizeAdjust:an,borderImage:tn,borderImageOutset:tn,borderImageRepeat:tn,borderImageSlice:tn,borderImageSource:tn,borderImageWidth:tn}}),cn=[function(e,t,n){return":"!==e[0]?null:n(t+e)},function(e,t,n){if("@"!==e[0])return null;var r=n(t);return["".concat(e,"{").concat(r.join(""),"}")]}],sn=function e(t,n,r,o,i){for(var a=new ht,u=0;u<n.length;u++)a.addStyleType(n[u]);var l=new ht,c=[];a.forEach((function(n,a){r.some((function(u){var l=u(a,t,(function(t){return e(t,[n],r,o,i)}));if(null!=l)return Array.isArray(l)?c.push.apply(c,ot(l)):(console.warn("WARNING: Selector handlers should return an array of rules.Returning a string containing multiple rules is deprecated.",u),c.push("@media all {".concat(l,"}"))),!0}))||l.set(a,n,!0)}));var s=dn(t,l,o,i,r);return s&&c.unshift(s),c},fn=function(e,t,n){return"".concat((r=e,o=r.replace(it,at),"m"===o[0]&&"s"===o[1]&&"-"===o[2]?"-".concat(o):o),":").concat(n(e,t),";");var r,o},pn=function(e,t){return e[t]=!0,e},dn=function(e,t,n,r,o){!function(e,t,n){if(t)for(var r=Object.keys(t),o=0;o<r.length;o++){var i=r[o];e.has(i)&&e.set(i,t[i](e.get(i),n),!1)}}(t,n,o);var i=Object.keys(t.elements).reduce(pn,Object.create(null)),a=ln(t.elements),u=Object.keys(a);if(u.length!==t.keyOrder.length)for(var l=0;l<u.length;l++)if(!i[u[l]]){var c;if((c="W"===u[l][0]?u[l][6].toLowerCase()+u[l].slice(7):"o"===u[l][1]?u[l][3].toLowerCase()+u[l].slice(4):u[l][2].toLowerCase()+u[l].slice(3))&&i[c]){var s=t.keyOrder.indexOf(c);t.keyOrder.splice(s,0,u[l])}else t.keyOrder.unshift(u[l])}for(var f=!1===r?ct:st,p=[],d=0;d<t.keyOrder.length;d++){var h=t.keyOrder[d],m=a[h];if(Array.isArray(m))for(var y=0;y<m.length;y++)p.push(fn(h,m[y],f));else p.push(fn(h,m,f))}return p.length?"".concat(e,"{").concat(p.join(""),"}"):""},hn=null,mn={fontFamily:function e(t){if(Array.isArray(t)){var n={};return t.forEach((function(t){n[e(t)]=!0})),Object.keys(n).join(",")}return"object"===tt(t)?(_n(t.src,"@font-face",[t],!1),'"'.concat(t.fontFamily,'"')):t},animationName:function e(t,n){if(Array.isArray(t))return t.map((function(t){return e(t,n)})).join(",");if("object"===tt(t)){var r="keyframe_".concat((i=t,ft(JSON.stringify(i)))),o="@keyframes ".concat(r,"{");return t instanceof ht?t.forEach((function(e,t){o+=sn(t,[e],n,mn,!1).join("")})):Object.keys(t).forEach((function(e){o+=sn(e,[t[e]],n,mn,!1).join("")})),bn(r,[o+="}"]),r}return t;var i}},yn={},vn=[],gn=!1,bn=function(e,t){var n;if(!yn[e]){if(!gn){if("undefined"==typeof document)throw new Error("Cannot automatically buffer without a document");gn=!0,et()(xn)}(n=vn).push.apply(n,ot(t)),yn[e]=!0}},_n=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(!yn[e]){var i=sn(t,n,o,mn,r);bn(e,i)}},wn=function(){vn=[],yn={},gn=!1,hn=null},Sn=function(e){delete yn[e]},En=function(){gn=!1;var e=vn;return vn=[],e},xn=function(){var e=En();e.length>0&&function(e){if(null==hn&&null==(hn=document.querySelector("style[data-aphrodite]"))){var t=document.head||document.getElementsByTagName("head")[0];(hn=document.createElement("style")).type="text/css",hn.setAttribute("data-aphrodite",""),t.appendChild(hn)}var n=hn.styleSheet||hn.sheet;if(n.insertRule){var r=n.cssRules.length;e.forEach((function(e){try{n.insertRule(e,r),r+=1}catch(e){}}))}else hn.innerText=(hn.innerText||"")+e.join("")}(e)},kn=function e(t,n,r,o){for(var i=0;i<t.length;i+=1)if(t[i])if(Array.isArray(t[i]))o+=e(t[i],n,r,o);else{if(!("_definition"in(a=t[i])&&"_name"in a&&"_len"in a))throw new Error("Invalid Style Definition: Styles should be defined using the StyleSheet.create method.");n.push(t[i]._name),r.push(t[i]._definition),o+=t[i]._len}var a;return o},On=function(e,t,n){var r,o=[],i=[],a=kn(t,o,i,0);return 0===o.length?"":(r=1===o.length?"_".concat(o[0]):"_".concat(ft(o.join())).concat((a%36).toString(36)),_n(r,".".concat(r),i,e,n),r)},Tn=function(e,t){return"".concat(t,"_").concat(ft(e))},Pn=ft,Cn={create:function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r+=1){var o=n[r],i=e[o],a=JSON.stringify(i);t[o]={_len:a.length,_name:Pn(a,o),_definition:i}}return t},rehydrate:function(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).forEach((function(e){yn[e]=!0}))}},jn="undefined"!=typeof window?null:{renderStatic:function(e){return wn(),function(){if(gn)throw new Error("Cannot buffer while already buffering");gn=!0}(),{html:e(),css:{content:En().join(""),renderedClassNames:Object.keys(yn)}}}},zn=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:cn;return{StyleSheet:rt({},Cn,{extend:function(r){var o=r.map((function(e){return e.selectorHandler})).filter((function(e){return e}));return e(t,n.concat(o))}}),StyleSheetServer:jn,StyleSheetTestUtils:null,minify:function(e){Pn=e?ft:Tn},css:function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return On(t,r,n)},flushToStyleTag:xn,injectAndGetClassName:On,defaultSelectorHandlers:cn,reset:wn,resetInjectedStyle:Sn}}(!0),Mn=zn.StyleSheet,In=(zn.StyleSheetServer,zn.StyleSheetTestUtils,zn.css);function Nn(){return Nn=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Nn.apply(this,arguments)}zn.minify,zn.flushToStyleTag,zn.injectAndGetClassName,zn.defaultSelectorHandlers,zn.reset,zn.resetInjectedStyle,new Set(["application/x-www-form-urlencoded","multipart/form-data","text/plain"]);const Rn=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"];try{window.__reactRouterVersion="6"}catch(e){}new Map;const Dn=n.startTransition;function An(n){let{basename:o,children:u,future:f,window:p}=n,d=t.useRef();var h;null==d.current&&(d.current=(void 0===(h={window:p,v5Compat:!0})&&(h={}),function(t,n,o,u){void 0===u&&(u={});let{window:f=document.defaultView,v5Compat:p=!1}=u,d=f.history,h=e.Pop,m=null,y=v();function v(){return(d.state||{idx:null}).idx}function g(){h=e.Pop;let t=v(),n=null==t?null:t-y;y=t,m&&m({action:h,location:_.location,delta:n})}function b(e){let t="null"!==f.location.origin?f.location.origin:f.location.href,n="string"==typeof e?e:s(e);return n=n.replace(/ $/,"%20"),a(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==y&&(y=0,d.replaceState(r({},d.state,{idx:y}),""));let _={get action(){return h},get location(){return t(f,d)},listen(e){if(m)throw new Error("A history only accepts one active listener");return f.addEventListener(i,g),m=e,()=>{f.removeEventListener(i,g),m=null}},createHref:e=>n(f,e),createURL:b,encodeLocation(e){let t=b(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){h=e.Push;let r=c(_.location,t,n);o&&o(r,t),y=v()+1;let i=l(r,y),a=_.createHref(r);try{d.pushState(i,"",a)}catch(e){if(e instanceof DOMException&&"DataCloneError"===e.name)throw e;f.location.assign(a)}p&&m&&m({action:h,location:_.location,delta:1})},replace:function(t,n){h=e.Replace;let r=c(_.location,t,n);o&&o(r,t),y=v();let i=l(r,y),a=_.createHref(r);d.replaceState(i,"",a),p&&m&&m({action:h,location:_.location,delta:0})},go:e=>d.go(e)};return _}((function(e,t){let{pathname:n,search:r,hash:o}=e.location;return c("",{pathname:n,search:r,hash:o},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){return"string"==typeof t?t:s(t)}),null,h)));let m=d.current,[y,v]=t.useState({action:m.action,location:m.location}),{v7_startTransition:g}=f||{},b=t.useCallback((e=>{g&&Dn?Dn((()=>v(e))):v(e)}),[v,g]);return t.useLayoutEffect((()=>m.listen(b)),[m,b]),t.createElement(ie,{basename:o,children:u,location:y.location,navigationType:y.action,navigator:m,future:f})}Ye.flushSync,n.useId;const Ln="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Fn=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Bn=t.forwardRef((function(e,n){let r,{onClick:o,relative:i,reloadDocument:u,replace:l,state:c,target:f,to:p,preventScrollReset:d,unstable_viewTransition:h}=e,m=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,Rn),{basename:y}=t.useContext(B),v=!1;if("string"==typeof p&&Fn.test(p)&&(r=p,Ln))try{let e=new URL(window.location.href),t=p.startsWith("//")?new URL(e.protocol+p):new URL(p),n=T(t.pathname,y);t.origin===e.origin&&null!=n?p=n+t.search+t.hash:v=!0}catch(e){}let g=function(e,n){let{relative:r}=void 0===n?{}:n;$()||a(!1);let{basename:o,navigator:i}=t.useContext(B),{hash:u,pathname:l,search:c}=Q(e,{relative:r}),s=l;return"/"!==o&&(s="/"===l?o:z([o,l])),i.createHref({pathname:s,search:c,hash:u})}(p,{relative:i}),b=function(e,n){let{target:r,replace:o,state:i,preventScrollReset:a,relative:u,unstable_viewTransition:l}=void 0===n?{}:n,c=K(),f=H(),p=Q(e,{relative:u});return t.useCallback((t=>{if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,r)){t.preventDefault();let n=void 0!==o?o:s(f)===s(p);c(e,{replace:n,state:i,preventScrollReset:a,relative:u,unstable_viewTransition:l})}}),[f,c,p,o,i,r,e,a,u,l])}(p,{replace:l,state:c,target:f,preventScrollReset:d,relative:i,unstable_viewTransition:h});return t.createElement("a",Nn({},m,{href:r||g,onClick:v||u?o:function(e){o&&o(e),e.defaultPrevented||b(e)},ref:n,target:f}))}));var Un,Wn;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(Un||(Un={})),function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Wn||(Wn={}));var qn=o(556),$n=o.n(qn);function Hn(e){return Hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Hn(e)}function Vn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Kn(r.key),r)}}function Kn(e){var t=function(e,t){if("object"!=Hn(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Hn(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Hn(t)?t:t+""}function Qn(e,t,n){return t=Yn(t),function(e,t){if(t&&("object"==Hn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Gn()?Reflect.construct(t,n||[],Yn(e).constructor):t.apply(e,n))}function Gn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Gn=function(){return!!e})()}function Yn(e){return Yn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Yn(e)}function Xn(e,t){return Xn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Xn(e,t)}var Jn=function(e){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),Qn(this,n,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Xn(e,t)}(n,e),r=n,(o=[{key:"render",value:function(){var e=this.props,n=e.to,r=e.children,o=e.action;return t.createElement("li",{onClick:function(){return o()}},t.createElement(Bn,{className:In(Zn.link),to:n},r))}}])&&Vn(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component);Jn.proptypes={to:$n().string,children:$n().oneOfType([$n().string,$n().element,$n().func]),action:$n().func},Jn.defaultProps={to:"/",children:t.createElement(t.Fragment,null),action:function(){}};var Zn=Mn.create({link:{color:"gray",textDecoration:"none",fill:"white",stroke:"white"}});const er=Jn,tr=o.p+"f8217a7f07dbf2c77a2c3dc97b14da99.png";var nr=function(){return t.createElement("svg",{width:"25",height:"25",viewBox:"0 -0.5 21 21",version:"1.1",xmlns:"http://www.w3.org/2000/svg"},t.createElement("title",null,"search_left [#1506]"),t.createElement("g",{id:"Page-1",stroke:"none",strokeWidth:"1",fillRule:"evenodd"},t.createElement("g",{id:"Dribbble-Light-Preview",transform:"translate(-219.000000, -280.000000)"},t.createElement("g",{id:"icons",transform:"translate(56.000000, 160.000000)"},t.createElement("path",{d:"M184,138.586 L182.5153,140 L176.57545,134.343 L178.06015,132.929 L184,138.586 Z M170.35,132 C167.45515,132 165.1,129.757 165.1,127 C165.1,124.243 167.45515,122 170.35,122 C173.24485,122 175.6,124.243 175.6,127 C175.6,129.757 173.24485,132 170.35,132 L170.35,132 Z M170.35,120 C166.2907,120 163,123.134 163,127 C163,130.866 166.2907,134 170.35,134 C174.4093,134 177.7,130.866 177.7,127 C177.7,123.134 174.4093,120 170.35,120 L170.35,120 Z",id:"search_left-[#1506]"})))))},rr=function(){return t.createElement("svg",{viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25"},t.createElement("title",null,"Facebook icon"),t.createElement("path",{d:"M23.998 12c0-6.628-5.372-12-11.999-12C5.372 0 0 5.372 0 12c0 5.988 4.388 10.952 10.124 11.852v-8.384H7.078v-3.469h3.046V9.356c0-3.008 1.792-4.669 4.532-4.669 1.313 0 2.686.234 2.686.234v2.953H15.83c-1.49 0-1.955.925-1.955 1.874V12h3.328l-.532 3.469h-2.796v8.384c5.736-.9 10.124-5.864 10.124-11.853z"}))},or=function(){return t.createElement("svg",{viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25"},t.createElement("title",null,"Instagram icon"),t.createElement("path",{d:"M12 0C8.74 0 8.333.015 7.053.072 5.775.132 4.905.333 4.14.63c-.789.306-1.459.717-2.126 1.384S.935 3.35.63 4.14C.333 4.905.131 5.775.072 7.053.012 8.333 0 8.74 0 12s.015 3.667.072 4.947c.06 1.277.261 2.148.558 2.913a5.885 5.885 0 0 0 1.384 2.126A5.868 5.868 0 0 0 4.14 23.37c.766.296 1.636.499 2.913.558C8.333 23.988 8.74 24 12 24s3.667-.015 4.947-.072c1.277-.06 2.148-.262 2.913-.558a5.898 5.898 0 0 0 2.126-1.384 5.86 5.86 0 0 0 1.384-2.126c.296-.765.499-1.636.558-2.913.06-1.28.072-1.687.072-4.947s-.015-3.667-.072-4.947c-.06-1.277-.262-2.149-.558-2.913a5.89 5.89 0 0 0-1.384-2.126A5.847 5.847 0 0 0 19.86.63c-.765-.297-1.636-.499-2.913-.558C15.667.012 15.26 0 12 0zm0 2.16c3.203 0 3.585.016 4.85.071 1.17.055 1.805.249 2.227.415.562.217.96.477 1.382.896.419.42.679.819.896 1.381.164.422.36 1.057.413 2.227.057 1.266.07 1.646.07 4.85s-.015 3.585-.074 4.85c-.061 1.17-.256 1.805-.421 2.227a3.81 3.81 0 0 1-.899 1.382 3.744 3.744 0 0 1-1.38.896c-.42.164-1.065.36-2.235.413-1.274.057-1.649.07-4.859.07-3.211 0-3.586-.015-4.859-.074-1.171-.061-1.816-.256-2.236-.421a3.716 3.716 0 0 1-1.379-.899 3.644 3.644 0 0 1-.9-1.38c-.165-.42-.359-1.065-.42-2.235-.045-1.26-.061-1.649-.061-4.844 0-3.196.016-3.586.061-4.861.061-1.17.255-1.814.42-2.234.21-.57.479-.96.9-1.381.419-.419.81-.689 1.379-.898.42-.166 1.051-.361 2.221-.421 1.275-.045 1.65-.06 4.859-.06l.045.03zm0 3.678a6.162 6.162 0 1 0 0 12.324 6.162 6.162 0 1 0 0-12.324zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4zm7.846-10.405a1.441 1.441 0 0 1-2.88 0 1.44 1.44 0 0 1 2.88 0z"}))},ir=function(){return t.createElement("svg",{viewBox:"0 0 24 24",xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25"},t.createElement("title",null,"Twitter icon"),t.createElement("path",{d:"M23.954 4.569a10 10 0 0 1-2.825.775 4.958 4.958 0 0 0 2.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 0 0-8.384 4.482C7.691 8.094 4.066 6.13 1.64 3.161a4.822 4.822 0 0 0-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 0 1-2.228-.616v.061a4.923 4.923 0 0 0 3.946 4.827 4.996 4.996 0 0 1-2.212.085 4.937 4.937 0 0 0 4.604 3.417 9.868 9.868 0 0 1-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 0 0 7.557 2.209c9.054 0 13.999-7.496 13.999-13.986 0-.209 0-.42-.015-.63a9.936 9.936 0 0 0 2.46-2.548l-.047-.02z"}))},ar=function(){return t.createElement("svg",{width:"25",height:"25",viewBox:"0 0 64 64",xmlns:"http://www.w3.org/2000/svg",strokeWidth:"3",stroke:"#000000"},t.createElement("circle",{cx:"32",cy:"18.14",r:"11.14"}),t.createElement("title",null,"Profil"),t.createElement("path",{d:"M54.55,56.85A22.55,22.55,0,0,0,32,34.3h0A22.55,22.55,0,0,0,9.45,56.85Z"}))},ur=function(){return t.createElement("svg",{width:"25",height:"25",viewBox:"0 0 16 16",xmlns:"http://www.w3.org/2000/svg"},t.createElement("title",null,"Home"),t.createElement("path",{d:"M15.5 14.69h-1.25V7.78a.62.62 0 0 0-.25-.47L8.4 2.7a.65.65 0 0 0-.81 0L2 7.31a.62.62 0 0 0-.22.47v6.91H.5V7.78a1.87 1.87 0 0 1 .68-1.44l5.62-4.6a1.88 1.88 0 0 1 2.39 0l5.63 4.6a1.87 1.87 0 0 1 .68 1.44z"}),t.createElement("path",{d:"M11.05 12.11H9.8A1.72 1.72 0 0 0 8 10.49a1.72 1.72 0 0 0-1.8 1.62H5a3 3 0 0 1 3-2.87 3 3 0 0 1 3.05 2.87zm-6.1 0H6.2v2.58H4.95zm4.85 0h1.25v2.58H9.8z"}))},lr=function(){return t.createElement("svg",{width:"25",height:"25",viewBox:"0 0 64 64",id:"icons",xmlns:"http://www.w3.org/2000/svg"},t.createElement("path",{d:"M55,7H32a2,2,0,0,0-1.41.59l-26,26a2,2,0,0,0,0,2.82l23,23a2,2,0,0,0,2.82,0l26-26A2,2,0,0,0,57,32V9A2,2,0,0,0,55,7ZM53,31.17l-24,24L8.83,35l24-24H53Z"}),t.createElement("circle",{cx:"45.5",cy:"18.5",r:"3.5"}))},cr=function(){return t.createElement("svg",{id:"Capa_1",xmlns:"http://www.w3.org/2000/svg",width:"25",height:"25",viewBox:"0 0 902.86 902.86"},t.createElement("g",null,t.createElement("g",null,t.createElement("path",{d:"M671.504,577.829l110.485-432.609H902.86v-68H729.174L703.128,179.2L0,178.697l74.753,399.129h596.751V577.829z M685.766,247.188l-67.077,262.64H131.199L81.928,246.756L685.766,247.188z"}),t.createElement("path",{d:"M578.418,825.641c59.961,0,108.743-48.783,108.743-108.744s-48.782-108.742-108.743-108.742H168.717 c-59.961,0-108.744,48.781-108.744,108.742s48.782,108.744,108.744,108.744c59.962,0,108.743-48.783,108.743-108.744 c0-14.4-2.821-28.152-7.927-40.742h208.069c-5.107,12.59-7.928,26.342-7.928,40.742 C469.675,776.858,518.457,825.641,578.418,825.641z M209.46,716.897c0,22.467-18.277,40.744-40.743,40.744 c-22.466,0-40.744-18.277-40.744-40.744c0-22.465,18.277-40.742,40.744-40.742C191.183,676.155,209.46,694.432,209.46,716.897z M619.162,716.897c0,22.467-18.277,40.744-40.743,40.744s-40.743-18.277-40.743-40.744c0-22.465,18.277-40.742,40.743-40.742 S619.162,694.432,619.162,716.897z"}))))},sr="DISPLAY_CART_DRAWER",fr="HIDE_CART_DRAWER",pr=(o(92),function(){return{type:fr}});function dr(e){return dr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},dr(e)}function hr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,mr(r.key),r)}}function mr(e){var t=function(e,t){if("object"!=dr(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=dr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==dr(t)?t:t+""}function yr(e,t,n){return t=gr(t),function(e,t){if(t&&("object"==dr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,vr()?Reflect.construct(t,n||[],gr(e).constructor):t.apply(e,n))}function vr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(vr=function(){return!!e})()}function gr(e){return gr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},gr(e)}function br(e,t){return br=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},br(e,t)}var _r=function(e){function n(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),yr(this,n,[e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&br(e,t)}(n,e),r=n,(o=[{key:"render",value:function(){var e=this.props.displayCartDrawer;return t.createElement("div",{className:In(wr.header)},t.createElement("div",null,t.createElement(Bn,{to:"/"},t.createElement("img",{className:In(wr.logo),src:tr,alt:"Logo"}))),t.createElement("div",null,t.createElement("nav",null,t.createElement("ul",{className:In(wr.navBar)},t.createElement(er,{to:"/",children:t.createElement(nr,null)}),t.createElement(er,{to:"/",children:t.createElement(ur,null)}),t.createElement(er,{to:"/login",children:t.createElement(ar,null)}),t.createElement(er,{to:"/",children:t.createElement(lr,null)}),t.createElement(er,{action:e,to:"",children:t.createElement(cr,null)})))))}}])&&hr(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component),wr=Mn.create({navBar:{display:"flex",flexDirection:"row",justifyContent:"space-evenly",listStyleType:"none",textAlign:"center",width:"400px",paddingLeft:"0px",fill:"green"},header:{display:"flex",flexDirection:"row",justifyContent:"space-between",alignItems:"center",width:"100%",backgroundColor:"black",height:"90px"},logo:{height:"130px"},svg:{fill:"green"}});const Sr=Ke(null,{displayCartDrawer:function(){return{type:sr}}})(_r);function Er(e){return Er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Er(e)}function xr(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=Er(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Er(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Er(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var kr=Mn.create({footer:{textAlign:"center",fontStyle:"italic",fontSize:"1.1rem",borderTop:"solid 2px grey",margin:"0 5px",display:"block"},footerNav:xr(xr({display:"flex",flexDirection:"row",justifyContent:"flex-start",listStyleType:"none",paddingLeft:"0px",fontStyle:"normal",fontSize:"1rem"},"paddingLeft","20px"),"gap","20px"),socialNav:{listStyle:"none",display:"inline",width:"100%",gap:"10px"},sameLine:{display:"inline-block",width:"50%",height:"30px",padding:"0 50px"},liInline:{float:"right",padding:"0 1em"}});const Or=function(){var e=(new Date).getFullYear();return t.createElement("div",{className:In(kr.footer)},t.createElement("div",{className:In(kr.sameLine)},t.createElement("ul",{className:In(kr.footerNav)},t.createElement(er,{to:"/",children:"Term of use"}),t.createElement(er,{to:"/",children:"Privacy Policy"}),t.createElement(er,{to:"/",children:"Cookie Policy"}))),t.createElement("div",{className:In(kr.sameLine)},t.createElement("ul",{className:In(kr.socialNav)},t.createElement("li",{className:In(kr.liInline)},t.createElement("a",{href:"https://www.facebook.com/",target:"_blank"},t.createElement(rr,null))),t.createElement("li",{className:In(kr.liInline)},t.createElement("a",{href:"https://twitter.com/",target:"_blank"},t.createElement(ir,null))),t.createElement("li",{className:In(kr.liInline)},t.createElement("a",{href:"https://www.instagram.com/",target:"_blank"},t.createElement(or,null))))),t.createElement("div",null,t.createElement("p",null," Copyright ",e,"  - All Rights Reserved")))};var Tr=function(e){var n=e.name,r=e.description,o=e.ram;return t.createElement(t.Fragment,null,t.createElement("img",{className:In(Pr.cardImage),src:"",alt:"Computer"}),t.createElement("em",{className:In(Pr.name)},n),t.createElement("ul",{className:In(Pr.specs)},t.createElement("li",null,"description: ",r),t.createElement("li",null,"RAM: ",o)))};Tr.propTypes={name:$n().string,description:$n().string,ram:$n().oneOfType([$n().number,$n().string])};var Pr=Mn.create({cardImage:{display:"block",margin:"0 auto 10px",borderRadius:"10px",objectFit:"contain",width:"100%"},title:{fontSize:"1.1rem",fontWeight:"bold"},specs:{listStyle:"none",paddingLeft:"0"}});const Cr=Tr;function jr(e){return jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},jr(e)}function zr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Mr(r.key),r)}}function Mr(e){var t=function(e,t){if("object"!=jr(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=jr(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==jr(t)?t:t+""}function Ir(e,t,n){return t=Rr(t),function(e,t){if(t&&("object"==jr(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Nr()?Reflect.construct(t,n||[],Rr(e).constructor):t.apply(e,n))}function Nr(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Nr=function(){return!!e})()}function Rr(e){return Rr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Rr(e)}function Dr(e,t){return Dr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Dr(e,t)}$n().number.isRequired,$n().any,$n().string,$n().string,$n().number,$n().string,$n().oneOfType([$n().number,$n().string]),$n().number,$n().number,$n().string,$n().string;var Ar=function(e){function n(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),Ir(this,n,[e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Dr(e,t)}(n,e),r=n,(o=[{key:"render",value:function(){var e=this.props.listProducts;return t.createElement(t.Fragment,null,e.map((function(e){var n=e.id,r=e.name,o=e.description,i=e.ram;return t.createElement("div",{className:In(Lr.card),key:n},t.createElement(Cr,{name:r,description:o,ram:i}))})))}}])&&zr(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component),Lr=Mn.create({card:{display:"block",margin:"1rem 1rem",padding:"1rem 1rem 0",width:"calc((100% / 4) - 2rem )",border:"solid 1px grey",borderRadius:"10px"},cardImage:{display:"block",margin:"0 auto 10px",borderRadius:"10px",objectFit:"contain",width:"100%"},title:{fontSize:"1.1rem",fontWeight:"bold"},specs:{listStyle:"none",paddingLeft:"0"}});const Fr=Ar;function Br(e){return Br="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Br(e)}function Ur(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Wr(r.key),r)}}function Wr(e){var t=function(e,t){if("object"!=Br(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=Br(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Br(t)?t:t+""}function qr(e,t,n){return t=Hr(t),function(e,t){if(t&&("object"==Br(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,$r()?Reflect.construct(t,n||[],Hr(e).constructor):t.apply(e,n))}function $r(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return($r=function(){return!!e})()}function Hr(e){return Hr=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Hr(e)}function Vr(e,t){return Vr=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Vr(e,t)}var Kr=function(e){function n(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=qr(this,n,[e])).handleLoginSubmit=t.handleLoginSubmit.bind(t),t.handleChangeEmail=t.handleChangeEmail.bind(t),t.handleChangePassword=t.handleChangePassword.bind(t),t.handleSubmitState=t.handleSubmitState.bind(t),t.state={email:"",password:"",enableSubmit:!1},t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Vr(e,t)}(n,e),r=n,(o=[{key:"handleLoginSubmit",value:function(e){e.preventDefault(),this.props.logIn(this.state.email,this.state.password)}},{key:"handleSubmitState",value:function(){""!==this.state.email&&""!==this.state.password?this.setState({enableSubmit:!0}):this.setState({enableSubmit:!1})}},{key:"handleChangeEmail",value:function(e){this.setState({email:e.target.value},this.handleSubmitState)}},{key:"handleChangePassword",value:function(e){this.setState({password:e.target.value},this.handleSubmitState)}},{key:"render",value:function(){return t.createElement(t.Fragment,null,t.createElement("div",{className:In(Qr.login)},t.createElement("p",null,"Login to access full functionality:"),t.createElement("form",{className:In(Qr.login)},t.createElement("label",{htmlFor:"email"},"Email: "),t.createElement("input",{className:In(Qr.textBox),type:"email",name:"email",id:"email",onChange:this.handleChangeEmail,value:this.state.email}),t.createElement("label",{htmlFor:"password"},"Password: "),t.createElement("input",{className:In(Qr.textBox),type:"password",name:"=password",id:"password",onChange:this.handleChangePassword,value:this.state.password}),t.createElement("input",{className:In(Qr.submit),type:"submit",value:"Log In",onClick:this.handleLoginSubmit,disabled:!this.state.enableSubmit}))),t.createElement("div",null,t.createElement("p",null,"No Account yet? ",t.createElement(Bn,{to:"/signup"},"Sign Up"))))}}])&&Ur(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component),Qr=Mn.create({login:{display:"flex",flexDirection:"column",padding:"5px auto 0",alignItems:"center",gap:".8rem"},textBox:{borderRadius:"10px",height:"2rem",width:"calc(100% + 2em)"},submit:{fontSize:"1.1rem",borderRadius:"8px"}});const Gr=Kr;function Yr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,u=[],l=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Xr(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Xr(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}var Jr=Mn.create({login:{display:"flex",flexDirection:"column",padding:"5px auto 0",alignItems:"center",gap:".8rem"},textBox:{borderRadius:"10px",height:"2rem",width:"calc(100% + 2em)"},submit:{fontSize:"1.1rem",borderRadius:"8px"}});const Zr=function(){var e=Yr((0,t.useState)(""),2),n=(e[0],e[1]),r=Yr((0,t.useState)(""),2),o=(r[0],r[1]),i=Yr((0,t.useState)(""),2),a=(i[0],i[1]),u=Yr((0,t.useState)(""),2),l=(u[0],u[1]),c=Yr((0,t.useState)(""),2);return c[0],c[1],t.createElement(t.Fragment,null,t.createElement("div",{className:In(Jr.login)},t.createElement("p",null,"Create your new account"),t.createElement("form",{className:In(Jr.login)},t.createElement("label",{htmlFor:"firstt name"},"First Name: "),t.createElement("input",{className:In(Jr.textBox),type:"name",name:"firstName",id:"firstName",onChange:function(e){return n(e.target.value)}}),t.createElement("label",{htmlFor:"last name"},"Last Name: "),t.createElement("input",{className:In(Jr.textBox),type:"name",name:"lastName",id:"lastName",onChange:function(e){return o(e.target.value)}}),t.createElement("label",{htmlFor:"email"},"Email: "),t.createElement("input",{className:In(Jr.textBox),type:"email",name:"email",id:"email",onChange:function(e){return a(e.target.value)}}),t.createElement("label",{htmlFor:"email"},"Password: "),t.createElement("input",{className:In(Jr.textBox),type:"password",name:"password",id:"password",onChange:function(e){return l(e.target.value)}}),t.createElement("label",{htmlFor:"email"},"Confirm password: "),t.createElement("input",{className:In(Jr.textBox),type:"password",name:"repassword",id:"repassword",onChange:function(e){return l(e.target.value)}}),t.createElement("input",{className:In(Jr.submit),type:"submit",value:"Sign Up"}))),t.createElement("div",null,t.createElement("p",null,"Already got an account? ",t.createElement(Bn,{to:"/login"},"Log In"))))};function eo(e){return eo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},eo(e)}function to(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,no(r.key),r)}}function no(e){var t=function(e,t){if("object"!=eo(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=eo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==eo(t)?t:t+""}function ro(e,t,n){return t=io(t),function(e,t){if(t&&("object"==eo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,oo()?Reflect.construct(t,n||[],io(e).constructor):t.apply(e,n))}function oo(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(oo=function(){return!!e})()}function io(e){return io=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},io(e)}function ao(e,t){return ao=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},ao(e,t)}var uo=function(e){function n(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),ro(this,n,[e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&ao(e,t)}(n,e),r=n,o=[{key:"render",value:function(){var e=this.props.hideCartDrawer;return t.createElement(t.Fragment,null,t.createElement("div",{className:In(lo.title)},t.createElement("h2",null,"Cart")),t.createElement("button",{onClick:function(){return e()},className:In(lo.button)},t.createElement(Bn,{className:In(lo.link),to:"/cart"},"View Cart")))}}],o&&to(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component),lo=Mn.create({title:{textAlign:"center",borderBottom:"solid 2px grey",justifyContent:"center",margin:"5px"},button:{position:"absolute",bottom:"20px",borderRadius:"30px",fontWeight:"bold",backgroundColor:"dark blue",fontSize:"1.2rem",height:"40px",width:"150px",textAlign:"center",color:"white",fontStyle:"normal",left:"20px"},link:{textDecoration:"none"}});const co=Ke(null,{hideCartDrawer:pr})(uo);function so(e){return so="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},so(e)}function fo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,po(r.key),r)}}function po(e){var t=function(e,t){if("object"!=so(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=so(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==so(t)?t:t+""}function ho(e,t,n){return t=yo(t),function(e,t){if(t&&("object"==so(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,mo()?Reflect.construct(t,n||[],yo(e).constructor):t.apply(e,n))}function mo(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(mo=function(){return!!e})()}function yo(e){return yo=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},yo(e)}function vo(e,t){return vo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},vo(e,t)}var go=function(e){function n(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),ho(this,n,[e])}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&vo(e,t)}(n,e),r=n,o=[{key:"render",value:function(){return function(e){if(null==e)throw new TypeError("Cannot destructure "+e)}(this.props),t.createElement(t.Fragment,null,t.createElement("div",null,t.createElement("h1",null,"Cart")))}}],o&&fo(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component);Mn.create({});const bo=go,_o=o.p+"cd690a648fb4000e904ca1390d8f24cd.png";var wo="FETCH_PRODUCTS_SUCCESS",So="SET_LOADING_STATE",Eo=function(e){return{type:So,loadingState:e}};function xo(e){return xo="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},xo(e)}function ko(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Oo(r.key),r)}}function Oo(e){var t=function(e,t){if("object"!=xo(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=xo(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==xo(t)?t:t+""}function To(e,t,n){return t=Co(t),function(e,t){if(t&&("object"==xo(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Po()?Reflect.construct(t,n||[],Co(e).constructor):t.apply(e,n))}function Po(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){})))}catch(e){}return(Po=function(){return!!e})()}function Co(e){return Co=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Co(e)}function jo(e,t){return jo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},jo(e,t)}var zo=function(e){function n(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=To(this,n,[e])).listProducts=[{id:1,title:"Asus Rog",img:_o,proc:"core i7",memory:512,memoryType:"SSD",ram:32},{id:2,title:"Acer",img:_o,proc:"core i7",memory:1024,memoryType:"SSD",ram:8},{id:3,title:"Hp pavilion",img:_o,proc:"core i7",memory:100,memoryType:"SSD",ram:8},{id:4,title:"MacBook",img:_o,proc:"core i7",memory:1e3,memoryType:"SSD",ram:8}],t.state={isLoggedIn:!1},t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&jo(e,t)}(n,e),r=n,o=[{key:"componentDidMount",value:function(){this.props.fetchProducts(),console.log("fetching"),console.log(this.props.fetchProducts())}},{key:"render",value:function(){var e=this.props,n=e.displayDrawer,r=e.hideCartDrawer,o=e.listProducts;return t.createElement("div",{className:In(Mo.app)},t.createElement(Sr,null),n&&t.createElement("div",{className:In(Mo.cart)},t.createElement(co,null)),t.createElement("div",{className:In(Mo.body),onClick:n?function(){return r()}:function(){}},t.createElement(ae,null,t.createElement(oe,{path:"/",element:t.createElement("div",{className:In(Mo.card)},t.createElement(Fr,{listProducts:o}))}),t.createElement(oe,{path:"/login",element:t.createElement(Gr,null)}),t.createElement(oe,{path:"/signup",element:t.createElement(Zr,null)}),t.createElement(oe,{path:"/cart",element:t.createElement(bo,null)}))),t.createElement(Or,null))}}],o&&ko(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(t.Component),Mo=Mn.create({app:{fontFamily:"Open Sans, Helvetica Neue, Helvetica, Arial, sans-serif",height:"400vh"},card:{display:"flex",flexDirection:"row",justifyContent:"space-around",flexWrap:"wrap",width:"100%",padding:"20px 40px"},cart:{position:"fixed",top:"0px",height:"100vh",width:"400px",borderTopLeftRadius:"20px",borderBottomLeftRadius:"20px",backgroundColor:"white",right:"0px",border:"dashed 1px grey"},body:{padding:"0 40px"}});const Io=Ke((function(e){return{displayDrawer:e.ui.get("isCartDrawerVisible"),listProducts:e.products.get("products")}}),{hideCartDrawer:pr,fetchProducts:function(){return function(e){return e(Eo(!0)),fetch("http://localhost:5000/api/products").then((function(e){return e.json()})).then((function(t){return e({type:wo,products:t})})).catch((function(e){return console.log(e)})).finally((function(){return e(Eo(!1))}))}}})(zo);function No(e){return No="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},No(e)}function Ro(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=No(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!=No(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==No(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Do(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Ao(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Do(Object(n),!0).forEach((function(t){Ro(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Do(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Lo(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var Fo="function"==typeof Symbol&&Symbol.observable||"@@observable",Bo=function(){return Math.random().toString(36).substring(7).split("").join(".")},Uo={INIT:"@@redux/INIT"+Bo(),REPLACE:"@@redux/REPLACE"+Bo(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+Bo()}};function Wo(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function qo(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}var $o=qo();$o.withExtraArgument=qo;const Ho=$o;var Vo="delete",Ko=5,Qo=1<<Ko,Go=Qo-1,Yo={};function Xo(e){e&&(e.value=!0)}function Jo(){}function Zo(e){return void 0===e.size&&(e.size=e.__iterate(ti)),e.size}function ei(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?Zo(e)+t:t}function ti(){return!0}function ni(e,t,n){return(0===e&&!ai(e)||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function ri(e,t){return ii(e,t,0)}function oi(e,t){return ii(e,t,t)}function ii(e,t,n){return void 0===e?n:ai(e)?t===1/0?t:0|Math.max(0,t+e):void 0===t||t===e?e:0|Math.min(t,e)}function ai(e){return e<0||0===e&&1/e==-1/0}var ui="@@__IMMUTABLE_ITERABLE__@@";function li(e){return Boolean(e&&e[ui])}var ci="@@__IMMUTABLE_KEYED__@@";function si(e){return Boolean(e&&e[ci])}var fi="@@__IMMUTABLE_INDEXED__@@";function pi(e){return Boolean(e&&e[fi])}function di(e){return si(e)||pi(e)}var hi=function(e){return li(e)?e:Bi(e)},mi=function(e){function t(e){return si(e)?e:Ui(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi),yi=function(e){function t(e){return pi(e)?e:Wi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi),vi=function(e){function t(e){return li(e)&&!di(e)?e:qi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(hi);hi.Keyed=mi,hi.Indexed=yi,hi.Set=vi;var gi="@@__IMMUTABLE_SEQ__@@";function bi(e){return Boolean(e&&e[gi])}var _i="@@__IMMUTABLE_RECORD__@@";function wi(e){return Boolean(e&&e[_i])}function Si(e){return li(e)||wi(e)}var Ei="@@__IMMUTABLE_ORDERED__@@";function xi(e){return Boolean(e&&e[Ei])}var ki=0,Oi=1,Ti=2,Pi="function"==typeof Symbol&&Symbol.iterator,Ci="@@iterator",ji=Pi||Ci,zi=function(e){this.next=e};function Mi(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function Ii(){return{value:void 0,done:!0}}function Ni(e){return!!Array.isArray(e)||!!Ai(e)}function Ri(e){return e&&"function"==typeof e.next}function Di(e){var t=Ai(e);return t&&t.call(e)}function Ai(e){var t=e&&(Pi&&e[Pi]||e[Ci]);if("function"==typeof t)return t}zi.prototype.toString=function(){return"[Iterator]"},zi.KEYS=ki,zi.VALUES=Oi,zi.ENTRIES=Ti,zi.prototype.inspect=zi.prototype.toSource=function(){return this.toString()},zi.prototype[ji]=function(){return this};var Li=Object.prototype.hasOwnProperty;function Fi(e){return!(!Array.isArray(e)&&"string"!=typeof e)||e&&"object"==typeof e&&Number.isInteger(e.length)&&e.length>=0&&(0===e.length?1===Object.keys(e).length:e.hasOwnProperty(e.length-1))}var Bi=function(e){function t(e){return null==e?Qi():Si(e)?e.toSeq():function(e){var t,n,r=Xi(e);if(r)return(n=Ai(t=e))&&n===t.entries?r.fromEntrySeq():function(e){var t=Ai(e);return t&&t===e.keys}(e)?r.toSetSeq():r;if("object"==typeof e)return new Hi(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(e,t){var n=this._cache;if(n){for(var r=n.length,o=0;o!==r;){var i=n[t?r-++o:o++];if(!1===e(i[1],i[0],this))break}return o}return this.__iterateUncached(e,t)},t.prototype.__iterator=function(e,t){var n=this._cache;if(n){var r=n.length,o=0;return new zi((function(){if(o===r)return{value:void 0,done:!0};var i=n[t?r-++o:o++];return Mi(e,i[0],i[1])}))}return this.__iteratorUncached(e,t)},t}(hi),Ui=function(e){function t(e){return null==e?Qi().toKeyedSeq():li(e)?si(e)?e.toSeq():e.fromEntrySeq():wi(e)?e.toSeq():Gi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(Bi),Wi=function(e){function t(e){return null==e?Qi():li(e)?si(e)?e.entrySeq():e.toIndexedSeq():wi(e)?e.toSeq().entrySeq():Yi(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(Bi),qi=function(e){function t(e){return(li(e)&&!di(e)?e:Wi(e)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(Bi);Bi.isSeq=bi,Bi.Keyed=Ui,Bi.Set=qi,Bi.Indexed=Wi,Bi.prototype[gi]=!0;var $i=function(e){function t(e){this._array=e,this.size=e.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this.has(e)?this._array[ei(this,e)]:t},t.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length,o=0;o!==r;){var i=t?r-++o:o++;if(!1===e(n[i],i,this))break}return o},t.prototype.__iterator=function(e,t){var n=this._array,r=n.length,o=0;return new zi((function(){if(o===r)return{value:void 0,done:!0};var i=t?r-++o:o++;return Mi(e,i,n[i])}))},t}(Wi),Hi=function(e){function t(e){var t=Object.keys(e).concat(Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]);this._object=e,this._keys=t,this.size=t.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},t.prototype.has=function(e){return Li.call(this._object,e)},t.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length,i=0;i!==o;){var a=r[t?o-++i:i++];if(!1===e(n[a],a,this))break}return i},t.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length,i=0;return new zi((function(){if(i===o)return{value:void 0,done:!0};var a=r[t?o-++i:i++];return Mi(e,a,n[a])}))},t}(Ui);Hi.prototype[Ei]=!0;var Vi,Ki=function(e){function t(e){this._collection=e,this.size=e.length||e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=Di(this._collection),r=0;if(Ri(n))for(var o;!(o=n.next()).done&&!1!==e(o.value,r++,this););return r},t.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=Di(this._collection);if(!Ri(n))return new zi(Ii);var r=0;return new zi((function(){var t=n.next();return t.done?t:Mi(e,r++,t.value)}))},t}(Wi);function Qi(){return Vi||(Vi=new $i([]))}function Gi(e){var t=Xi(e);if(t)return t.fromEntrySeq();if("object"==typeof e)return new Hi(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function Yi(e){var t=Xi(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function Xi(e){return Fi(e)?new $i(e):Ni(e)?new Ki(e):void 0}var Ji="@@__IMMUTABLE_MAP__@@";function Zi(e){return Boolean(e&&e[Ji])}function ea(e){return Zi(e)&&xi(e)}function ta(e){return Boolean(e&&"function"==typeof e.equals&&"function"==typeof e.hashCode)}function na(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!!(ta(e)&&ta(t)&&e.equals(t))}var ra="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function oa(e){return e>>>1&1073741824|3221225471&e}var ia=Object.prototype.valueOf;function aa(e){if(null==e)return ua(e);if("function"==typeof e.hashCode)return oa(e.hashCode(e));var t,n,r,o=(t=e).valueOf!==ia&&"function"==typeof t.valueOf?t.valueOf(t):t;if(null==o)return ua(o);switch(typeof o){case"boolean":return o?1108378657:1108378656;case"number":return function(e){if(e!=e||e===1/0)return 0;var t=0|e;for(t!==e&&(t^=4294967295*e);e>4294967295;)t^=e/=4294967295;return oa(t)}(o);case"string":return o.length>va?(void 0===(r=_a[n=o])&&(r=la(n),ba===ga&&(ba=0,_a={}),ba++,_a[n]=r),r):la(o);case"object":case"function":return function(e){var t;if(da&&void 0!==(t=pa.get(e)))return t;if(void 0!==(t=e[ya]))return t;if(!sa){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[ya]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=fa(),da)pa.set(e,t);else{if(void 0!==ca&&!1===ca(e))throw new Error("Non-extensible objects are not allowed as keys.");if(sa)Object.defineProperty(e,ya,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[ya]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[ya]=t}}return t}(o);case"symbol":return function(e){var t=ha[e];return void 0!==t||(t=fa(),ha[e]=t),t}(o);default:if("function"==typeof o.toString)return la(o.toString());throw new Error("Value type "+typeof o+" cannot be hashed.")}}function ua(e){return null===e?1108378658:1108378659}function la(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return oa(t)}var ca=Object.isExtensible,sa=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}();function fa(){var e=++ma;return 1073741824&ma&&(ma=0),e}var pa,da="function"==typeof WeakMap;da&&(pa=new WeakMap);var ha=Object.create(null),ma=0,ya="__immutablehash__";"function"==typeof Symbol&&(ya=Symbol(ya));var va=16,ga=255,ba=0,_a={},wa=function(e){function t(e,t){this._iter=e,this._useKeys=t,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this._iter.get(e,t)},t.prototype.has=function(e){return this._iter.has(e)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var e=this,t=Ta(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},t.prototype.map=function(e,t){var n=this,r=Oa(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t,r){return e(t,r,n)}),t)},t.prototype.__iterator=function(e,t){return this._iter.__iterator(e,t)},t}(Ui);wa.prototype[Ei]=!0;var Sa=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this,r=0;return t&&Zo(this),this._iter.__iterate((function(o){return e(o,t?n.size-++r:r++,n)}),t)},t.prototype.__iterator=function(e,t){var n=this,r=this._iter.__iterator(Oi,t),o=0;return t&&Zo(this),new zi((function(){var i=r.next();return i.done?i:Mi(e,t?n.size-++o:o++,i.value,i)}))},t}(Wi),Ea=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(Oi,t);return new zi((function(){var t=n.next();return t.done?t:Mi(e,t.value,t.value,t)}))},t}(qi),xa=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate((function(t){if(t){Aa(t);var r=li(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}}),t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(Oi,t);return new zi((function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){Aa(r);var o=li(r);return Mi(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}}))},t}(Ui);function ka(e){var t=Fa(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=Ba,t.__iterateUncached=function(t,n){var r=this;return e.__iterate((function(e,n){return!1!==t(n,e,r)}),n)},t.__iteratorUncached=function(t,n){if(t===Ti){var r=e.__iterator(t,n);return new zi((function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e}))}return e.__iterator(t===Oi?ki:Oi,n)},t}function Oa(e,t,n){var r=Fa(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var i=e.get(r,Yo);return i===Yo?o:t.call(n,i,r,e)},r.__iterateUncached=function(r,o){var i=this;return e.__iterate((function(e,o,a){return!1!==r(t.call(n,e,o,a),o,i)}),o)},r.__iteratorUncached=function(r,o){var i=e.__iterator(Ti,o);return new zi((function(){var o=i.next();if(o.done)return o;var a=o.value,u=a[0];return Mi(r,u,t.call(n,a[1],u,e),o)}))},r}function Ta(e,t){var n=this,r=Fa(e);return r._iter=e,r.size=e.size,r.reverse=function(){return e},e.flip&&(r.flip=function(){var t=ka(e);return t.reverse=function(){return e.flip()},t}),r.get=function(n,r){return e.get(t?n:-1-n,r)},r.has=function(n){return e.has(t?n:-1-n)},r.includes=function(t){return e.includes(t)},r.cacheResult=Ba,r.__iterate=function(n,r){var o=this,i=0;return r&&Zo(e),e.__iterate((function(e,a){return n(e,t?a:r?o.size-++i:i++,o)}),!r)},r.__iterator=function(r,o){var i=0;o&&Zo(e);var a=e.__iterator(Ti,!o);return new zi((function(){var e=a.next();if(e.done)return e;var u=e.value;return Mi(r,t?u[0]:o?n.size-++i:i++,u[1],e)}))},r}function Pa(e,t,n,r){var o=Fa(e);return r&&(o.has=function(r){var o=e.get(r,Yo);return o!==Yo&&!!t.call(n,o,r,e)},o.get=function(r,o){var i=e.get(r,Yo);return i!==Yo&&t.call(n,i,r,e)?i:o}),o.__iterateUncached=function(o,i){var a=this,u=0;return e.__iterate((function(e,i,l){if(t.call(n,e,i,l))return u++,o(e,r?i:u-1,a)}),i),u},o.__iteratorUncached=function(o,i){var a=e.__iterator(Ti,i),u=0;return new zi((function(){for(;;){var i=a.next();if(i.done)return i;var l=i.value,c=l[0],s=l[1];if(t.call(n,s,c,e))return Mi(o,r?c:u++,s,i)}}))},o}function Ca(e,t,n,r){var o=e.size;if(ni(t,n,o))return e;var i=ri(t,o),a=oi(n,o);if(i!=i||a!=a)return Ca(e.toSeq().cacheResult(),t,n,r);var u,l=a-i;l==l&&(u=l<0?0:l);var c=Fa(e);return c.size=0===u?u:e.size&&u||void 0,!r&&bi(e)&&u>=0&&(c.get=function(t,n){return(t=ei(this,t))>=0&&t<u?e.get(t+i,n):n}),c.__iterateUncached=function(t,n){var o=this;if(0===u)return 0;if(n)return this.cacheResult().__iterate(t,n);var a=0,l=!0,c=0;return e.__iterate((function(e,n){if(!l||!(l=a++<i))return c++,!1!==t(e,r?n:c-1,o)&&c!==u})),c},c.__iteratorUncached=function(t,n){if(0!==u&&n)return this.cacheResult().__iterator(t,n);if(0===u)return new zi(Ii);var o=e.__iterator(t,n),a=0,l=0;return new zi((function(){for(;a++<i;)o.next();if(++l>u)return{value:void 0,done:!0};var e=o.next();return r||t===Oi||e.done?e:Mi(t,l-1,t===ki?void 0:e.value[1],e)}))},c}function ja(e,t,n,r){var o=Fa(e);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var u=!0,l=0;return e.__iterate((function(e,i,c){if(!u||!(u=t.call(n,e,i,c)))return l++,o(e,r?i:l-1,a)})),l},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var u=e.__iterator(Ti,i),l=!0,c=0;return new zi((function(){var e,i,s;do{if((e=u.next()).done)return r||o===Oi?e:Mi(o,c++,o===ki?void 0:e.value[1],e);var f=e.value;i=f[0],s=f[1],l&&(l=t.call(n,s,i,a))}while(l);return o===Ti?e:Mi(o,i,s,e)}))},o}function za(e,t,n){var r=Fa(e);return r.__iterateUncached=function(o,i){if(i)return this.cacheResult().__iterate(o,i);var a=0,u=!1;return function e(l,c){l.__iterate((function(i,l){return(!t||c<t)&&li(i)?e(i,c+1):(a++,!1===o(i,n?l:a-1,r)&&(u=!0)),!u}),i)}(e,0),a},r.__iteratorUncached=function(r,o){if(o)return this.cacheResult().__iterator(r,o);var i=e.__iterator(r,o),a=[],u=0;return new zi((function(){for(;i;){var e=i.next();if(!1===e.done){var l=e.value;if(r===Ti&&(l=l[1]),t&&!(a.length<t)||!li(l))return n?e:Mi(r,u++,l,e);a.push(i),i=l.__iterator(r,o)}else i=a.pop()}return{value:void 0,done:!0}}))},r}function Ma(e,t,n){t||(t=Ua);var r=si(e),o=0,i=e.toSeq().map((function(t,r){return[r,t,o++,n?n(t,r,e):t]})).valueSeq().toArray();return i.sort((function(e,n){return t(e[3],n[3])||e[2]-n[2]})).forEach(r?function(e,t){i[t].length=2}:function(e,t){i[t]=e[1]}),r?Ui(i):pi(e)?Wi(i):qi(i)}function Ia(e,t,n){if(t||(t=Ua),n){var r=e.toSeq().map((function(t,r){return[t,n(t,r,e)]})).reduce((function(e,n){return Na(t,e[1],n[1])?n:e}));return r&&r[0]}return e.reduce((function(e,n){return Na(t,e,n)?n:e}))}function Na(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function Ra(e,t,n,r){var o=Fa(e),i=new $i(n).map((function(e){return e.size}));return o.size=r?i.max():i.min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(Oi,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var i=n.map((function(e){return e=hi(e),Di(o?e.reverse():e)})),a=0,u=!1;return new zi((function(){var n;return u||(n=i.map((function(e){return e.next()})),u=r?n.every((function(e){return e.done})):n.some((function(e){return e.done}))),u?{value:void 0,done:!0}:Mi(e,a++,t.apply(null,n.map((function(e){return e.value}))))}))},o}function Da(e,t){return e===t?e:bi(e)?t:e.constructor(t)}function Aa(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function La(e){return si(e)?mi:pi(e)?yi:vi}function Fa(e){return Object.create((si(e)?Ui:pi(e)?Wi:qi).prototype)}function Ba(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):Bi.prototype.cacheResult.call(this)}function Ua(e,t){return void 0===e&&void 0===t?0:void 0===e?1:void 0===t?-1:e>t?1:e<t?-1:0}function Wa(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function qa(e,t){if(!e)throw new Error(t)}function $a(e){qa(e!==1/0,"Cannot perform this action with an infinite size.")}function Ha(e){if(Fi(e)&&"string"!=typeof e)return e;if(xi(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}Sa.prototype.cacheResult=wa.prototype.cacheResult=Ea.prototype.cacheResult=xa.prototype.cacheResult=Ba;var Va=Object.prototype.toString;function Ka(e){return"object"==typeof e&&(Si(e)||Array.isArray(e)||function(e){if(!e||"object"!=typeof e||"[object Object]"!==Va.call(e))return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t,r=Object.getPrototypeOf(t);null!==r;)n=r,r=Object.getPrototypeOf(n);return n===t}(e))}function Qa(e){try{return"string"==typeof e?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function Ga(e,t,n){return Si(e)?e.get(t,n):function(e,t){return Si(e)?e.has(t):Ka(e)&&Li.call(e,t)}(e,t)?"function"==typeof e.get?e.get(t):e[t]:n}function Ya(e){if(Array.isArray(e))return Wa(e);var t={};for(var n in e)Li.call(e,n)&&(t[n]=e[n]);return t}function Xa(e,t,n,r){r||(r=n,n=void 0);var o=Ja(Si(e),e,Ha(t),0,n,r);return o===Yo?n:o}function Ja(e,t,n,r,o,i){var a=t===Yo;if(r===n.length){var u=a?o:t,l=i(u);return l===u?t:l}if(!a&&!Ka(t))throw new TypeError("Cannot update within non-data-structure value in path ["+n.slice(0,r).map(Qa)+"]: "+t);var c=n[r],s=a?Yo:Ga(t,c,Yo),f=Ja(s===Yo?e:Si(s),s,n,r+1,o,i);return f===s?t:f===Yo?function(e,t){if(!Ka(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Si(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!Li.call(e,t))return e;var n=Ya(e);return Array.isArray(n)?n.splice(t,1):delete n[t],n}(t,c):function(e,t,n){if(!Ka(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(Si(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,n)}if(Li.call(e,t)&&n===e[t])return e;var r=Ya(e);return r[t]=n,r}(a?e?Cu():{}:t,c,f)}function Za(e,t){return function(e,t,n){return Xa(e,t,Yo,(function(){return n}))}(this,e,t)}function eu(e){return function(e,t){return Xa(e,t,(function(){return Yo}))}(this,e)}function tu(e,t,n,r){return Xa(e,[t],n,r)}function nu(e,t,n){return 1===arguments.length?e(this):tu(this,e,t,n)}function ru(e,t,n){return Xa(this,e,t,n)}function ou(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return au(this,e)}function iu(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if("function"!=typeof e)throw new TypeError("Invalid merger function: "+e);return au(this,t,e)}function au(e,t,n){for(var r=[],o=0;o<t.length;o++){var i=mi(t[o]);0!==i.size&&r.push(i)}return 0===r.length?e:0!==e.toSeq().size||e.__ownerID||1!==r.length?e.withMutations((function(e){for(var t=n?function(t,r){tu(e,r,Yo,(function(e){return e===Yo?t:n(e,t,r)}))}:function(t,n){e.set(n,t)},o=0;o<r.length;o++)r[o].forEach(t)})):e.constructor(r[0])}function uu(e,t,n){return lu(e,t,function(e){return function t(n,r,o){return Ka(n)&&Ka(r)&&(i=r,a=Bi(n),u=Bi(i),pi(a)===pi(u)&&si(a)===si(u))?lu(n,[r],t):e?e(n,r,o):r;var i,a,u}}(n))}function lu(e,t,n){if(!Ka(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if(Si(e))return"function"==typeof n&&e.mergeWith?e.mergeWith.apply(e,[n].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var r=Array.isArray(e),o=e,i=r?yi:mi,a=r?function(t){o===e&&(o=Ya(o)),o.push(t)}:function(t,r){var i=Li.call(o,r),a=i&&n?n(o[r],t,r):t;i&&a===o[r]||(o===e&&(o=Ya(o)),o[r]=a)},u=0;u<t.length;u++)i(t[u]).forEach(a);return o}function cu(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return uu(this,e)}function su(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return uu(this,t,e)}function fu(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return Xa(this,e,Cu(),(function(e){return lu(e,t)}))}function pu(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return Xa(this,e,Cu(),(function(e){return uu(e,t)}))}function du(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function hu(){return this.__ownerID?this:this.__ensureOwner(new Jo)}function mu(){return this.__ensureOwner()}function yu(){return this.__altered}var vu=function(e){function t(t){return null==t?Cu():Zi(t)&&!xi(t)?t:Cu().withMutations((function(n){var r=e(t);$a(r.size),r.forEach((function(e,t){return n.set(t,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Cu().withMutations((function(t){for(var n=0;n<e.length;n+=2){if(n+1>=e.length)throw new Error("Missing value for key: "+e[n]);t.set(e[n],e[n+1])}}))},t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},t.prototype.set=function(e,t){return ju(this,e,t)},t.prototype.remove=function(e){return ju(this,e,Yo)},t.prototype.deleteAll=function(e){var t=hi(e);return 0===t.size?this:this.withMutations((function(e){t.forEach((function(t){return e.remove(t)}))}))},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):Cu()},t.prototype.sort=function(e){return tl(Ma(this,e))},t.prototype.sortBy=function(e,t){return tl(Ma(this,t,e))},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){r.forEach((function(o,i){r.set(i,e.call(t,o,i,n))}))}))},t.prototype.__iterator=function(e,t){return new ku(this,e,t)},t.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate((function(t){return r++,e(t[1],t[0],n)}),t),r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Pu(this.size,this._root,e,this.__hash):0===this.size?Cu():(this.__ownerID=e,this.__altered=!1,this)},t}(mi);vu.isMap=Zi;var gu=vu.prototype;gu[Ji]=!0,gu[Vo]=gu.remove,gu.removeAll=gu.deleteAll,gu.setIn=Za,gu.removeIn=gu.deleteIn=eu,gu.update=nu,gu.updateIn=ru,gu.merge=gu.concat=ou,gu.mergeWith=iu,gu.mergeDeep=cu,gu.mergeDeepWith=su,gu.mergeIn=fu,gu.mergeDeepIn=pu,gu.withMutations=du,gu.wasAltered=yu,gu.asImmutable=mu,gu["@@transducer/init"]=gu.asMutable=hu,gu["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])},gu["@@transducer/result"]=function(e){return e.asImmutable()};var bu=function(e,t){this.ownerID=e,this.entries=t};bu.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(na(n,o[i][0]))return o[i][1];return r},bu.prototype.update=function(e,t,n,r,o,i,a){for(var u=o===Yo,l=this.entries,c=0,s=l.length;c<s&&!na(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===o:u)return this;if(Xo(a),(u||!f)&&Xo(i),!u||1!==l.length){if(!f&&!u&&l.length>=Du)return function(e,t,n,r){e||(e=new Jo);for(var o=new Eu(e,aa(n),[n,r]),i=0;i<t.length;i++){var a=t[i];o=o.update(e,0,void 0,a[0],a[1])}return o}(e,l,r,o);var p=e&&e===this.ownerID,d=p?l:Wa(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new bu(e,d)}};var _u=function(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n};_u.prototype.get=function(e,t,n,r){void 0===t&&(t=aa(n));var o=1<<((0===e?t:t>>>e)&Go),i=this.bitmap;return i&o?this.nodes[Nu(i&o-1)].get(e+Ko,t,n,r):r},_u.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=aa(r));var u=(0===t?n:n>>>t)&Go,l=1<<u,c=this.bitmap,s=!!(c&l);if(!s&&o===Yo)return this;var f=Nu(c&l-1),p=this.nodes,d=s?p[f]:void 0,h=zu(d,e,t+Ko,n,r,o,i,a);if(h===d)return this;if(!s&&h&&p.length>=Au)return function(e,t,n,r,o){for(var i=0,a=new Array(Qo),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[i++]:void 0;return a[r]=o,new wu(e,i+1,a)}(e,p,c,u,h);if(s&&!h&&2===p.length&&Mu(p[1^f]))return p[1^f];if(s&&h&&1===p.length&&Mu(h))return h;var m=e&&e===this.ownerID,y=s?h?c:c^l:c|l,v=s?h?Ru(p,f,h,m):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),i=0,a=0;a<r;a++)a===t&&(i=1),o[a]=e[a+i];return o}(p,f,m):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var i=new Array(o),a=0,u=0;u<o;u++)u===t?(i[u]=n,a=-1):i[u]=e[u+a];return i}(p,f,h,m);return m?(this.bitmap=y,this.nodes=v,this):new _u(e,y,v)};var wu=function(e,t,n){this.ownerID=e,this.count=t,this.nodes=n};wu.prototype.get=function(e,t,n,r){void 0===t&&(t=aa(n));var o=(0===e?t:t>>>e)&Go,i=this.nodes[o];return i?i.get(e+Ko,t,n,r):r},wu.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=aa(r));var u=(0===t?n:n>>>t)&Go,l=o===Yo,c=this.nodes,s=c[u];if(l&&!s)return this;var f=zu(s,e,t+Ko,n,r,o,i,a);if(f===s)return this;var p=this.count;if(s){if(!f&&--p<Lu)return function(e,t,n,r){for(var o=0,i=0,a=new Array(n),u=0,l=1,c=t.length;u<c;u++,l<<=1){var s=t[u];void 0!==s&&u!==r&&(o|=l,a[i++]=s)}return new _u(e,o,a)}(e,c,p,u)}else p++;var d=e&&e===this.ownerID,h=Ru(c,u,f,d);return d?(this.count=p,this.nodes=h,this):new wu(e,p,h)};var Su=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n};Su.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(na(n,o[i][0]))return o[i][1];return r},Su.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=aa(r));var u=o===Yo;if(n!==this.keyHash)return u?this:(Xo(a),Xo(i),Iu(this,e,t,n,[r,o]));for(var l=this.entries,c=0,s=l.length;c<s&&!na(r,l[c][0]);c++);var f=c<s;if(f?l[c][1]===o:u)return this;if(Xo(a),(u||!f)&&Xo(i),u&&2===s)return new Eu(e,this.keyHash,l[1^c]);var p=e&&e===this.ownerID,d=p?l:Wa(l);return f?u?c===s-1?d.pop():d[c]=d.pop():d[c]=[r,o]:d.push([r,o]),p?(this.entries=d,this):new Su(e,this.keyHash,d)};var Eu=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n};Eu.prototype.get=function(e,t,n,r){return na(n,this.entry[0])?this.entry[1]:r},Eu.prototype.update=function(e,t,n,r,o,i,a){var u=o===Yo,l=na(r,this.entry[0]);return(l?o===this.entry[1]:u)?this:(Xo(a),u?void Xo(i):l?e&&e===this.ownerID?(this.entry[1]=o,this):new Eu(e,this.keyHash,[r,o]):(Xo(i),Iu(this,e,t,aa(r),[r,o])))},bu.prototype.iterate=Su.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},_u.prototype.iterate=wu.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[t?o-r:r];if(i&&!1===i.iterate(e,t))return!1}},Eu.prototype.iterate=function(e,t){return e(this.entry)};var xu,ku=function(e){function t(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&Tu(e._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n=t.node,r=t.index++,o=void 0;if(n.entry){if(0===r)return Ou(e,n.entry)}else if(n.entries){if(r<=(o=n.entries.length-1))return Ou(e,n.entries[this._reverse?o-r:r])}else if(r<=(o=n.nodes.length-1)){var i=n.nodes[this._reverse?o-r:r];if(i){if(i.entry)return Ou(e,i.entry);t=this._stack=Tu(i,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}},t}(zi);function Ou(e,t){return Mi(e,t[0],t[1])}function Tu(e,t){return{node:e,index:0,__prev:t}}function Pu(e,t,n,r){var o=Object.create(gu);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Cu(){return xu||(xu=Pu(0))}function ju(e,t,n){var r,o;if(e._root){var i={value:!1},a={value:!1};if(r=zu(e._root,e.__ownerID,0,void 0,t,n,i,a),!a.value)return e;o=e.size+(i.value?n===Yo?-1:1:0)}else{if(n===Yo)return e;o=1,r=new bu(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?Pu(o,r):Cu()}function zu(e,t,n,r,o,i,a,u){return e?e.update(t,n,r,o,i,a,u):i===Yo?e:(Xo(u),Xo(a),new Eu(t,r,[o,i]))}function Mu(e){return e.constructor===Eu||e.constructor===Su}function Iu(e,t,n,r,o){if(e.keyHash===r)return new Su(t,r,[e.entry,o]);var i,a=(0===n?e.keyHash:e.keyHash>>>n)&Go,u=(0===n?r:r>>>n)&Go,l=a===u?[Iu(e,t,n+Ko,r,o)]:(i=new Eu(t,r,o),a<u?[e,i]:[i,e]);return new _u(t,1<<a|1<<u,l)}function Nu(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}function Ru(e,t,n,r){var o=r?e:Wa(e);return o[t]=n,o}var Du=Qo/4,Au=Qo/2,Lu=Qo/4,Fu="@@__IMMUTABLE_LIST__@@";function Bu(e){return Boolean(e&&e[Fu])}var Uu=function(e){function t(t){var n=Qu();if(null==t)return n;if(Bu(t))return t;var r=e(t),o=r.size;return 0===o?n:($a(o),o>0&&o<Qo?Ku(0,o,Ko,null,new qu(r.toArray())):n.withMutations((function(e){e.setSize(o),r.forEach((function(t,n){return e.set(n,t)}))})))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(e,t){if((e=ei(this,e))>=0&&e<this.size){var n=Xu(this,e+=this._origin);return n&&n.array[e&Go]}return t},t.prototype.set=function(e,t){return function(e,t,n){if((t=ei(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations((function(e){t<0?Ju(e,t).set(0,n):Ju(e,0,t+1).set(t,n)}));t+=e._origin;var r=e._tail,o=e._root,i={value:!1};return t>=Zu(e._capacity)?r=Gu(r,e.__ownerID,0,t,n,i):o=Gu(o,e.__ownerID,e._level,t,n,i),i.value?e.__ownerID?(e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e):Ku(e._origin,e._capacity,e._level,o,r):e}(this,e,t)},t.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},t.prototype.insert=function(e,t){return this.splice(e,0,t)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=Ko,this._root=this._tail=this.__hash=void 0,this.__altered=!0,this):Qu()},t.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations((function(n){Ju(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])}))},t.prototype.pop=function(){return Ju(this,0,-1)},t.prototype.unshift=function(){var e=arguments;return this.withMutations((function(t){Ju(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])}))},t.prototype.shift=function(){return Ju(this,1)},t.prototype.concat=function(){for(var t=arguments,n=[],r=0;r<arguments.length;r++){var o=t[r],i=e("string"!=typeof o&&Ni(o)?o:[o]);0!==i.size&&n.push(i)}return 0===n.length?this:0!==this.size||this.__ownerID||1!==n.length?this.withMutations((function(e){n.forEach((function(t){return t.forEach((function(t){return e.push(t)}))}))})):this.constructor(n[0])},t.prototype.setSize=function(e){return Ju(this,0,e)},t.prototype.map=function(e,t){var n=this;return this.withMutations((function(r){for(var o=0;o<n.size;o++)r.set(o,e.call(t,r.get(o),o,n))}))},t.prototype.slice=function(e,t){var n=this.size;return ni(e,t,n)?this:Ju(this,ri(e,n),oi(t,n))},t.prototype.__iterator=function(e,t){var n=t?this.size:0,r=Vu(this,t);return new zi((function(){var o=r();return o===Hu?{value:void 0,done:!0}:Mi(e,t?--n:n++,o)}))},t.prototype.__iterate=function(e,t){for(var n,r=t?this.size:0,o=Vu(this,t);(n=o())!==Hu&&!1!==e(n,t?--r:r++,this););return r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Ku(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):0===this.size?Qu():(this.__ownerID=e,this.__altered=!1,this)},t}(yi);Uu.isList=Bu;var Wu=Uu.prototype;Wu[Fu]=!0,Wu[Vo]=Wu.remove,Wu.merge=Wu.concat,Wu.setIn=Za,Wu.deleteIn=Wu.removeIn=eu,Wu.update=nu,Wu.updateIn=ru,Wu.mergeIn=fu,Wu.mergeDeepIn=pu,Wu.withMutations=du,Wu.wasAltered=yu,Wu.asImmutable=mu,Wu["@@transducer/init"]=Wu.asMutable=hu,Wu["@@transducer/step"]=function(e,t){return e.push(t)},Wu["@@transducer/result"]=function(e){return e.asImmutable()};var qu=function(e,t){this.array=e,this.ownerID=t};qu.prototype.removeBefore=function(e,t,n){if(n===t?1<<t:0===this.array.length)return this;var r=n>>>t&Go;if(r>=this.array.length)return new qu([],e);var o,i=0===r;if(t>0){var a=this.array[r];if((o=a&&a.removeBefore(e,t-Ko,n))===a&&i)return this}if(i&&!o)return this;var u=Yu(this,e);if(!i)for(var l=0;l<r;l++)u.array[l]=void 0;return o&&(u.array[r]=o),u},qu.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t:0)||0===this.array.length)return this;var r,o=n-1>>>t&Go;if(o>=this.array.length)return this;if(t>0){var i=this.array[o];if((r=i&&i.removeAfter(e,t-Ko,n))===i&&o===this.array.length-1)return this}var a=Yu(this,e);return a.array.splice(o+1),r&&(a.array[o]=r),a};var $u,Hu={};function Vu(e,t){var n=e._origin,r=e._capacity,o=Zu(r),i=e._tail;return function e(a,u,l){return 0===u?function(e,a){var u=a===o?i&&i.array:e&&e.array,l=a>n?0:n-a,c=r-a;return c>Qo&&(c=Qo),function(){if(l===c)return Hu;var e=t?--c:l++;return u&&u[e]}}(a,l):function(o,i,a){var u,l=o&&o.array,c=a>n?0:n-a>>i,s=1+(r-a>>i);return s>Qo&&(s=Qo),function(){for(;;){if(u){var n=u();if(n!==Hu)return n;u=null}if(c===s)return Hu;var r=t?--s:c++;u=e(l&&l[r],i-Ko,a+(r<<i))}}}(a,u,l)}(e._root,e._level,0)}function Ku(e,t,n,r,o,i,a){var u=Object.create(Wu);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=o,u.__ownerID=i,u.__hash=a,u.__altered=!1,u}function Qu(){return $u||($u=Ku(0,0,Ko))}function Gu(e,t,n,r,o,i){var a,u=r>>>n&Go,l=e&&u<e.array.length;if(!l&&void 0===o)return e;if(n>0){var c=e&&e.array[u],s=Gu(c,t,n-Ko,r,o,i);return s===c?e:((a=Yu(e,t)).array[u]=s,a)}return l&&e.array[u]===o?e:(i&&Xo(i),a=Yu(e,t),void 0===o&&u===a.array.length-1?a.array.pop():a.array[u]=o,a)}function Yu(e,t){return t&&e&&t===e.ownerID?e:new qu(e?e.array.slice():[],t)}function Xu(e,t){if(t>=Zu(e._capacity))return e._tail;if(t<1<<e._level+Ko){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&Go],r-=Ko;return n}}function Ju(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new Jo,o=e._origin,i=e._capacity,a=o+t,u=void 0===n?i:n<0?i+n:o+n;if(a===o&&u===i)return e;if(a>=u)return e.clear();for(var l=e._level,c=e._root,s=0;a+s<0;)c=new qu(c&&c.array.length?[void 0,c]:[],r),s+=1<<(l+=Ko);s&&(a+=s,o+=s,u+=s,i+=s);for(var f=Zu(i),p=Zu(u);p>=1<<l+Ko;)c=new qu(c&&c.array.length?[c]:[],r),l+=Ko;var d=e._tail,h=p<f?Xu(e,u-1):p>f?new qu([],r):d;if(d&&p>f&&a<i&&d.array.length){for(var m=c=Yu(c,r),y=l;y>Ko;y-=Ko){var v=f>>>y&Go;m=m.array[v]=Yu(m.array[v],r)}m.array[f>>>Ko&Go]=d}if(u<i&&(h=h&&h.removeAfter(r,0,u)),a>=p)a-=p,u-=p,l=Ko,c=null,h=h&&h.removeBefore(r,0,a);else if(a>o||p<f){for(s=0;c;){var g=a>>>l&Go;if(g!==p>>>l&Go)break;g&&(s+=(1<<l)*g),l-=Ko,c=c.array[g]}c&&a>o&&(c=c.removeBefore(r,l,a-s)),c&&p<f&&(c=c.removeAfter(r,l,p-s)),s&&(a-=s,u-=s)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=l,e._root=c,e._tail=h,e.__hash=void 0,e.__altered=!0,e):Ku(a,u,l,c,h)}function Zu(e){return e<Qo?0:e-1>>>Ko<<Ko}var el,tl=function(e){function t(e){return null==e?rl():ea(e)?e:rl().withMutations((function(t){var n=mi(e);$a(n.size),n.forEach((function(e,n){return t.set(n,e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this.__altered=!0,this):rl()},t.prototype.set=function(e,t){return ol(this,e,t)},t.prototype.remove=function(e){return ol(this,e,Yo)},t.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate((function(t){return t&&e(t[1],t[0],n)}),t)},t.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?nl(t,n,e,this.__hash):0===this.size?rl():(this.__ownerID=e,this.__altered=!1,this._map=t,this._list=n,this)},t}(vu);function nl(e,t,n,r){var o=Object.create(tl.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function rl(){return el||(el=nl(Cu(),Qu()))}function ol(e,t,n){var r,o,i=e._map,a=e._list,u=i.get(t),l=void 0!==u;if(n===Yo){if(!l)return e;a.size>=Qo&&a.size>=2*i.size?(r=(o=a.filter((function(e,t){return void 0!==e&&u!==t}))).toKeyedSeq().map((function(e){return e[0]})).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=i.remove(t),o=u===a.size-1?a.pop():a.set(u,void 0))}else if(l){if(n===a.get(u)[1])return e;r=i,o=a.set(u,[t,n])}else r=i.set(t,a.size),o=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e.__altered=!0,e):nl(r,o)}tl.isOrderedMap=ea,tl.prototype[Ei]=!0,tl.prototype[Vo]=tl.prototype.remove;var il="@@__IMMUTABLE_STACK__@@";function al(e){return Boolean(e&&e[il])}var ul=function(e){function t(e){return null==e?fl():al(e)?e:fl().pushAll(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(e,t){var n=this._head;for(e=ei(this,e);n&&e--;)n=n.next;return n?n.value:t},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var e=arguments;if(0===arguments.length)return this;for(var t=this.size+arguments.length,n=this._head,r=arguments.length-1;r>=0;r--)n={value:e[r],next:n};return this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):sl(t,n)},t.prototype.pushAll=function(t){if(0===(t=e(t)).size)return this;if(0===this.size&&al(t))return t;$a(t.size);var n=this.size,r=this._head;return t.__iterate((function(e){n++,r={value:e,next:r}}),!0),this.__ownerID?(this.size=n,this._head=r,this.__hash=void 0,this.__altered=!0,this):sl(n,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):fl()},t.prototype.slice=function(t,n){if(ni(t,n,this.size))return this;var r=ri(t,this.size);if(oi(n,this.size)!==this.size)return e.prototype.slice.call(this,t,n);for(var o=this.size-r,i=this._head;r--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):sl(o,i)},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?sl(this.size,this._head,e,this.__hash):0===this.size?fl():(this.__ownerID=e,this.__altered=!1,this)},t.prototype.__iterate=function(e,t){var n=this;if(t)return new $i(this.toArray()).__iterate((function(t,r){return e(t,r,n)}),t);for(var r=0,o=this._head;o&&!1!==e(o.value,r++,this);)o=o.next;return r},t.prototype.__iterator=function(e,t){if(t)return new $i(this.toArray()).__iterator(e,t);var n=0,r=this._head;return new zi((function(){if(r){var t=r.value;return r=r.next,Mi(e,n++,t)}return{value:void 0,done:!0}}))},t}(yi);ul.isStack=al;var ll,cl=ul.prototype;function sl(e,t,n,r){var o=Object.create(cl);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function fl(){return ll||(ll=sl(0))}cl[il]=!0,cl.shift=cl.pop,cl.unshift=cl.push,cl.unshiftAll=cl.pushAll,cl.withMutations=du,cl.wasAltered=yu,cl.asImmutable=mu,cl["@@transducer/init"]=cl.asMutable=hu,cl["@@transducer/step"]=function(e,t){return e.unshift(t)},cl["@@transducer/result"]=function(e){return e.asImmutable()};var pl="@@__IMMUTABLE_SET__@@";function dl(e){return Boolean(e&&e[pl])}function hl(e){return dl(e)&&xi(e)}function ml(e,t){if(e===t)return!0;if(!li(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||si(e)!==si(t)||pi(e)!==pi(t)||xi(e)!==xi(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!di(e);if(xi(e)){var r=e.entries();return t.every((function(e,t){var o=r.next().value;return o&&na(o[1],e)&&(n||na(o[0],t))}))&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var i=e;e=t,t=i}var a=!0,u=t.__iterate((function(t,r){if(n?!e.has(t):o?!na(t,e.get(r,Yo)):!na(e.get(r,Yo),t))return a=!1,!1}));return a&&e.size===u}function yl(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}function vl(e){if(!e||"object"!=typeof e)return e;if(!li(e)){if(!Ka(e))return e;e=Bi(e)}if(si(e)){var t={};return e.__iterate((function(e,n){t[n]=vl(e)})),t}var n=[];return e.__iterate((function(e){n.push(vl(e))})),n}var gl=function(e){function t(t){return null==t?El():dl(t)&&!xi(t)?t:El().withMutations((function(n){var r=e(t);$a(r.size),r.forEach((function(e){return n.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(mi(e).keySeq())},t.intersect=function(e){return(e=hi(e).toArray()).length?_l.intersect.apply(t(e.pop()),e):El()},t.union=function(e){return(e=hi(e).toArray()).length?_l.union.apply(t(e.pop()),e):El()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(e){return this._map.has(e)},t.prototype.add=function(e){return wl(this,this._map.set(e,e))},t.prototype.remove=function(e){return wl(this,this._map.remove(e))},t.prototype.clear=function(){return wl(this,this._map.clear())},t.prototype.map=function(e,t){var n=this,r=!1,o=wl(this,this._map.mapEntries((function(o){var i=o[1],a=e.call(t,i,i,n);return a!==i&&(r=!0),[a,a]}),t));return r?o:this},t.prototype.union=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];return 0===(t=t.filter((function(e){return 0!==e.size}))).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations((function(n){for(var r=0;r<t.length;r++)"string"==typeof t[r]?n.add(t[r]):e(t[r]).forEach((function(e){return n.add(e)}))})):this.constructor(t[0])},t.prototype.intersect=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.every((function(t){return t.includes(e)}))||r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.subtract=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map((function(t){return e(t)}));var r=[];return this.forEach((function(e){t.some((function(t){return t.includes(e)}))&&r.push(e)})),this.withMutations((function(e){r.forEach((function(t){e.remove(t)}))}))},t.prototype.sort=function(e){return Ul(Ma(this,e))},t.prototype.sortBy=function(e,t){return Ul(Ma(this,t,e))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate((function(t){return e(t,t,n)}),t)},t.prototype.__iterator=function(e,t){return this._map.__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):0===this.size?this.__empty():(this.__ownerID=e,this._map=t,this)},t}(vi);gl.isSet=dl;var bl,_l=gl.prototype;function wl(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function Sl(e,t){var n=Object.create(_l);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function El(){return bl||(bl=Sl(Cu()))}_l[pl]=!0,_l[Vo]=_l.remove,_l.merge=_l.concat=_l.union,_l.withMutations=du,_l.asImmutable=mu,_l["@@transducer/init"]=_l.asMutable=hu,_l["@@transducer/step"]=function(e,t){return e.add(t)},_l["@@transducer/result"]=function(e){return e.asImmutable()},_l.__empty=El,_l.__make=Sl;var xl,kl=function(e){function t(e,n,r){if(!(this instanceof t))return new t(e,n,r);if(qa(0!==r,"Cannot step a Range by 0"),e=e||0,void 0===n&&(n=1/0),r=void 0===r?1:Math.abs(r),n<e&&(r=-r),this._start=e,this._end=n,this._step=r,this.size=Math.max(0,Math.ceil((n-e)/r-1)+1),0===this.size){if(xl)return xl;xl=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},t.prototype.get=function(e,t){return this.has(e)?this._start+ei(this,e)*this._step:t},t.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},t.prototype.slice=function(e,n){return ni(e,n,this.size)?this:(e=ri(e,this.size),(n=oi(n,this.size))<=e?new t(0,0):new t(this.get(e,this._end),this.get(n,this._end),this._step))},t.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step==0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},t.prototype.lastIndexOf=function(e){return this.indexOf(e)},t.prototype.__iterate=function(e,t){for(var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;i!==n&&!1!==e(o,t?n-++i:i++,this);)o+=t?-r:r;return i},t.prototype.__iterator=function(e,t){var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;return new zi((function(){if(i===n)return{value:void 0,done:!0};var a=o;return o+=t?-r:r,Mi(e,t?n-++i:i++,a)}))},t.prototype.equals=function(e){return e instanceof t?this._start===e._start&&this._end===e._end&&this._step===e._step:ml(this,e)},t}(Wi);function Ol(e,t,n){for(var r=Ha(t),o=0;o!==r.length;)if((e=Ga(e,r[o++],Yo))===Yo)return n;return e}function Tl(e,t){return Ol(this,e,t)}function Pl(){$a(this.size);var e={};return this.__iterate((function(t,n){e[n]=t})),e}hi.isIterable=li,hi.isKeyed=si,hi.isIndexed=pi,hi.isAssociative=di,hi.isOrdered=xi,hi.Iterator=zi,yl(hi,{toArray:function(){$a(this.size);var e=new Array(this.size||0),t=si(this),n=0;return this.__iterate((function(r,o){e[n++]=t?[o,r]:r})),e},toIndexedSeq:function(){return new Sa(this)},toJS:function(){return vl(this)},toKeyedSeq:function(){return new wa(this,!0)},toMap:function(){return vu(this.toKeyedSeq())},toObject:Pl,toOrderedMap:function(){return tl(this.toKeyedSeq())},toOrderedSet:function(){return Ul(si(this)?this.valueSeq():this)},toSet:function(){return gl(si(this)?this.valueSeq():this)},toSetSeq:function(){return new Ea(this)},toSeq:function(){return pi(this)?this.toIndexedSeq():si(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return ul(si(this)?this.valueSeq():this)},toList:function(){return Uu(si(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Da(this,function(e,t){var n=si(e),r=[e].concat(t).map((function(e){return li(e)?n&&(e=mi(e)):e=n?Gi(e):Yi(Array.isArray(e)?e:[e]),e})).filter((function(e){return 0!==e.size}));if(0===r.length)return e;if(1===r.length){var o=r[0];if(o===e||n&&si(o)||pi(e)&&pi(o))return o}var i=new $i(r);return n?i=i.toKeyedSeq():pi(e)||(i=i.toSetSeq()),(i=i.flatten(!0)).size=r.reduce((function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}}),0),i}(this,e))},includes:function(e){return this.some((function(t){return na(t,e)}))},entries:function(){return this.__iterator(Ti)},every:function(e,t){$a(this.size);var n=!0;return this.__iterate((function(r,o,i){if(!e.call(t,r,o,i))return n=!1,!1})),n},filter:function(e,t){return Da(this,Pa(this,e,t,!0))},partition:function(e,t){return function(e,t,n){var r=si(e),o=[[],[]];e.__iterate((function(i,a){o[t.call(n,i,a,e)?1:0].push(r?[a,i]:i)}));var i=La(e);return o.map((function(t){return Da(e,i(t))}))}(this,e,t)},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return $a(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){$a(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate((function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""})),t},keys:function(){return this.__iterator(ki)},map:function(e,t){return Da(this,Oa(this,e,t))},reduce:function(e,t,n){return Il(this,e,t,n,arguments.length<2,!1)},reduceRight:function(e,t,n){return Il(this,e,t,n,arguments.length<2,!0)},reverse:function(){return Da(this,Ta(this,!0))},slice:function(e,t){return Da(this,Ca(this,e,t,!0))},some:function(e,t){$a(this.size);var n=!1;return this.__iterate((function(r,o,i){if(e.call(t,r,o,i))return n=!0,!1})),n},sort:function(e){return Da(this,Ma(this,e))},values:function(){return this.__iterator(Oi)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some((function(){return!0}))},count:function(e,t){return Zo(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=vu().asMutable();return e.__iterate((function(o,i){r.update(t.call(n,o,i,e),0,(function(e){return e+1}))})),r.asImmutable()}(this,e,t)},equals:function(e){return ml(this,e)},entrySeq:function(){var e=this;if(e._cache)return new $i(e._cache);var t=e.toSeq().map(Rl).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(Dl(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate((function(n,o,i){if(e.call(t,n,o,i))return r=[o,n],!1})),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(e){return this.find(ti,null,e)},flatMap:function(e,t){return Da(this,function(e,t,n){var r=La(e);return e.toSeq().map((function(o,i){return r(t.call(n,o,i,e))})).flatten(!0)}(this,e,t))},flatten:function(e){return Da(this,za(this,e,!0))},fromEntrySeq:function(){return new xa(this)},get:function(e,t){return this.find((function(t,n){return na(n,e)}),void 0,t)},getIn:Tl,groupBy:function(e,t){return function(e,t,n){var r=si(e),o=(xi(e)?tl():vu()).asMutable();e.__iterate((function(i,a){o.update(t.call(n,i,a,e),(function(e){return(e=e||[]).push(r?[a,i]:i),e}))}));var i=La(e);return o.map((function(t){return Da(e,i(t))})).asImmutable()}(this,e,t)},has:function(e){return this.get(e,Yo)!==Yo},hasIn:function(e){return Ol(this,e,Yo)!==Yo},isSubset:function(e){return e="function"==typeof e.includes?e:hi(e),this.every((function(t){return e.includes(t)}))},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:hi(e)).isSubset(this)},keyOf:function(e){return this.findKey((function(t){return na(t,e)}))},keySeq:function(){return this.toSeq().map(Nl).toIndexedSeq()},last:function(e){return this.toSeq().reverse().first(e)},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return Ia(this,e)},maxBy:function(e,t){return Ia(this,t,e)},min:function(e){return Ia(this,e?Al(e):Fl)},minBy:function(e,t){return Ia(this,t?Al(t):Fl,e)},rest:function(){return this.slice(1)},skip:function(e){return 0===e?this:this.slice(Math.max(0,e))},skipLast:function(e){return 0===e?this:this.slice(0,-Math.max(0,e))},skipWhile:function(e,t){return Da(this,ja(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(Dl(e),t)},sortBy:function(e,t){return Da(this,Ma(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return this.slice(-Math.max(0,e))},takeWhile:function(e,t){return Da(this,function(e,t,n){var r=Fa(e);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return e.__iterate((function(e,o,u){return t.call(n,e,o,u)&&++a&&r(e,o,i)})),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=e.__iterator(Ti,o),u=!0;return new zi((function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var o=e.value,l=o[0],c=o[1];return t.call(n,c,l,i)?r===Ti?e:Mi(r,l,c,e):(u=!1,{value:void 0,done:!0})}))},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(Dl(e),t)},update:function(e){return e(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=xi(e),n=si(e),r=t?1:0;return function(e,t){return t=ra(t,3432918353),t=ra(t<<15|t>>>-15,461845907),t=ra(t<<13|t>>>-13,5),t=ra((t=t+3864292196^e)^t>>>16,2246822507),t=oa((t=ra(t^t>>>13,3266489909))^t>>>16)}(e.__iterate(n?t?function(e,t){r=31*r+Bl(aa(e),aa(t))|0}:function(e,t){r=r+Bl(aa(e),aa(t))|0}:t?function(e){r=31*r+aa(e)|0}:function(e){r=r+aa(e)|0}),r)}(this))}});var Cl=hi.prototype;Cl[ui]=!0,Cl[ji]=Cl.values,Cl.toJSON=Cl.toArray,Cl.__toStringMapper=Qa,Cl.inspect=Cl.toSource=function(){return this.toString()},Cl.chain=Cl.flatMap,Cl.contains=Cl.includes,yl(mi,{flip:function(){return Da(this,ka(this))},mapEntries:function(e,t){var n=this,r=0;return Da(this,this.toSeq().map((function(o,i){return e.call(t,[i,o],r++,n)})).fromEntrySeq())},mapKeys:function(e,t){var n=this;return Da(this,this.toSeq().flip().map((function(r,o){return e.call(t,r,o,n)})).flip())}});var jl=mi.prototype;jl[ci]=!0,jl[ji]=Cl.entries,jl.toJSON=Pl,jl.__toStringMapper=function(e,t){return Qa(t)+": "+Qa(e)},yl(yi,{toKeyedSeq:function(){return new wa(this,!1)},filter:function(e,t){return Da(this,Pa(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return Da(this,Ta(this,!1))},slice:function(e,t){return Da(this,Ca(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(t||0,0),0===n||2===n&&!t)return this;e=ri(e,e<0?this.count():this.size);var r=this.slice(0,e);return Da(this,1===n?r:r.concat(Wa(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(e){return this.get(0,e)},flatten:function(e){return Da(this,za(this,e,!1))},get:function(e,t){return(e=ei(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find((function(t,n){return n===e}),void 0,t)},has:function(e){return(e=ei(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return Da(this,function(e,t){var n=Fa(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return e.__iterate((function(e){return(!i||!1!==n(t,i++,o))&&!1!==n(e,i++,o)}),r),i},n.__iteratorUncached=function(n,r){var o,i=e.__iterator(Oi,r),a=0;return new zi((function(){return(!o||a%2)&&(o=i.next()).done?o:a%2?Mi(n,a++,t):Mi(n,a++,o.value,o)}))},n}(this,e))},interleave:function(){var e=[this].concat(Wa(arguments)),t=Ra(this.toSeq(),Wi.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),Da(this,n)},keySeq:function(){return kl(0,this.size)},last:function(e){return this.get(-1,e)},skipWhile:function(e,t){return Da(this,ja(this,e,t,!1))},zip:function(){return Da(this,Ra(this,Ll,[this].concat(Wa(arguments))))},zipAll:function(){return Da(this,Ra(this,Ll,[this].concat(Wa(arguments)),!0))},zipWith:function(e){var t=Wa(arguments);return t[0]=this,Da(this,Ra(this,e,t))}});var zl=yi.prototype;zl[fi]=!0,zl[Ei]=!0,yl(vi,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}});var Ml=vi.prototype;function Il(e,t,n,r,o,i){return $a(e.size),e.__iterate((function(e,i,a){o?(o=!1,n=e):n=t.call(r,n,e,i,a)}),i),n}function Nl(e,t){return t}function Rl(e,t){return[t,e]}function Dl(e){return function(){return!e.apply(this,arguments)}}function Al(e){return function(){return-e.apply(this,arguments)}}function Ll(){return Wa(arguments)}function Fl(e,t){return e<t?1:e>t?-1:0}function Bl(e,t){return e^t+2654435769+(e<<6)+(e>>2)}Ml.has=Cl.includes,Ml.contains=Ml.includes,Ml.keys=Ml.values,yl(Ui,jl),yl(Wi,zl),yl(qi,Ml);var Ul=function(e){function t(e){return null==e?Hl():hl(e)?e:Hl().withMutations((function(t){var n=vi(e);$a(n.size),n.forEach((function(e){return t.add(e)}))}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(mi(e).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(gl);Ul.isOrderedSet=hl;var Wl,ql=Ul.prototype;function $l(e,t){var n=Object.create(ql);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function Hl(){return Wl||(Wl=$l(rl()))}ql[Ei]=!0,ql.zip=zl.zip,ql.zipWith=zl.zipWith,ql.zipAll=zl.zipAll,ql.__empty=Hl,ql.__make=$l;var Vl=function(e,t){var n;!function(e){if(wi(e))throw new Error("Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.");if(Si(e))throw new Error("Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.");if(null===e||"object"!=typeof e)throw new Error("Can not call `Record` with a non-object as default values. Use a plain javascript object instead.")}(e);var r=function(i){var a=this;if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var u=Object.keys(e),l=o._indices={};o._name=t,o._keys=u,o._defaultValues=e;for(var c=0;c<u.length;c++){var s=u[c];l[s]=c,o[s]?"object"==typeof console&&console.warn&&console.warn("Cannot define "+Gl(this)+' with property "'+s+'" since that property name is part of the Record API.'):Xl(o,s)}}return this.__ownerID=void 0,this._values=Uu().withMutations((function(e){e.setSize(a._keys.length),mi(i).forEach((function(t,n){e.set(a._indices[n],t===a._defaultValues[n]?void 0:t)}))})),this},o=r.prototype=Object.create(Kl);return o.constructor=r,t&&(r.displayName=t),r};Vl.prototype.toString=function(){for(var e,t=Gl(this)+" { ",n=this._keys,r=0,o=n.length;r!==o;r++)t+=(r?", ":"")+(e=n[r])+": "+Qa(this.get(e));return t+" }"},Vl.prototype.equals=function(e){return this===e||wi(e)&&Yl(this).equals(Yl(e))},Vl.prototype.hashCode=function(){return Yl(this).hashCode()},Vl.prototype.has=function(e){return this._indices.hasOwnProperty(e)},Vl.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._indices[e],r=this._values.get(n);return void 0===r?this._defaultValues[e]:r},Vl.prototype.set=function(e,t){if(this.has(e)){var n=this._values.set(this._indices[e],t===this._defaultValues[e]?void 0:t);if(n!==this._values&&!this.__ownerID)return Ql(this,n)}return this},Vl.prototype.remove=function(e){return this.set(e)},Vl.prototype.clear=function(){var e=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:Ql(this,e)},Vl.prototype.wasAltered=function(){return this._values.wasAltered()},Vl.prototype.toSeq=function(){return Yl(this)},Vl.prototype.toJS=function(){return vl(this)},Vl.prototype.entries=function(){return this.__iterator(Ti)},Vl.prototype.__iterator=function(e,t){return Yl(this).__iterator(e,t)},Vl.prototype.__iterate=function(e,t){return Yl(this).__iterate(e,t)},Vl.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._values.__ensureOwner(e);return e?Ql(this,t,e):(this.__ownerID=e,this._values=t,this)},Vl.isRecord=wi,Vl.getDescriptiveName=Gl;var Kl=Vl.prototype;function Ql(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._values=t,r.__ownerID=n,r}function Gl(e){return e.constructor.displayName||e.constructor.name||"Record"}function Yl(e){return Gi(e._keys.map((function(t){return[t,e.get(t)]})))}function Xl(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){qa(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}catch(e){}}Kl[_i]=!0,Kl[Vo]=Kl.remove,Kl.deleteIn=Kl.removeIn=eu,Kl.getIn=Tl,Kl.hasIn=Cl.hasIn,Kl.merge=ou,Kl.mergeWith=iu,Kl.mergeIn=fu,Kl.mergeDeep=cu,Kl.mergeDeepWith=su,Kl.mergeDeepIn=pu,Kl.setIn=Za,Kl.update=nu,Kl.updateIn=ru,Kl.withMutations=du,Kl.asMutable=hu,Kl.asImmutable=mu,Kl[ji]=Kl.entries,Kl.toJSON=Kl.toObject=Cl.toObject,Kl.inspect=Kl.toSource=function(){return this.toString()};var Jl={isCartDrawerVisible:!1,IsUSerLoggedIn:!1,user:null},Zl={products:[],loading:!1},ec={ui:vu(Jl),products:vu(Zl)},tc=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(Lo(0));if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error(Lo(1));return r(e)(t,n)}if("function"!=typeof t)throw new Error(Lo(2));var i=t,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error(Lo(3));return a}function p(e){if("function"!=typeof e)throw new Error(Lo(4));if(c)throw new Error(Lo(5));var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error(Lo(6));t=!1,s();var n=l.indexOf(e);l.splice(n,1),u=null}}}function d(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(Lo(7));if(void 0===e.type)throw new Error(Lo(8));if(c)throw new Error(Lo(9));try{c=!0,a=i(a,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++)(0,t[n])();return e}return d({type:Uo.INIT}),(o={dispatch:d,subscribe:p,getState:f,replaceReducer:function(e){if("function"!=typeof e)throw new Error(Lo(10));i=e,d({type:Uo.REPLACE})}})[Fo]=function(){var e,t=p;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(Lo(11));function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[Fo]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:Uo.INIT}))throw new Error(Lo(12));if(void 0===n(void 0,{type:Uo.PROBE_UNKNOWN_ACTION()}))throw new Error(Lo(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],c=n[l],s=e[l],f=c(s,t);if(void 0===f)throw t&&t.type,new Error(Lo(14));o[l]=f,r=r||f!==s}return(r=r||a.length!==Object.keys(e).length)?o:e}}({ui:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vu(Jl);switch((arguments.length>1?arguments[1]:void 0).type){case sr:return e.set("isCartDrawerVisible",!0);case fr:return e.set("isCartDrawerVisible",!1);default:return e}},products:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:vu(Zl),t=arguments.length>1?arguments[1]:void 0;switch(t.type){case wo:return e.set("products",t.products);case So:return e.set("loading",t.loadingState);default:return e}}}),ec,function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(Lo(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map((function(e){return e(o)}));return r=Wo.apply(void 0,i)(n.dispatch),Ao(Ao({},n),{},{dispatch:r})}}}(Ho));Ge.render(t.createElement(he,{store:tc},t.createElement(t.StrictMode,null,t.createElement(An,null,t.createElement(Io,null)))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQVU3RCxPQUFRNnlGLEVBQWMsSUFBSS9uRixNQUFNMHpELEdBQU8yQixFQUFPLEVBQUdBLEVBQU8zQixFQUFNMkIsSUFDdEYweUIsRUFBWTF5QixHQUFRdDhELFVBQVVzOEQsR0FHaEMsT0FBTyxTQUFVa3hCLEdBQ2YsT0FBTyxXQUNMLElBQUl2dEMsRUFBUXV0QyxFQUFZcm1GLFdBQU0sRUFBUW5ILFdBRWxDaXZGLEVBQVksV0FDZCxNQUFNLElBQUlodEYsTUFBOEMra0UsR0FBdUIsSUFDakYsRUFFSWtvQixFQUFnQixDQUNsQjV0QyxTQUFVckIsRUFBTXFCLFNBQ2hCOW5CLFNBQVUsV0FDUixPQUFPeTFELEVBQVU5bkYsV0FBTSxFQUFRbkgsVUFDakMsR0FFRXNxRixFQUFRMEUsRUFBWWhzRixLQUFJLFNBQVVtc0YsR0FDcEMsT0FBT0EsRUFBV0QsRUFDcEIsSUFFQSxPQURBRCxFQUFZeG5CLEdBQVF0Z0UsV0FBTSxFQUFRbWpGLEVBQXRCN2lCLENBQTZCeG5CLEVBQU16bUIsVUFDeEMsR0FBYyxHQUFjLENBQUMsRUFBR3ltQixHQUFRLENBQUMsRUFBRyxDQUNqRHptQixTQUFVeTFELEdBRWQsQ0FDRixDQUNGLENLanFCRUcsQ0FBZ0J2bkIsS0FHbEJ3bkIsR0FBQUEsT0FDRXR2QixFQUFBQSxjQUFDeHhCLEdBQVEsQ0FBQzBSLE1BQU9BLElBQ2Y4ZixFQUFBQSxjQUFDQSxFQUFBQSxXQUFnQixLQUNmQSxFQUFBQSxjQUFDdEQsR0FBYSxLQUNac0QsRUFBQUEsY0FBQzBGLEdBQUcsU0FJVi9tRSxTQUFTNHdGLGVBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hc2FwL2Jyb3dzZXItYXNhcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9hc2FwL2Jyb3dzZXItcmF3LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL25vZGUtZmV0Y2gvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3N0cmluZy1oYXNoL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Zyb250ZW5kL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mcm9udGVuZC93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AcmVtaXgtcnVuL3JvdXRlci9kaXN0L3JvdXRlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvU3Vic2NyaXB0aW9uLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvc2hhbGxvd0VxdWFsLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3Qvd3JhcE1hcFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBEaXNwYXRjaFRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWFwU3RhdGVUb1Byb3BzLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3NlbGVjdG9yRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L2Nvbm5lY3QuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvYXBocm9kaXRlL2VzL2NodW5rLWZlYmNlNDZiLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2FwaHJvZGl0ZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2Rpc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvSGVhZGVyL05hdkl0ZW0uanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvYXNzZXRzL2xvZ28ucG5nIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL1NWRy9zdmcuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvYWN0aW9ucy91aUFjdGlvblR5cGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvYWN0aW9ucy91aUFjdGlvbkNyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvSGVhZGVyL0hlYWRlci5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9Gb290ZXIvRm9vdGVyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL1Byb2R1Y3RzL1Byb2R1Y3RDYXJkLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL1Byb2R1Y3RzL1Byb2R1Y3RJdGVtU2hhcGUuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvUHJvZHVjdHMvUHJvZHVjdHNQcmV2aWV3LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL0xvZ2luL0xvZ2luLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL0xvZ2luL1NpZ25VcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9DYXJ0L0NhcnRXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvQ2FydC9DYXJ0LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2Fzc2V0cy9mYXZpY29uLnBuZyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9hY3Rpb25zL3Byb2R1Y3RBY3Rpb25UeXBlLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vc3JjL2FjdGlvbnMvcHJvZHVjdEFjdGlvbkNyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvQXBwL0FwcC5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Qcm9wZXJ0eUtleS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyLmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3JlZHV4LXRodW5rL2VzL2luZGV4LmpzIiwid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL2ltbXV0YWJsZS9kaXN0L2ltbXV0YWJsZS5lcy5qcyIsIndlYnBhY2s6Ly9mcm9udGVuZC8uL3NyYy9yZWR1Y2Vycy91aVJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvcmVkdWNlcnMvcHJvZHVjdFJlZHVjZXIuanMiLCJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIHJhd0FzYXAgcHJvdmlkZXMgZXZlcnl0aGluZyB3ZSBuZWVkIGV4Y2VwdCBleGNlcHRpb24gbWFuYWdlbWVudC5cbnZhciByYXdBc2FwID0gcmVxdWlyZShcIi4vcmF3XCIpO1xuLy8gUmF3VGFza3MgYXJlIHJlY3ljbGVkIHRvIHJlZHVjZSBHQyBjaHVybi5cbnZhciBmcmVlVGFza3MgPSBbXTtcbi8vIFdlIHF1ZXVlIGVycm9ycyB0byBlbnN1cmUgdGhleSBhcmUgdGhyb3duIGluIHJpZ2h0IG9yZGVyIChGSUZPKS5cbi8vIEFycmF5LWFzLXF1ZXVlIGlzIGdvb2QgZW5vdWdoIGhlcmUsIHNpbmNlIHdlIGFyZSBqdXN0IGRlYWxpbmcgd2l0aCBleGNlcHRpb25zLlxudmFyIHBlbmRpbmdFcnJvcnMgPSBbXTtcbnZhciByZXF1ZXN0RXJyb3JUaHJvdyA9IHJhd0FzYXAubWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKHRocm93Rmlyc3RFcnJvcik7XG5cbmZ1bmN0aW9uIHRocm93Rmlyc3RFcnJvcigpIHtcbiAgICBpZiAocGVuZGluZ0Vycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgcGVuZGluZ0Vycm9ycy5zaGlmdCgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDYWxscyBhIHRhc2sgYXMgc29vbiBhcyBwb3NzaWJsZSBhZnRlciByZXR1cm5pbmcsIGluIGl0cyBvd24gZXZlbnQsIHdpdGggcHJpb3JpdHlcbiAqIG92ZXIgb3RoZXIgZXZlbnRzIGxpa2UgYW5pbWF0aW9uLCByZWZsb3csIGFuZCByZXBhaW50LiBBbiBlcnJvciB0aHJvd24gZnJvbSBhblxuICogZXZlbnQgd2lsbCBub3QgaW50ZXJydXB0LCBub3IgZXZlbiBzdWJzdGFudGlhbGx5IHNsb3cgZG93biB0aGUgcHJvY2Vzc2luZyBvZlxuICogb3RoZXIgZXZlbnRzLCBidXQgd2lsbCBiZSByYXRoZXIgcG9zdHBvbmVkIHRvIGEgbG93ZXIgcHJpb3JpdHkgZXZlbnQuXG4gKiBAcGFyYW0ge3tjYWxsfX0gdGFzayBBIGNhbGxhYmxlIG9iamVjdCwgdHlwaWNhbGx5IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBub1xuICogYXJndW1lbnRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzYXA7XG5mdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgICB2YXIgcmF3VGFzaztcbiAgICBpZiAoZnJlZVRhc2tzLmxlbmd0aCkge1xuICAgICAgICByYXdUYXNrID0gZnJlZVRhc2tzLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd1Rhc2sgPSBuZXcgUmF3VGFzaygpO1xuICAgIH1cbiAgICByYXdUYXNrLnRhc2sgPSB0YXNrO1xuICAgIHJhd0FzYXAocmF3VGFzayk7XG59XG5cbi8vIFdlIHdyYXAgdGFza3Mgd2l0aCByZWN5Y2xhYmxlIHRhc2sgb2JqZWN0cy4gIEEgdGFzayBvYmplY3QgaW1wbGVtZW50c1xuLy8gYGNhbGxgLCBqdXN0IGxpa2UgYSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJhd1Rhc2soKSB7XG4gICAgdGhpcy50YXNrID0gbnVsbDtcbn1cblxuLy8gVGhlIHNvbGUgcHVycG9zZSBvZiB3cmFwcGluZyB0aGUgdGFzayBpcyB0byBjYXRjaCB0aGUgZXhjZXB0aW9uIGFuZCByZWN5Y2xlXG4vLyB0aGUgdGFzayBvYmplY3QgYWZ0ZXIgaXRzIHNpbmdsZSB1c2UuXG5SYXdUYXNrLnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRoaXMudGFzay5jYWxsKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGFzYXAub25lcnJvcikge1xuICAgICAgICAgICAgLy8gVGhpcyBob29rIGV4aXN0cyBwdXJlbHkgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAgICAgICAgICAvLyBJdHMgbmFtZSB3aWxsIGJlIHBlcmlvZGljYWxseSByYW5kb21pemVkIHRvIGJyZWFrIGFueSBjb2RlIHRoYXRcbiAgICAgICAgICAgIC8vIGRlcGVuZHMgb24gaXRzIGV4aXN0ZW5jZS5cbiAgICAgICAgICAgIGFzYXAub25lcnJvcihlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJbiBhIHdlYiBicm93c2VyLCBleGNlcHRpb25zIGFyZSBub3QgZmF0YWwuIEhvd2V2ZXIsIHRvIGF2b2lkXG4gICAgICAgICAgICAvLyBzbG93aW5nIGRvd24gdGhlIHF1ZXVlIG9mIHBlbmRpbmcgdGFza3MsIHdlIHJldGhyb3cgdGhlIGVycm9yIGluIGFcbiAgICAgICAgICAgIC8vIGxvd2VyIHByaW9yaXR5IHR1cm4uXG4gICAgICAgICAgICBwZW5kaW5nRXJyb3JzLnB1c2goZXJyb3IpO1xuICAgICAgICAgICAgcmVxdWVzdEVycm9yVGhyb3coKTtcbiAgICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgIGZyZWVUYXNrc1tmcmVlVGFza3MubGVuZ3RoXSA9IHRoaXM7XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBVc2UgdGhlIGZhc3Rlc3QgbWVhbnMgcG9zc2libGUgdG8gZXhlY3V0ZSBhIHRhc2sgaW4gaXRzIG93biB0dXJuLCB3aXRoXG4vLyBwcmlvcml0eSBvdmVyIG90aGVyIGV2ZW50cyBpbmNsdWRpbmcgSU8sIGFuaW1hdGlvbiwgcmVmbG93LCBhbmQgcmVkcmF3XG4vLyBldmVudHMgaW4gYnJvd3NlcnMuXG4vL1xuLy8gQW4gZXhjZXB0aW9uIHRocm93biBieSBhIHRhc2sgd2lsbCBwZXJtYW5lbnRseSBpbnRlcnJ1cHQgdGhlIHByb2Nlc3Npbmcgb2Zcbi8vIHN1YnNlcXVlbnQgdGFza3MuIFRoZSBoaWdoZXIgbGV2ZWwgYGFzYXBgIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93biBieSBhIHRhc2ssIHRoYXQgdGhlIHRhc2sgcXVldWUgd2lsbCBjb250aW51ZSBmbHVzaGluZyBhc1xuLy8gc29vbiBhcyBwb3NzaWJsZSwgYnV0IGlmIHlvdSB1c2UgYHJhd0FzYXBgIGRpcmVjdGx5LCB5b3UgYXJlIHJlc3BvbnNpYmxlIHRvXG4vLyBlaXRoZXIgZW5zdXJlIHRoYXQgbm8gZXhjZXB0aW9ucyBhcmUgdGhyb3duIGZyb20geW91ciB0YXNrLCBvciB0byBtYW51YWxseVxuLy8gY2FsbCBgcmF3QXNhcC5yZXF1ZXN0Rmx1c2hgIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG5tb2R1bGUuZXhwb3J0cyA9IHJhd0FzYXA7XG5mdW5jdGlvbiByYXdBc2FwKHRhc2spIHtcbiAgICBpZiAoIXF1ZXVlLmxlbmd0aCkge1xuICAgICAgICByZXF1ZXN0Rmx1c2goKTtcbiAgICAgICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIH1cbiAgICAvLyBFcXVpdmFsZW50IHRvIHB1c2gsIGJ1dCBhdm9pZHMgYSBmdW5jdGlvbiBjYWxsLlxuICAgIHF1ZXVlW3F1ZXVlLmxlbmd0aF0gPSB0YXNrO1xufVxuXG52YXIgcXVldWUgPSBbXTtcbi8vIE9uY2UgYSBmbHVzaCBoYXMgYmVlbiByZXF1ZXN0ZWQsIG5vIGZ1cnRoZXIgY2FsbHMgdG8gYHJlcXVlc3RGbHVzaGAgYXJlXG4vLyBuZWNlc3NhcnkgdW50aWwgdGhlIG5leHQgYGZsdXNoYCBjb21wbGV0ZXMuXG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGFuIGltcGxlbWVudGF0aW9uLXNwZWNpZmljIG1ldGhvZCB0aGF0IGF0dGVtcHRzIHRvIGtpY2tcbi8vIG9mZiBhIGBmbHVzaGAgZXZlbnQgYXMgcXVpY2tseSBhcyBwb3NzaWJsZS4gYGZsdXNoYCB3aWxsIGF0dGVtcHQgdG8gZXhoYXVzdFxuLy8gdGhlIGV2ZW50IHF1ZXVlIGJlZm9yZSB5aWVsZGluZyB0byB0aGUgYnJvd3NlcidzIG93biBldmVudCBsb29wLlxudmFyIHJlcXVlc3RGbHVzaDtcbi8vIFRoZSBwb3NpdGlvbiBvZiB0aGUgbmV4dCB0YXNrIHRvIGV4ZWN1dGUgaW4gdGhlIHRhc2sgcXVldWUuIFRoaXMgaXNcbi8vIHByZXNlcnZlZCBiZXR3ZWVuIGNhbGxzIHRvIGBmbHVzaGAgc28gdGhhdCBpdCBjYW4gYmUgcmVzdW1lZCBpZlxuLy8gYSB0YXNrIHRocm93cyBhbiBleGNlcHRpb24uXG52YXIgaW5kZXggPSAwO1xuLy8gSWYgYSB0YXNrIHNjaGVkdWxlcyBhZGRpdGlvbmFsIHRhc2tzIHJlY3Vyc2l2ZWx5LCB0aGUgdGFzayBxdWV1ZSBjYW4gZ3Jvd1xuLy8gdW5ib3VuZGVkLiBUbyBwcmV2ZW50IG1lbW9yeSBleGhhdXN0aW9uLCB0aGUgdGFzayBxdWV1ZSB3aWxsIHBlcmlvZGljYWxseVxuLy8gdHJ1bmNhdGUgYWxyZWFkeS1jb21wbGV0ZWQgdGFza3MuXG52YXIgY2FwYWNpdHkgPSAxMDI0O1xuXG4vLyBUaGUgZmx1c2ggZnVuY3Rpb24gcHJvY2Vzc2VzIGFsbCB0YXNrcyB0aGF0IGhhdmUgYmVlbiBzY2hlZHVsZWQgd2l0aFxuLy8gYHJhd0FzYXBgIHVubGVzcyBhbmQgdW50aWwgb25lIG9mIHRob3NlIHRhc2tzIHRocm93cyBhbiBleGNlcHRpb24uXG4vLyBJZiBhIHRhc2sgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgYGZsdXNoYCBlbnN1cmVzIHRoYXQgaXRzIHN0YXRlIHdpbGwgcmVtYWluXG4vLyBjb25zaXN0ZW50IGFuZCB3aWxsIHJlc3VtZSB3aGVyZSBpdCBsZWZ0IG9mZiB3aGVuIGNhbGxlZCBhZ2Fpbi5cbi8vIEhvd2V2ZXIsIGBmbHVzaGAgZG9lcyBub3QgbWFrZSBhbnkgYXJyYW5nZW1lbnRzIHRvIGJlIGNhbGxlZCBhZ2FpbiBpZiBhblxuLy8gZXhjZXB0aW9uIGlzIHRocm93bi5cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHdoaWxlIChpbmRleCA8IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gaW5kZXg7XG4gICAgICAgIC8vIEFkdmFuY2UgdGhlIGluZGV4IGJlZm9yZSBjYWxsaW5nIHRoZSB0YXNrLiBUaGlzIGVuc3VyZXMgdGhhdCB3ZSB3aWxsXG4gICAgICAgIC8vIGJlZ2luIGZsdXNoaW5nIG9uIHRoZSBuZXh0IHRhc2sgdGhlIHRhc2sgdGhyb3dzIGFuIGVycm9yLlxuICAgICAgICBpbmRleCA9IGluZGV4ICsgMTtcbiAgICAgICAgcXVldWVbY3VycmVudEluZGV4XS5jYWxsKCk7XG4gICAgICAgIC8vIFByZXZlbnQgbGVha2luZyBtZW1vcnkgZm9yIGxvbmcgY2hhaW5zIG9mIHJlY3Vyc2l2ZSBjYWxscyB0byBgYXNhcGAuXG4gICAgICAgIC8vIElmIHdlIGNhbGwgYGFzYXBgIHdpdGhpbiB0YXNrcyBzY2hlZHVsZWQgYnkgYGFzYXBgLCB0aGUgcXVldWUgd2lsbFxuICAgICAgICAvLyBncm93LCBidXQgdG8gYXZvaWQgYW4gTyhuKSB3YWxrIGZvciBldmVyeSB0YXNrIHdlIGV4ZWN1dGUsIHdlIGRvbid0XG4gICAgICAgIC8vIHNoaWZ0IHRhc2tzIG9mZiB0aGUgcXVldWUgYWZ0ZXIgdGhleSBoYXZlIGJlZW4gZXhlY3V0ZWQuXG4gICAgICAgIC8vIEluc3RlYWQsIHdlIHBlcmlvZGljYWxseSBzaGlmdCAxMDI0IHRhc2tzIG9mZiB0aGUgcXVldWUuXG4gICAgICAgIGlmIChpbmRleCA+IGNhcGFjaXR5KSB7XG4gICAgICAgICAgICAvLyBNYW51YWxseSBzaGlmdCBhbGwgdmFsdWVzIHN0YXJ0aW5nIGF0IHRoZSBpbmRleCBiYWNrIHRvIHRoZVxuICAgICAgICAgICAgLy8gYmVnaW5uaW5nIG9mIHRoZSBxdWV1ZS5cbiAgICAgICAgICAgIGZvciAodmFyIHNjYW4gPSAwLCBuZXdMZW5ndGggPSBxdWV1ZS5sZW5ndGggLSBpbmRleDsgc2NhbiA8IG5ld0xlbmd0aDsgc2NhbisrKSB7XG4gICAgICAgICAgICAgICAgcXVldWVbc2Nhbl0gPSBxdWV1ZVtzY2FuICsgaW5kZXhdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcXVldWUubGVuZ3RoIC09IGluZGV4O1xuICAgICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgaW5kZXggPSAwO1xuICAgIGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIGByZXF1ZXN0Rmx1c2hgIGlzIGltcGxlbWVudGVkIHVzaW5nIGEgc3RyYXRlZ3kgYmFzZWQgb24gZGF0YSBjb2xsZWN0ZWQgZnJvbVxuLy8gZXZlcnkgYXZhaWxhYmxlIFNhdWNlTGFicyBTZWxlbml1bSB3ZWIgZHJpdmVyIHdvcmtlciBhdCB0aW1lIG9mIHdyaXRpbmcuXG4vLyBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9zcHJlYWRzaGVldHMvZC8xbUctNVVZR3VwNXF4R2RFTVdraFA2QldDejA1M05VYjJFMVFvVVRVMTZ1QS9lZGl0I2dpZD03ODM3MjQ1OTNcblxuLy8gU2FmYXJpIDYgYW5kIDYuMSBmb3IgZGVza3RvcCwgaVBhZCwgYW5kIGlQaG9uZSBhcmUgdGhlIG9ubHkgYnJvd3NlcnMgdGhhdFxuLy8gaGF2ZSBXZWJLaXRNdXRhdGlvbk9ic2VydmVyIGJ1dCBub3QgdW4tcHJlZml4ZWQgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11c3QgdXNlIGBnbG9iYWxgIG9yIGBzZWxmYCBpbnN0ZWFkIG9mIGB3aW5kb3dgIHRvIHdvcmsgaW4gYm90aCBmcmFtZXMgYW5kIHdlYlxuLy8gd29ya2Vycy4gYGdsb2JhbGAgaXMgYSBwcm92aXNpb24gb2YgQnJvd3NlcmlmeSwgTXIsIE1ycywgb3IgTW9wLlxuXG4vKiBnbG9iYWxzIHNlbGYgKi9cbnZhciBzY29wZSA9IHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiBzZWxmO1xudmFyIEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gc2NvcGUuTXV0YXRpb25PYnNlcnZlciB8fCBzY29wZS5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuXG4vLyBNdXRhdGlvbk9ic2VydmVycyBhcmUgZGVzaXJhYmxlIGJlY2F1c2UgdGhleSBoYXZlIGhpZ2ggcHJpb3JpdHkgYW5kIHdvcmtcbi8vIHJlbGlhYmx5IGV2ZXJ5d2hlcmUgdGhleSBhcmUgaW1wbGVtZW50ZWQuXG4vLyBUaGV5IGFyZSBpbXBsZW1lbnRlZCBpbiBhbGwgbW9kZXJuIGJyb3dzZXJzLlxuLy9cbi8vIC0gQW5kcm9pZCA0LTQuM1xuLy8gLSBDaHJvbWUgMjYtMzRcbi8vIC0gRmlyZWZveCAxNC0yOVxuLy8gLSBJbnRlcm5ldCBFeHBsb3JlciAxMVxuLy8gLSBpUGFkIFNhZmFyaSA2LTcuMVxuLy8gLSBpUGhvbmUgU2FmYXJpIDctNy4xXG4vLyAtIFNhZmFyaSA2LTdcbmlmICh0eXBlb2YgQnJvd3Nlck11dGF0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJlcXVlc3RGbHVzaCA9IG1ha2VSZXF1ZXN0Q2FsbEZyb21NdXRhdGlvbk9ic2VydmVyKGZsdXNoKTtcblxuLy8gTWVzc2FnZUNoYW5uZWxzIGFyZSBkZXNpcmFibGUgYmVjYXVzZSB0aGV5IGdpdmUgZGlyZWN0IGFjY2VzcyB0byB0aGUgSFRNTFxuLy8gdGFzayBxdWV1ZSwgYXJlIGltcGxlbWVudGVkIGluIEludGVybmV0IEV4cGxvcmVyIDEwLCBTYWZhcmkgNS4wLTEsIGFuZCBPcGVyYVxuLy8gMTEtMTIsIGFuZCBpbiB3ZWIgd29ya2VycyBpbiBtYW55IGVuZ2luZXMuXG4vLyBBbHRob3VnaCBtZXNzYWdlIGNoYW5uZWxzIHlpZWxkIHRvIGFueSBxdWV1ZWQgcmVuZGVyaW5nIGFuZCBJTyB0YXNrcywgdGhleVxuLy8gd291bGQgYmUgYmV0dGVyIHRoYW4gaW1wb3NpbmcgdGhlIDRtcyBkZWxheSBvZiB0aW1lcnMuXG4vLyBIb3dldmVyLCB0aGV5IGRvIG5vdCB3b3JrIHJlbGlhYmx5IGluIEludGVybmV0IEV4cGxvcmVyIG9yIFNhZmFyaS5cblxuLy8gSW50ZXJuZXQgRXhwbG9yZXIgMTAgaXMgdGhlIG9ubHkgYnJvd3NlciB0aGF0IGhhcyBzZXRJbW1lZGlhdGUgYnV0IGRvZXNcbi8vIG5vdCBoYXZlIE11dGF0aW9uT2JzZXJ2ZXJzLlxuLy8gQWx0aG91Z2ggc2V0SW1tZWRpYXRlIHlpZWxkcyB0byB0aGUgYnJvd3NlcidzIHJlbmRlcmVyLCBpdCB3b3VsZCBiZVxuLy8gcHJlZmVycmFibGUgdG8gZmFsbGluZyBiYWNrIHRvIHNldFRpbWVvdXQgc2luY2UgaXQgZG9lcyBub3QgaGF2ZVxuLy8gdGhlIG1pbmltdW0gNG1zIHBlbmFsdHkuXG4vLyBVbmZvcnR1bmF0ZWx5IHRoZXJlIGFwcGVhcnMgdG8gYmUgYSBidWcgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAgTW9iaWxlIChhbmRcbi8vIERlc2t0b3AgdG8gYSBsZXNzZXIgZXh0ZW50KSB0aGF0IHJlbmRlcnMgYm90aCBzZXRJbW1lZGlhdGUgYW5kXG4vLyBNZXNzYWdlQ2hhbm5lbCB1c2VsZXNzIGZvciB0aGUgcHVycG9zZXMgb2YgQVNBUC5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9rcmlza293YWwvcS9pc3N1ZXMvMzk2XG5cbi8vIFRpbWVycyBhcmUgaW1wbGVtZW50ZWQgdW5pdmVyc2FsbHkuXG4vLyBXZSBmYWxsIGJhY2sgdG8gdGltZXJzIGluIHdvcmtlcnMgaW4gbW9zdCBlbmdpbmVzLCBhbmQgaW4gZm9yZWdyb3VuZFxuLy8gY29udGV4dHMgaW4gdGhlIGZvbGxvd2luZyBicm93c2Vycy5cbi8vIEhvd2V2ZXIsIG5vdGUgdGhhdCBldmVuIHRoaXMgc2ltcGxlIGNhc2UgcmVxdWlyZXMgbnVhbmNlcyB0byBvcGVyYXRlIGluIGFcbi8vIGJyb2FkIHNwZWN0cnVtIG9mIGJyb3dzZXJzLlxuLy9cbi8vIC0gRmlyZWZveCAzLTEzXG4vLyAtIEludGVybmV0IEV4cGxvcmVyIDYtOVxuLy8gLSBpUGFkIFNhZmFyaSA0LjNcbi8vIC0gTHlueCAyLjguN1xufSBlbHNlIHtcbiAgICByZXF1ZXN0Rmx1c2ggPSBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIoZmx1c2gpO1xufVxuXG4vLyBgcmVxdWVzdEZsdXNoYCByZXF1ZXN0cyB0aGF0IHRoZSBoaWdoIHByaW9yaXR5IGV2ZW50IHF1ZXVlIGJlIGZsdXNoZWQgYXNcbi8vIHNvb24gYXMgcG9zc2libGUuXG4vLyBUaGlzIGlzIHVzZWZ1bCB0byBwcmV2ZW50IGFuIGVycm9yIHRocm93biBpbiBhIHRhc2sgZnJvbSBzdGFsbGluZyB0aGUgZXZlbnRcbi8vIHF1ZXVlIGlmIHRoZSBleGNlcHRpb24gaGFuZGxlZCBieSBOb2RlLmpz4oCZc1xuLy8gYHByb2Nlc3Mub24oXCJ1bmNhdWdodEV4Y2VwdGlvblwiKWAgb3IgYnkgYSBkb21haW4uXG5yYXdBc2FwLnJlcXVlc3RGbHVzaCA9IHJlcXVlc3RGbHVzaDtcblxuLy8gVG8gcmVxdWVzdCBhIGhpZ2ggcHJpb3JpdHkgZXZlbnQsIHdlIGluZHVjZSBhIG11dGF0aW9uIG9ic2VydmVyIGJ5IHRvZ2dsaW5nXG4vLyB0aGUgdGV4dCBvZiBhIHRleHQgbm9kZSBiZXR3ZWVuIFwiMVwiIGFuZCBcIi0xXCIuXG5mdW5jdGlvbiBtYWtlUmVxdWVzdENhbGxGcm9tTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjaykge1xuICAgIHZhciB0b2dnbGUgPSAxO1xuICAgIHZhciBvYnNlcnZlciA9IG5ldyBCcm93c2VyTXV0YXRpb25PYnNlcnZlcihjYWxsYmFjayk7XG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKG5vZGUsIHtjaGFyYWN0ZXJEYXRhOiB0cnVlfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICB0b2dnbGUgPSAtdG9nZ2xlO1xuICAgICAgICBub2RlLmRhdGEgPSB0b2dnbGU7XG4gICAgfTtcbn1cblxuLy8gVGhlIG1lc3NhZ2UgY2hhbm5lbCB0ZWNobmlxdWUgd2FzIGRpc2NvdmVyZWQgYnkgTWFsdGUgVWJsIGFuZCB3YXMgdGhlXG4vLyBvcmlnaW5hbCBmb3VuZGF0aW9uIGZvciB0aGlzIGxpYnJhcnkuXG4vLyBodHRwOi8vd3d3Lm5vbmJsb2NraW5nLmlvLzIwMTEvMDYvd2luZG93bmV4dHRpY2suaHRtbFxuXG4vLyBTYWZhcmkgNi4wLjUgKGF0IGxlYXN0KSBpbnRlcm1pdHRlbnRseSBmYWlscyB0byBjcmVhdGUgbWVzc2FnZSBwb3J0cyBvbiBhXG4vLyBwYWdlJ3MgZmlyc3QgbG9hZC4gVGhhbmtmdWxseSwgdGhpcyB2ZXJzaW9uIG9mIFNhZmFyaSBzdXBwb3J0c1xuLy8gTXV0YXRpb25PYnNlcnZlcnMsIHNvIHdlIGRvbid0IG5lZWQgdG8gZmFsbCBiYWNrIGluIHRoYXQgY2FzZS5cblxuLy8gZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbU1lc3NhZ2VDaGFubmVsKGNhbGxiYWNrKSB7XG4vLyAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbi8vICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGNhbGxiYWNrO1xuLy8gICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbi8vICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSgwKTtcbi8vICAgICB9O1xuLy8gfVxuXG4vLyBGb3IgcmVhc29ucyBleHBsYWluZWQgYWJvdmUsIHdlIGFyZSBhbHNvIHVuYWJsZSB0byB1c2UgYHNldEltbWVkaWF0ZWBcbi8vIHVuZGVyIGFueSBjaXJjdW1zdGFuY2VzLlxuLy8gRXZlbiBpZiB3ZSB3ZXJlLCB0aGVyZSBpcyBhbm90aGVyIGJ1ZyBpbiBJbnRlcm5ldCBFeHBsb3JlciAxMC5cbi8vIEl0IGlzIG5vdCBzdWZmaWNpZW50IHRvIGFzc2lnbiBgc2V0SW1tZWRpYXRlYCB0byBgcmVxdWVzdEZsdXNoYCBiZWNhdXNlXG4vLyBgc2V0SW1tZWRpYXRlYCBtdXN0IGJlIGNhbGxlZCAqYnkgbmFtZSogYW5kIHRoZXJlZm9yZSBtdXN0IGJlIHdyYXBwZWQgaW4gYVxuLy8gY2xvc3VyZS5cbi8vIE5ldmVyIGZvcmdldC5cblxuLy8gZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuLy8gICAgIHJldHVybiBmdW5jdGlvbiByZXF1ZXN0Q2FsbCgpIHtcbi8vICAgICAgICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbi8vICAgICB9O1xuLy8gfVxuXG4vLyBTYWZhcmkgNi4wIGhhcyBhIHByb2JsZW0gd2hlcmUgdGltZXJzIHdpbGwgZ2V0IGxvc3Qgd2hpbGUgdGhlIHVzZXIgaXNcbi8vIHNjcm9sbGluZy4gVGhpcyBwcm9ibGVtIGRvZXMgbm90IGltcGFjdCBBU0FQIGJlY2F1c2UgU2FmYXJpIDYuMCBzdXBwb3J0c1xuLy8gbXV0YXRpb24gb2JzZXJ2ZXJzLCBzbyB0aGF0IGltcGxlbWVudGF0aW9uIGlzIHVzZWQgaW5zdGVhZC5cbi8vIEhvd2V2ZXIsIGlmIHdlIGV2ZXIgZWxlY3QgdG8gdXNlIHRpbWVycyBpbiBTYWZhcmksIHRoZSBwcmV2YWxlbnQgd29yay1hcm91bmRcbi8vIGlzIHRvIGFkZCBhIHNjcm9sbCBldmVudCBsaXN0ZW5lciB0aGF0IGNhbGxzIGZvciBhIGZsdXNoLlxuXG4vLyBgc2V0VGltZW91dGAgZG9lcyBub3QgY2FsbCB0aGUgcGFzc2VkIGNhbGxiYWNrIGlmIHRoZSBkZWxheSBpcyBsZXNzIHRoYW5cbi8vIGFwcHJveGltYXRlbHkgNyBpbiB3ZWIgd29ya2VycyBpbiBGaXJlZm94IDggdGhyb3VnaCAxOCwgYW5kIHNvbWV0aW1lcyBub3Rcbi8vIGV2ZW4gdGhlbi5cblxuZnVuY3Rpb24gbWFrZVJlcXVlc3RDYWxsRnJvbVRpbWVyKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3RDYWxsKCkge1xuICAgICAgICAvLyBXZSBkaXNwYXRjaCBhIHRpbWVvdXQgd2l0aCBhIHNwZWNpZmllZCBkZWxheSBvZiAwIGZvciBlbmdpbmVzIHRoYXRcbiAgICAgICAgLy8gY2FuIHJlbGlhYmx5IGFjY29tbW9kYXRlIHRoYXQgcmVxdWVzdC4gVGhpcyB3aWxsIHVzdWFsbHkgYmUgc25hcHBlZFxuICAgICAgICAvLyB0byBhIDQgbWlsaXNlY29uZCBkZWxheSwgYnV0IG9uY2Ugd2UncmUgZmx1c2hpbmcsIHRoZXJlJ3Mgbm8gZGVsYXlcbiAgICAgICAgLy8gYmV0d2VlbiBldmVudHMuXG4gICAgICAgIHZhciB0aW1lb3V0SGFuZGxlID0gc2V0VGltZW91dChoYW5kbGVUaW1lciwgMCk7XG4gICAgICAgIC8vIEhvd2V2ZXIsIHNpbmNlIHRoaXMgdGltZXIgZ2V0cyBmcmVxdWVudGx5IGRyb3BwZWQgaW4gRmlyZWZveFxuICAgICAgICAvLyB3b3JrZXJzLCB3ZSBlbmxpc3QgYW4gaW50ZXJ2YWwgaGFuZGxlIHRoYXQgd2lsbCB0cnkgdG8gZmlyZVxuICAgICAgICAvLyBhbiBldmVudCAyMCB0aW1lcyBwZXIgc2Vjb25kIHVudGlsIGl0IHN1Y2NlZWRzLlxuICAgICAgICB2YXIgaW50ZXJ2YWxIYW5kbGUgPSBzZXRJbnRlcnZhbChoYW5kbGVUaW1lciwgNTApO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRpbWVyKCkge1xuICAgICAgICAgICAgLy8gV2hpY2hldmVyIHRpbWVyIHN1Y2NlZWRzIHdpbGwgY2FuY2VsIGJvdGggdGltZXJzIGFuZFxuICAgICAgICAgICAgLy8gZXhlY3V0ZSB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dEhhbmRsZSk7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSGFuZGxlKTtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBUaGlzIGlzIGZvciBgYXNhcC5qc2Agb25seS5cbi8vIEl0cyBuYW1lIHdpbGwgYmUgcGVyaW9kaWNhbGx5IHJhbmRvbWl6ZWQgdG8gYnJlYWsgYW55IGNvZGUgdGhhdCBkZXBlbmRzIG9uXG4vLyBpdHMgZXhpc3RlbmNlLlxucmF3QXNhcC5tYWtlUmVxdWVzdENhbGxGcm9tVGltZXIgPSBtYWtlUmVxdWVzdENhbGxGcm9tVGltZXI7XG5cbi8vIEFTQVAgd2FzIG9yaWdpbmFsbHkgYSBuZXh0VGljayBzaGltIGluY2x1ZGVkIGluIFEuIFRoaXMgd2FzIGZhY3RvcmVkIG91dFxuLy8gaW50byB0aGlzIEFTQVAgcGFja2FnZS4gSXQgd2FzIGxhdGVyIGFkYXB0ZWQgdG8gUlNWUCB3aGljaCBtYWRlIGZ1cnRoZXJcbi8vIGFtZW5kbWVudHMuIFRoZXNlIGRlY2lzaW9ucywgcGFydGljdWxhcmx5IHRvIG1hcmdpbmFsaXplIE1lc3NhZ2VDaGFubmVsIGFuZFxuLy8gdG8gY2FwdHVyZSB0aGUgTXV0YXRpb25PYnNlcnZlciBpbXBsZW1lbnRhdGlvbiBpbiBhIGNsb3N1cmUsIHdlcmUgaW50ZWdyYXRlZFxuLy8gYmFjayBpbnRvIEFTQVAgcHJvcGVyLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RpbGRlaW8vcnN2cC5qcy9ibG9iL2NkZGY3MjMyNTQ2YTljZjg1ODUyNGI3NWNkZTZmOWVkZjcyNjIwYTcvbGliL3JzdnAvYXNhcC5qc1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbi8qKlxuICogQ29weXJpZ2h0IDIwMTUsIFlhaG9vISBJbmMuXG4gKiBDb3B5cmlnaHRzIGxpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIExpY2Vuc2UuIFNlZSB0aGUgYWNjb21wYW55aW5nIExJQ0VOU0UgZmlsZSBmb3IgdGVybXMuXG4gKi9cbnZhciBSRUFDVF9TVEFUSUNTID0ge1xuICBjaGlsZENvbnRleHRUeXBlczogdHJ1ZSxcbiAgY29udGV4dFR5cGU6IHRydWUsXG4gIGNvbnRleHRUeXBlczogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgZ2V0RGVmYXVsdFByb3BzOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczogdHJ1ZSxcbiAgbWl4aW5zOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgS05PV05fU1RBVElDUyA9IHtcbiAgbmFtZTogdHJ1ZSxcbiAgbGVuZ3RoOiB0cnVlLFxuICBwcm90b3R5cGU6IHRydWUsXG4gIGNhbGxlcjogdHJ1ZSxcbiAgY2FsbGVlOiB0cnVlLFxuICBhcmd1bWVudHM6IHRydWUsXG4gIGFyaXR5OiB0cnVlXG59O1xudmFyIEZPUldBUkRfUkVGX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIHJlbmRlcjogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlXG59O1xudmFyIE1FTU9fU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgY29tcGFyZTogdHJ1ZSxcbiAgZGVmYXVsdFByb3BzOiB0cnVlLFxuICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIFRZUEVfU1RBVElDUyA9IHt9O1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuRm9yd2FyZFJlZl0gPSBGT1JXQVJEX1JFRl9TVEFUSUNTO1xuVFlQRV9TVEFUSUNTW3JlYWN0SXMuTWVtb10gPSBNRU1PX1NUQVRJQ1M7XG5cbmZ1bmN0aW9uIGdldFN0YXRpY3MoY29tcG9uZW50KSB7XG4gIC8vIFJlYWN0IHYxNi4xMSBhbmQgYmVsb3dcbiAgaWYgKHJlYWN0SXMuaXNNZW1vKGNvbXBvbmVudCkpIHtcbiAgICByZXR1cm4gTUVNT19TVEFUSUNTO1xuICB9IC8vIFJlYWN0IHYxNi4xMiBhbmQgYWJvdmVcblxuXG4gIHJldHVybiBUWVBFX1NUQVRJQ1NbY29tcG9uZW50WyckJHR5cGVvZiddXSB8fCBSRUFDVF9TVEFUSUNTO1xufVxuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuZnVuY3Rpb24gaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBzb3VyY2VDb21wb25lbnQsIGJsYWNrbGlzdCkge1xuICBpZiAodHlwZW9mIHNvdXJjZUNvbXBvbmVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgIGlmIChvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgIHZhciBpbmhlcml0ZWRDb21wb25lbnQgPSBnZXRQcm90b3R5cGVPZihzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgaW5oZXJpdGVkQ29tcG9uZW50LCBibGFja2xpc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgaWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICB9XG5cbiAgICB2YXIgdGFyZ2V0U3RhdGljcyA9IGdldFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50KTtcbiAgICB2YXIgc291cmNlU3RhdGljcyA9IGdldFN0YXRpY3Moc291cmNlQ29tcG9uZW50KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG5cbiAgICAgIGlmICghS05PV05fU1RBVElDU1trZXldICYmICEoYmxhY2tsaXN0ICYmIGJsYWNrbGlzdFtrZXldKSAmJiAhKHNvdXJjZVN0YXRpY3MgJiYgc291cmNlU3RhdGljc1trZXldKSAmJiAhKHRhcmdldFN0YXRpY3MgJiYgdGFyZ2V0U3RhdGljc1trZXldKSkge1xuICAgICAgICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2VDb21wb25lbnQsIGtleSk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YXJnZXRDb21wb25lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaG9pc3ROb25SZWFjdFN0YXRpY3M7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcbnZhciBnZXRHbG9iYWwgPSBmdW5jdGlvbiAoKSB7XG5cdC8vIHRoZSBvbmx5IHJlbGlhYmxlIG1lYW5zIHRvIGdldCB0aGUgZ2xvYmFsIG9iamVjdCBpc1xuXHQvLyBgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKWBcblx0Ly8gSG93ZXZlciwgdGhpcyBjYXVzZXMgQ1NQIHZpb2xhdGlvbnMgaW4gQ2hyb21lIGFwcHMuXG5cdGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIHNlbGY7IH1cblx0aWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiB3aW5kb3c7IH1cblx0aWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBnbG9iYWw7IH1cblx0dGhyb3cgbmV3IEVycm9yKCd1bmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QnKTtcbn1cblxudmFyIGdsb2JhbE9iamVjdCA9IGdldEdsb2JhbCgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBnbG9iYWxPYmplY3QuZmV0Y2g7XG5cbi8vIE5lZWRlZCBmb3IgVHlwZVNjcmlwdCBhbmQgV2VicGFjay5cbmlmIChnbG9iYWxPYmplY3QuZmV0Y2gpIHtcblx0ZXhwb3J0cy5kZWZhdWx0ID0gZ2xvYmFsT2JqZWN0LmZldGNoLmJpbmQoZ2xvYmFsT2JqZWN0KTtcbn1cblxuZXhwb3J0cy5IZWFkZXJzID0gZ2xvYmFsT2JqZWN0LkhlYWRlcnM7XG5leHBvcnRzLlJlcXVlc3QgPSBnbG9iYWxPYmplY3QuUmVxdWVzdDtcbmV4cG9ydHMuUmVzcG9uc2UgPSBnbG9iYWxPYmplY3QuUmVzcG9uc2U7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJpZ2ludDogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjE0LjBcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbj1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gdShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IodSgyMjcpKTtcbmZ1bmN0aW9uIGJhKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBkYT0hMSxlYT1udWxsLGZhPSExLGhhPW51bGwsaWE9e29uRXJyb3I6ZnVuY3Rpb24oYSl7ZGE9ITA7ZWE9YX19O2Z1bmN0aW9uIGphKGEsYixjLGQsZSxmLGcsaCxrKXtkYT0hMTtlYT1udWxsO2JhLmFwcGx5KGlhLGFyZ3VtZW50cyl9ZnVuY3Rpb24ga2EoYSxiLGMsZCxlLGYsZyxoLGspe2phLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihkYSl7aWYoZGEpe3ZhciBsPWVhO2RhPSExO2VhPW51bGx9ZWxzZSB0aHJvdyBFcnJvcih1KDE5OCkpO2ZhfHwoZmE9ITAsaGE9bCl9fXZhciBsYT1udWxsLG1hPW51bGwsbmE9bnVsbDtcbmZ1bmN0aW9uIG9hKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1uYShjKTtrYShkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfXZhciBwYT1udWxsLHFhPXt9O1xuZnVuY3Rpb24gcmEoKXtpZihwYSlmb3IodmFyIGEgaW4gcWEpe3ZhciBiPXFhW2FdLGM9cGEuaW5kZXhPZihhKTtpZighKC0xPGMpKXRocm93IEVycm9yKHUoOTYsYSkpO2lmKCFzYVtjXSl7aWYoIWIuZXh0cmFjdEV2ZW50cyl0aHJvdyBFcnJvcih1KDk3LGEpKTtzYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxnPWIsaD1kO2lmKHRhLmhhc093blByb3BlcnR5KGgpKXRocm93IEVycm9yKHUoOTksaCkpO3RhW2hdPWY7dmFyIGs9Zi5waGFzZWRSZWdpc3RyYXRpb25OYW1lcztpZihrKXtmb3IoZSBpbiBrKWsuaGFzT3duUHJvcGVydHkoZSkmJnVhKGtbZV0sZyxoKTtlPSEwfWVsc2UgZi5yZWdpc3RyYXRpb25OYW1lPyh1YShmLnJlZ2lzdHJhdGlvbk5hbWUsZyxoKSxlPSEwKTplPSExO2lmKCFlKXRocm93IEVycm9yKHUoOTgsZCxhKSk7fX19fVxuZnVuY3Rpb24gdWEoYSxiLGMpe2lmKHZhW2FdKXRocm93IEVycm9yKHUoMTAwLGEpKTt2YVthXT1iO3dhW2FdPWIuZXZlbnRUeXBlc1tjXS5kZXBlbmRlbmNpZXN9dmFyIHNhPVtdLHRhPXt9LHZhPXt9LHdhPXt9O2Z1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO2lmKCFxYS5oYXNPd25Qcm9wZXJ0eShjKXx8cWFbY10hPT1kKXtpZihxYVtjXSl0aHJvdyBFcnJvcih1KDEwMixjKSk7cWFbY109ZDtiPSEwfX1iJiZyYSgpfXZhciB5YT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksemE9bnVsbCxBYT1udWxsLEJhPW51bGw7XG5mdW5jdGlvbiBDYShhKXtpZihhPW1hKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgemEpdGhyb3cgRXJyb3IodSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1sYShiKSx6YShhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBEYShhKXtBYT9CYT9CYS5wdXNoKGEpOkJhPVthXTpBYT1hfWZ1bmN0aW9uIEVhKCl7aWYoQWEpe3ZhciBhPUFhLGI9QmE7QmE9QWE9bnVsbDtDYShhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQ2EoYlthXSl9fWZ1bmN0aW9uIEZhKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gR2EoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBIYSgpe312YXIgSWE9RmEsSmE9ITEsS2E9ITE7ZnVuY3Rpb24gTGEoKXtpZihudWxsIT09QWF8fG51bGwhPT1CYSlIYSgpLEVhKCl9XG5mdW5jdGlvbiBNYShhLGIsYyl7aWYoS2EpcmV0dXJuIGEoYixjKTtLYT0hMDt0cnl7cmV0dXJuIElhKGEsYixjKX1maW5hbGx5e0thPSExLExhKCl9fXZhciBOYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sT2E9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxQYT17fSxRYT17fTtcbmZ1bmN0aW9uIFJhKGEpe2lmKE9hLmNhbGwoUWEsYSkpcmV0dXJuITA7aWYoT2EuY2FsbChQYSxhKSlyZXR1cm4hMTtpZihOYS50ZXN0KGEpKXJldHVybiBRYVthXT0hMDtQYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBTYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFRhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fFNhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZil7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWZ9dmFyIEM9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07Q1tiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDYsITEsYSxudWxsLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7dmFyIFVhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gVmEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsXG5WYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxudWxsLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5DLnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITApO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITApfSk7dmFyIFdhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlclwiKXx8KFdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXI9e2N1cnJlbnQ6bnVsbH0pO1dhLmhhc093blByb3BlcnR5KFwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWdcIil8fChXYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZz17c3VzcGVuc2U6bnVsbH0pO1xuZnVuY3Rpb24gWGEoYSxiLGMsZCl7dmFyIGU9Qy5oYXNPd25Qcm9wZXJ0eShiKT9DW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoVGEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP1JhKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG52YXIgWWE9L14oLiopW1xcXFxcXC9dLyxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsWmE9RT9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMywkYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsYWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsYmI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsY2I9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsZGI9RT9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksZWI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxmYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsZ2I9RT9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsaGI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsaWI9RT9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLGpiPUU/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsa2I9RT9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixsYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxtYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gbmIoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPW1iJiZhW21iXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIG9iKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gcGIoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSAkYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgY2I6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgYmI6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBoYjpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBpYjpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBlYjpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIGRiOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgZ2I6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIGpiOnJldHVybiBwYihhLnR5cGUpO2Nhc2UgbGI6cmV0dXJuIHBiKGEucmVuZGVyKTtjYXNlIGtiOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gcGIoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcWIoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPXBiKGEudHlwZSk7Yz1udWxsO2QmJihjPXBiKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UoWWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHJiKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBzYihhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gdGIoYSl7dmFyIGI9c2IoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIHhiKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj10YihhKSl9ZnVuY3Rpb24geWIoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPXNiKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gemIoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG4oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfVxuZnVuY3Rpb24gQWIoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9cmIobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBCYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlhhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBDYihhLGIpe0JiKGEsYik7dmFyIGM9cmIoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/RGIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmRGIoYSxiLnR5cGUscmIoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBFYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gRGIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIEZiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIEdiKGEsYil7YT1uKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9RmIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gSGIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK3JiKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IodSg5MSkpO3JldHVybiBuKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIEpiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHUoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih1KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6cmIoYyl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1yYihiLnZhbHVlKSxkPXJiKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gTGIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIgTWI9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gTmIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBPYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/TmIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgUGIsUWI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09TWIuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7UGI9UGJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7UGIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9UGIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gUmIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1mdW5jdGlvbiBTYihhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBUYj17YW5pbWF0aW9uZW5kOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6U2IoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxVYj17fSxWYj17fTtcbnlhJiYoVmI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgVGIuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgVGIuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgVGIudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBXYihhKXtpZihVYlthXSlyZXR1cm4gVWJbYV07aWYoIVRiW2FdKXJldHVybiBhO3ZhciBiPVRiW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFZiKXJldHVybiBVYlthXT1iW2NdO3JldHVybiBhfVxudmFyIFhiPVdiKFwiYW5pbWF0aW9uZW5kXCIpLFliPVdiKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFpiPVdiKFwiYW5pbWF0aW9uc3RhcnRcIiksJGI9V2IoXCJ0cmFuc2l0aW9uZW5kXCIpLGFjPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxiYz1uZXcgKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwKTtmdW5jdGlvbiBjYyhhKXt2YXIgYj1iYy5nZXQoYSk7dm9pZCAwPT09YiYmKGI9bmV3IE1hcCxiYy5zZXQoYSxiKSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBkYyhhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZWZmZWN0VGFnJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBlYyhhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGZjKGEpe2lmKGRjKGEpIT09YSl0aHJvdyBFcnJvcih1KDE4OCkpO31cbmZ1bmN0aW9uIGdjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPWRjKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGZjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGZjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IodSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih1KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHUoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gaGMoYSl7YT1nYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGljKGEsYil7aWYobnVsbD09Yil0aHJvdyBFcnJvcih1KDMwKSk7aWYobnVsbD09YSlyZXR1cm4gYjtpZihBcnJheS5pc0FycmF5KGEpKXtpZihBcnJheS5pc0FycmF5KGIpKXJldHVybiBhLnB1c2guYXBwbHkoYSxiKSxhO2EucHVzaChiKTtyZXR1cm4gYX1yZXR1cm4gQXJyYXkuaXNBcnJheShiKT9bYV0uY29uY2F0KGIpOlthLGJdfWZ1bmN0aW9uIGpjKGEsYixjKXtBcnJheS5pc0FycmF5KGEpP2EuZm9yRWFjaChiLGMpOmEmJmIuY2FsbChjLGEpfXZhciBrYz1udWxsO1xuZnVuY3Rpb24gbGMoYSl7aWYoYSl7dmFyIGI9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsYz1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGIpKWZvcih2YXIgZD0wO2Q8Yi5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZCsrKW9hKGEsYltkXSxjW2RdKTtlbHNlIGImJm9hKGEsYixjKTthLl9kaXNwYXRjaExpc3RlbmVycz1udWxsO2EuX2Rpc3BhdGNoSW5zdGFuY2VzPW51bGw7YS5pc1BlcnNpc3RlbnQoKXx8YS5jb25zdHJ1Y3Rvci5yZWxlYXNlKGEpfX1mdW5jdGlvbiBtYyhhKXtudWxsIT09YSYmKGtjPWljKGtjLGEpKTthPWtjO2tjPW51bGw7aWYoYSl7amMoYSxsYyk7aWYoa2MpdGhyb3cgRXJyb3IodSg5NSkpO2lmKGZhKXRocm93IGE9aGEsZmE9ITEsaGE9bnVsbCxhO319XG5mdW5jdGlvbiBuYyhhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9ZnVuY3Rpb24gb2MoYSl7aWYoIXlhKXJldHVybiExO2E9XCJvblwiK2E7dmFyIGI9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifXZhciBwYz1bXTtmdW5jdGlvbiBxYyhhKXthLnRvcExldmVsVHlwZT1udWxsO2EubmF0aXZlRXZlbnQ9bnVsbDthLnRhcmdldEluc3Q9bnVsbDthLmFuY2VzdG9ycy5sZW5ndGg9MDsxMD5wYy5sZW5ndGgmJnBjLnB1c2goYSl9XG5mdW5jdGlvbiByYyhhLGIsYyxkKXtpZihwYy5sZW5ndGgpe3ZhciBlPXBjLnBvcCgpO2UudG9wTGV2ZWxUeXBlPWE7ZS5ldmVudFN5c3RlbUZsYWdzPWQ7ZS5uYXRpdmVFdmVudD1iO2UudGFyZ2V0SW5zdD1jO3JldHVybiBlfXJldHVybnt0b3BMZXZlbFR5cGU6YSxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Yix0YXJnZXRJbnN0OmMsYW5jZXN0b3JzOltdfX1cbmZ1bmN0aW9uIHNjKGEpe3ZhciBiPWEudGFyZ2V0SW5zdCxjPWI7ZG97aWYoIWMpe2EuYW5jZXN0b3JzLnB1c2goYyk7YnJlYWt9dmFyIGQ9YztpZigzPT09ZC50YWcpZD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Vsc2V7Zm9yKDtkLnJldHVybjspZD1kLnJldHVybjtkPTMhPT1kLnRhZz9udWxsOmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm99aWYoIWQpYnJlYWs7Yj1jLnRhZzs1IT09YiYmNiE9PWJ8fGEuYW5jZXN0b3JzLnB1c2goYyk7Yz10YyhkKX13aGlsZShjKTtmb3IoYz0wO2M8YS5hbmNlc3RvcnMubGVuZ3RoO2MrKyl7Yj1hLmFuY2VzdG9yc1tjXTt2YXIgZT1uYyhhLm5hdGl2ZUV2ZW50KTtkPWEudG9wTGV2ZWxUeXBlO3ZhciBmPWEubmF0aXZlRXZlbnQsZz1hLmV2ZW50U3lzdGVtRmxhZ3M7MD09PWMmJihnfD02NCk7Zm9yKHZhciBoPW51bGwsaz0wO2s8c2EubGVuZ3RoO2srKyl7dmFyIGw9c2Fba107bCYmKGw9bC5leHRyYWN0RXZlbnRzKGQsYixmLGUsZykpJiYoaD1cbmljKGgsbCkpfW1jKGgpfX1mdW5jdGlvbiB1YyhhLGIsYyl7aWYoIWMuaGFzKGEpKXtzd2l0Y2goYSl7Y2FzZSBcInNjcm9sbFwiOnZjKGIsXCJzY3JvbGxcIiwhMCk7YnJlYWs7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjp2YyhiLFwiZm9jdXNcIiwhMCk7dmMoYixcImJsdXJcIiwhMCk7Yy5zZXQoXCJibHVyXCIsbnVsbCk7Yy5zZXQoXCJmb2N1c1wiLG51bGwpO2JyZWFrO2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xvc2VcIjpvYyhhKSYmdmMoYixhLCEwKTticmVhaztjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwicmVzZXRcIjpicmVhaztkZWZhdWx0Oi0xPT09YWMuaW5kZXhPZihhKSYmRihhLGIpfWMuc2V0KGEsbnVsbCl9fVxudmFyIHdjLHhjLHljLHpjPSExLEFjPVtdLEJjPW51bGwsQ2M9bnVsbCxEYz1udWxsLEVjPW5ldyBNYXAsRmM9bmV3IE1hcCxHYz1bXSxIYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNsb3NlIGNhbmNlbCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpLEljPVwiZm9jdXMgYmx1ciBkcmFnZW50ZXIgZHJhZ2xlYXZlIG1vdXNlb3ZlciBtb3VzZW91dCBwb2ludGVyb3ZlciBwb2ludGVyb3V0IGdvdHBvaW50ZXJjYXB0dXJlIGxvc3Rwb2ludGVyY2FwdHVyZVwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIEpjKGEsYil7dmFyIGM9Y2MoYik7SGMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KTtJYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pfWZ1bmN0aW9uIEtjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLHRvcExldmVsVHlwZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wzMixuYXRpdmVFdmVudDplLGNvbnRhaW5lcjpkfX1cbmZ1bmN0aW9uIExjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6QmM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOkNjPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOkRjPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpFYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpGYy5kZWxldGUoYi5wb2ludGVySWQpfX1mdW5jdGlvbiBNYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPUtjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPU5jKGIpLG51bGwhPT1iJiZ4YyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBPYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNcIjpyZXR1cm4gQmM9TWMoQmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIENjPU1jKENjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBEYz1NYyhEYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO0VjLnNldChmLE1jKEVjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxGYy5zZXQoZixNYyhGYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBQYyhhKXt2YXIgYj10YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPWRjKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPWVjKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO3IudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KGEucHJpb3JpdHksZnVuY3Rpb24oKXt5YyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9ZnVuY3Rpb24gUWMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO3ZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yil7dmFyIGM9TmMoYik7bnVsbCE9PWMmJnhjKGMpO2EuYmxvY2tlZE9uPWI7cmV0dXJuITF9cmV0dXJuITB9XG5mdW5jdGlvbiBTYyhhLGIsYyl7UWMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uIFRjKCl7Zm9yKHpjPSExOzA8QWMubGVuZ3RoOyl7dmFyIGE9QWNbMF07aWYobnVsbCE9PWEuYmxvY2tlZE9uKXthPU5jKGEuYmxvY2tlZE9uKTtudWxsIT09YSYmd2MoYSk7YnJlYWt9dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO251bGwhPT1iP2EuYmxvY2tlZE9uPWI6QWMuc2hpZnQoKX1udWxsIT09QmMmJlFjKEJjKSYmKEJjPW51bGwpO251bGwhPT1DYyYmUWMoQ2MpJiYoQ2M9bnVsbCk7bnVsbCE9PURjJiZRYyhEYykmJihEYz1udWxsKTtFYy5mb3JFYWNoKFNjKTtGYy5mb3JFYWNoKFNjKX1mdW5jdGlvbiBVYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsemN8fCh6Yz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxUYykpKX1cbmZ1bmN0aW9uIFZjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIFVjKGIsYSl9aWYoMDxBYy5sZW5ndGgpe1VjKEFjWzBdLGEpO2Zvcih2YXIgYz0xO2M8QWMubGVuZ3RoO2MrKyl7dmFyIGQ9QWNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1CYyYmVWMoQmMsYSk7bnVsbCE9PUNjJiZVYyhDYyxhKTtudWxsIT09RGMmJlVjKERjLGEpO0VjLmZvckVhY2goYik7RmMuZm9yRWFjaChiKTtmb3IoYz0wO2M8R2MubGVuZ3RoO2MrKylkPUdjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxHYy5sZW5ndGgmJihjPUdjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVBjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmR2Muc2hpZnQoKX1cbnZhciBXYz17fSxZYz1uZXcgTWFwLFpjPW5ldyBNYXAsJGM9W1wiYWJvcnRcIixcImFib3J0XCIsWGIsXCJhbmltYXRpb25FbmRcIixZYixcImFuaW1hdGlvbkl0ZXJhdGlvblwiLFpiLFwiYW5pbWF0aW9uU3RhcnRcIixcImNhbnBsYXlcIixcImNhblBsYXlcIixcImNhbnBsYXl0aHJvdWdoXCIsXCJjYW5QbGF5VGhyb3VnaFwiLFwiZHVyYXRpb25jaGFuZ2VcIixcImR1cmF0aW9uQ2hhbmdlXCIsXCJlbXB0aWVkXCIsXCJlbXB0aWVkXCIsXCJlbmNyeXB0ZWRcIixcImVuY3J5cHRlZFwiLFwiZW5kZWRcIixcImVuZGVkXCIsXCJlcnJvclwiLFwiZXJyb3JcIixcImdvdHBvaW50ZXJjYXB0dXJlXCIsXCJnb3RQb2ludGVyQ2FwdHVyZVwiLFwibG9hZFwiLFwibG9hZFwiLFwibG9hZGVkZGF0YVwiLFwibG9hZGVkRGF0YVwiLFwibG9hZGVkbWV0YWRhdGFcIixcImxvYWRlZE1ldGFkYXRhXCIsXCJsb2Fkc3RhcnRcIixcImxvYWRTdGFydFwiLFwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFxuXCJzZWVraW5nXCIsXCJzdGFsbGVkXCIsXCJzdGFsbGVkXCIsXCJzdXNwZW5kXCIsXCJzdXNwZW5kXCIsXCJ0aW1ldXBkYXRlXCIsXCJ0aW1lVXBkYXRlXCIsJGIsXCJ0cmFuc2l0aW9uRW5kXCIsXCJ3YWl0aW5nXCIsXCJ3YWl0aW5nXCJdO2Z1bmN0aW9uIGFkKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKz0yKXt2YXIgZD1hW2NdLGU9YVtjKzFdLGY9XCJvblwiKyhlWzBdLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSk7Zj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZixjYXB0dXJlZDpmK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2RdLGV2ZW50UHJpb3JpdHk6Yn07WmMuc2V0KGQsYik7WWMuc2V0KGQsZik7V2NbZV09Zn19XG5hZChcImJsdXIgYmx1ciBjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1cyBmb2N1cyBpbnB1dCBpbnB1dCBpbnZhbGlkIGludmFsaWQga2V5ZG93biBrZXlEb3duIGtleXByZXNzIGtleVByZXNzIGtleXVwIGtleVVwIG1vdXNlZG93biBtb3VzZURvd24gbW91c2V1cCBtb3VzZVVwIHBhc3RlIHBhc3RlIHBhdXNlIHBhdXNlIHBsYXkgcGxheSBwb2ludGVyY2FuY2VsIHBvaW50ZXJDYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlckRvd24gcG9pbnRlcnVwIHBvaW50ZXJVcCByYXRlY2hhbmdlIHJhdGVDaGFuZ2UgcmVzZXQgcmVzZXQgc2Vla2VkIHNlZWtlZCBzdWJtaXQgc3VibWl0IHRvdWNoY2FuY2VsIHRvdWNoQ2FuY2VsIHRvdWNoZW5kIHRvdWNoRW5kIHRvdWNoc3RhcnQgdG91Y2hTdGFydCB2b2x1bWVjaGFuZ2Ugdm9sdW1lQ2hhbmdlXCIuc3BsaXQoXCIgXCIpLDApO1xuYWQoXCJkcmFnIGRyYWcgZHJhZ2VudGVyIGRyYWdFbnRlciBkcmFnZXhpdCBkcmFnRXhpdCBkcmFnbGVhdmUgZHJhZ0xlYXZlIGRyYWdvdmVyIGRyYWdPdmVyIG1vdXNlbW92ZSBtb3VzZU1vdmUgbW91c2VvdXQgbW91c2VPdXQgbW91c2VvdmVyIG1vdXNlT3ZlciBwb2ludGVybW92ZSBwb2ludGVyTW92ZSBwb2ludGVyb3V0IHBvaW50ZXJPdXQgcG9pbnRlcm92ZXIgcG9pbnRlck92ZXIgc2Nyb2xsIHNjcm9sbCB0b2dnbGUgdG9nZ2xlIHRvdWNobW92ZSB0b3VjaE1vdmUgd2hlZWwgd2hlZWxcIi5zcGxpdChcIiBcIiksMSk7YWQoJGMsMik7Zm9yKHZhciBiZD1cImNoYW5nZSBzZWxlY3Rpb25jaGFuZ2UgdGV4dElucHV0IGNvbXBvc2l0aW9uc3RhcnQgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb251cGRhdGVcIi5zcGxpdChcIiBcIiksY2Q9MDtjZDxiZC5sZW5ndGg7Y2QrKylaYy5zZXQoYmRbY2RdLDApO1xudmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gRihhLGIpe3ZjKGIsYSwhMSl9ZnVuY3Rpb24gdmMoYSxiLGMpe3ZhciBkPVpjLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZD8yOmQpe2Nhc2UgMDpkPWdkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7Y2FzZSAxOmQ9aGQuYmluZChudWxsLGIsMSxhKTticmVhaztkZWZhdWx0OmQ9aWQuYmluZChudWxsLGIsMSxhKX1jP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITApOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGQsITEpfWZ1bmN0aW9uIGdkKGEsYixjLGQpe0phfHxIYSgpO3ZhciBlPWlkLGY9SmE7SmE9ITA7dHJ5e0dhKGUsYSxiLGMsZCl9ZmluYWxseXsoSmE9Zil8fExhKCl9fWZ1bmN0aW9uIGhkKGEsYixjLGQpe2VkKGRkLGlkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBpZChhLGIsYyxkKXtpZihmZClpZigwPEFjLmxlbmd0aCYmLTE8SGMuaW5kZXhPZihhKSlhPUtjKG51bGwsYSxiLGMsZCksQWMucHVzaChhKTtlbHNle3ZhciBlPVJjKGEsYixjLGQpO2lmKG51bGw9PT1lKUxjKGEsZCk7ZWxzZSBpZigtMTxIYy5pbmRleE9mKGEpKWE9S2MoZSxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2UgaWYoIU9jKGUsYSxiLGMsZCkpe0xjKGEsZCk7YT1yYyhhLGQsbnVsbCxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX19fX1cbmZ1bmN0aW9uIFJjKGEsYixjLGQpe2M9bmMoZCk7Yz10YyhjKTtpZihudWxsIT09Yyl7dmFyIGU9ZGMoYyk7aWYobnVsbD09PWUpYz1udWxsO2Vsc2V7dmFyIGY9ZS50YWc7aWYoMTM9PT1mKXtjPWVjKGUpO2lmKG51bGwhPT1jKXJldHVybiBjO2M9bnVsbH1lbHNlIGlmKDM9PT1mKXtpZihlLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09ZS50YWc/ZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2M9bnVsbH1lbHNlIGUhPT1jJiYoYz1udWxsKX19YT1yYyhhLGQsYyxiKTt0cnl7TWEoc2MsYSl9ZmluYWxseXtxYyhhKX1yZXR1cm4gbnVsbH1cbnZhciBqZD17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxrZD1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoamQpLmZvckVhY2goZnVuY3Rpb24oYSl7a2QuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtqZFtiXT1qZFthXX0pfSk7ZnVuY3Rpb24gbGQoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fGpkLmhhc093blByb3BlcnR5KGEpJiZqZFthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBtZChhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1sZChjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciBuZD1uKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gb2QoYSxiKXtpZihiKXtpZihuZFthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoMTM3LGEsXCJcIikpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IodSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IodSg2MixcIlwiKSk7fX1cbmZ1bmN0aW9uIHBkKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgcWQ9TWIuaHRtbDtmdW5jdGlvbiByZChhLGIpe2E9OT09PWEubm9kZVR5cGV8fDExPT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDt2YXIgYz1jYyhhKTtiPXdhW2JdO2Zvcih2YXIgZD0wO2Q8Yi5sZW5ndGg7ZCsrKXVjKGJbZF0sYSxjKX1mdW5jdGlvbiBzZCgpe31cbmZ1bmN0aW9uIHRkKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1mdW5jdGlvbiB1ZChhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9ZnVuY3Rpb24gdmQoYSxiKXt2YXIgYz11ZChhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz11ZChjKX19XG5mdW5jdGlvbiB3ZChhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP3dkKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1mdW5jdGlvbiB4ZCgpe2Zvcih2YXIgYT13aW5kb3csYj10ZCgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj10ZChhLmRvY3VtZW50KX1yZXR1cm4gYn1cbmZ1bmN0aW9uIHlkKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9dmFyIHpkPVwiJFwiLEFkPVwiLyRcIixCZD1cIiQ/XCIsQ2Q9XCIkIVwiLERkPW51bGwsRWQ9bnVsbDtmdW5jdGlvbiBGZChhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBHZChhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIEhkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLElkPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBKZChhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1cbmZ1bmN0aW9uIEtkKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PXpkfHxjPT09Q2R8fGM9PT1CZCl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2UgYz09PUFkJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTGQ9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksTWQ9XCJfX3JlYWN0SW50ZXJuYWxJbnN0YW5jZSRcIitMZCxOZD1cIl9fcmVhY3RFdmVudEhhbmRsZXJzJFwiK0xkLE9kPVwiX19yZWFjdENvbnRhaW5lcmUkXCIrTGQ7XG5mdW5jdGlvbiB0YyhhKXt2YXIgYj1hW01kXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tPZF18fGNbTWRdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9S2QoYSk7bnVsbCE9PWE7KXtpZihjPWFbTWRdKXJldHVybiBjO2E9S2QoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIE5jKGEpe2E9YVtNZF18fGFbT2RdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiBQZChhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IodSgzMykpO31mdW5jdGlvbiBRZChhKXtyZXR1cm4gYVtOZF18fG51bGx9XG5mdW5jdGlvbiBSZChhKXtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gU2QoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZighYylyZXR1cm4gbnVsbDt2YXIgZD1sYShjKTtpZighZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMpdGhyb3cgRXJyb3IodSgyMzEsXG5iLHR5cGVvZiBjKSk7cmV0dXJuIGN9ZnVuY3Rpb24gVGQoYSxiLGMpe2lmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBVZChhKXtpZihhJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKXtmb3IodmFyIGI9YS5fdGFyZ2V0SW5zdCxjPVtdO2I7KWMucHVzaChiKSxiPVJkKGIpO2ZvcihiPWMubGVuZ3RoOzA8Yi0tOylUZChjW2JdLFwiY2FwdHVyZWRcIixhKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKVRkKGNbYl0sXCJidWJibGVkXCIsYSl9fVxuZnVuY3Rpb24gVmQoYSxiLGMpe2EmJmMmJmMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmKGI9U2QoYSxjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUpKSYmKGMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpKX1mdW5jdGlvbiBXZChhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJlZkKGEuX3RhcmdldEluc3QsbnVsbCxhKX1mdW5jdGlvbiBYZChhKXtqYyhhLFVkKX12YXIgWWQ9bnVsbCxaZD1udWxsLCRkPW51bGw7XG5mdW5jdGlvbiBhZSgpe2lmKCRkKXJldHVybiAkZDt2YXIgYSxiPVpkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuICRkPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gYmUoKXtyZXR1cm4hMH1mdW5jdGlvbiBjZSgpe3JldHVybiExfVxuZnVuY3Rpb24gRyhhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/YmU6Y2U7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1jZTtyZXR1cm4gdGhpc31cbm4oRy5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1iZSl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1iZSl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt0aGlzLmlzUGVyc2lzdGVudD1iZX0saXNQZXJzaXN0ZW50OmNlLGRlc3RydWN0b3I6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZSxcbmI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7dGhpcy5uYXRpdmVFdmVudD10aGlzLl90YXJnZXRJbnN0PXRoaXMuZGlzcGF0Y2hDb25maWc9bnVsbDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWNlO3RoaXMuX2Rpc3BhdGNoSW5zdGFuY2VzPXRoaXMuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGx9fSk7Ry5JbnRlcmZhY2U9e3R5cGU6bnVsbCx0YXJnZXQ6bnVsbCxjdXJyZW50VGFyZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGx9LGV2ZW50UGhhc2U6bnVsbCxidWJibGVzOm51bGwsY2FuY2VsYWJsZTpudWxsLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6bnVsbCxpc1RydXN0ZWQ6bnVsbH07XG5HLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtuKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1uKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO2RlKGMpO3JldHVybiBjfTtkZShHKTtmdW5jdGlvbiBlZShhLGIsYyxkKXtpZih0aGlzLmV2ZW50UG9vbC5sZW5ndGgpe3ZhciBlPXRoaXMuZXZlbnRQb29sLnBvcCgpO3RoaXMuY2FsbChlLGEsYixjLGQpO3JldHVybiBlfXJldHVybiBuZXcgdGhpcyhhLGIsYyxkKX1cbmZ1bmN0aW9uIGZlKGEpe2lmKCEoYSBpbnN0YW5jZW9mIHRoaXMpKXRocm93IEVycm9yKHUoMjc5KSk7YS5kZXN0cnVjdG9yKCk7MTA+dGhpcy5ldmVudFBvb2wubGVuZ3RoJiZ0aGlzLmV2ZW50UG9vbC5wdXNoKGEpfWZ1bmN0aW9uIGRlKGEpe2EuZXZlbnRQb29sPVtdO2EuZ2V0UG9vbGVkPWVlO2EucmVsZWFzZT1mZX12YXIgZ2U9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGhlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxpZT1bOSwxMywyNywzMl0samU9eWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGtlPW51bGw7eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGtlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgbGU9eWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFrZSxtZT15YSYmKCFqZXx8a2UmJjg8a2UmJjExPj1rZSksbmU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksb2U9e2JlZm9yZUlucHV0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQmVmb3JlSW5wdXRcIixjYXB0dXJlZDpcIm9uQmVmb3JlSW5wdXRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl19LGNvbXBvc2l0aW9uRW5kOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25FbmRcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25FbmRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25lbmQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uU3RhcnQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblN0YXJ0XCIsXG5jYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25TdGFydENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblVwZGF0ZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uVXBkYXRlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9udXBkYXRlIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfX0scGU9ITE7XG5mdW5jdGlvbiBxZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PWllLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJibHVyXCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gcmUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgc2U9ITE7ZnVuY3Rpb24gdGUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIHJlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtwZT0hMDtyZXR1cm4gbmU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09bmUmJnBlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIHVlKGEsYil7aWYoc2UpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWplJiZxZShhLGIpPyhhPWFlKCksJGQ9WmQ9WWQ9bnVsbCxzZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gbWUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIHZlPXtldmVudFR5cGVzOm9lLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU7aWYoamUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGY9b2UuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmY9b2UuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpmPW9lLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9Zj12b2lkIDB9ZWxzZSBzZT9xZShhLGMpJiYoZj1vZS5jb21wb3NpdGlvbkVuZCk6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihmPW9lLmNvbXBvc2l0aW9uU3RhcnQpO2Y/KG1lJiZcImtvXCIhPT1jLmxvY2FsZSYmKHNlfHxmIT09b2UuY29tcG9zaXRpb25TdGFydD9mPT09b2UuY29tcG9zaXRpb25FbmQmJnNlJiYoZT1hZSgpKTooWWQ9ZCxaZD1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxzZT0hMCkpLGY9Z2UuZ2V0UG9vbGVkKGYsXG5iLGMsZCksZT9mLmRhdGE9ZTooZT1yZShjKSxudWxsIT09ZSYmKGYuZGF0YT1lKSksWGQoZiksZT1mKTplPW51bGw7KGE9bGU/dGUoYSxjKTp1ZShhLGMpKT8oYj1oZS5nZXRQb29sZWQob2UuYmVmb3JlSW5wdXQsYixjLGQpLGIuZGF0YT1hLFhkKGIpKTpiPW51bGw7cmV0dXJuIG51bGw9PT1lP2I6bnVsbD09PWI/ZTpbZSxiXX19LHdlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIHhlKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhd2VbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfVxudmFyIHllPXtjaGFuZ2U6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25DaGFuZ2VcIixjYXB0dXJlZDpcIm9uQ2hhbmdlQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNoYW5nZSBjbGljayBmb2N1cyBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19O2Z1bmN0aW9uIHplKGEsYixjKXthPUcuZ2V0UG9vbGVkKHllLmNoYW5nZSxhLGIsYyk7YS50eXBlPVwiY2hhbmdlXCI7RGEoYyk7WGQoYSk7cmV0dXJuIGF9dmFyIEFlPW51bGwsQmU9bnVsbDtmdW5jdGlvbiBDZShhKXttYyhhKX1mdW5jdGlvbiBEZShhKXt2YXIgYj1QZChhKTtpZih5YihiKSlyZXR1cm4gYX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBGZT0hMTt5YSYmKEZlPW9jKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO1xuZnVuY3Rpb24gR2UoKXtBZSYmKEFlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSxCZT1BZT1udWxsKX1mdW5jdGlvbiBIZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmRGUoQmUpKWlmKGE9emUoQmUsYSxuYyhhKSksSmEpbWMoYSk7ZWxzZXtKYT0hMDt0cnl7RmEoQ2UsYSl9ZmluYWxseXtKYT0hMSxMYSgpfX19ZnVuY3Rpb24gSWUoYSxiLGMpe1wiZm9jdXNcIj09PWE/KEdlKCksQWU9YixCZT1jLEFlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEhlKSk6XCJibHVyXCI9PT1hJiZHZSgpfWZ1bmN0aW9uIEplKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIERlKEJlKX1mdW5jdGlvbiBLZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIERlKGIpfWZ1bmN0aW9uIExlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIERlKGIpfVxudmFyIE1lPXtldmVudFR5cGVzOnllLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6RmUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1BkKGIpOndpbmRvdyxmPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09Znx8XCJpbnB1dFwiPT09ZiYmXCJmaWxlXCI9PT1lLnR5cGUpdmFyIGc9RWU7ZWxzZSBpZih4ZShlKSlpZihGZSlnPUxlO2Vsc2V7Zz1KZTt2YXIgaD1JZX1lbHNlKGY9ZS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWYudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWUudHlwZXx8XCJyYWRpb1wiPT09ZS50eXBlKSYmKGc9S2UpO2lmKGcmJihnPWcoYSxiKSkpcmV0dXJuIHplKGcsYyxkKTtoJiZoKGEsZSxiKTtcImJsdXJcIj09PWEmJihhPWUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmRGIoZSxcIm51bWJlclwiLGUudmFsdWUpfX0sTmU9Ry5leHRlbmQoe3ZpZXc6bnVsbCxkZXRhaWw6bnVsbH0pLFxuT2U9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBlKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2VbYV0pPyEhYlthXTohMX1mdW5jdGlvbiBRZSgpe3JldHVybiBQZX1cbnZhciBSZT0wLFNlPTAsVGU9ITEsVWU9ITEsVmU9TmUuZXh0ZW5kKHtzY3JlZW5YOm51bGwsc2NyZWVuWTpudWxsLGNsaWVudFg6bnVsbCxjbGllbnRZOm51bGwscGFnZVg6bnVsbCxwYWdlWTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGJ1dHRvbjpudWxsLGJ1dHRvbnM6bnVsbCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiBhLnJlbGF0ZWRUYXJnZXR8fChhLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQpfSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluIGEpcmV0dXJuIGEubW92ZW1lbnRYO3ZhciBiPVJlO1JlPWEuc2NyZWVuWDtyZXR1cm4gVGU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblgtYjowOihUZT0hMCwwKX0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRZXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WTtcbnZhciBiPVNlO1NlPWEuc2NyZWVuWTtyZXR1cm4gVWU/XCJtb3VzZW1vdmVcIj09PWEudHlwZT9hLnNjcmVlblktYjowOihVZT0hMCwwKX19KSxXZT1WZS5leHRlbmQoe3BvaW50ZXJJZDpudWxsLHdpZHRoOm51bGwsaGVpZ2h0Om51bGwscHJlc3N1cmU6bnVsbCx0YW5nZW50aWFsUHJlc3N1cmU6bnVsbCx0aWx0WDpudWxsLHRpbHRZOm51bGwsdHdpc3Q6bnVsbCxwb2ludGVyVHlwZTpudWxsLGlzUHJpbWFyeTpudWxsfSksWGU9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxwb2ludGVyRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJFbnRlclwiLGRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX0scG9pbnRlckxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyTGVhdmVcIixcbmRlcGVuZGVuY2llczpbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXX19LFllPXtldmVudFR5cGVzOlhlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSxnPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihmJiYwPT09KGUmMzIpJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8IWcmJiFmKXJldHVybiBudWxsO2Y9ZC53aW5kb3c9PT1kP2Q6KGY9ZC5vd25lckRvY3VtZW50KT9mLmRlZmF1bHRWaWV3fHxmLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoZyl7aWYoZz1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/dGMoYik6bnVsbCxudWxsIT09Yil7dmFyIGg9ZGMoYik7aWYoYiE9PWh8fDUhPT1iLnRhZyYmNiE9PWIudGFnKWI9bnVsbH19ZWxzZSBnPW51bGw7aWYoZz09PWIpcmV0dXJuIG51bGw7aWYoXCJtb3VzZW91dFwiPT09YXx8XCJtb3VzZW92ZXJcIj09PVxuYSl7dmFyIGs9VmU7dmFyIGw9WGUubW91c2VMZWF2ZTt2YXIgbT1YZS5tb3VzZUVudGVyO3ZhciBwPVwibW91c2VcIn1lbHNlIGlmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSlrPVdlLGw9WGUucG9pbnRlckxlYXZlLG09WGUucG9pbnRlckVudGVyLHA9XCJwb2ludGVyXCI7YT1udWxsPT1nP2Y6UGQoZyk7Zj1udWxsPT1iP2Y6UGQoYik7bD1rLmdldFBvb2xlZChsLGcsYyxkKTtsLnR5cGU9cCtcImxlYXZlXCI7bC50YXJnZXQ9YTtsLnJlbGF0ZWRUYXJnZXQ9ZjtjPWsuZ2V0UG9vbGVkKG0sYixjLGQpO2MudHlwZT1wK1wiZW50ZXJcIjtjLnRhcmdldD1mO2MucmVsYXRlZFRhcmdldD1hO2Q9ZztwPWI7aWYoZCYmcClhOntrPWQ7bT1wO2c9MDtmb3IoYT1rO2E7YT1SZChhKSlnKys7YT0wO2ZvcihiPW07YjtiPVJkKGIpKWErKztmb3IoOzA8Zy1hOylrPVJkKGspLGctLTtmb3IoOzA8YS1nOyltPVJkKG0pLGEtLTtmb3IoO2ctLTspe2lmKGs9PT1tfHxrPT09bS5hbHRlcm5hdGUpYnJlYWsgYTtcbms9UmQoayk7bT1SZChtKX1rPW51bGx9ZWxzZSBrPW51bGw7bT1rO2ZvcihrPVtdO2QmJmQhPT1tOyl7Zz1kLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ay5wdXNoKGQpO2Q9UmQoZCl9Zm9yKGQ9W107cCYmcCE9PW07KXtnPXAuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztkLnB1c2gocCk7cD1SZChwKX1mb3IocD0wO3A8ay5sZW5ndGg7cCsrKVZkKGtbcF0sXCJidWJibGVkXCIsbCk7Zm9yKHA9ZC5sZW5ndGg7MDxwLS07KVZkKGRbcF0sXCJjYXB0dXJlZFwiLGMpO3JldHVybiAwPT09KGUmNjQpP1tsXTpbbCxjXX19O2Z1bmN0aW9uIFplKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgJGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6WmUsYWY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGJmKGEsYil7aWYoJGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFhZi5jYWxsKGIsY1tkXSl8fCEkZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfVxudmFyIGNmPXlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsZGY9e3NlbGVjdDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvblNlbGVjdFwiLGNhcHR1cmVkOlwib25TZWxlY3RDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1cyBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKX19LGVmPW51bGwsZmY9bnVsbCxnZj1udWxsLGhmPSExO1xuZnVuY3Rpb24gamYoYSxiKXt2YXIgYz1iLndpbmRvdz09PWI/Yi5kb2N1bWVudDo5PT09Yi5ub2RlVHlwZT9iOmIub3duZXJEb2N1bWVudDtpZihoZnx8bnVsbD09ZWZ8fGVmIT09dGQoYykpcmV0dXJuIG51bGw7Yz1lZjtcInNlbGVjdGlvblN0YXJ0XCJpbiBjJiZ5ZChjKT9jPXtzdGFydDpjLnNlbGVjdGlvblN0YXJ0LGVuZDpjLnNlbGVjdGlvbkVuZH06KGM9KGMub3duZXJEb2N1bWVudCYmYy5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGM9e2FuY2hvck5vZGU6Yy5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpjLmFuY2hvck9mZnNldCxmb2N1c05vZGU6Yy5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6Yy5mb2N1c09mZnNldH0pO3JldHVybiBnZiYmYmYoZ2YsYyk/bnVsbDooZ2Y9YyxhPUcuZ2V0UG9vbGVkKGRmLnNlbGVjdCxmZixhLGIpLGEudHlwZT1cInNlbGVjdFwiLGEudGFyZ2V0PWVmLFhkKGEpLGEpfVxudmFyIGtmPXtldmVudFR5cGVzOmRmLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCxlLGYpe2U9Znx8KGQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50KTtpZighKGY9IWUpKXthOntlPWNjKGUpO2Y9d2Eub25TZWxlY3Q7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspaWYoIWUuaGFzKGZbZ10pKXtlPSExO2JyZWFrIGF9ZT0hMH1mPSFlfWlmKGYpcmV0dXJuIG51bGw7ZT1iP1BkKGIpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6aWYoeGUoZSl8fFwidHJ1ZVwiPT09ZS5jb250ZW50RWRpdGFibGUpZWY9ZSxmZj1iLGdmPW51bGw7YnJlYWs7Y2FzZSBcImJsdXJcIjpnZj1mZj1lZj1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpoZj0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6cmV0dXJuIGhmPSExLGpmKGMsZCk7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKGNmKWJyZWFrO1xuY2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpyZXR1cm4gamYoYyxkKX1yZXR1cm4gbnVsbH19LGxmPUcuZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxtZj1HLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLG5mPU5lLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7ZnVuY3Rpb24gb2YoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9XG52YXIgcGY9e0VzYzpcIkVzY2FwZVwiLFNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LHFmPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLFxuMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxyZj1OZS5leHRlbmQoe2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9cGZbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2YoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP3FmW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sbG9jYXRpb246bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwscmVwZWF0Om51bGwsbG9jYWxlOm51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZihhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZihhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLHNmPVZlLmV4dGVuZCh7ZGF0YVRyYW5zZmVyOm51bGx9KSx0Zj1OZS5leHRlbmQoe3RvdWNoZXM6bnVsbCx0YXJnZXRUb3VjaGVzOm51bGwsY2hhbmdlZFRvdWNoZXM6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZX0pLHVmPUcuZXh0ZW5kKHtwcm9wZXJ0eU5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLHZmPVZlLmV4dGVuZCh7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluXG5hPy1hLndoZWVsRGVsdGFYOjB9LGRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjpudWxsLGRlbHRhTW9kZTpudWxsfSksd2Y9e2V2ZW50VHlwZXM6V2MsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1ZYy5nZXQoYSk7aWYoIWUpcmV0dXJuIG51bGw7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZihjKSlyZXR1cm4gbnVsbDtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOmE9cmY7YnJlYWs7Y2FzZSBcImJsdXJcIjpjYXNlIFwiZm9jdXNcIjphPW5mO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilyZXR1cm4gbnVsbDtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmE9XG5WZTticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjphPXNmO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOmE9dGY7YnJlYWs7Y2FzZSBYYjpjYXNlIFliOmNhc2UgWmI6YT1sZjticmVhaztjYXNlICRiOmE9dWY7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOmE9TmU7YnJlYWs7Y2FzZSBcIndoZWVsXCI6YT12ZjticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjphPW1mO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmE9XG5XZTticmVhaztkZWZhdWx0OmE9R31iPWEuZ2V0UG9vbGVkKGUsYixjLGQpO1hkKGIpO3JldHVybiBifX07aWYocGEpdGhyb3cgRXJyb3IodSgxMDEpKTtwYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcIlJlc3BvbmRlckV2ZW50UGx1Z2luIFNpbXBsZUV2ZW50UGx1Z2luIEVudGVyTGVhdmVFdmVudFBsdWdpbiBDaGFuZ2VFdmVudFBsdWdpbiBTZWxlY3RFdmVudFBsdWdpbiBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXCIuc3BsaXQoXCIgXCIpKTtyYSgpO3ZhciB4Zj1OYztsYT1RZDttYT14ZjtuYT1QZDt4YSh7U2ltcGxlRXZlbnRQbHVnaW46d2YsRW50ZXJMZWF2ZUV2ZW50UGx1Z2luOlllLENoYW5nZUV2ZW50UGx1Z2luOk1lLFNlbGVjdEV2ZW50UGx1Z2luOmtmLEJlZm9yZUlucHV0RXZlbnRQbHVnaW46dmV9KTt2YXIgeWY9W10semY9LTE7ZnVuY3Rpb24gSChhKXswPnpmfHwoYS5jdXJyZW50PXlmW3pmXSx5Zlt6Zl09bnVsbCx6Zi0tKX1cbmZ1bmN0aW9uIEkoYSxiKXt6ZisrO3lmW3pmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIEFmPXt9LEo9e2N1cnJlbnQ6QWZ9LEs9e2N1cnJlbnQ6ITF9LEJmPUFmO2Z1bmN0aW9uIENmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQWY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gTChhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfVxuZnVuY3Rpb24gRGYoKXtIKEspO0goSil9ZnVuY3Rpb24gRWYoYSxiLGMpe2lmKEouY3VycmVudCE9PUFmKXRocm93IEVycm9yKHUoMTY4KSk7SShKLGIpO0koSyxjKX1mdW5jdGlvbiBGZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7YT1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGEpKXRocm93IEVycm9yKHUoMTA4LHBiKGIpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIG4oe30sYyx7fSxkKX1mdW5jdGlvbiBHZihhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8QWY7QmY9Si5jdXJyZW50O0koSixhKTtJKEssSy5jdXJyZW50KTtyZXR1cm4hMH1cbmZ1bmN0aW9uIEhmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih1KDE2OSkpO2M/KGE9RmYoYSxiLEJmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChLKSxIKEopLEkoSixhKSk6SChLKTtJKEssYyl9XG52YXIgSWY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksSmY9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLEtmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssTGY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsTWY9ci51bnN0YWJsZV9ub3csTmY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxPZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFBmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksUWY9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxSZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFNmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFRmPXt9LFVmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsVmY9dm9pZCAwIT09TGY/TGY6ZnVuY3Rpb24oKXt9LFdmPW51bGwsWGY9bnVsbCxZZj0hMSxaZj1NZigpLCRmPTFFND5aZj9NZjpmdW5jdGlvbigpe3JldHVybiBNZigpLVpmfTtcbmZ1bmN0aW9uIGFnKCl7c3dpdGNoKE5mKCkpe2Nhc2UgT2Y6cmV0dXJuIDk5O2Nhc2UgUGY6cmV0dXJuIDk4O2Nhc2UgUWY6cmV0dXJuIDk3O2Nhc2UgUmY6cmV0dXJuIDk2O2Nhc2UgU2Y6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGJnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBPZjtjYXNlIDk4OnJldHVybiBQZjtjYXNlIDk3OnJldHVybiBRZjtjYXNlIDk2OnJldHVybiBSZjtjYXNlIDk1OnJldHVybiBTZjtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBjZyhhLGIpe2E9YmcoYSk7cmV0dXJuIElmKGEsYil9ZnVuY3Rpb24gZGcoYSxiLGMpe2E9YmcoYSk7cmV0dXJuIEpmKGEsYixjKX1mdW5jdGlvbiBlZyhhKXtudWxsPT09V2Y/KFdmPVthXSxYZj1KZihPZixmZykpOldmLnB1c2goYSk7cmV0dXJuIFRmfWZ1bmN0aW9uIGdnKCl7aWYobnVsbCE9PVhmKXt2YXIgYT1YZjtYZj1udWxsO0tmKGEpfWZnKCl9XG5mdW5jdGlvbiBmZygpe2lmKCFZZiYmbnVsbCE9PVdmKXtZZj0hMDt2YXIgYT0wO3RyeXt2YXIgYj1XZjtjZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7V2Y9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09V2YmJihXZj1XZi5zbGljZShhKzEpKSxKZihPZixnZyksYzt9ZmluYWxseXtZZj0hMX19fWZ1bmN0aW9uIGhnKGEsYixjKXtjLz0xMDtyZXR1cm4gMTA3Mzc0MTgyMS0oKCgxMDczNzQxODIxLWErYi8xMCkvY3wwKSsxKSpjfWZ1bmN0aW9uIGlnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9bih7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pfXJldHVybiBifXZhciBqZz17Y3VycmVudDpudWxsfSxrZz1udWxsLGxnPW51bGwsbWc9bnVsbDtmdW5jdGlvbiBuZygpe21nPWxnPWtnPW51bGx9XG5mdW5jdGlvbiBvZyhhKXt2YXIgYj1qZy5jdXJyZW50O0goamcpO2EudHlwZS5fY29udGV4dC5fY3VycmVudFZhbHVlPWJ9ZnVuY3Rpb24gcGcoYSxiKXtmb3IoO251bGwhPT1hOyl7dmFyIGM9YS5hbHRlcm5hdGU7aWYoYS5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYS5jaGlsZEV4cGlyYXRpb25UaW1lPWIsbnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2Vsc2UgaWYobnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWMuY2hpbGRFeHBpcmF0aW9uVGltZT1iO2Vsc2UgYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gcWcoYSxiKXtrZz1hO21nPWxnPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoYS5leHBpcmF0aW9uVGltZT49YiYmKHJnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHNnKGEsYil7aWYobWchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKW1nPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1sZyl7aWYobnVsbD09PWtnKXRocm93IEVycm9yKHUoMzA4KSk7bGc9YjtrZy5kZXBlbmRlbmNpZXM9e2V4cGlyYXRpb25UaW1lOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIGxnPWxnLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB0Zz0hMTtmdW5jdGlvbiB1ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGJhc2VRdWV1ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gdmcoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsYmFzZVF1ZXVlOmEuYmFzZVF1ZXVlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHdnKGEsYil7YT17ZXhwaXJhdGlvblRpbWU6YSxzdXNwZW5zZUNvbmZpZzpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH07cmV0dXJuIGEubmV4dD1hfWZ1bmN0aW9uIHhnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24geWcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmdmcoYyxhKTthPWEudXBkYXRlUXVldWU7Yz1hLmJhc2VRdWV1ZTtudWxsPT09Yz8oYS5iYXNlUXVldWU9Yi5uZXh0PWIsYi5uZXh0PWIpOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKX1cbmZ1bmN0aW9uIHpnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7dGc9ITE7dmFyIGY9ZS5iYXNlUXVldWUsZz1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1nKXtpZihudWxsIT09Zil7dmFyIGg9Zi5uZXh0O2YubmV4dD1nLm5leHQ7Zy5uZXh0PWh9Zj1nO2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDtoPWEuYWx0ZXJuYXRlO251bGwhPT1oJiYoaD1oLnVwZGF0ZVF1ZXVlLG51bGwhPT1oJiYoaC5iYXNlUXVldWU9ZykpfWlmKG51bGwhPT1mKXtoPWYubmV4dDt2YXIgaz1lLmJhc2VTdGF0ZSxsPTAsbT1udWxsLHA9bnVsbCx4PW51bGw7aWYobnVsbCE9PWgpe3ZhciB6PWg7ZG97Zz16LmV4cGlyYXRpb25UaW1lO2lmKGc8ZCl7dmFyIGNhPXtleHBpcmF0aW9uVGltZTp6LmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09eD8ocD14PVxuY2EsbT1rKTp4PXgubmV4dD1jYTtnPmwmJihsPWcpfWVsc2V7bnVsbCE9PXgmJih4PXgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH0pO0FnKGcsei5zdXNwZW5zZUNvbmZpZyk7YTp7dmFyIEQ9YSx0PXo7Zz1iO2NhPWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6RD10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEQpe2s9RC5jYWxsKGNhLGssZyk7YnJlYWsgYX1rPUQ7YnJlYWsgYTtjYXNlIDM6RC5lZmZlY3RUYWc9RC5lZmZlY3RUYWcmLTQwOTd8NjQ7Y2FzZSAwOkQ9dC5wYXlsb2FkO2c9XCJmdW5jdGlvblwiPT09dHlwZW9mIEQ/RC5jYWxsKGNhLGssZyk6RDtpZihudWxsPT09Z3x8dm9pZCAwPT09ZylicmVhayBhO2s9bih7fSxrLGcpO2JyZWFrIGE7Y2FzZSAyOnRnPSEwfX1udWxsIT09ei5jYWxsYmFjayYmXG4oYS5lZmZlY3RUYWd8PTMyLGc9ZS5lZmZlY3RzLG51bGw9PT1nP2UuZWZmZWN0cz1bel06Zy5wdXNoKHopKX16PXoubmV4dDtpZihudWxsPT09enx8ej09PWgpaWYoZz1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1nKWJyZWFrO2Vsc2Ugej1mLm5leHQ9Zy5uZXh0LGcubmV4dD1oLGUuYmFzZVF1ZXVlPWY9ZyxlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSl9bnVsbD09PXg/bT1rOngubmV4dD1wO2UuYmFzZVN0YXRlPW07ZS5iYXNlUXVldWU9eDtCZyhsKTthLmV4cGlyYXRpb25UaW1lPWw7YS5tZW1vaXplZFN0YXRlPWt9fVxuZnVuY3Rpb24gQ2coYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1lO2U9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCl0aHJvdyBFcnJvcih1KDE5MSxkKSk7ZC5jYWxsKGUpfX19dmFyIERnPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEVnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIEZnKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpuKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEuZXhwaXJhdGlvblRpbWUmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBKZz17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxGaWJlcik/ZGMoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnRhZz0xO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBjPUdnKCksZD1EZy5zdXNwZW5zZTtcbmM9SGcoYyxhLGQpO2Q9d2coYyxkKTtkLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZC5jYWxsYmFjaz1iKTt4ZyhhLGQpO0lnKGEsYyl9fTtmdW5jdGlvbiBLZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFiZihjLGQpfHwhYmYoZSxmKTohMH1cbmZ1bmN0aW9uIExnKGEsYixjKXt2YXIgZD0hMSxlPUFmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXNnKGYpOihlPUwoYik/QmY6Si5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/Q2YoYSxlKTpBZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPUpnO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbEZpYmVyPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE1nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9RWc7dWcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1zZyhmKTooZj1MKGIpP0JmOkouY3VycmVudCxlLmNvbnRleHQ9Q2YoYSxmKSk7emcoYSxjLGUsZCk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKEZnKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fFxuKGI9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLHpnKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX12YXIgT2c9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFBnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih1KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1FZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih1KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih1KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUWcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IodSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIikpO31cbmZ1bmN0aW9uIFJnKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmxhc3RFZmZlY3Q7bnVsbCE9PWQ/KGQubmV4dEVmZmVjdD1jLGIubGFzdEVmZmVjdD1jKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1jO2MubmV4dEVmZmVjdD1udWxsO2MuZWZmZWN0VGFnPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVNnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmVmZmVjdFRhZz1cbjIsYyk6ZDtiLmVmZmVjdFRhZz0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmbnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5lZmZlY3RUYWc9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVRnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVBnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1VZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1QZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09XG5jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPVZnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1XZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHAoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVRnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjPVVnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVBnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSAkYTpyZXR1cm4gYj1WZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoT2coYil8fFxubmIoYikpcmV0dXJuIGI9V2coYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UWcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09YWI/bShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlICRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKE9nKGMpfHxuYihjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7UWcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB6KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9XG5hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PWFiP20oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlICRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKE9nKGQpfHxuYihkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7UWcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBjYShlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsbT1nLHk9Zz0wLEE9bnVsbDtudWxsIT09bSYmeTxoLmxlbmd0aDt5Kyspe20uaW5kZXg+eT8oQT1tLG09bnVsbCk6QT1tLnNpYmxpbmc7dmFyIHE9eChlLG0saFt5XSxrKTtpZihudWxsPT09cSl7bnVsbD09PW0mJihtPUEpO2JyZWFrfWEmJlxubSYmbnVsbD09PXEuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHEsZyx5KTtudWxsPT09dD9sPXE6dC5zaWJsaW5nPXE7dD1xO209QX1pZih5PT09aC5sZW5ndGgpcmV0dXJuIGMoZSxtKSxsO2lmKG51bGw9PT1tKXtmb3IoO3k8aC5sZW5ndGg7eSsrKW09cChlLGhbeV0sayksbnVsbCE9PW0mJihnPWYobSxnLHkpLG51bGw9PT10P2w9bTp0LnNpYmxpbmc9bSx0PW0pO3JldHVybiBsfWZvcihtPWQoZSxtKTt5PGgubGVuZ3RoO3krKylBPXoobSxlLHksaFt5XSxrKSxudWxsIT09QSYmKGEmJm51bGwhPT1BLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PUEua2V5P3k6QS5rZXkpLGc9ZihBLGcseSksbnVsbD09PXQ/bD1BOnQuc2libGluZz1BLHQ9QSk7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiBEKGUsZyxoLGwpe3ZhciBrPW5iKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBrKXRocm93IEVycm9yKHUoMTUwKSk7aD1rLmNhbGwoaCk7XG5pZihudWxsPT1oKXRocm93IEVycm9yKHUoMTUxKSk7Zm9yKHZhciBtPWs9bnVsbCx0PWcseT1nPTAsQT1udWxsLHE9aC5uZXh0KCk7bnVsbCE9PXQmJiFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpe3QuaW5kZXg+eT8oQT10LHQ9bnVsbCk6QT10LnNpYmxpbmc7dmFyIEQ9eChlLHQscS52YWx1ZSxsKTtpZihudWxsPT09RCl7bnVsbD09PXQmJih0PUEpO2JyZWFrfWEmJnQmJm51bGw9PT1ELmFsdGVybmF0ZSYmYihlLHQpO2c9ZihELGcseSk7bnVsbD09PW0/az1EOm0uc2libGluZz1EO209RDt0PUF9aWYocS5kb25lKXJldHVybiBjKGUsdCksaztpZihudWxsPT09dCl7Zm9yKDshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9cChlLHEudmFsdWUsbCksbnVsbCE9PXEmJihnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO3JldHVybiBrfWZvcih0PWQoZSx0KTshcS5kb25lO3krKyxxPWgubmV4dCgpKXE9eih0LGUseSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoYSYmbnVsbCE9PVxucS5hbHRlcm5hdGUmJnQuZGVsZXRlKG51bGw9PT1xLmtleT95OnEua2V5KSxnPWYocSxnLHkpLG51bGw9PT1tP2s9cTptLnNpYmxpbmc9cSxtPXEpO2EmJnQuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGt9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PWFiJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIFphOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09YWIpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsXG5rLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMpO2QucmVmPVBnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09YWI/KGQ9V2coZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVVnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVBnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSAkYTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1cbmQuc2libGluZ31kPVZnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVRnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKE9nKGYpKXJldHVybiBjYShhLGQsZixoKTtpZihuYihmKSlyZXR1cm4gRChhLGQsZixoKTtsJiZRZyhhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZiYmIWspc3dpdGNoKGEudGFnKXtjYXNlIDE6Y2FzZSAwOnRocm93IGE9YS50eXBlLEVycm9yKHUoMTUyLGEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWGc9UmcoITApLFlnPVJnKCExKSxaZz17fSwkZz17Y3VycmVudDpaZ30sYWg9e2N1cnJlbnQ6Wmd9LGJoPXtjdXJyZW50OlpnfTtcbmZ1bmN0aW9uIGNoKGEpe2lmKGE9PT1aZyl0aHJvdyBFcnJvcih1KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGRoKGEsYil7SShiaCxiKTtJKGFoLGEpO0koJGcsWmcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6T2IobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPU9iKGIsYSl9SCgkZyk7SSgkZyxiKX1mdW5jdGlvbiBlaCgpe0goJGcpO0goYWgpO0goYmgpfWZ1bmN0aW9uIGZoKGEpe2NoKGJoLmN1cnJlbnQpO3ZhciBiPWNoKCRnLmN1cnJlbnQpO3ZhciBjPU9iKGIsYS50eXBlKTtiIT09YyYmKEkoYWgsYSksSSgkZyxjKSl9ZnVuY3Rpb24gZ2goYSl7YWguY3VycmVudD09PWEmJihIKCRnKSxIKGFoKSl9dmFyIE09e2N1cnJlbnQ6MH07XG5mdW5jdGlvbiBoaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxjLmRhdGE9PT1CZHx8Yy5kYXRhPT09Q2QpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9ZnVuY3Rpb24gaWgoYSxiKXtyZXR1cm57cmVzcG9uZGVyOmEscHJvcHM6Yn19XG52YXIgamg9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixraD1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxsaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLG1oPSExO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcih1KDMyMSkpO31mdW5jdGlvbiBuaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCEkZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYpe2xoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmV4cGlyYXRpb25UaW1lPTA7amguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9waDpxaDthPWMoZCxlKTtpZihiLmV4cGlyYXRpb25UaW1lPT09bGgpe2Y9MDtkb3tiLmV4cGlyYXRpb25UaW1lPTA7aWYoISgyNT5mKSl0aHJvdyBFcnJvcih1KDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2poLmN1cnJlbnQ9cmg7YT1jKGQsZSl9d2hpbGUoYi5leHBpcmF0aW9uVGltZT09PWxoKX1qaC5jdXJyZW50PXNoO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKGIpdGhyb3cgRXJyb3IodSgzMDApKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIHVoKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiB2aChhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIHdoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtlPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9Zj1udWxsLGs9ZTtkb3t2YXIgbD1rLmV4cGlyYXRpb25UaW1lO2lmKGw8bGgpe3ZhciBtPXtleHBpcmF0aW9uVGltZTprLmV4cGlyYXRpb25UaW1lLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bSxmPWQpOmg9aC5uZXh0PW07bD5OLmV4cGlyYXRpb25UaW1lJiZcbihOLmV4cGlyYXRpb25UaW1lPWwsQmcobCkpfWVsc2UgbnVsbCE9PWgmJihoPWgubmV4dD17ZXhwaXJhdGlvblRpbWU6MTA3Mzc0MTgyMyxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksQWcobCxrLnN1c3BlbnNlQ29uZmlnKSxkPWsuZWFnZXJSZWR1Y2VyPT09YT9rLmVhZ2VyU3RhdGU6YShkLGsuYWN0aW9uKTtrPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZzskZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24geGgoYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpOyRlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiB5aChhKXt2YXIgYj10aCgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9Yi5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjp2aCxsYXN0UmVuZGVyZWRTdGF0ZTphfTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1mdW5jdGlvbiBBaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBCaCgpe3JldHVybiB1aCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gQ2goYSxiLGMsZCl7dmFyIGU9dGgoKTtOLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1mdW5jdGlvbiBEaChhLGIsYyxkKXt2YXIgZT11aCgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJm5oKGQsZy5kZXBzKSl7QWgoYixjLGYsZCk7cmV0dXJufX1OLmVmZmVjdFRhZ3w9YTtlLm1lbW9pemVkU3RhdGU9QWgoMXxiLGMsZixkKX1mdW5jdGlvbiBFaChhLGIpe3JldHVybiBDaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEZoKGEsYil7cmV0dXJuIERoKDUxNiw0LGEsYil9ZnVuY3Rpb24gR2goYSxiKXtyZXR1cm4gRGgoNCwyLGEsYil9XG5mdW5jdGlvbiBIaChhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIEloKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gRGgoNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEpoKCl7fWZ1bmN0aW9uIEtoKGEsYil7dGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX1mdW5jdGlvbiBMaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIE1oKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIE5oKGEsYixjKXt2YXIgZD1hZygpO2NnKDk4PmQ/OTg6ZCxmdW5jdGlvbigpe2EoITApfSk7Y2coOTc8ZD85NzpkLGZ1bmN0aW9uKCl7dmFyIGQ9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2EoITEpLGMoKX1maW5hbGx5e2toLnN1c3BlbnNlPWR9fSl9XG5mdW5jdGlvbiB6aChhLGIsYyl7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9e2V4cGlyYXRpb25UaW1lOmQsc3VzcGVuc2VDb25maWc6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTt2YXIgZj1iLnBlbmRpbmc7bnVsbD09PWY/ZS5uZXh0PWU6KGUubmV4dD1mLm5leHQsZi5uZXh0PWUpO2IucGVuZGluZz1lO2Y9YS5hbHRlcm5hdGU7aWYoYT09PU58fG51bGwhPT1mJiZmPT09TiltaD0hMCxlLmV4cGlyYXRpb25UaW1lPWxoLE4uZXhwaXJhdGlvblRpbWU9bGg7ZWxzZXtpZigwPT09YS5leHBpcmF0aW9uVGltZSYmKG51bGw9PT1mfHwwPT09Zi5leHBpcmF0aW9uVGltZSkmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5lYWdlclJlZHVjZXI9ZjtlLmVhZ2VyU3RhdGU9aDtpZigkZShoLGcpKXJldHVybn1jYXRjaChrKXt9ZmluYWxseXt9SWcoYSxcbmQpfX1cbnZhciBzaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlUmVzcG9uZGVyOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246UX0scGg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOktoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkVoLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBDaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBDaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPXRoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsXG5iXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGgoKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9ZC5xdWV1ZT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9dGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6eWgsdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXloKGEpLGQ9Y1swXSxlPWNbMV07RWgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPVxuY319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj15aCghMSksYz1iWzBdO2I9YlsxXTtyZXR1cm5bS2goTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scWg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp3aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gd2godmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9d2godmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9XG53aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLGIsYSksW2IsYV0pLGNdfX0scmg9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOkxoLHVzZUNvbnRleHQ6c2csdXNlRWZmZWN0OkZoLHVzZUltcGVyYXRpdmVIYW5kbGU6SWgsdXNlTGF5b3V0RWZmZWN0OkdoLHVzZU1lbW86TWgsdXNlUmVkdWNlcjp4aCx1c2VSZWY6QmgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4geGgodmgpfSx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eGgodmgpLGQ9Y1swXSxlPWNbMV07RmgoZnVuY3Rpb24oKXt2YXIgYz1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7ZShhKX1maW5hbGx5e2toLnN1c3BlbnNlPWN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eGgodmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxcbmIsYSksW2IsYV0pLGNdfX0sT2g9bnVsbCxQaD1udWxsLFFoPSExO2Z1bmN0aW9uIFJoKGEsYil7dmFyIGM9U2goNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZWZmZWN0VGFnPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31cbmZ1bmN0aW9uIFRoKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBVaChhKXtpZihRaCl7dmFyIGI9UGg7aWYoYil7dmFyIGM9YjtpZighVGgoYSxiKSl7Yj1KZChjLm5leHRTaWJsaW5nKTtpZighYnx8IVRoKGEsYikpe2EuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDI7UWg9ITE7T2g9YTtyZXR1cm59UmgoT2gsYyl9T2g9YTtQaD1KZChiLmZpcnN0Q2hpbGQpfWVsc2UgYS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MixRaD0hMSxPaD1hfX1mdW5jdGlvbiBWaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47T2g9YX1cbmZ1bmN0aW9uIFdoKGEpe2lmKGEhPT1PaClyZXR1cm4hMTtpZighUWgpcmV0dXJuIFZoKGEpLFFoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhR2QoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPVBoO2I7KVJoKGEsYiksYj1KZChiLm5leHRTaWJsaW5nKTtWaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHUoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoYz09PUFkKXtpZigwPT09Yil7UGg9SmQoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZSBjIT09emQmJmMhPT1DZCYmYyE9PUJkfHxiKyt9YT1hLm5leHRTaWJsaW5nfVBoPW51bGx9fWVsc2UgUGg9T2g/SmQoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9XG5mdW5jdGlvbiBYaCgpe1BoPU9oPW51bGw7UWg9ITF9dmFyIFloPVdhLlJlYWN0Q3VycmVudE93bmVyLHJnPSExO2Z1bmN0aW9uIFIoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9ZZyhiLG51bGwsYyxkKTpYZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBaaChhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7cWcoYixlKTtkPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaShhLGIsYyxkLGUsZil7aWYobnVsbD09PWEpe3ZhciBnPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmIWJpKGcpJiZ2b2lkIDA9PT1nLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1nLGNpKGEsYixnLGQsZSxmKTthPVVnKGMudHlwZSxudWxsLGQsbnVsbCxiLm1vZGUsZik7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWc9YS5jaGlsZDtpZihlPGYmJihlPWcubWVtb2l6ZWRQcm9wcyxjPWMuY29tcGFyZSxjPW51bGwhPT1jP2M6YmYsYyhlLGQpJiZhLnJlZj09PWIucmVmKSlyZXR1cm4gJGgoYSxiLGYpO2IuZWZmZWN0VGFnfD0xO2E9U2coZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaShhLGIsYyxkLGUsZil7cmV0dXJuIG51bGwhPT1hJiZiZihhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYmJihyZz0hMSxlPGYpPyhiLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsJGgoYSxiLGYpKTpkaShhLGIsYyxkLGYpfWZ1bmN0aW9uIGVpKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gZGkoYSxiLGMsZCxlKXt2YXIgZj1MKGMpP0JmOkouY3VycmVudDtmPUNmKGIsZik7cWcoYixlKTtjPW9oKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXJnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5lZmZlY3RUYWcmPS01MTcsYS5leHBpcmF0aW9uVGltZTw9ZSYmKGEuZXhwaXJhdGlvblRpbWU9MCksJGgoYSxiLGUpO2IuZWZmZWN0VGFnfD0xO1IoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBmaShhLGIsYyxkLGUpe2lmKEwoYykpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtxZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksTGcoYixjLGQpLE5nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpO3RnPSExO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXg7emcoYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHghPT1rfHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD10Z3x8S2coYixjLGgsZCx4LGssbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSxkPSExKX1lbHNlIGc9Yi5zdGF0ZU5vZGUsdmcoYSxiKSxoPWIubWVtb2l6ZWRQcm9wcyxnLnByb3BzPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDppZyhiLnR5cGUsaCksaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlLFwib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpLG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsKHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk1nKGIsZyxkLGwpLHRnPSExLGs9Yi5tZW1vaXplZFN0YXRlLGcuc3RhdGU9ayx6ZyhiLGQsZyxlKSx4PWIubWVtb2l6ZWRTdGF0ZSxoIT09ZHx8ayE9PXh8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCkseD1iLm1lbW9pemVkU3RhdGUpLChtPXRnfHxLZyhiLGMsaCxkLGsseCxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGwpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxsKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5lZmZlY3RUYWd8PTI1NikpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9bCxkPW0pOlxuKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGQ9ITEpO3JldHVybiBnaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBnaShhLGIsYyxkLGUsZil7ZWkoYSxiKTt2YXIgZz0wIT09KGIuZWZmZWN0VGFnJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJkhmKGIsYywhMSksJGgoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WWguY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9WGcoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1YZyhiLG51bGwsaCxmKSk6UihhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZIZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/RWYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmRWYoYSxiLmNvbnRleHQsITEpO2RoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBpaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5VGltZTowfTtcbmZ1bmN0aW9uIGppKGEsYixjKXt2YXIgZD1iLm1vZGUsZT1iLnBlbmRpbmdQcm9wcyxmPU0uY3VycmVudCxnPSExLGg7KGg9MCE9PShiLmVmZmVjdFRhZyY2NCkpfHwoaD0wIT09KGYmMikmJihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkpO2g/KGc9ITAsYi5lZmZlY3RUYWcmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWUuZmFsbGJhY2t8fCEwPT09ZS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGZ8PTEpO0koTSxmJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1lLmZhbGxiYWNrJiZVaChiKTtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPVxuYjtlLnNpYmxpbmc9YztiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWQ9ZS5jaGlsZHJlbjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1ZZyhiLG51bGwsZCxjKX1pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXthPWEuY2hpbGQ7ZD1hLnNpYmxpbmc7aWYoZyl7ZT1lLmZhbGxiYWNrO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yy5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSYmKGc9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZyE9PWEuY2hpbGQpKWZvcihjLmNoaWxkPWc7bnVsbCE9PWc7KWcucmV0dXJuPWMsZz1nLnNpYmxpbmc7ZD1TZyhkLGUpO2QucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9YztyZXR1cm4gZH1jPVhnKGIsYS5jaGlsZCxlLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVxuY31hPWEuY2hpbGQ7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtlLmNoaWxkPWE7bnVsbCE9PWEmJihhLnJldHVybj1lKTtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1iO2Uuc2libGluZz1jO2MuZWZmZWN0VGFnfD0yO2UuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WGcoYixhLGUuY2hpbGRyZW4sYyl9XG5mdW5jdGlvbiBraShhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7cGcoYS5yZXR1cm4sYil9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsRXhwaXJhdGlvbjowLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxFeHBpcmF0aW9uPTAsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7UihhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmVmZmVjdFRhZ3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyY2NCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZraShhLGMpO2Vsc2UgaWYoMTk9PT1hLnRhZylraShhLGMpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1JKE0sZCk7aWYoMD09PShiLm1vZGUmMikpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PWhoKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7bGkoYiwhMSxlLGMsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09aGgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfWxpKGIsITAsYyxudWxsLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwidG9nZXRoZXJcIjpsaShiLCExLG51bGwsbnVsbCx2b2lkIDAsYi5sYXN0RWZmZWN0KTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gJGgoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7MCE9PWQmJkJnKGQpO2lmKGIuY2hpbGRFeHBpcmF0aW9uVGltZTxjKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih1KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9U2coYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH12YXIgbmksb2kscGkscWk7XG5uaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07b2k9ZnVuY3Rpb24oKXt9O1xucGk9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoZiE9PWQpe3ZhciBnPWIuc3RhdGVOb2RlO2NoKCRnLmN1cnJlbnQpO2E9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6Zj16YihnLGYpO2Q9emIoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdiKGcsZik7ZD1HYihnLGQpO2E9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmY9bih7fSxmLHt2YWx1ZTp2b2lkIDB9KTtkPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7YT1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpmPUliKGcsZik7ZD1JYihnLGQpO2E9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZi5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoZy5vbmNsaWNrPXNkKX1vZChjLGQpO3ZhciBoLGs7Yz1udWxsO2ZvcihoIGluIGYpaWYoIWQuaGFzT3duUHJvcGVydHkoaCkmJmYuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWZbaF0paWYoXCJzdHlsZVwiPT09XG5oKWZvcihrIGluIGc9ZltoXSxnKWcuaGFzT3duUHJvcGVydHkoaykmJihjfHwoYz17fSksY1trXT1cIlwiKTtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09aCYmXCJjaGlsZHJlblwiIT09aCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiZcImF1dG9Gb2N1c1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpP2F8fChhPVtdKTooYT1hfHxbXSkucHVzaChoLG51bGwpKTtmb3IoaCBpbiBkKXt2YXIgbD1kW2hdO2c9bnVsbCE9Zj9mW2hdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGgpJiZsIT09ZyYmKG51bGwhPWx8fG51bGwhPWcpKWlmKFwic3R5bGVcIj09PWgpaWYoZyl7Zm9yKGsgaW4gZykhZy5oYXNPd25Qcm9wZXJ0eShrKXx8bCYmbC5oYXNPd25Qcm9wZXJ0eShrKXx8KGN8fChjPXt9KSxjW2tdPVwiXCIpO2ZvcihrIGluIGwpbC5oYXNPd25Qcm9wZXJ0eShrKSYmZ1trXSE9PWxba10mJihjfHwoYz17fSksXG5jW2tdPWxba10pfWVsc2UgY3x8KGF8fChhPVtdKSxhLnB1c2goaCxjKSksYz1sO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1oPyhsPWw/bC5fX2h0bWw6dm9pZCAwLGc9Zz9nLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmZyE9PWwmJihhPWF8fFtdKS5wdXNoKGgsbCkpOlwiY2hpbGRyZW5cIj09PWg/Zz09PWx8fFwic3RyaW5nXCIhPT10eXBlb2YgbCYmXCJudW1iZXJcIiE9PXR5cGVvZiBsfHwoYT1hfHxbXSkucHVzaChoLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWgmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/KG51bGwhPWwmJnJkKGUsaCksYXx8Zz09PWx8fChhPVtdKSk6KGE9YXx8W10pLnB1c2goaCxsKSl9YyYmKGE9YXx8W10pLnB1c2goXCJzdHlsZVwiLGMpO2U9YTtpZihiLnVwZGF0ZVF1ZXVlPWUpYi5lZmZlY3RUYWd8PTR9fTtcbnFpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5lZmZlY3RUYWd8PTQpfTtmdW5jdGlvbiByaShhLGIpe3N3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBzaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMzpyZXR1cm4gZWgoKSxIKEspLEgoSiksYz1iLnN0YXRlTm9kZSxjLnBlbmRpbmdDb250ZXh0JiYoYy5jb250ZXh0PWMucGVuZGluZ0NvbnRleHQsYy5wZW5kaW5nQ29udGV4dD1udWxsKSxudWxsIT09YSYmbnVsbCE9PWEuY2hpbGR8fCFXaChiKXx8KGIuZWZmZWN0VGFnfD00KSxvaShiKSxudWxsO2Nhc2UgNTpnaChiKTtjPWNoKGJoLmN1cnJlbnQpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcGkoYSxiLGUsZCxjKSxhLnJlZiE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCk7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5yZXR1cm4gbnVsbH1hPWNoKCRnLmN1cnJlbnQpO2lmKFdoKGIpKXtkPWIuc3RhdGVOb2RlO2U9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW01kXT1iO2RbTmRdPWY7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8YWMubGVuZ3RoO2ErKylGKGFjW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixkKTtGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsZCk7RihcInN1Ym1pdFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGQsZik7RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGQsZiksRihcImludmFsaWRcIixkKSxyZChjLFwib25DaGFuZ2VcIil9b2QoZSxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKGE9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOnZhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZyZChjLGcpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihkKTtFYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGQpO0xiKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiZcbihkLm9uY2xpY2s9c2QpfWM9YTtiLnVwZGF0ZVF1ZXVlPWM7bnVsbCE9PWMmJihiLmVmZmVjdFRhZ3w9NCl9ZWxzZXtnPTk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O2E9PT1xZCYmKGE9TmIoZSkpO2E9PT1xZD9cInNjcmlwdFwiPT09ZT8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGUse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoZSksXCJzZWxlY3RcIj09PWUmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGUpO2FbTWRdPWI7YVtOZF09ZDtuaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz1wZChlLGQpO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsXG5hKTtoPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGg9MDtoPGFjLmxlbmd0aDtoKyspRihhY1toXSxhKTtoPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpGKFwiZXJyb3JcIixhKTtGKFwibG9hZFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGEpO0YoXCJzdWJtaXRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOkFiKGEsZCk7aD16YihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpoPUdiKGEsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtoPW4oe30sZCx7dmFsdWU6dm9pZCAwfSk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoYSxcbmQpO2g9SWIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztkZWZhdWx0Omg9ZH1vZChlLGgpO3ZhciBrPWg7Zm9yKGYgaW4gaylpZihrLmhhc093blByb3BlcnR5KGYpKXt2YXIgbD1rW2ZdO1wic3R5bGVcIj09PWY/bWQoYSxsKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhsPWw/bC5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJlFiKGEsbCkpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBsPyhcInRleHRhcmVhXCIhPT1lfHxcIlwiIT09bCkmJlJiKGEsbCk6XCJudW1iZXJcIj09PXR5cGVvZiBsJiZSYihhLFwiXCIrbCk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKHZhLmhhc093blByb3BlcnR5KGYpP251bGwhPWwmJnJkKGMsZik6bnVsbCE9bCYmWGEoYSxmLGwsZykpfXN3aXRjaChlKXtjYXNlIFwiaW5wdXRcIjp4YihhKTtFYihhLGQsITEpO1xuYnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoYSk7TGIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK3JiKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Yz1kLnZhbHVlO251bGwhPWM/SGIoYSwhIWQubXVsdGlwbGUsYywhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJkhiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLm9uQ2xpY2smJihhLm9uY2xpY2s9c2QpfUZkKGUsZCkmJihiLmVmZmVjdFRhZ3w9NCl9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXFpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xuYz1jaChiaC5jdXJyZW50KTtjaCgkZy5jdXJyZW50KTtXaChiKT8oYz1iLnN0YXRlTm9kZSxkPWIubWVtb2l6ZWRQcm9wcyxjW01kXT1iLGMubm9kZVZhbHVlIT09ZCYmKGIuZWZmZWN0VGFnfD00KSk6KGM9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxjW01kXT1iLGIuc3RhdGVOb2RlPWMpfXJldHVybiBudWxsO2Nhc2UgMTM6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZigwIT09KGIuZWZmZWN0VGFnJjY0KSlyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1jLGI7Yz1udWxsIT09ZDtkPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmV2goYik6KGU9YS5tZW1vaXplZFN0YXRlLGQ9bnVsbCE9PWUsY3x8bnVsbD09PWV8fChlPWEuY2hpbGQuc2libGluZyxudWxsIT09ZSYmKGY9Yi5maXJzdEVmZmVjdCxudWxsIT09Zj8oYi5maXJzdEVmZmVjdD1lLGUubmV4dEVmZmVjdD1mKTooYi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9XG5lLGUubmV4dEVmZmVjdD1udWxsKSxlLmVmZmVjdFRhZz04KSkpO2lmKGMmJiFkJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oTS5jdXJyZW50JjEpKVM9PT10aSYmKFM9dWkpO2Vsc2V7aWYoUz09PXRpfHxTPT09dWkpUz12aTswIT09d2kmJm51bGwhPT1UJiYoeGkoVCxVKSx5aShULHdpKSl9aWYoY3x8ZCliLmVmZmVjdFRhZ3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksb2koYiksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEwoYi50eXBlKSYmRGYoKSxudWxsO2Nhc2UgMTk6SChNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtlPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2Y9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWYpaWYoZSlyaShkLCExKTtlbHNle2lmKFMhPT10aXx8bnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmXG42NCkpZm9yKGY9Yi5jaGlsZDtudWxsIT09Zjspe2E9aGgoZik7aWYobnVsbCE9PWEpe2IuZWZmZWN0VGFnfD02NDtyaShkLCExKTtlPWEudXBkYXRlUXVldWU7bnVsbCE9PWUmJihiLnVwZGF0ZVF1ZXVlPWUsYi5lZmZlY3RUYWd8PTQpO251bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7Zm9yKGQ9Yi5jaGlsZDtudWxsIT09ZDspZT1kLGY9YyxlLmVmZmVjdFRhZyY9MixlLm5leHRFZmZlY3Q9bnVsbCxlLmZpcnN0RWZmZWN0PW51bGwsZS5sYXN0RWZmZWN0PW51bGwsYT1lLmFsdGVybmF0ZSxudWxsPT09YT8oZS5jaGlsZEV4cGlyYXRpb25UaW1lPTAsZS5leHBpcmF0aW9uVGltZT1mLGUuY2hpbGQ9bnVsbCxlLm1lbW9pemVkUHJvcHM9bnVsbCxlLm1lbW9pemVkU3RhdGU9bnVsbCxlLnVwZGF0ZVF1ZXVlPW51bGwsZS5kZXBlbmRlbmNpZXM9bnVsbCk6KGUuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWUsXG5lLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWUsZS5jaGlsZD1hLmNoaWxkLGUubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHMsZS5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxlLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsZj1hLmRlcGVuZGVuY2llcyxlLmRlcGVuZGVuY2llcz1udWxsPT09Zj9udWxsOntleHBpcmF0aW9uVGltZTpmLmV4cGlyYXRpb25UaW1lLGZpcnN0Q29udGV4dDpmLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmYucmVzcG9uZGVyc30pLGQ9ZC5zaWJsaW5nO0koTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1mPWYuc2libGluZ319ZWxzZXtpZighZSlpZihhPWhoKGYpLG51bGwhPT1hKXtpZihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5lZmZlY3RUYWd8PTQpLHJpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZi5hbHRlcm5hdGUpcmV0dXJuIGI9XG5iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKiRmKCktZC5yZW5kZXJpbmdTdGFydFRpbWU+ZC50YWlsRXhwaXJhdGlvbiYmMTxjJiYoYi5lZmZlY3RUYWd8PTY0LGU9ITAscmkoZCwhMSksYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9Yy0xKTtkLmlzQmFja3dhcmRzPyhmLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWYpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZjpiLmNoaWxkPWYsZC5sYXN0PWYpfXJldHVybiBudWxsIT09ZC50YWlsPygwPT09ZC50YWlsRXhwaXJhdGlvbiYmKGQudGFpbEV4cGlyYXRpb249JGYoKSs1MDApLGM9ZC50YWlsLGQucmVuZGVyaW5nPWMsZC50YWlsPWMuc2libGluZyxkLmxhc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0LGQucmVuZGVyaW5nU3RhcnRUaW1lPSRmKCksYy5zaWJsaW5nPW51bGwsYj1NLmN1cnJlbnQsSShNLGU/YiYxfDI6YiYxKSxjKTpudWxsfXRocm93IEVycm9yKHUoMTU2LFxuYi50YWcpKTt9ZnVuY3Rpb24gemkoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDE6TChhLnR5cGUpJiZEZigpO3ZhciBiPWEuZWZmZWN0VGFnO3JldHVybiBiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZWgoKTtIKEspO0goSik7Yj1hLmVmZmVjdFRhZztpZigwIT09KGImNjQpKXRocm93IEVycm9yKHUoMjg1KSk7YS5lZmZlY3RUYWc9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGdoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChNKSxiPWEuZWZmZWN0VGFnLGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEgoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIGVoKCksbnVsbDtjYXNlIDEwOnJldHVybiBvZyhhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fWZ1bmN0aW9uIEFpKGEsYil7cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6cWIoYil9fVxudmFyIEJpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O2Z1bmN0aW9uIENpKGEsYil7dmFyIGM9Yi5zb3VyY2UsZD1iLnN0YWNrO251bGw9PT1kJiZudWxsIT09YyYmKGQ9cWIoYykpO251bGwhPT1jJiZwYihjLnR5cGUpO2I9Yi52YWx1ZTtudWxsIT09YSYmMT09PWEudGFnJiZwYihhLnR5cGUpO3RyeXtjb25zb2xlLmVycm9yKGIpfWNhdGNoKGUpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlO30pfX1mdW5jdGlvbiBEaShhLGIpe3RyeXtiLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxiLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxiLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goYyl7RWkoYSxjKX19ZnVuY3Rpb24gRmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7RWkoYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfVxuZnVuY3Rpb24gR2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZWZmZWN0VGFnJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6aWcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gSGkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5kZXN0cm95O2MuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZCYmZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gSWkoYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fVxuZnVuY3Rpb24gSmkoYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOklpKDMsYyk7cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2lmKGMuZWZmZWN0VGFnJjQpaWYobnVsbD09PWIpYS5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6aWcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyk7YS5jb21wb25lbnREaWRVcGRhdGUoZCxiLm1lbW9pemVkU3RhdGUsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZDZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUNnKGMsYixhKX1yZXR1cm47XG5jYXNlIDU6YT1jLnN0YXRlTm9kZTtudWxsPT09YiYmYy5lZmZlY3RUYWcmNCYmRmQoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZWYyhjKSkpKTtyZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBLaShhLGIsYyl7XCJmdW5jdGlvblwiPT09dHlwZW9mIExpJiZMaShiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGQ9YS5uZXh0O2NnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBhPWQ7ZG97dmFyIGM9YS5kZXN0cm95O2lmKHZvaWQgMCE9PWMpe3ZhciBnPWI7dHJ5e2MoKX1jYXRjaChoKXtFaShnLGgpfX1hPWEubmV4dH13aGlsZShhIT09ZCl9KX1icmVhaztjYXNlIDE6RmkoYik7Yz1iLnN0YXRlTm9kZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5jb21wb25lbnRXaWxsVW5tb3VudCYmRGkoYixjKTticmVhaztjYXNlIDU6RmkoYik7YnJlYWs7Y2FzZSA0Ok1pKGEsYixjKX19XG5mdW5jdGlvbiBOaShhKXt2YXIgYj1hLmFsdGVybmF0ZTthLnJldHVybj1udWxsO2EuY2hpbGQ9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmFsdGVybmF0ZT1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7bnVsbCE9PWImJk5pKGIpfWZ1bmN0aW9uIE9pKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gUGkoYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoT2koYikpe3ZhciBjPWI7YnJlYWsgYX1iPWIucmV0dXJufXRocm93IEVycm9yKHUoMTYwKSk7fWI9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDE2MSkpO31jLmVmZmVjdFRhZyYxNiYmKFJiKGIsXCJcIiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxPaShjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmVmZmVjdFRhZyYyKWNvbnRpbnVlIGI7XG5pZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZWZmZWN0VGFnJjIpKXtjPWMuc3RhdGVOb2RlO2JyZWFrIGF9fWQ/UWkoYSxjLGIpOlJpKGEsYyxiKX1cbmZ1bmN0aW9uIFFpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1zZCkpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihRaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVFpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFJpKGEsYixjKXt2YXIgZD1hLnRhZyxlPTU9PT1kfHw2PT09ZDtpZihlKWE9ZT9hLnN0YXRlTm9kZTphLnN0YXRlTm9kZS5pbnN0YW5jZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUmkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylSaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBNaShhLGIsYyl7Zm9yKHZhciBkPWIsZT0hMSxmLGc7Oyl7aWYoIWUpe2U9ZC5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1lKXRocm93IEVycm9yKHUoMTYwKSk7Zj1lLnN0YXRlTm9kZTtzd2l0Y2goZS50YWcpe2Nhc2UgNTpnPSExO2JyZWFrIGE7Y2FzZSAzOmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYTtjYXNlIDQ6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhfWU9ZS5yZXR1cm59ZT0hMH1pZig1PT09ZC50YWd8fDY9PT1kLnRhZyl7YTpmb3IodmFyIGg9YSxrPWQsbD1jLG09azs7KWlmKEtpKGgsbSxsKSxudWxsIT09bS5jaGlsZCYmNCE9PW0udGFnKW0uY2hpbGQucmV0dXJuPW0sbT1tLmNoaWxkO2Vsc2V7aWYobT09PWspYnJlYWsgYTtmb3IoO251bGw9PT1tLnNpYmxpbmc7KXtpZihudWxsPT09bS5yZXR1cm58fG0ucmV0dXJuPT09aylicmVhayBhO209bS5yZXR1cm59bS5zaWJsaW5nLnJldHVybj1tLnJldHVybjttPW0uc2libGluZ31nPyhoPVxuZixrPWQuc3RhdGVOb2RlLDg9PT1oLm5vZGVUeXBlP2gucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChrKTpoLnJlbW92ZUNoaWxkKGspKTpmLnJlbW92ZUNoaWxkKGQuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1kLnRhZyl7aWYobnVsbCE9PWQuY2hpbGQpe2Y9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztnPSEwO2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKEtpKGEsZCxjKSxudWxsIT09ZC5jaGlsZCl7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9aWYoZD09PWIpYnJlYWs7Zm9yKDtudWxsPT09ZC5zaWJsaW5nOyl7aWYobnVsbD09PWQucmV0dXJufHxkLnJldHVybj09PWIpcmV0dXJuO2Q9ZC5yZXR1cm47ND09PWQudGFnJiYoZT0hMSl9ZC5zaWJsaW5nLnJldHVybj1kLnJldHVybjtkPWQuc2libGluZ319XG5mdW5jdGlvbiBTaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6SGkoMyxiKTtyZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6dmFyIGM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7dmFyIGQ9Yi5tZW1vaXplZFByb3BzLGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbTmRdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJkJiKGMsZCk7cGQoYSxlKTtiPXBkKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPTIpe3ZhciBnPWZbZV0saD1mW2UrMV07XCJzdHlsZVwiPT09Zz9tZChjLGgpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWc/UWIoYyxoKTpcImNoaWxkcmVuXCI9PT1nP1JiKGMsaCk6WGEoYyxnLGgsYil9c3dpdGNoKGEpe2Nhc2UgXCJpbnB1dFwiOkNiKGMsZCk7YnJlYWs7XG5jYXNlIFwidGV4dGFyZWFcIjpLYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGE9ZC52YWx1ZSxudWxsIT1hP0hiKGMsISFkLm11bHRpcGxlLGEsITEpOmIhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9IYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6SGIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iLm1lbW9pemVkUHJvcHM7cmV0dXJuO2Nhc2UgMzpiPWIuc3RhdGVOb2RlO2IuaHlkcmF0ZSYmKGIuaHlkcmF0ZT0hMSxWYyhiLmNvbnRhaW5lckluZm8pKTtyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpjPWI7bnVsbD09PWIubWVtb2l6ZWRTdGF0ZT9cbmQ9ITE6KGQ9ITAsYz1iLmNoaWxkLFRpPSRmKCkpO2lmKG51bGwhPT1jKWE6Zm9yKGE9Yzs7KXtpZig1PT09YS50YWcpZj1hLnN0YXRlTm9kZSxkPyhmPWYuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihmPWEuc3RhdGVOb2RlLGU9YS5tZW1vaXplZFByb3BzLnN0eWxlLGU9dm9pZCAwIT09ZSYmbnVsbCE9PWUmJmUuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2UuZGlzcGxheTpudWxsLGYuc3R5bGUuZGlzcGxheT1sZChcImRpc3BsYXlcIixlKSk7ZWxzZSBpZig2PT09YS50YWcpYS5zdGF0ZU5vZGUubm9kZVZhbHVlPWQ/XCJcIjphLm1lbW9pemVkUHJvcHM7ZWxzZSBpZigxMz09PWEudGFnJiZudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsPT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2Y9YS5jaGlsZC5zaWJsaW5nO2YucmV0dXJuPWE7YT1cbmY7Y29udGludWV9ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWMpYnJlYWs7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWMpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9VWkoYik7cmV0dXJuO2Nhc2UgMTk6VWkoYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fWZ1bmN0aW9uIFVpKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IEJpKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9VmkuYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG52YXIgV2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gWGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtZaXx8KFlpPSEwLFppPWQpO0NpKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gJGkoYSxiLGMpe2M9d2coYyxudWxsKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7Q2koYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PWFqP2FqPW5ldyBTZXQoW3RoaXNdKTphai5hZGQodGhpcyksQ2koYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG52YXIgYmo9TWF0aC5jZWlsLGNqPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZGo9V2EuUmVhY3RDdXJyZW50T3duZXIsVj0wLGVqPTgsZmo9MTYsZ2o9MzIsdGk9MCxoaj0xLGlqPTIsdWk9Myx2aT00LGpqPTUsVz1WLFQ9bnVsbCxYPW51bGwsVT0wLFM9dGksa2o9bnVsbCxsaj0xMDczNzQxODIzLG1qPTEwNzM3NDE4MjMsbmo9bnVsbCx3aT0wLG9qPSExLFRpPTAscGo9NTAwLFk9bnVsbCxZaT0hMSxaaT1udWxsLGFqPW51bGwscWo9ITEscmo9bnVsbCxzaj05MCx0aj1udWxsLHVqPTAsdmo9bnVsbCx3aj0wO2Z1bmN0aW9uIEdnKCl7cmV0dXJuKFcmKGZqfGdqKSkhPT1WPzEwNzM3NDE4MjEtKCRmKCkvMTB8MCk6MCE9PXdqP3dqOndqPTEwNzM3NDE4MjEtKCRmKCkvMTB8MCl9XG5mdW5jdGlvbiBIZyhhLGIsYyl7Yj1iLm1vZGU7aWYoMD09PShiJjIpKXJldHVybiAxMDczNzQxODIzO3ZhciBkPWFnKCk7aWYoMD09PShiJjQpKXJldHVybiA5OT09PWQ/MTA3Mzc0MTgyMzoxMDczNzQxODIyO2lmKChXJmZqKSE9PVYpcmV0dXJuIFU7aWYobnVsbCE9PWMpYT1oZyhhLGMudGltZW91dE1zfDB8fDVFMywyNTApO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgOTk6YT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgOTg6YT1oZyhhLDE1MCwxMDApO2JyZWFrO2Nhc2UgOTc6Y2FzZSA5NjphPWhnKGEsNUUzLDI1MCk7YnJlYWs7Y2FzZSA5NTphPTI7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyNikpO31udWxsIT09VCYmYT09PVUmJi0tYTtyZXR1cm4gYX1cbmZ1bmN0aW9uIElnKGEsYil7aWYoNTA8dWopdGhyb3cgdWo9MCx2aj1udWxsLEVycm9yKHUoMTg1KSk7YT14aihhLGIpO2lmKG51bGwhPT1hKXt2YXIgYz1hZygpOzEwNzM3NDE4MjM9PT1iPyhXJmVqKSE9PVYmJihXJihmanxnaikpPT09Vj95aihhKTooWihhKSxXPT09ViYmZ2coKSk6WihhKTsoVyY0KT09PVZ8fDk4IT09YyYmOTkhPT1jfHwobnVsbD09PXRqP3RqPW5ldyBNYXAoW1thLGJdXSk6KGM9dGouZ2V0KGEpLCh2b2lkIDA9PT1jfHxjPmIpJiZ0ai5zZXQoYSxiKSkpfX1cbmZ1bmN0aW9uIHhqKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTt2YXIgZD1hLnJldHVybixlPW51bGw7aWYobnVsbD09PWQmJjM9PT1hLnRhZyllPWEuc3RhdGVOb2RlO2Vsc2UgZm9yKDtudWxsIT09ZDspe2M9ZC5hbHRlcm5hdGU7ZC5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihkLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7bnVsbCE9PWMmJmMuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoYy5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO2lmKG51bGw9PT1kLnJldHVybiYmMz09PWQudGFnKXtlPWQuc3RhdGVOb2RlO2JyZWFrfWQ9ZC5yZXR1cm59bnVsbCE9PWUmJihUPT09ZSYmKEJnKGIpLFM9PT12aSYmeGkoZSxVKSkseWkoZSxiKSk7cmV0dXJuIGV9XG5mdW5jdGlvbiB6aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtpZigwIT09YilyZXR1cm4gYjtiPWEuZmlyc3RQZW5kaW5nVGltZTtpZighQWooYSxiKSlyZXR1cm4gYjt2YXIgYz1hLmxhc3RQaW5nZWRUaW1lO2E9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw7YT1jPmE/YzphO3JldHVybiAyPj1hJiZiIT09YT8wOmF9XG5mdW5jdGlvbiBaKGEpe2lmKDAhPT1hLmxhc3RFeHBpcmVkVGltZSlhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMyxhLmNhbGxiYWNrUHJpb3JpdHk9OTksYS5jYWxsYmFja05vZGU9ZWcoeWouYmluZChudWxsLGEpKTtlbHNle3ZhciBiPXpqKGEpLGM9YS5jYWxsYmFja05vZGU7aWYoMD09PWIpbnVsbCE9PWMmJihhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wLGEuY2FsbGJhY2tQcmlvcml0eT05MCk7ZWxzZXt2YXIgZD1HZygpOzEwNzM3NDE4MjM9PT1iP2Q9OTk6MT09PWJ8fDI9PT1iP2Q9OTU6KGQ9MTAqKDEwNzM3NDE4MjEtYiktMTAqKDEwNzM3NDE4MjEtZCksZD0wPj1kPzk5OjI1MD49ZD85ODo1MjUwPj1kPzk3Ojk1KTtpZihudWxsIT09Yyl7dmFyIGU9YS5jYWxsYmFja1ByaW9yaXR5O2lmKGEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT09PWImJmU+PWQpcmV0dXJuO2MhPT1UZiYmS2YoYyl9YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPVxuYjthLmNhbGxiYWNrUHJpb3JpdHk9ZDtiPTEwNzM3NDE4MjM9PT1iP2VnKHlqLmJpbmQobnVsbCxhKSk6ZGcoZCxCai5iaW5kKG51bGwsYSkse3RpbWVvdXQ6MTAqKDEwNzM3NDE4MjEtYiktJGYoKX0pO2EuY2FsbGJhY2tOb2RlPWJ9fX1cbmZ1bmN0aW9uIEJqKGEsYil7d2o9MDtpZihiKXJldHVybiBiPUdnKCksQ2ooYSxiKSxaKGEpLG51bGw7dmFyIGM9emooYSk7aWYoMCE9PWMpe2I9YS5jYWxsYmFja05vZGU7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYz09PVV8fEVqKGEsYyk7aWYobnVsbCE9PVgpe3ZhciBkPVc7V3w9Zmo7dmFyIGU9RmooKTtkbyB0cnl7R2ooKTticmVha31jYXRjaChoKXtIaihhLGgpfXdoaWxlKDEpO25nKCk7Vz1kO2NqLmN1cnJlbnQ9ZTtpZihTPT09aGopdGhyb3cgYj1raixFaihhLGMpLHhpKGEsYyksWihhKSxiO2lmKG51bGw9PT1YKXN3aXRjaChlPWEuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGUsYS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWMsZD1TLFQ9bnVsbCxkKXtjYXNlIHRpOmNhc2UgaGo6dGhyb3cgRXJyb3IodSgzNDUpKTtjYXNlIGlqOkNqKGEsMjxjPzI6Yyk7YnJlYWs7Y2FzZSB1aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtcbmM9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKDEwNzM3NDE4MjM9PT1saiYmKGU9VGkrcGotJGYoKSwxMDxlKSl7aWYob2ope3ZhciBmPWEubGFzdFBpbmdlZFRpbWU7aWYoMD09PWZ8fGY+PWMpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfX1mPXpqKGEpO2lmKDAhPT1mJiZmIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9ZDticmVha31hLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGUpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugdmk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7Yz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYob2omJihlPWEubGFzdFBpbmdlZFRpbWUsMD09PWV8fGU+PWMpKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha31lPXpqKGEpO2lmKDAhPT1lJiZlIT09YylicmVhaztpZigwIT09ZCYmZCE9PWMpe2EubGFzdFBpbmdlZFRpbWU9XG5kO2JyZWFrfTEwNzM3NDE4MjMhPT1taj9kPTEwKigxMDczNzQxODIxLW1qKS0kZigpOjEwNzM3NDE4MjM9PT1saj9kPTA6KGQ9MTAqKDEwNzM3NDE4MjEtbGopLTVFMyxlPSRmKCksYz0xMCooMTA3Mzc0MTgyMS1jKS1lLGQ9ZS1kLDA+ZCYmKGQ9MCksZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCpiaihkLzE5NjApKS1kLGM8ZCYmKGQ9YykpO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSBqajppZigxMDczNzQxODIzIT09bGomJm51bGwhPT1uail7Zj1sajt2YXIgZz1uajtkPWcuYnVzeU1pbkR1cmF0aW9uTXN8MDswPj1kP2Q9MDooZT1nLmJ1c3lEZWxheU1zfDAsZj0kZigpLSgxMCooMTA3Mzc0MTgyMS1mKS0oZy50aW1lb3V0TXN8MHx8NUUzKSksZD1mPD1lPzA6ZStkLWYpO2lmKDEwPGQpe3hpKGEsYyk7YS50aW1lb3V0SGFuZGxlPVxuSGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfX1KaihhKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI5KSk7fVooYSk7aWYoYS5jYWxsYmFja05vZGU9PT1iKXJldHVybiBCai5iaW5kKG51bGwsYSl9fXJldHVybiBudWxsfVxuZnVuY3Rpb24geWooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7Yj0wIT09Yj9iOjEwNzM3NDE4MjM7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7RGooKTthPT09VCYmYj09PVV8fEVqKGEsYik7aWYobnVsbCE9PVgpe3ZhciBjPVc7V3w9Zmo7dmFyIGQ9RmooKTtkbyB0cnl7S2ooKTticmVha31jYXRjaChlKXtIaihhLGUpfXdoaWxlKDEpO25nKCk7Vz1jO2NqLmN1cnJlbnQ9ZDtpZihTPT09aGopdGhyb3cgYz1raixFaihhLGIpLHhpKGEsYiksWihhKSxjO2lmKG51bGwhPT1YKXRocm93IEVycm9yKHUoMjYxKSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YjtUPW51bGw7SmooYSk7WihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBMaigpe2lmKG51bGwhPT10ail7dmFyIGE9dGo7dGo9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSxjKXtDaihjLGEpO1ooYyl9KTtnZygpfX1cbmZ1bmN0aW9uIE1qKGEsYil7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19ZnVuY3Rpb24gTmooYSxiKXt2YXIgYz1XO1cmPS0yO1d8PWVqO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19XG5mdW5jdGlvbiBFaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxJZChjKSk7aWYobnVsbCE9PVgpZm9yKGM9WC5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZEZigpO2JyZWFrO2Nhc2UgMzplaCgpO0goSyk7SChKKTticmVhaztjYXNlIDU6Z2goZCk7YnJlYWs7Y2FzZSA0OmVoKCk7YnJlYWs7Y2FzZSAxMzpIKE0pO2JyZWFrO2Nhc2UgMTk6SChNKTticmVhaztjYXNlIDEwOm9nKGQpfWM9Yy5yZXR1cm59VD1hO1g9U2coYS5jdXJyZW50LG51bGwpO1U9YjtTPXRpO2tqPW51bGw7bWo9bGo9MTA3Mzc0MTgyMztuaj1udWxsO3dpPTA7b2o9ITF9XG5mdW5jdGlvbiBIaihhLGIpe2Rve3RyeXtuZygpO2poLmN1cnJlbnQ9c2g7aWYobWgpZm9yKHZhciBjPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09Yzspe3ZhciBkPWMucXVldWU7bnVsbCE9PWQmJihkLnBlbmRpbmc9bnVsbCk7Yz1jLm5leHR9bGg9MDtQPU89Tj1udWxsO21oPSExO2lmKG51bGw9PT1YfHxudWxsPT09WC5yZXR1cm4pcmV0dXJuIFM9aGosa2o9YixYPW51bGw7YTp7dmFyIGU9YSxmPVgucmV0dXJuLGc9WCxoPWI7Yj1VO2cuZWZmZWN0VGFnfD0yMDQ4O2cuZmlyc3RFZmZlY3Q9Zy5sYXN0RWZmZWN0PW51bGw7aWYobnVsbCE9PWgmJlwib2JqZWN0XCI9PT10eXBlb2YgaCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGgudGhlbil7dmFyIGs9aDtpZigwPT09KGcubW9kZSYyKSl7dmFyIGw9Zy5hbHRlcm5hdGU7bD8oZy51cGRhdGVRdWV1ZT1sLnVwZGF0ZVF1ZXVlLGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTooZy51cGRhdGVRdWV1ZT1cbm51bGwsZy5tZW1vaXplZFN0YXRlPW51bGwpfXZhciBtPTAhPT0oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7XG5icmVhayBhfWg9dm9pZCAwO2c9Yjt2YXIgQT1lLnBpbmdDYWNoZTtudWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChwYihnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrcWIoZykpfVMhPT1cbmpqJiYoUz1paik7aD1BaShoLGcpO3A9Zjtkb3tzd2l0Y2gocC50YWcpe2Nhc2UgMzprPWg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gRmooKXt2YXIgYT1jai5jdXJyZW50O2NqLmN1cnJlbnQ9c2g7cmV0dXJuIG51bGw9PT1hP3NoOmF9ZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO29iKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09Z2IpcmV0dXJuIDExO2lmKGE9PT1qYilyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIGFiOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIGZiOmc9ODtlfD03O2JyZWFrO2Nhc2UgYmI6Zz04O2V8PTE7YnJlYWs7Y2FzZSBjYjpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPWNiLGEudHlwZT1jYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGhiOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9aGIsYS5lbGVtZW50VHlwZT1oYixhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIGliOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPWliLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBkYjpnPVxuMTA7YnJlYWsgYTtjYXNlIGViOmc9OTticmVhayBhO2Nhc2UgZ2I6Zz0xMTticmVhayBhO2Nhc2UgamI6Zz0xNDticmVhayBhO2Nhc2Uga2I6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIGxiOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6JGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuemE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtGYT1NajtcbkdhPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07SGE9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O0lhPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCx4YSx0YSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sRGEsRWEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOldhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTQuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTQuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYj02MDEwMyxjPTYwMTA2LGQ9NjAxMDcsZT02MDEwOCxmPTYwMTE0LGc9NjAxMDksaD02MDExMCxrPTYwMTEyLGw9NjAxMTMsbT02MDEyMCxuPTYwMTE1LHA9NjAxMTYscT02MDEyMSxyPTYwMTIyLHU9NjAxMTcsdj02MDEyOSx3PTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHg9U3ltYm9sLmZvcjtiPXgoXCJyZWFjdC5lbGVtZW50XCIpO2M9eChcInJlYWN0LnBvcnRhbFwiKTtkPXgoXCJyZWFjdC5mcmFnbWVudFwiKTtlPXgoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtmPXgoXCJyZWFjdC5wcm9maWxlclwiKTtnPXgoXCJyZWFjdC5wcm92aWRlclwiKTtoPXgoXCJyZWFjdC5jb250ZXh0XCIpO2s9eChcInJlYWN0LmZvcndhcmRfcmVmXCIpO2w9eChcInJlYWN0LnN1c3BlbnNlXCIpO209eChcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik7bj14KFwicmVhY3QubWVtb1wiKTtwPXgoXCJyZWFjdC5sYXp5XCIpO3E9eChcInJlYWN0LmJsb2NrXCIpO3I9eChcInJlYWN0LnNlcnZlci5ibG9ja1wiKTt1PXgoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTt2PXgoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO3c9eChcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIil9XG5mdW5jdGlvbiB5KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB0PWEuJCR0eXBlb2Y7c3dpdGNoKHQpe2Nhc2UgYjpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBkOmNhc2UgZjpjYXNlIGU6Y2FzZSBsOmNhc2UgbTpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBoOmNhc2UgazpjYXNlIHA6Y2FzZSBuOmNhc2UgZzpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB0fX1jYXNlIGM6cmV0dXJuIHR9fX12YXIgej1nLEE9YixCPWssQz1kLEQ9cCxFPW4sRj1jLEc9ZixIPWUsST1sO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWg7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9ejtleHBvcnRzLkVsZW1lbnQ9QTtleHBvcnRzLkZvcndhcmRSZWY9QjtleHBvcnRzLkZyYWdtZW50PUM7ZXhwb3J0cy5MYXp5PUQ7ZXhwb3J0cy5NZW1vPUU7ZXhwb3J0cy5Qb3J0YWw9RjtleHBvcnRzLlByb2ZpbGVyPUc7ZXhwb3J0cy5TdHJpY3RNb2RlPUg7XG5leHBvcnRzLlN1c3BlbnNlPUk7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbigpe3JldHVybiExfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9ZnVuY3Rpb24oKXtyZXR1cm4hMX07ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PWh9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1nfTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Yn07ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1rfTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1kfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geShhKT09PXB9O2V4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09bn07XG5leHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Y307ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB5KGEpPT09Zn07ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1lfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHkoYSk9PT1sfTtleHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZHx8YT09PWZ8fGE9PT12fHxhPT09ZXx8YT09PWx8fGE9PT1tfHxhPT09d3x8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT1wfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PWd8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PXV8fGEuJCR0eXBlb2Y9PT1xfHxhWzBdPT09cik/ITA6ITF9O1xuZXhwb3J0cy50eXBlT2Y9eTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xNC4wXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjE0LjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gIHZhciBoYXNoID0gNTM4MSxcbiAgICAgIGkgICAgPSBzdHIubGVuZ3RoO1xuXG4gIHdoaWxlKGkpIHtcbiAgICBoYXNoID0gKGhhc2ggKiAzMykgXiBzdHIuY2hhckNvZGVBdCgtLWkpO1xuICB9XG5cbiAgLyogSmF2YVNjcmlwdCBkb2VzIGJpdHdpc2Ugb3BlcmF0aW9ucyAobGlrZSBYT1IsIGFib3ZlKSBvbiAzMi1iaXQgc2lnbmVkXG4gICAqIGludGVnZXJzLiBTaW5jZSB3ZSB3YW50IHRoZSByZXN1bHRzIHRvIGJlIGFsd2F5cyBwb3NpdGl2ZSwgY29udmVydCB0aGVcbiAgICogc2lnbmVkIGludCB0byBhbiB1bnNpZ25lZCBieSBkb2luZyBhbiB1bnNpZ25lZCBiaXRzaGlmdC4gKi9cbiAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaDtcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYztcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSB7XG5cdFx0XHR2YXIgaSA9IHNjcmlwdHMubGVuZ3RoIC0gMTtcblx0XHRcdHdoaWxlIChpID4gLTEgJiYgKCFzY3JpcHRVcmwgfHwgIS9eaHR0cChzPyk6Ly50ZXN0KHNjcmlwdFVybCkpKSBzY3JpcHRVcmwgPSBzY3JpcHRzW2ktLV0uc3JjO1xuXHRcdH1cblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4xNi4xXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSwgc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihjdXJyZW50LCB0bywgc3RhdGUsIGtleSkge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gbnVsbDtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gX3JlZjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09IFwiP1wiKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIikgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuZnVuY3Rpb24gZ2V0VXJsQmFzZWRIaXN0b3J5KGdldExvY2F0aW9uLCBjcmVhdGVIcmVmLCB2YWxpZGF0ZUxvY2F0aW9uLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbmRleCgpIHtcbiAgICBsZXQgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHtcbiAgICAgIGlkeDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlLmlkeDtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBsZXQgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgZGVsdGEgPSBuZXh0SW5kZXggPT0gbnVsbCA/IG51bGwgOiBuZXh0SW5kZXggLSBpbmRleDtcbiAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuICAgIHRyeSB7XG4gICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIHRoZSBleGNlcHRpb24gaXMgYmVjYXVzZSBgc3RhdGVgIGNhbid0IGJlIHNlcmlhbGl6ZWQsIGxldCB0aGF0IHRocm93XG4gICAgICAvLyBvdXR3YXJkcyBqdXN0IGxpa2UgYSByZXBsYWNlIGNhbGwgd291bGQgc28gdGhlIGRldiBrbm93cyB0aGUgY2F1c2VcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL25hdi1oaXN0b3J5LWFwaXMuaHRtbCNzaGFyZWQtaGlzdG9yeS1wdXNoL3JlcGxhY2Utc3RhdGUtc3RlcHNcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N0cnVjdHVyZWQtZGF0YS5odG1sI3N0cnVjdHVyZWRzZXJpYWxpemVpbnRlcm5hbFxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIGVycm9yLm5hbWUgPT09IFwiRGF0YUNsb25lRXJyb3JcIikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uXG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgfVxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykge1xuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgXCJudWxsXCIgKHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSkgaW4gRmlyZWZveFxuICAgIC8vIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgbm90YWJseSB3aGVuIHNlcnZpbmcgZnJvbSBhIGxvY2FsIEhUTUwgZmlsZVxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBocmVmID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgICAvLyBUcmVhdGluZyB0aGlzIGFzIGEgZnVsbCBVUkwgd2lsbCBzdHJpcCBhbnkgdHJhaWxpbmcgc3BhY2VzIHNvIHdlIG5lZWQgdG9cbiAgICAvLyBwcmUtZW5jb2RlIHRoZW0gc2luY2UgdGhleSBtaWdodCBiZSBwYXJ0IG9mIGEgbWF0Y2hpbmcgc3BsYXQgcGFyYW0gZnJvbVxuICAgIC8vIGFuIGFuY2VzdG9yIHJvdXRlXG4gICAgaHJlZiA9IGhyZWYucmVwbGFjZSgvICQvLCBcIiUyMFwiKTtcbiAgICBpbnZhcmlhbnQoYmFzZSwgXCJObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogXCIgKyBocmVmKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuICAgIGNyZWF0ZVVSTCxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFJlc3VsdFR5cGUpIHtcbiAgUmVzdWx0VHlwZVtcImRhdGFcIl0gPSBcImRhdGFcIjtcbiAgUmVzdWx0VHlwZVtcImRlZmVycmVkXCJdID0gXCJkZWZlcnJlZFwiO1xuICBSZXN1bHRUeXBlW1wicmVkaXJlY3RcIl0gPSBcInJlZGlyZWN0XCI7XG4gIFJlc3VsdFR5cGVbXCJlcnJvclwiXSA9IFwiZXJyb3JcIjtcbn0pKFJlc3VsdFR5cGUgfHwgKFJlc3VsdFR5cGUgPSB7fSkpO1xuY29uc3QgaW1tdXRhYmxlUm91dGVLZXlzID0gbmV3IFNldChbXCJsYXp5XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcInBhdGhcIiwgXCJpZFwiLCBcImluZGV4XCIsIFwiY2hpbGRyZW5cIl0pO1xuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn1cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSwgc28gd2UgYXJlIHdvcmtpbmdcbi8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXJcbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHBhcmVudFBhdGgsIG1hbmlmZXN0KSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgaWYgKG1hbmlmZXN0ID09PSB2b2lkIDApIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICB9XG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIW1hbmlmZXN0W2lkXSwgXCJGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcXFwiXCIgKyBpZCArIFwiXFxcIi4gIFJvdXRlIFwiICsgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIik7XG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCB0cmVlUGF0aCwgbWFuaWZlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgbGV0IGRlY29kZWQgPSBkZWNvZGVQYXRoKHBhdGhuYW1lKTtcbiAgICBtYXRjaGVzID0gbWF0Y2hSb3V0ZUJyYW5jaChicmFuY2hlc1tpXSwgZGVjb2RlZCk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuICBsZXQgZmxhdHRlblJvdXRlID0gKHJvdXRlLCBpbmRleCwgcmVsYXRpdmVQYXRoKSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7XG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5LCBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJyYW5jaGVzLnB1c2goe1xuICAgICAgcGF0aCxcbiAgICAgIHNjb3JlOiBjb21wdXRlU2NvcmUocGF0aCwgcm91dGUuaW5kZXgpLFxuICAgICAgcm91dGVzTWV0YVxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zXG4gICAgaWYgKHJvdXRlLnBhdGggPT09IFwiXCIgfHwgISgoX3JvdXRlJHBhdGggPSByb3V0ZS5wYXRoKSAhPSBudWxsICYmIF9yb3V0ZSRwYXRoLmluY2x1ZGVzKFwiP1wiKSkpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuLyoqXG4gKiBDb21wdXRlcyBhbGwgY29tYmluYXRpb25zIG9mIG9wdGlvbmFsIHBhdGggc2VnbWVudHMgZm9yIGEgZ2l2ZW4gcGF0aCxcbiAqIGV4Y2x1ZGluZyBjb21iaW5hdGlvbnMgdGhhdCBhcmUgYW1iaWd1b3VzIGFuZCBvZiBsb3dlciBwcmlvcml0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYC9vbmUvOnR3bz8vdGhyZWUvOmZvdXI/LzpmaXZlP2AgZXhwbG9kZXMgdG86XG4gKiAtIGAvb25lL3RocmVlYFxuICogLSBgL29uZS86dHdvL3RocmVlYFxuICogLSBgL29uZS90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyLzpmaXZlYFxuICovXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7XG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuLCBzbyB3ZSBnZXQgY29uc2lzdGVudCBvcmRlcmluZyB3aGVyZSB0aGVcbiAgLy8gcGFyZW50IG9wdGlvbmFsIGFzcGVjdCBpcyBwcmVmZXJyZWQgYXMgcmVxdWlyZWQuICBPdGhlcndpc2UsIHdlIGNhbiBnZXRcbiAgLy8gY2hpbGQgc2VjdGlvbnMgaW50ZXJzcGVyc2VkIHdoZXJlIGRlZXBlciBvcHRpb25hbCBzZWdtZW50cyBhcmUgaGlnaGVyIHRoYW5cbiAgLy8gcGFyZW50IG9wdGlvbmFsIHNlZ21lbnRzLCB3aGVyZSBmb3IgZXhhbXBsZSwgLzp0d28gd291bGQgZXhwbG9kZSBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkLm1hcChzdWJwYXRoID0+IHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIikpKTtcbiAgLy8gVGhlbiwgaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG4gIGlmIChpc09wdGlvbmFsKSB7XG4gICAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkKTtcbiAgfVxuICAvLyBmb3IgYWJzb2x1dGUgcGF0aHMsIGVuc3VyZSBgL2AgaW5zdGVhZCBvZiBlbXB0eSBzZWdtZW50XG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cbmNvbnN0IHBhcmFtUmUgPSAvXjpbXFx3LV0rJC87XG5jb25zdCBkeW5hbWljU2VnbWVudFZhbHVlID0gMztcbmNvbnN0IGluZGV4Um91dGVWYWx1ZSA9IDI7XG5jb25zdCBlbXB0eVNlZ21lbnRWYWx1ZSA9IDE7XG5jb25zdCBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDtcbmNvbnN0IHNwbGF0UGVuYWx0eSA9IC0yO1xuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG4gIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTtcbiAgfVxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhLCBiKSB7XG4gIGxldCBzaWJsaW5ncyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG4gIHJldHVybiBzaWJsaW5ncyA/XG4gIC8vIElmIHR3byByb3V0ZXMgYXJlIHNpYmxpbmdzLCB3ZSBzaG91bGQgdHJ5IHRvIG1hdGNoIHRoZSBlYXJsaWVyIHNpYmxpbmdcbiAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nXG4gIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAvLyB3YW50IHRoZW0gdHJpZWQuXG4gIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSA6XG4gIC8vIE90aGVyd2lzZSwgaXQgZG9lc24ndCByZWFsbHkgbWFrZSBzZW5zZSB0byByYW5rIG5vbi1zaWJsaW5ncyBieSBpbmRleCxcbiAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuXG4gIDA7XG59XG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcbiAgICBpZiAobWF0Y2gucGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgob3JpZ2luYWxQYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBwYXRoICE9PSBcIipcIiAmJiAhcGF0aC5lbmRzV2l0aChcIi8qXCIpKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpO1xuICB9XG4gIC8vIGVuc3VyZSBgL2AgaXMgYWRkZWQgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZVxuICBjb25zdCBwcmVmaXggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gXCIvXCIgOiBcIlwiO1xuICBjb25zdCBzdHJpbmdpZnkgPSBwID0+IHAgPT0gbnVsbCA/IFwiXCIgOiB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHAgOiBTdHJpbmcocCk7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pLm1hcCgoc2VnbWVudCwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgY29uc3QgaXNMYXN0U2VnbWVudCA9IGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxO1xuICAgIC8vIG9ubHkgYXBwbHkgdGhlIHNwbGF0IGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudFxuICAgIGlmIChpc0xhc3RTZWdtZW50ICYmIHNlZ21lbnQgPT09IFwiKlwiKSB7XG4gICAgICBjb25zdCBzdGFyID0gXCIqXCI7XG4gICAgICAvLyBBcHBseSB0aGUgc3BsYXRcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW1zW3N0YXJdKTtcbiAgICB9XG4gICAgY29uc3Qga2V5TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihbXFx3LV0rKShcXD8/KSQvKTtcbiAgICBpZiAoa2V5TWF0Y2gpIHtcbiAgICAgIGNvbnN0IFssIGtleSwgb3B0aW9uYWxdID0ga2V5TWF0Y2g7XG4gICAgICBsZXQgcGFyYW0gPSBwYXJhbXNba2V5XTtcbiAgICAgIGludmFyaWFudChvcHRpb25hbCA9PT0gXCI/XCIgfHwgcGFyYW0gIT0gbnVsbCwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFueSBvcHRpb25hbCBtYXJrZXJzIGZyb20gb3B0aW9uYWwgc3RhdGljIHNlZ21lbnRzXG4gICAgcmV0dXJuIHNlZ21lbnQucmVwbGFjZSgvXFw/JC9nLCBcIlwiKTtcbiAgfSlcbiAgLy8gUmVtb3ZlIGVtcHR5IHNlZ21lbnRzXG4gIC5maWx0ZXIoc2VnbWVudCA9PiAhIXNlZ21lbnQpO1xuICByZXR1cm4gcHJlZml4ICsgc2VnbWVudHMuam9pbihcIi9cIik7XG59XG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG4gIGxldCBbbWF0Y2hlciwgY29tcGlsZWRQYXJhbXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gY29tcGlsZWRQYXJhbXMucmVkdWNlKChtZW1vLCBfcmVmLCBpbmRleCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBpc09wdGlvbmFsXG4gICAgfSA9IF9yZWY7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdO1xuICAgIGlmIChpc09wdGlvbmFsICYmICF2YWx1ZSkge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSAodmFsdWUgfHwgXCJcIikucmVwbGFjZSgvJTJGL2csIFwiL1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14ke318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvXFwvOihbXFx3LV0rKShcXD8pPy9nLCAoXywgcGFyYW1OYW1lLCBpc09wdGlvbmFsKSA9PiB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbDogaXNPcHRpb25hbCAhPSBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBcIi8/KFteXFxcXC9dKyk/XCIgOiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lOiBcIipcIlxuICAgIH0pO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4LCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2UgO1xuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtc107XG59XG5mdW5jdGlvbiBkZWNvZGVQYXRoKHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHZhbHVlLnNwbGl0KFwiL1wiKS5tYXAodiA9PiBkZWNvZGVVUklDb21wb25lbnQodikucmVwbGFjZSgvXFwvL2csIFwiJTJGXCIpKS5qb2luKFwiL1wiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBwYXRobmFtZXMgZm9yIHRoZSBjdXJyZW50IHJvdXRlIG1hdGNoZXMgLSB1c2VkIHRvXG4vLyBnZW5lcmF0ZSB0aGUgcm91dGVQYXRobmFtZXMgaW5wdXQgZm9yIHJlc29sdmVUbygpXG5mdW5jdGlvbiBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICAvLyBXaGVuIHY3X3JlbGF0aXZlU3BsYXRQYXRoIGlzIGVuYWJsZWQsIHVzZSB0aGUgZnVsbCBwYXRobmFtZSBmb3IgdGhlIGxlYWZcbiAgLy8gbWF0Y2ggc28gd2UgaW5jbHVkZSBzcGxhdCB2YWx1ZXMgZm9yIFwiLlwiIGxpbmtzLiAgU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTEwNTIjaXNzdWVjb21tZW50LTE4MzY1ODkzMjlcbiAgaWYgKHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcCgobWF0Y2gsIGlkeCkgPT4gaWR4ID09PSBtYXRjaGVzLmxlbmd0aCAtIDEgPyBtYXRjaC5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG4gIH1cbiAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cbiAgbGV0IHRvO1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207XG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuICAgIC8vIFdpdGggcmVsYXRpdmU9XCJyb3V0ZVwiICh0aGUgZGVmYXVsdCksIGVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zXG4gICAgLy8gXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5XG4gICAgLy8gZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYSBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGFcbiAgICAvLyBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgIGlmICghaXNQYXRoUmVsYXRpdmUgJiYgdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuICBsZXQgcGF0aCA9IHJlc29sdmVQYXRoKHRvLCBmcm9tKTtcbiAgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgXCJ0b1wiIGhhZCBvbmVcbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIGlmICghcGF0aC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgKGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCB8fCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCkpIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgam9pblBhdGhzID0gcGF0aHMgPT4gcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cbmNvbnN0IGpzb24gPSBmdW5jdGlvbiBqc29uKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaWYgKCFoZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKTtcbiAgfVxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuY2xhc3MgQWJvcnRlZERlZmVycmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGVmZXJyZWREYXRhIHtcbiAgY29uc3RydWN0b3IoZGF0YSwgcmVzcG9uc2VJbml0KSB7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldCA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuZGVmZXJyZWRLZXlzID0gW107XG4gICAgaW52YXJpYW50KGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSksIFwiZGVmZXIoKSBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0c1wiKTtcbiAgICAvLyBTZXQgdXAgYW4gQWJvcnRDb250cm9sbGVyICsgUHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHRvIGV4aXQgZWFybHlcbiAgICAvLyBjYW5jZWxsYXRpb25cbiAgICBsZXQgcmVqZWN0O1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCA9ICgpID0+IHRoaXMuY29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIEFsbCBpbmNvbWluZyB2YWx1ZXMgd2VyZSByZXNvbHZlZFxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG4gICAgLy8gV2Ugc3RvcmUgYSBsaXR0bGUgd3JhcHBlciBwcm9taXNlIHRoYXQgd2lsbCBiZSBleHRlbmRlZCB3aXRoXG4gICAgLy8gX2RhdGEvX2Vycm9yIHByb3BzIHVwb24gcmVzb2x2ZS9yZWplY3RcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihkYXRhID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCB1bmRlZmluZWQsIGRhdGEpLCBlcnJvciA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IpKTtcbiAgICAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuICAgIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIG9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkICYmIGVycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIE5vdGhpbmcgbGVmdCB0byBhYm9ydCFcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcHJvbWlzZSB3YXMgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCB1bmRlZmluZWQsIHdlJ2xsIHRocm93IGFuIGVycm9yIGFzIHlvdVxuICAgIC8vIHNob3VsZCBhbHdheXMgcmVzb2x2ZSB3aXRoIGEgdmFsdWUgb3IgbnVsbFxuICAgIGlmIChlcnJvciA9PT0gdW5kZWZpbmVkICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVuZGVmaW5lZEVycm9yID0gbmV3IEVycm9yKFwiRGVmZXJyZWQgZGF0YSBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXNvbHZlZC9yZWplY3RlZCB3aXRoIGB1bmRlZmluZWRgLCBcIiArIFwieW91IG11c3QgcmVzb2x2ZS9yZWplY3Qgd2l0aCBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHVuZGVmaW5lZEVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh1bmRlZmluZWRFcnJvcik7XG4gICAgfVxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGVtaXQoYWJvcnRlZCwgc2V0dGxlZEtleSkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoYWJvcnRlZCwgc2V0dGxlZEtleSkpO1xuICB9XG4gIHN1YnNjcmliZShmbikge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5zdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgbGV0IG9uQWJvcnQgPSAoKSA9PiB0aGlzLmNhbmNlbCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYWJvcnRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWJvcnRlZDtcbiAgfVxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kb25lLCBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiKTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5kYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cbiAgZ2V0IHBlbmRpbmdLZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpO1xuICB9XG59XG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsdWUuX3RyYWNrZWQgPT09IHRydWU7XG59XG5mdW5jdGlvbiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoIWlzVHJhY2tlZFByb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cbiAgcmV0dXJuIHZhbHVlLl9kYXRhO1xufVxuY29uc3QgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZSB0aGF0IHdpbGwgZm9yY2UgYSBkb2N1bWVudCByZWxvYWQgdG8gdGhlIG5ldyBsb2NhdGlvbi5cbiAqIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdERvY3VtZW50ID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqXG4gKiBXZSBkb24ndCBleHBvcnQgdGhlIGNsYXNzIGZvciBwdWJsaWMgdXNlIHNpbmNlIGl0J3MgYW4gaW1wbGVtZW50YXRpb25cbiAqIGRldGFpbCwgYnV0IHdlIGV4cG9ydCB0aGUgaW50ZXJmYWNlIGFib3ZlIHNvIGZvbGtzIGNhbiBidWlsZCB0aGVpciBvd25cbiAqIGFic3RyYWN0aW9ucyBhcm91bmQgaW5zdGFuY2VzIHZpYSBpc1JvdXRlRXJyb3JSZXNwb25zZSgpXG4gKi9cbmNsYXNzIEVycm9yUmVzcG9uc2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbmNvbnN0IFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZID0gXCJyZW1peC1yb3V0ZXItdHJhbnNpdGlvbnNcIjtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICBsZXQgZGF0YVN0cmF0ZWd5SW1wbCA9IGluaXQudW5zdGFibGVfZGF0YVN0cmF0ZWd5IHx8IGRlZmF1bHREYXRhU3RyYXRlZ3k7XG4gIC8vIENvbmZpZyBkcml2ZW4gYmVoYXZpb3IgZmxhZ3NcbiAgbGV0IGZ1dHVyZSA9IF9leHRlbmRzKHtcbiAgICB2N19mZXRjaGVyUGVyc2lzdDogZmFsc2UsXG4gICAgdjdfbm9ybWFsaXplRm9ybU1ldGhvZDogZmFsc2UsXG4gICAgdjdfcGFydGlhbEh5ZHJhdGlvbjogZmFsc2UsXG4gICAgdjdfcHJlcGVuZEJhc2VuYW1lOiBmYWxzZSxcbiAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogZmFsc2UsXG4gICAgdW5zdGFibGVfc2tpcEFjdGlvbkVycm9yUmV2YWxpZGF0aW9uOiBmYWxzZVxuICB9LCBpbml0LmZ1dHVyZSk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeSA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgc2Nyb2xsIHJlc3RvcmF0aW9uIGtleXNcbiAgbGV0IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbiB0byBnZXQgY3VycmVudCBzY3JvbGwgcG9zaXRpb25cbiAgbGV0IGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcbiAgbGV0IGluaXRpYWxNYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgaW5pdC5oaXN0b3J5LmxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gIGxldCBpbml0aWFsRXJyb3JzID0gbnVsbDtcbiAgaWYgKGluaXRpYWxNYXRjaGVzID09IG51bGwpIHtcbiAgICAvLyBJZiB3ZSBkbyBub3QgbWF0Y2ggYSB1c2VyLXByb3ZpZGVkLXJvdXRlLCBmYWxsIGJhY2sgdG8gdGhlIHJvb3RcbiAgICAvLyB0byBhbGxvdyB0aGUgZXJyb3IgYm91bmRhcnkgdG8gdGFrZSBvdmVyXG4gICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgIHBhdGhuYW1lOiBpbml0Lmhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWVcbiAgICB9KTtcbiAgICBsZXQge1xuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlXG4gICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGluaXRpYWxFcnJvcnMgPSB7XG4gICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgIH07XG4gIH1cbiAgbGV0IGluaXRpYWxpemVkO1xuICBsZXQgaGFzTGF6eVJvdXRlcyA9IGluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxhenkpO1xuICBsZXQgaGFzTG9hZGVycyA9IGluaXRpYWxNYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmxvYWRlcik7XG4gIGlmIChoYXNMYXp5Um91dGVzKSB7XG4gICAgLy8gQWxsIGluaXRpYWxNYXRjaGVzIG5lZWQgdG8gYmUgbG9hZGVkIGJlZm9yZSB3ZSdyZSByZWFkeS4gIElmIHdlIGhhdmUgbGF6eVxuICAgIC8vIGZ1bmN0aW9ucyBhcm91bmQgc3RpbGwgdGhlbiB3ZSdsbCBuZWVkIHRvIHJ1biB0aGVtIGluIGluaXRpYWxpemUoKVxuICAgIGluaXRpYWxpemVkID0gZmFsc2U7XG4gIH0gZWxzZSBpZiAoIWhhc0xvYWRlcnMpIHtcbiAgICAvLyBJZiB3ZSd2ZSBnb3Qgbm8gbG9hZGVycyB0byBydW4sIHRoZW4gd2UncmUgZ29vZCB0byBnb1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfSBlbHNlIGlmIChmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIC8vIElmIHBhcnRpYWwgaHlkcmF0aW9uIGlzIGVuYWJsZWQsIHdlJ3JlIGluaXRpYWxpemVkIHNvIGxvbmcgYXMgd2Ugd2VyZVxuICAgIC8vIHByb3ZpZGVkIHdpdGggaHlkcmF0aW9uRGF0YSBmb3IgZXZlcnkgcm91dGUgd2l0aCBhIGxvYWRlciwgYW5kIG5vIGxvYWRlcnNcbiAgICAvLyB3ZXJlIG1hcmtlZCBmb3IgZXhwbGljaXQgaHlkcmF0aW9uXG4gICAgbGV0IGxvYWRlckRhdGEgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgPyBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSA6IG51bGw7XG4gICAgbGV0IGVycm9ycyA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5lcnJvcnMgOiBudWxsO1xuICAgIGxldCBpc1JvdXRlSW5pdGlhbGl6ZWQgPSBtID0+IHtcbiAgICAgIC8vIE5vIGxvYWRlciwgbm90aGluZyB0byBpbml0aWFsaXplXG4gICAgICBpZiAoIW0ucm91dGUubG9hZGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gRXhwbGljaXRseSBvcHRpbmctaW4gdG8gcnVubmluZyBvbiBoeWRyYXRpb25cbiAgICAgIGlmICh0eXBlb2YgbS5yb3V0ZS5sb2FkZXIgPT09IFwiZnVuY3Rpb25cIiAmJiBtLnJvdXRlLmxvYWRlci5oeWRyYXRlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIE90aGVyd2lzZSwgaW5pdGlhbGl6ZWQgaWYgaHlkcmF0ZWQgd2l0aCBkYXRhIG9yIGFuIGVycm9yXG4gICAgICByZXR1cm4gbG9hZGVyRGF0YSAmJiBsb2FkZXJEYXRhW20ucm91dGUuaWRdICE9PSB1bmRlZmluZWQgfHwgZXJyb3JzICYmIGVycm9yc1ttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLy8gSWYgZXJyb3JzIGV4aXN0LCBkb24ndCBjb25zaWRlciByb3V0ZXMgYmVsb3cgdGhlIGJvdW5kYXJ5XG4gICAgaWYgKGVycm9ycykge1xuICAgICAgbGV0IGlkeCA9IGluaXRpYWxNYXRjaGVzLmZpbmRJbmRleChtID0+IGVycm9yc1ttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgIGluaXRpYWxpemVkID0gaW5pdGlhbE1hdGNoZXMuc2xpY2UoMCwgaWR4ICsgMSkuZXZlcnkoaXNSb3V0ZUluaXRpYWxpemVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5ldmVyeShpc1JvdXRlSW5pdGlhbGl6ZWQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaXRob3V0IHBhcnRpYWwgaHlkcmF0aW9uIC0gd2UncmUgaW5pdGlhbGl6ZWQgaWYgd2Ugd2VyZSBwcm92aWRlZCBhbnlcbiAgICAvLyBoeWRyYXRpb25EYXRhIC0gd2hpY2ggaXMgZXhwZWN0ZWQgdG8gYmUgY29tcGxldGVcbiAgICBpbml0aWFsaXplZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICB9XG4gIGxldCByb3V0ZXI7XG4gIGxldCBzdGF0ZSA9IHtcbiAgICBoaXN0b3J5QWN0aW9uOiBpbml0Lmhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBpbml0Lmhpc3RvcnkubG9jYXRpb24sXG4gICAgbWF0Y2hlczogaW5pdGlhbE1hdGNoZXMsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgIC8vIERvbid0IHJlc3RvcmUgb24gaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGlmIHdlIHdlcmUgU1NSJ2RcbiAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsID8gZmFsc2UgOiBudWxsLFxuICAgIHByZXZlbnRTY3JvbGxSZXNldDogZmFsc2UsXG4gICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICBsb2FkZXJEYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmxvYWRlckRhdGEgfHwge30sXG4gICAgYWN0aW9uRGF0YTogaW5pdC5oeWRyYXRpb25EYXRhICYmIGluaXQuaHlkcmF0aW9uRGF0YS5hY3Rpb25EYXRhIHx8IG51bGwsXG4gICAgZXJyb3JzOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyB8fCBpbml0aWFsRXJyb3JzLFxuICAgIGZldGNoZXJzOiBuZXcgTWFwKCksXG4gICAgYmxvY2tlcnM6IG5ldyBNYXAoKVxuICB9O1xuICAvLyAtLSBTdGF0ZWZ1bCBpbnRlcm5hbCB2YXJpYWJsZXMgdG8gbWFuYWdlIG5hdmlnYXRpb25zIC0tXG4gIC8vIEN1cnJlbnQgbmF2aWdhdGlvbiBpbiBwcm9ncmVzcyAodG8gYmUgY29tbWl0dGVkIGluIGNvbXBsZXRlTmF2aWdhdGlvbilcbiAgbGV0IHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBwcmV2ZW50IHRoZSBzY3JvbGwgcmVzZXQgaWYgc2Nyb2xsIGNhbm5vdFxuICAvLyBiZSByZXN0b3JlZD9cbiAgbGV0IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjtcbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gZW5hYmxlIGRvY3VtZW50LnN0YXJ0Vmlld1RyYW5zaXRpb24/XG4gIGxldCBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gIC8vIFN0b3JlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBzbyB3ZSBjYW4gYXBwbHkgdGhlbSBvbiBQT1BcbiAgbGV0IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMgPSBuZXcgTWFwKCk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIHBlcnNpc3RpbmcgYXBwbGllZCB0cmFuc2l0aW9ucyB0byBzZXNzaW9uU3RvcmFnZVxuICBsZXQgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gbnVsbDtcbiAgLy8gV2UgdXNlIHRoaXMgdG8gYXZvaWQgdG91Y2hpbmcgaGlzdG9yeSBpbiBjb21wbGV0ZU5hdmlnYXRpb24gaWYgYVxuICAvLyByZXZhbGlkYXRpb24gaXMgZW50aXJlbHkgdW5pbnRlcnJ1cHRlZFxuICBsZXQgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGZsYWcgdG8gZm9yY2UgcmV2YWxpZGF0aW9uIG9mIGFsbCBsb2FkZXJzOlxuICAvLyAgLSBzdWJtaXNzaW9ucyAoY29tcGxldGVkIG9yIGludGVycnVwdGVkKVxuICAvLyAgLSB1c2VSZXZhbGlkYXRvcigpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSByb3V0ZXMgdGhhdCByZXF1aXJlIHJldmFsaWRhdGlvbiBkdWVcbiAgLy8gdG8gYSBjYW5jZWxsZWQgZGVmZXJyZWQgb24gYWN0aW9uIHN1Ym1pc3Npb25cbiAgbGV0IGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gIC8vIFVzZSB0aGlzIGludGVybmFsIGFycmF5IHRvIGNhcHR1cmUgZmV0Y2hlciBsb2FkcyB0aGF0IHdlcmUgY2FuY2VsbGVkIGJ5IGFuXG4gIC8vIGFjdGlvbiBuYXZpZ2F0aW9uIGFuZCByZXF1aXJlIHJldmFsaWRhdGlvblxuICBsZXQgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIC8vIEFib3J0Q29udHJvbGxlcnMgZm9yIGFueSBpbi1mbGlnaHQgZmV0Y2hlcnNcbiAgbGV0IGZldGNoQ29udHJvbGxlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIFRyYWNrIGxvYWRzIGJhc2VkIG9uIHRoZSBvcmRlciBpbiB3aGljaCB0aGV5IHN0YXJ0ZWRcbiAgbGV0IGluY3JlbWVudGluZ0xvYWRJZCA9IDA7XG4gIC8vIFRyYWNrIHRoZSBvdXRzdGFuZGluZyBwZW5kaW5nIG5hdmlnYXRpb24gZGF0YSBsb2FkIHRvIGJlIGNvbXBhcmVkIGFnYWluc3RcbiAgLy8gdGhlIGdsb2JhbGx5IGluY3JlbWVudGluZyBsb2FkIHdoZW4gYSBmZXRjaGVyIGxvYWQgbGFuZHMgYWZ0ZXIgYSBjb21wbGV0ZWRcbiAgLy8gbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPSAtMTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcCgpO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9uc1xuICBsZXQgZmV0Y2hSZWRpcmVjdElkcyA9IG5ldyBTZXQoKTtcbiAgLy8gTW9zdCByZWNlbnQgaHJlZi9tYXRjaCBmb3IgZmV0Y2hlci5sb2FkIGNhbGxzIGZvciBmZXRjaGVyc1xuICBsZXQgZmV0Y2hMb2FkTWF0Y2hlcyA9IG5ldyBNYXAoKTtcbiAgLy8gUmVmLWNvdW50IG1vdW50ZWQgZmV0Y2hlcnMgc28gd2Uga25vdyB3aGVuIGl0J3Mgb2sgdG8gY2xlYW4gdGhlbSB1cFxuICBsZXQgYWN0aXZlRmV0Y2hlcnMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgaGF2ZSByZXF1ZXN0ZWQgYSBkZWxldGUgd2hlbiB1c2luZyB2N19mZXRjaGVyUGVyc2lzdCxcbiAgLy8gdGhleSdsbCBiZSBvZmZpY2lhbGx5IHJlbW92ZWQgYWZ0ZXIgdGhleSByZXR1cm4gdG8gaWRsZVxuICBsZXQgZGVsZXRlZEZldGNoZXJzID0gbmV3IFNldCgpO1xuICAvLyBTdG9yZSBEZWZlcnJlZERhdGEgaW5zdGFuY2VzIGZvciBhY3RpdmUgcm91dGUgbWF0Y2hlcy4gIFdoZW4gYVxuICAvLyByb3V0ZSBsb2FkZXIgcmV0dXJucyBkZWZlcigpIHdlIHN0aWNrIG9uZSBpbiBoZXJlLiAgVGhlbiwgd2hlbiBhIG5lc3RlZFxuICAvLyBwcm9taXNlIHJlc29sdmVzIHdlIHVwZGF0ZSBsb2FkZXJEYXRhLiAgSWYgYSBuZXcgbmF2aWdhdGlvbiBzdGFydHMgd2VcbiAgLy8gY2FuY2VsIGFjdGl2ZSBkZWZlcnJlZHMgZm9yIGVsaW1pbmF0ZWQgcm91dGVzLlxuICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAvLyBTdG9yZSBibG9ja2VyIGZ1bmN0aW9ucyBpbiBhIHNlcGFyYXRlIE1hcCBvdXRzaWRlIG9mIHJvdXRlciBzdGF0ZSBzaW5jZVxuICAvLyB3ZSBkb24ndCBuZWVkIHRvIHVwZGF0ZSBVSSBzdGF0ZSBpZiB0aGV5IGNoYW5nZVxuICBsZXQgYmxvY2tlckZ1bmN0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gRmxhZyB0byBpZ25vcmUgdGhlIG5leHQgaGlzdG9yeSB1cGRhdGUsIHNvIHdlIGNhbiByZXZlcnQgdGhlIFVSTCBjaGFuZ2Ugb25cbiAgLy8gYSBQT1AgbmF2aWdhdGlvbiB0aGF0IHdhcyBibG9ja2VkIGJ5IHRoZSB1c2VyIHdpdGhvdXQgdG91Y2hpbmcgcm91dGVyIHN0YXRlXG4gIGxldCBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAvLyBJbml0aWFsaXplIHRoZSByb3V0ZXIsIGFsbCBzaWRlIGVmZmVjdHMgc2hvdWxkIGJlIGtpY2tlZCBvZmYgZnJvbSBoZXJlLlxuICAvLyBJbXBsZW1lbnRlZCBhcyBhIEZsdWVudCBBUEkgZm9yIGVhc2Ugb2Y6XG4gIC8vICAgbGV0IHJvdXRlciA9IGNyZWF0ZVJvdXRlcihpbml0KS5pbml0aWFsaXplKCk7XG4gIGZ1bmN0aW9uIGluaXRpYWxpemUoKSB7XG4gICAgLy8gSWYgaGlzdG9yeSBpbmZvcm1zIHVzIG9mIGEgUE9QIG5hdmlnYXRpb24sIHN0YXJ0IHRoZSBuYXZpZ2F0aW9uIGJ1dCBkbyBub3QgdXBkYXRlXG4gICAgLy8gc3RhdGUuICBXZSdsbCB1cGRhdGUgb3VyIG93biBzdGF0ZSBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHVubGlzdGVuSGlzdG9yeSA9IGluaXQuaGlzdG9yeS5saXN0ZW4oX3JlZiA9PiB7XG4gICAgICBsZXQge1xuICAgICAgICBhY3Rpb246IGhpc3RvcnlBY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBkZWx0YVxuICAgICAgfSA9IF9yZWY7XG4gICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgIC8vIGJsb2NrZWQgUE9QIG5hdmlnYXRpb25cbiAgICAgIGlmIChpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSkge1xuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB3YXJuaW5nKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA9PT0gMCB8fCBkZWx0YSAhPSBudWxsLCBcIllvdSBhcmUgdHJ5aW5nIHRvIHVzZSBhIGJsb2NrZXIgb24gYSBQT1AgbmF2aWdhdGlvbiB0byBhIGxvY2F0aW9uIFwiICsgXCJ0aGF0IHdhcyBub3QgY3JlYXRlZCBieSBAcmVtaXgtcnVuL3JvdXRlci4gVGhpcyB3aWxsIGZhaWwgc2lsZW50bHkgaW4gXCIgKyBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICsgXCJ2aWEgYHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZWAvYHdpbmRvdy5sb2NhdGlvbi5oYXNoYCBpbnN0ZWFkIG9mIHVzaW5nIFwiICsgXCJyb3V0ZXIgbmF2aWdhdGlvbiBBUElzLiAgVGhpcyBjYW4gYWxzbyBoYXBwZW4gaWYgeW91IGFyZSB1c2luZyBcIiArIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiKTtcbiAgICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaGlzdG9yeUFjdGlvblxuICAgICAgfSk7XG4gICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgdGhlIFVSTCB0byBtYXRjaCB0aGUgY3VycmVudCBVSSwgYnV0IGRvbid0IHVwZGF0ZSByb3V0ZXIgc3RhdGVcbiAgICAgICAgaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUgPSB0cnVlO1xuICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG4gICAgICAgIC8vIFB1dCB0aGUgYmxvY2tlciBpbnRvIGEgYmxvY2tlZCBzdGF0ZVxuICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICAgIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgbG9jYXRpb25cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gUmUtZG8gdGhlIHNhbWUgUE9QIG5hdmlnYXRpb24gd2UganVzdCBibG9ja2VkXG4gICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICAgIGJsb2NrZXJzLnNldChibG9ja2VyS2V5LCBJRExFX0JMT0NLRVIpO1xuICAgICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbik7XG4gICAgfSk7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgLy8gRklYTUU6IFRoaXMgZmVlbHMgZ3Jvc3MuICBIb3cgY2FuIHdlIGNsZWFudXAgdGhlIGxpbmVzIGJldHdlZW5cbiAgICAgIC8vIHNjcm9sbFJlc3RvcmF0aW9uL2FwcGxpZWRUcmFuc2l0aW9ucyBwZXJzaXN0YW5jZT9cbiAgICAgIHJlc3RvcmVBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIGxldCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyA9ICgpID0+IHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMocm91dGVyV2luZG93LCBhcHBsaWVkVmlld1RyYW5zaXRpb25zKTtcbiAgICAgIHJvdXRlcldpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgX3NhdmVBcHBsaWVkVHJhbnNpdGlvbnMpO1xuICAgICAgcmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyID0gKCkgPT4gcm91dGVyV2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgfVxuICAgIC8vIEtpY2sgb2ZmIGluaXRpYWwgZGF0YSBsb2FkIGlmIG5lZWRlZC4gIFVzZSBQb3AgdG8gYXZvaWQgbW9kaWZ5aW5nIGhpc3RvcnlcbiAgICAvLyBOb3RlIHdlIGRvbid0IGRvIGFueSBoYW5kbGluZyBvZiBsYXp5IGhlcmUuICBGb3IgU1BBJ3MgaXQnbGwgZ2V0IGhhbmRsZWRcbiAgICAvLyBpbiB0aGUgbm9ybWFsIG5hdmlnYXRpb24gZmxvdy4gIEZvciBTU1IgaXQncyBleHBlY3RlZCB0aGF0IGxhenkgbW9kdWxlcyBhcmVcbiAgICAvLyByZXNvbHZlZCBwcmlvciB0byByb3V0ZXIgY3JlYXRpb24gc2luY2Ugd2UgY2FuJ3QgZ28gaW50byBhIGZhbGxiYWNrRWxlbWVudFxuICAgIC8vIFVJIGZvciBTU1InZCBhcHBzXG4gICAgaWYgKCFzdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKEFjdGlvbi5Qb3AsIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIGluaXRpYWxIeWRyYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcm91dGVyO1xuICB9XG4gIC8vIENsZWFuIHVwIGEgcm91dGVyIGFuZCBpdCdzIHNpZGUgZWZmZWN0c1xuICBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgIGlmICh1bmxpc3Rlbkhpc3RvcnkpIHtcbiAgICAgIHVubGlzdGVuSGlzdG9yeSgpO1xuICAgIH1cbiAgICBpZiAocmVtb3ZlUGFnZUhpZGVFdmVudExpc3RlbmVyKSB7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuICAvLyBTdWJzY3JpYmUgdG8gc3RhdGUgdXBkYXRlcyBmb3IgdGhlIHJvdXRlclxuICBmdW5jdGlvbiBzdWJzY3JpYmUoZm4pIHtcbiAgICBzdWJzY3JpYmVycy5hZGQoZm4pO1xuICAgIHJldHVybiAoKSA9PiBzdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIC8vIFVwZGF0ZSBvdXIgc3RhdGUgYW5kIG5vdGlmeSB0aGUgY2FsbGluZyBjb250ZXh0IG9mIHRoZSBjaGFuZ2VcbiAgZnVuY3Rpb24gdXBkYXRlU3RhdGUobmV3U3RhdGUsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgLy8gUHJlcCBmZXRjaGVyIGNsZWFudXAgc28gd2UgY2FuIHRlbGwgdGhlIFVJIHdoaWNoIGZldGNoZXIgZGF0YSBlbnRyaWVzXG4gICAgLy8gY2FuIGJlIHJlbW92ZWRcbiAgICBsZXQgY29tcGxldGVkRmV0Y2hlcnMgPSBbXTtcbiAgICBsZXQgZGVsZXRlZEZldGNoZXJzS2V5cyA9IFtdO1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIHN0YXRlLmZldGNoZXJzLmZvckVhY2goKGZldGNoZXIsIGtleSkgPT4ge1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICAvLyBVbm1vdW50ZWQgZnJvbSB0aGUgVUkgYW5kIGNhbiBiZSB0b3RhbGx5IHJlbW92ZWRcbiAgICAgICAgICAgIGRlbGV0ZWRGZXRjaGVyc0tleXMucHVzaChrZXkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBSZXR1cm5lZCB0byBpZGxlIGJ1dCBzdGlsbCBtb3VudGVkIGluIHRoZSBVSSwgc28gc2VtaS1yZW1haW5zIGZvclxuICAgICAgICAgICAgLy8gcmV2YWxpZGF0aW9ucyBhbmQgc3VjaFxuICAgICAgICAgICAgY29tcGxldGVkRmV0Y2hlcnMucHVzaChrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIEl0ZXJhdGUgb3ZlciBhIGxvY2FsIGNvcHkgc28gdGhhdCBpZiBmbHVzaFN5bmMgaXMgdXNlZCBhbmQgd2UgZW5kIHVwXG4gICAgLy8gcmVtb3ZpbmcgYW5kIGFkZGluZyBhIG5ldyBzdWJzY3JpYmVyIGR1ZSB0byB0aGUgdXNlQ2FsbGJhY2sgZGVwZW5kZW5jaWVzLFxuICAgIC8vIHdlIGRvbid0IGdldCBvdXJzZWx2ZXMgaW50byBhIGxvb3AgY2FsbGluZyB0aGUgbmV3IHN1YnNjcmliZXIgaW1tZWRpYXRlbHlcbiAgICBbLi4uc3Vic2NyaWJlcnNdLmZvckVhY2goc3Vic2NyaWJlciA9PiBzdWJzY3JpYmVyKHN0YXRlLCB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnM6IGRlbGV0ZWRGZXRjaGVyc0tleXMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IG9wdHMudmlld1RyYW5zaXRpb25PcHRzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pKTtcbiAgICAvLyBSZW1vdmUgaWRsZSBmZXRjaGVycyBmcm9tIHN0YXRlIHNpbmNlIHdlIG9ubHkgY2FyZSBhYm91dCBpbi1mbGlnaHQgZmV0Y2hlcnMuXG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgY29tcGxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gc3RhdGUuZmV0Y2hlcnMuZGVsZXRlKGtleSkpO1xuICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5mb3JFYWNoKGtleSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIH1cbiAgfVxuICAvLyBDb21wbGV0ZSBhIG5hdmlnYXRpb24gcmV0dXJuaW5nIHRoZSBzdGF0ZS5uYXZpZ2F0aW9uIGJhY2sgdG8gdGhlIElETEVfTkFWSUdBVElPTlxuICAvLyBhbmQgc2V0dGluZyBzdGF0ZS5baGlzdG9yeUFjdGlvbi9sb2NhdGlvbi9tYXRjaGVzXSB0byB0aGUgbmV3IHJvdXRlLlxuICAvLyAtIExvY2F0aW9uIGlzIGEgcmVxdWlyZWQgcGFyYW1cbiAgLy8gLSBOYXZpZ2F0aW9uIHdpbGwgYWx3YXlzIGJlIHNldCB0byBJRExFX05BVklHQVRJT05cbiAgLy8gLSBDYW4gcGFzcyBhbnkgb3RoZXIgc3RhdGUgaW4gbmV3U3RhdGVcbiAgZnVuY3Rpb24gY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBuZXdTdGF0ZSwgX3RlbXApIHtcbiAgICB2YXIgX2xvY2F0aW9uJHN0YXRlLCBfbG9jYXRpb24kc3RhdGUyO1xuICAgIGxldCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gICAgLy8gRGVkdWNlIGlmIHdlJ3JlIGluIGEgbG9hZGluZy9hY3Rpb25SZWxvYWQgc3RhdGU6XG4gICAgLy8gLSBXZSBoYXZlIGNvbW1pdHRlZCBhY3Rpb25EYXRhIGluIHRoZSBzdG9yZVxuICAgIC8vIC0gVGhlIGN1cnJlbnQgbmF2aWdhdGlvbiB3YXMgYSBtdXRhdGlvbiBzdWJtaXNzaW9uXG4gICAgLy8gLSBXZSdyZSBwYXN0IHRoZSBzdWJtaXR0aW5nIHN0YXRlIGFuZCBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlXG4gICAgLy8gLSBUaGUgbG9jYXRpb24gYmVpbmcgbG9hZGVkIGlzIG5vdCB0aGUgcmVzdWx0IG9mIGEgcmVkaXJlY3RcbiAgICBsZXQgaXNBY3Rpb25SZWxvYWQgPSBzdGF0ZS5hY3Rpb25EYXRhICE9IG51bGwgJiYgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmIHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmICgoX2xvY2F0aW9uJHN0YXRlID0gbG9jYXRpb24uc3RhdGUpID09IG51bGwgPyB2b2lkIDAgOiBfbG9jYXRpb24kc3RhdGUuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGxldCBhY3Rpb25EYXRhO1xuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBwcmVzZXJ2ZSBhbnkgZXhpc3RpbmcgbG9hZGVyRGF0YSBmcm9tIHJlLXVzZWQgcm91dGVzXG4gICAgbGV0IGxvYWRlckRhdGEgPSBuZXdTdGF0ZS5sb2FkZXJEYXRhID8gbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLmxvYWRlckRhdGEsIG5ld1N0YXRlLm1hdGNoZXMgfHwgW10sIG5ld1N0YXRlLmVycm9ycykgOiBzdGF0ZS5sb2FkZXJEYXRhO1xuICAgIC8vIE9uIGEgc3VjY2Vzc2Z1bCBuYXZpZ2F0aW9uIHdlIGNhbiBhc3N1bWUgd2UgZ290IHRocm91Z2ggYWxsIGJsb2NrZXJzXG4gICAgLy8gc28gd2UgY2FuIHN0YXJ0IGZyZXNoXG4gICAgbGV0IGJsb2NrZXJzID0gc3RhdGUuYmxvY2tlcnM7XG4gICAgaWYgKGJsb2NrZXJzLnNpemUgPiAwKSB7XG4gICAgICBibG9ja2VycyA9IG5ldyBNYXAoYmxvY2tlcnMpO1xuICAgICAgYmxvY2tlcnMuZm9yRWFjaCgoXywgaykgPT4gYmxvY2tlcnMuc2V0KGssIElETEVfQkxPQ0tFUikpO1xuICAgIH1cbiAgICAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIHx8IHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJiAoKF9sb2NhdGlvbiRzdGF0ZTIgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZTIuX2lzUmVkaXJlY3QpICE9PSB0cnVlO1xuICAgIGlmIChpbkZsaWdodERhdGFSb3V0ZXMpIHtcbiAgICAgIGRhdGFSb3V0ZXMgPSBpbkZsaWdodERhdGFSb3V0ZXM7XG4gICAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pIDsgZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUHVzaCkge1xuICAgICAgaW5pdC5oaXN0b3J5LnB1c2gobG9jYXRpb24sIGxvY2F0aW9uLnN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cbiAgICBsZXQgdmlld1RyYW5zaXRpb25PcHRzO1xuICAgIC8vIE9uIFBPUCwgZW5hYmxlIHRyYW5zaXRpb25zIGlmIHRoZXkgd2VyZSBlbmFibGVkIG9uIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5Qb3ApIHtcbiAgICAgIC8vIEZvcndhcmQgdGFrZXMgcHJlY2VkZW5jZSBzbyB0aGV5IGJlaGF2ZSBsaWtlIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uXG4gICAgICBsZXQgcHJpb3JQYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmIChwcmlvclBhdGhzICYmIHByaW9yUGF0aHMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuaGFzKGxvY2F0aW9uLnBhdGhuYW1lKSkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgcHJldmlvdXMgZm9yd2FyZCBuYXYsIGFzc3VtZSB3ZSdyZSBwb3BwaW5nIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIG5ldyBsb2NhdGlvbiBhbmQgZW5hYmxlIGlmIHRoYXQgbG9jYXRpb24gcHJldmlvdXNseSBlbmFibGVkXG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogc3RhdGUubG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQpIHtcbiAgICAgIC8vIFN0b3JlIHRoZSBhcHBsaWVkIHRyYW5zaXRpb24gb24gUFVTSC9SRVBMQUNFXG4gICAgICBsZXQgdG9QYXRocyA9IGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuZ2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIGlmICh0b1BhdGhzKSB7XG4gICAgICAgIHRvUGF0aHMuYWRkKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRvUGF0aHMgPSBuZXcgU2V0KFtsb2NhdGlvbi5wYXRobmFtZV0pO1xuICAgICAgICBhcHBsaWVkVmlld1RyYW5zaXRpb25zLnNldChzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSwgdG9QYXRocyk7XG4gICAgICB9XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMgPSB7XG4gICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH07XG4gICAgfVxuICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHt9LCBuZXdTdGF0ZSwge1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG5ld1N0YXRlLm1hdGNoZXMgfHwgc3RhdGUubWF0Y2hlcyksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2Vyc1xuICAgIH0pLCB7XG4gICAgICB2aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICBmbHVzaFN5bmM6IGZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSBmYWxzZTtcbiAgICBwZW5kaW5nVmlld1RyYW5zaXRpb25FbmFibGVkID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH1cbiAgLy8gVHJpZ2dlciBhIG5hdmlnYXRpb24gZXZlbnQsIHdoaWNoIGNhbiBlaXRoZXIgYmUgYSBudW1lcmljYWwgUE9QIG9yIGEgUFVTSFxuICAvLyByZXBsYWNlIHdpdGggYW4gb3B0aW9uYWwgc3VibWlzc2lvblxuICBhc3luYyBmdW5jdGlvbiBuYXZpZ2F0ZSh0bywgb3B0cykge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBub3JtYWxpemVkUGF0aCA9IG5vcm1hbGl6ZVRvKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3ByZXBlbmRCYXNlbmFtZSwgdG8sIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mcm9tUm91dGVJZCwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5yZWxhdGl2ZSk7XG4gICAgbGV0IHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgZXJyb3JcbiAgICB9ID0gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKGZ1dHVyZS52N19ub3JtYWxpemVGb3JtTWV0aG9kLCBmYWxzZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGxldCBjdXJyZW50TG9jYXRpb24gPSBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHBhdGgsIG9wdHMgJiYgb3B0cy5zdGF0ZSk7XG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0gX2V4dGVuZHMoe30sIG5leHRMb2NhdGlvbiwgaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbikpO1xuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG4gICAgbGV0IGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBpZiAodXNlclJlcGxhY2UgPT09IHRydWUpIHtcbiAgICAgIGhpc3RvcnlBY3Rpb24gPSBBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkgOyBlbHNlIGlmIChzdWJtaXNzaW9uICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpICYmIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH1cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID0gb3B0cyAmJiBcInByZXZlbnRTY3JvbGxSZXNldFwiIGluIG9wdHMgPyBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy51bnN0YWJsZV9mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIGxldCBibG9ja2VyS2V5ID0gc2hvdWxkQmxvY2tOYXZpZ2F0aW9uKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbixcbiAgICAgIG5leHRMb2NhdGlvbixcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgICBpZiAoYmxvY2tlcktleSkge1xuICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgc3RhdGU6IFwiYmxvY2tlZFwiLFxuICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBTZW5kIHRoZSBzYW1lIG5hdmlnYXRpb24gdGhyb3VnaFxuICAgICAgICAgIG5hdmlnYXRlKHRvLCBvcHRzKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQoKSB7XG4gICAgICAgICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgICAgYmxvY2tlcnNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbmV4dExvY2F0aW9uLCB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgLy8gU2VuZCB0aHJvdWdoIHRoZSBmb3JtRGF0YSBzZXJpYWxpemF0aW9uIGVycm9yIGlmIHdlIGhhdmUgb25lIHNvIHdlIGNhblxuICAgICAgLy8gcmVuZGVyIGF0IHRoZSByaWdodCBlcnJvciBib3VuZGFyeSBhZnRlciB3ZSBtYXRjaCByb3V0ZXNcbiAgICAgIHBlbmRpbmdFcnJvcjogZXJyb3IsXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICByZXBsYWNlOiBvcHRzICYmIG9wdHMucmVwbGFjZSxcbiAgICAgIGVuYWJsZVZpZXdUcmFuc2l0aW9uOiBvcHRzICYmIG9wdHMudW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgfVxuICAvLyBSZXZhbGlkYXRlIGFsbCBjdXJyZW50IGxvYWRlcnMuICBJZiBhIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3Mgb3IgaWYgdGhpc1xuICAvLyBpcyBpbnRlcnJ1cHRlZCBieSBhIG5hdmlnYXRpb24sIGFsbG93IHRoaXMgdG8gXCJzdWNjZWVkXCIgYnkgY2FsbGluZyBhbGxcbiAgLy8gbG9hZGVycyBkdXJpbmcgdGhlIG5leHQgbG9hZGVyIHJvdW5kXG4gIGZ1bmN0aW9uIHJldmFsaWRhdGUoKSB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiXG4gICAgfSk7XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGluIGFuIGlkbGUgc3RhdGUsIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24gZm9yIHRoZSBjdXJyZW50XG4gICAgLy8gYWN0aW9uL2xvY2F0aW9uIGFuZCBtYXJrIGl0IGFzIHVuaW50ZXJydXB0ZWQsIHdoaWNoIHdpbGwgc2tpcCB0aGUgaGlzdG9yeVxuICAgIC8vIHVwZGF0ZSBpbiBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihzdGF0ZS5oaXN0b3J5QWN0aW9uLCBzdGF0ZS5sb2NhdGlvbiwge1xuICAgICAgICBzdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb246IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBPdGhlcndpc2UsIGlmIHdlJ3JlIGN1cnJlbnRseSBpbiBhIGxvYWRpbmcgc3RhdGUsIGp1c3Qgc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uIHRvIHRoZSBuYXZpZ2F0aW9uLmxvY2F0aW9uIGJ1dCBkbyBub3QgdHJpZ2dlciBhbiB1bmludGVycnVwdGVkXG4gICAgLy8gcmV2YWxpZGF0aW9uIHNvIHRoYXQgaGlzdG9yeSBjb3JyZWN0bHkgdXBkYXRlcyBvbmNlIHRoZSBuYXZpZ2F0aW9uIGNvbXBsZXRlc1xuICAgIHN0YXJ0TmF2aWdhdGlvbihwZW5kaW5nQWN0aW9uIHx8IHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIHtcbiAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjogc3RhdGUubmF2aWdhdGlvblxuICAgIH0pO1xuICB9XG4gIC8vIFN0YXJ0IGEgbmF2aWdhdGlvbiB0byB0aGUgZ2l2ZW4gYWN0aW9uL2xvY2F0aW9uLiAgQ2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhXG4gIC8vIG92ZXJyaWRlTmF2aWdhdGlvbiB3aGljaCB3aWxsIG92ZXJyaWRlIHRoZSBub3JtYWxMb2FkIGluIHRoZSBjYXNlIG9mIGEgcmVkaXJlY3RcbiAgLy8gbmF2aWdhdGlvblxuICBhc3luYyBmdW5jdGlvbiBzdGFydE5hdmlnYXRpb24oaGlzdG9yeUFjdGlvbiwgbG9jYXRpb24sIG9wdHMpIHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9IChvcHRzICYmIG9wdHMuc3RhcnRVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSA9PT0gdHJ1ZTtcbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSAob3B0cyAmJiBvcHRzLmVuYWJsZVZpZXdUcmFuc2l0aW9uKSA9PT0gdHJ1ZTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvcHRzICYmIG9wdHMub3ZlcnJpZGVOYXZpZ2F0aW9uO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgbGV0IGZsdXNoU3luYyA9IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZTtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IHdpdGggYSA0MDQgb24gdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgaWYgd2UgbWF0Y2ggbm90aGluZ1xuICAgIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlc1RvVXNlKTtcbiAgICAgIC8vIENhbmNlbCBhbGwgcGVuZGluZyBkZWZlcnJlZCBvbiA0MDRzIHNpbmNlIHdlIGRvbid0IGtlZXAgYW55IHJvdXRlc1xuICAgICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIGl0J3Mgb25seSBhIGhhc2ggY2hhbmdlIGFuZCBub3QgYSByZXZhbGlkYXRpb24gb3JcbiAgICAvLyBtdXRhdGlvbiBzdWJtaXNzaW9uLlxuICAgIC8vXG4gICAgLy8gSWdub3JlIG9uIGluaXRpYWwgcGFnZSBsb2FkcyBiZWNhdXNlIHNpbmNlIHRoZSBpbml0aWFsIGxvYWQgd2lsbCBhbHdheXNcbiAgICAvLyBiZSBcInNhbWUgaGFzaFwiLiAgRm9yIGV4YW1wbGUsIG9uIC9wYWdlI2hhc2ggYW5kIHN1Ym1pdCBhIDxGb3JtIG1ldGhvZD1cInBvc3RcIj5cbiAgICAvLyB3aGljaCB3aWxsIGRlZmF1bHQgdG8gYSBuYXZpZ2F0aW9uIHRvIC9wYWdlXG4gICAgaWYgKHN0YXRlLmluaXRpYWxpemVkICYmICFpc1JldmFsaWRhdGlvblJlcXVpcmVkICYmIGlzSGFzaENoYW5nZU9ubHkoc3RhdGUubG9jYXRpb24sIGxvY2F0aW9uKSAmJiAhKG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpKSkge1xuICAgICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXNcbiAgICAgIH0sIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ3JlYXRlIGEgY29udHJvbGxlci9SZXF1ZXN0IGZvciB0aGlzIG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIGxvY2F0aW9uLCBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLCBvcHRzICYmIG9wdHMuc3VibWlzc2lvbik7XG4gICAgbGV0IHBlbmRpbmdBY3Rpb25SZXN1bHQ7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5wZW5kaW5nRXJyb3IpIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBwZW5kaW5nRXJyb3IsIGl0IG1lYW5zIHRoZSB1c2VyIGF0dGVtcHRlZCBhIEdFVCBzdWJtaXNzaW9uXG4gICAgICAvLyB3aXRoIGJpbmFyeSBGb3JtRGF0YSBzbyBhc3NpZ24gaGVyZSBhbmQgc2tpcCB0byBoYW5kbGVMb2FkZXJzLiAgVGhhdFxuICAgICAgLy8gd2F5IHdlIGhhbmRsZSBjYWxsaW5nIGxvYWRlcnMgYWJvdmUgdGhlIGJvdW5kYXJ5IGV0Yy4gIEl0J3Mgbm90IHJlYWxseVxuICAgICAgLy8gZGlmZmVyZW50IGZyb20gYW4gYWN0aW9uRXJyb3IgaW4gdGhhdCBzZW5zZS5cbiAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQgPSBbZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzKS5yb3V0ZS5pZCwge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogb3B0cy5wZW5kaW5nRXJyb3JcbiAgICAgIH1dO1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlLFxuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvblJlc3VsdC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nQWN0aW9uUmVzdWx0ID0gYWN0aW9uUmVzdWx0LnBlbmRpbmdBY3Rpb25SZXN1bHQ7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIHJlcXVlc3QudXJsLCByZXF1ZXN0LnNpZ25hbCk7XG4gICAgfVxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBzaG9ydENpcmN1aXRlZCxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gYXdhaXQgaGFuZGxlTG9hZGVycyhyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgbG9hZGluZ05hdmlnYXRpb24sIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uLCBvcHRzICYmIG9wdHMuZmV0Y2hlclN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5yZXBsYWNlLCBvcHRzICYmIG9wdHMuaW5pdGlhbEh5ZHJhdGlvbiA9PT0gdHJ1ZSwgZmx1c2hTeW5jLCBwZW5kaW5nQWN0aW9uUmVzdWx0KTtcbiAgICBpZiAoc2hvcnRDaXJjdWl0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwgX2V4dGVuZHMoe1xuICAgICAgbWF0Y2hlc1xuICAgIH0sIGdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCksIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9KSk7XG4gIH1cbiAgLy8gQ2FsbCB0aGUgYWN0aW9uIG1hdGNoZWQgYnkgdGhlIGxlYWYgcm91dGUgZm9yIHRoaXMgbmF2aWdhdGlvbiBhbmQgaGFuZGxlXG4gIC8vIHJlZGlyZWN0cy9lcnJvcnNcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBzdWJtaXNzaW9uLCBtYXRjaGVzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbiA9IGdldFN1Ym1pdHRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBuYXZpZ2F0aW9uXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiBvcHRzLmZsdXNoU3luYyA9PT0gdHJ1ZVxuICAgIH0pO1xuICAgIC8vIENhbGwgb3VyIGFjdGlvbiBhbmQgZ2V0IHRoZSByZXN1bHRcbiAgICBsZXQgcmVzdWx0O1xuICAgIGxldCBhY3Rpb25NYXRjaCA9IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgICB9KVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBjYWxsRGF0YVN0cmF0ZWd5KFwiYWN0aW9uXCIsIHJlcXVlc3QsIFthY3Rpb25NYXRjaF0sIG1hdGNoZXMpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1swXTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U7XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgbGV0IGxvY2F0aW9uID0gbm9ybWFsaXplUmVkaXJlY3RMb2NhdGlvbihyZXN1bHQucmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKSwgbmV3IFVSTChyZXF1ZXN0LnVybCksIGJhc2VuYW1lKTtcbiAgICAgICAgcmVwbGFjZSA9IGxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlc3VsdCwge1xuICAgICAgICBzdWJtaXNzaW9uLFxuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb25SZXN1bHQ6IFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkLCByZXN1bHRdXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgcGVuZGluZ0FjdGlvblJlc3VsdDogW2FjdGlvbk1hdGNoLnJvdXRlLmlkLCByZXN1bHRdXG4gICAgfTtcbiAgfVxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIGZldGNoZXJTdWJtaXNzaW9uLCByZXBsYWNlLCBpbml0aWFsSHlkcmF0aW9uLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb24gfHwgZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgcmVkaXJlY3QgZnJvbSBhbiBhY3Rpb24gd2UgZG9uJ3QgaGF2ZSBhIFwic3VibWlzc2lvblwiIGJ1dFxuICAgIC8vIHdlIGhhdmUgaXQgb24gdGhlIGxvYWRpbmcgbmF2aWdhdGlvbiBzbyB1c2UgdGhhdCBpZiBhdmFpbGFibGVcbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKGxvYWRpbmdOYXZpZ2F0aW9uKTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgYWN0aXZlU3VibWlzc2lvbiwgbG9jYXRpb24sIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsIGZ1dHVyZS51bnN0YWJsZV9za2lwQWN0aW9uRXJyb3JSZXZhbGlkYXRpb24sIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uUmVzdWx0KTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyB7XG4gICAgICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmVycm9yXG4gICAgICAgIH0gOiBudWxsXG4gICAgICB9LCBnZXRBY3Rpb25EYXRhRm9yQ29tbWl0KHBlbmRpbmdBY3Rpb25SZXN1bHQpLCB1cGRhdGVkRmV0Y2hlcnMgPyB7XG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSA6IHt9KSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvcnRDaXJjdWl0ZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIElmIHRoaXMgaXMgYW4gdW5pbnRlcnJ1cHRlZCByZXZhbGlkYXRpb24sIHdlIHJlbWFpbiBpbiBvdXIgY3VycmVudCBpZGxlXG4gICAgLy8gc3RhdGUuICBJZiBub3QsIHdlIG5lZWQgdG8gc3dpdGNoIHRvIG91ciBsb2FkaW5nIHN0YXRlIGFuZCBsb2FkIGRhdGEsXG4gICAgLy8gcHJlc2VydmluZyBhbnkgbmV3IGFjdGlvbiBkYXRhIG9yIGV4aXN0aW5nIGFjdGlvbiBkYXRhIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIGEgcmV2YWxpZGF0aW9uIGludGVycnVwdGluZyBhbiBhY3Rpb25SZWxvYWQpXG4gICAgLy8gSWYgd2UgaGF2ZSBwYXJ0aWFsSHlkcmF0aW9uIGVuYWJsZWQsIHRoZW4gZG9uJ3QgdXBkYXRlIHRoZSBzdGF0ZSBmb3IgdGhlXG4gICAgLy8gaW5pdGlhbCBkYXRhIGxvYWQgc2luY2UgaXQncyBub3QgYSBcIm5hdmlnYXRpb25cIlxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uICYmICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGE7XG4gICAgICBpZiAocGVuZGluZ0FjdGlvblJlc3VsdCAmJiAhaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSkge1xuICAgICAgICAvLyBUaGlzIGlzIGNhc3QgdG8gYGFueWAgY3VycmVudGx5IGJlY2F1c2UgYFJvdXRlRGF0YWB1c2VzIGFueSBhbmQgaXRcbiAgICAgICAgLy8gd291bGQgYmUgYSBicmVha2luZyBjaGFuZ2UgdG8gdXNlIGFueS5cbiAgICAgICAgLy8gVE9ETzogdjcgLSBjaGFuZ2UgYFJvdXRlRGF0YWAgdG8gdXNlIGB1bmtub3duYCBpbnN0ZWFkIG9mIGBhbnlgXG4gICAgICAgIGFjdGlvbkRhdGEgPSB7XG4gICAgICAgICAgW3BlbmRpbmdBY3Rpb25SZXN1bHRbMF1dOiBwZW5kaW5nQWN0aW9uUmVzdWx0WzFdLmRhdGFcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhdGUuYWN0aW9uRGF0YSkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHVwZGF0ZVN0YXRlKF9leHRlbmRzKHtcbiAgICAgICAgbmF2aWdhdGlvbjogbG9hZGluZ05hdmlnYXRpb25cbiAgICAgIH0sIGFjdGlvbkRhdGEgIT09IHVuZGVmaW5lZCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMocmYua2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goZiA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmVxdWVzdCk7XG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBfYWZ0ZXJfIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZiB3ZSBzaG9ydFxuICAgIC8vIGNpcmN1aXRlZCBiZWNhdXNlIGZldGNoQ29udHJvbGxlcnMgd291bGQgaGF2ZSBiZWVuIGFib3J0ZWQgYW5kXG4gICAgLy8gcmVhc3NpZ25lZCB0byBuZXcgY29udHJvbGxlcnMgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHJmLmtleSkpO1xuICAgIC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChbLi4ubG9hZGVyUmVzdWx0cywgLi4uZmV0Y2hlclJlc3VsdHNdKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXF1ZXN0LCByZWRpcmVjdC5yZXN1bHQsIHtcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFdpcmUgdXAgc3Vic2NyaWJlcnMgdG8gdXBkYXRlIGxvYWRlckRhdGEgYXMgcHJvbWlzZXMgc2V0dGxlXG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRlZmVycmVkRGF0YSwgcm91dGVJZCkgPT4ge1xuICAgICAgZGVmZXJyZWREYXRhLnN1YnNjcmliZShhYm9ydGVkID0+IHtcbiAgICAgICAgLy8gTm90ZTogTm8gbmVlZCB0byB1cGRhdGVTdGF0ZSBoZXJlIHNpbmNlIHRoZSBUcmFja2VkUHJvbWlzZSBvblxuICAgICAgICAvLyBsb2FkZXJEYXRhIGlzIHN0YWJsZSBhY3Jvc3MgcmVzb2x2ZS9yZWplY3RcbiAgICAgICAgLy8gUmVtb3ZlIHRoaXMgaW5zdGFuY2UgaWYgd2Ugd2VyZSBhYm9ydGVkIG9yIGlmIHByb21pc2VzIGhhdmUgc2V0dGxlZFxuICAgICAgICBpZiAoYWJvcnRlZCB8fCBkZWZlcnJlZERhdGEuZG9uZSkge1xuICAgICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIC8vIER1cmluZyBwYXJ0aWFsIGh5ZHJhdGlvbiwgcHJlc2VydmUgU1NSIGVycm9ycyBmb3Igcm91dGVzIHRoYXQgZG9uJ3QgcmUtcnVuXG4gICAgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gJiYgc3RhdGUuZXJyb3JzKSB7XG4gICAgICBPYmplY3QuZW50cmllcyhzdGF0ZS5lcnJvcnMpLmZpbHRlcihfcmVmMiA9PiB7XG4gICAgICAgIGxldCBbaWRdID0gX3JlZjI7XG4gICAgICAgIHJldHVybiAhbWF0Y2hlc1RvTG9hZC5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gaWQpO1xuICAgICAgfSkuZm9yRWFjaChfcmVmMyA9PiB7XG4gICAgICAgIGxldCBbcm91dGVJZCwgZXJyb3JdID0gX3JlZjM7XG4gICAgICAgIGVycm9ycyA9IE9iamVjdC5hc3NpZ24oZXJyb3JzIHx8IHt9LCB7XG4gICAgICAgICAgW3JvdXRlSWRdOiBlcnJvclxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID0gdXBkYXRlZEZldGNoZXJzIHx8IGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSwgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPyB7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9IDoge30pO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCBocmVmLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoLCBiYXNlbmFtZSk7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbm9ybWFsaXplZFBhdGhcbiAgICAgIH0pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgdHJ1ZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoXG4gICAgfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSwge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgZmV0Y2hSZXF1ZXN0LCBbbWF0Y2hdLCByZXF1ZXN0TWF0Y2hlcyk7XG4gICAgbGV0IGFjdGlvblJlc3VsdCA9IGFjdGlvblJlc3VsdHNbMF07XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXaGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LCB3ZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCB0byB0aGUgVUlcbiAgICAvLyBvciByZWRpcmVjdHMgcHJvY2Vzc2VkIGZvciB1bm1vdW50ZWQgZmV0Y2hlcnMgc28gd2UganVzdCByZXZlcnQgdGhlbSB0b1xuICAgIC8vIGlkbGVcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0ICYmIGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSB8fCBpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIExldCBTdWNjZXNzUmVzdWx0J3MgZmFsbCB0aHJvdWdoIGZvciByZXZhbGlkYXRpb25cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAgIC8vIEEgbmV3IG5hdmlnYXRpb24gd2FzIGtpY2tlZCBvZmYgYWZ0ZXIgb3VyIGFjdGlvbiBzdGFydGVkLCBzbyB0aGF0XG4gICAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvbi4gIFdlIGFscmVhZHlcbiAgICAgICAgICAvLyBzZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCBzbyBhbGwgbG9hZGVycyBmb3IgdGhlIG5ldyByb3V0ZSBzaG91bGRcbiAgICAgICAgICAvLyBmaXJlIHVubGVzcyBvcHRlZCBvdXQgdmlhIHNob3VsZFJldmFsaWRhdGVcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uKSk7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKGZldGNoUmVxdWVzdCwgYWN0aW9uUmVzdWx0LCB7XG4gICAgICAgICAgICBmZXRjaGVyU3VibWlzc2lvbjogc3VibWlzc2lvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBhY3Rpb25SZXN1bHQuZXJyb3IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBTdGFydCB0aGUgZGF0YSBsb2FkIGZvciBjdXJyZW50IG1hdGNoZXMsIG9yIHRoZSBuZXh0IGxvY2F0aW9uIGlmIHdlJ3JlXG4gICAgLy8gaW4gdGhlIG1pZGRsZSBvZiBhIG5hdmlnYXRpb25cbiAgICBsZXQgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgcmV2YWxpZGF0aW9uUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbmV4dExvY2F0aW9uLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgbWF0Y2hlcyA9IHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgIT09IFwiaWRsZVwiID8gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGJhc2VuYW1lKSA6IHN0YXRlLm1hdGNoZXM7XG4gICAgaW52YXJpYW50KG1hdGNoZXMsIFwiRGlkbid0IGZpbmQgYW55IG1hdGNoZXMgYWZ0ZXIgZmV0Y2hlciBhY3Rpb25cIik7XG4gICAgbGV0IGxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGZldGNoUmVsb2FkSWRzLnNldChrZXksIGxvYWRJZCk7XG4gICAgbGV0IGxvYWRGZXRjaGVyID0gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRGZXRjaGVyKTtcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbmV4dExvY2F0aW9uLCBmYWxzZSwgZnV0dXJlLnVuc3RhYmxlX3NraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIFttYXRjaC5yb3V0ZS5pZCwgYWN0aW9uUmVzdWx0XSk7XG4gICAgLy8gUHV0IGFsbCByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgaW50byB0aGUgbG9hZGluZyBzdGF0ZSwgZXhjZXB0IGZvciB0aGVcbiAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoXG4gICAgLy8gY29udGFpbnMgaXQncyBhY3Rpb24gc3VibWlzc2lvbiBpbmZvICsgYWN0aW9uIGRhdGFcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHN0YWxlS2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhzdGFsZUtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHN0YWxlS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBsZXQge1xuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfSA9IGF3YWl0IGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YShzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVycywgcmV2YWxpZGF0aW9uUmVxdWVzdCk7XG4gICAgaWYgKGFib3J0Q29udHJvbGxlci5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmluZFJlZGlyZWN0KFsuLi5sb2FkZXJSZXN1bHRzLCAuLi5mZXRjaGVyUmVzdWx0c10pO1xuICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgaWYgKHJlZGlyZWN0LmlkeCA+PSBtYXRjaGVzVG9Mb2FkLmxlbmd0aCkge1xuICAgICAgICAvLyBJZiB0aGlzIHJlZGlyZWN0IGNhbWUgZnJvbSBhIGZldGNoZXIgbWFrZSBzdXJlIHdlIG1hcmsgaXQgaW5cbiAgICAgICAgLy8gZmV0Y2hSZWRpcmVjdElkcyBzbyBpdCBkb2Vzbid0IGdldCByZXZhbGlkYXRlZCBvbiB0aGUgbmV4dCBzZXQgb2ZcbiAgICAgICAgLy8gbG9hZGVyIGV4ZWN1dGlvbnNcbiAgICAgICAgbGV0IGZldGNoZXJLZXkgPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tyZWRpcmVjdC5pZHggLSBtYXRjaGVzVG9Mb2FkLmxlbmd0aF0ua2V5O1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChmZXRjaGVyS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihyZXZhbGlkYXRpb25SZXF1ZXN0LCByZWRpcmVjdC5yZXN1bHQpO1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBzdGF0ZS5tYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCB1bmRlZmluZWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBTaW5jZSB3ZSBsZXQgcmV2YWxpZGF0aW9ucyBjb21wbGV0ZSBldmVuIGlmIHRoZSBzdWJtaXR0aW5nIGZldGNoZXIgd2FzXG4gICAgLy8gZGVsZXRlZCwgb25seSBwdXQgaXQgYmFjayB0byBpZGxlIGlmIGl0IGhhc24ndCBiZWVuIGRlbGV0ZWRcbiAgICBpZiAoc3RhdGUuZmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gICAgYWJvcnRTdGFsZUZldGNoTG9hZHMobG9hZElkKTtcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluIGEgbmF2aWdhdGlvbiBsb2FkaW5nIHN0YXRlIGFuZCB0aGlzIGZldGNoZXIgaXNcbiAgICAvLyBtb3JlIHJlY2VudCB0aGFuIHRoZSBuYXZpZ2F0aW9uLCB3ZSB3YW50IHRoZSBuZXdlciBkYXRhIHNvIGFib3J0IHRoZVxuICAgIC8vIG5hdmlnYXRpb24gYW5kIGNvbXBsZXRlIGl0IHdpdGggdGhlIGZldGNoZXIgZGF0YVxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBsb2FkSWQgPiBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCkge1xuICAgICAgaW52YXJpYW50KHBlbmRpbmdBY3Rpb24sIFwiRXhwZWN0ZWQgcGVuZGluZyBhY3Rpb25cIik7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG90aGVyd2lzZSBqdXN0IHVwZGF0ZSB3aXRoIHRoZSBmZXRjaGVyIGRhdGEsIHByZXNlcnZpbmcgYW55IGV4aXN0aW5nXG4gICAgICAvLyBsb2FkZXJEYXRhIGZvciBsb2FkZXJzIHRoYXQgZGlkIG5vdCBuZWVkIHRvIHJlbG9hZC4gIFdlIGhhdmUgdG9cbiAgICAgIC8vIG1hbnVhbGx5IG1lcmdlIGhlcmUgc2luY2Ugd2UgYXJlbid0IGdvaW5nIHRocm91Z2ggY29tcGxldGVOYXZpZ2F0aW9uXG4gICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgbG9hZGVyRGF0YTogbWVyZ2VMb2FkZXJEYXRhKHN0YXRlLmxvYWRlckRhdGEsIGxvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycyksXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgICAgfSk7XG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIENhbGwgdGhlIG1hdGNoZWQgbG9hZGVyIGZvciBmZXRjaGVyLmxvYWQoKSwgaGFuZGxpbmcgcmVkaXJlY3RzLCBlcnJvcnMsIGV0Yy5cbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpLCB7XG4gICAgICBmbHVzaFN5bmNcbiAgICB9KTtcbiAgICAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgZmV0Y2hSZXF1ZXN0LCBbbWF0Y2hdLCBtYXRjaGVzKTtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1swXTtcbiAgICAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID0gKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHwgcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG91ciBvd24gZmV0Y2hlclxuICAgIC8vIHJlLWxvYWQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBXZSBkb24ndCB3YW50IGVycm9ycyBidWJibGluZyB1cCBvciByZWRpcmVjdHMgZm9sbG93ZWQgZm9yIHVubW91bnRlZFxuICAgIC8vIGZldGNoZXJzLCBzbyBzaG9ydCBjaXJjdWl0IGhlcmUgaWYgaXQgd2FzIHJlbW92ZWQgZnJvbSB0aGUgVUlcbiAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGxvYWRlciB0aHJldyBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQgPiBvcmlnaW5hdGluZ0xvYWRJZCkge1xuICAgICAgICAvLyBBIG5ldyBuYXZpZ2F0aW9uIHdhcyBraWNrZWQgb2ZmIGFmdGVyIG91ciBsb2FkZXIgc3RhcnRlZCwgc28gdGhhdFxuICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uXG4gICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICBhd2FpdCBzdGFydFJlZGlyZWN0TmF2aWdhdGlvbihmZXRjaFJlcXVlc3QsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCByZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHJlcXVlc3QsIHJlZGlyZWN0LCBfdGVtcDIpIHtcbiAgICBsZXQge1xuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZVxuICAgIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICAgIGlmIChyZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmhhcyhcIlgtUmVtaXgtUmV2YWxpZGF0ZVwiKSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCBsb2NhdGlvbiA9IHJlZGlyZWN0LnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgaW52YXJpYW50KGxvY2F0aW9uLCBcIkV4cGVjdGVkIGEgTG9jYXRpb24gaGVhZGVyIG9uIHRoZSByZWRpcmVjdCBSZXNwb25zZVwiKTtcbiAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVJlZGlyZWN0TG9jYXRpb24obG9jYXRpb24sIG5ldyBVUkwocmVxdWVzdC51cmwpLCBiYXNlbmFtZSk7XG4gICAgbGV0IHJlZGlyZWN0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24sIHtcbiAgICAgIF9pc1JlZGlyZWN0OiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcbiAgICAgIGlmIChyZWRpcmVjdC5yZXNwb25zZS5oZWFkZXJzLmhhcyhcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIpKSB7XG4gICAgICAgIC8vIEhhcmQgcmVsb2FkIGlmIHRoZSByZXNwb25zZSBjb250YWluZWQgWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcbiAgICAgICAgaXNEb2N1bWVudFJlbG9hZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBjb25zdCB1cmwgPSBpbml0Lmhpc3RvcnkuY3JlYXRlVVJMKGxvY2F0aW9uKTtcbiAgICAgICAgaXNEb2N1bWVudFJlbG9hZCA9XG4gICAgICAgIC8vIEhhcmQgcmVsb2FkIGlmIGl0J3MgYW4gYWJzb2x1dGUgVVJMIHRvIGEgbmV3IG9yaWdpblxuICAgICAgICB1cmwub3JpZ2luICE9PSByb3V0ZXJXaW5kb3cubG9jYXRpb24ub3JpZ2luIHx8XG4gICAgICAgIC8vIEhhcmQgcmVsb2FkIGlmIGl0J3MgYW4gYWJzb2x1dGUgVVJMIHRoYXQgZG9lcyBub3QgbWF0Y2ggb3VyIGJhc2VuYW1lXG4gICAgICAgIHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBiYXNlbmFtZSkgPT0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RvY3VtZW50UmVsb2FkKSB7XG4gICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgcm91dGVyV2luZG93LmxvY2F0aW9uLnJlcGxhY2UobG9jYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5hc3NpZ24obG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGFib3J0IG9uIHJlZGlyZWN0cywgc2luY2Ugd2UgZG9uJ3QgZGV0ZWN0IHRoZVxuICAgIC8vIHJlZGlyZWN0IHVudGlsIHRoZSBhY3Rpb24vbG9hZGVycyBoYXZlIHNldHRsZWRcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIGxldCByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPSByZXBsYWNlID09PSB0cnVlID8gQWN0aW9uLlJlcGxhY2UgOiBBY3Rpb24uUHVzaDtcbiAgICAvLyBVc2UgdGhlIGluY29taW5nIHN1Ym1pc3Npb24gaWYgcHJvdmlkZWQsIGZhbGxiYWNrIG9uIHRoZSBhY3RpdmUgb25lIGluXG4gICAgLy8gc3RhdGUubmF2aWdhdGlvblxuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgfSA9IHN0YXRlLm5hdmlnYXRpb247XG4gICAgaWYgKCFzdWJtaXNzaW9uICYmICFmZXRjaGVyU3VibWlzc2lvbiAmJiBmb3JtTWV0aG9kICYmIGZvcm1BY3Rpb24gJiYgZm9ybUVuY1R5cGUpIHtcbiAgICAgIHN1Ym1pc3Npb24gPSBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbik7XG4gICAgfVxuICAgIC8vIElmIHRoaXMgd2FzIGEgMzA3LzMwOCBzdWJtaXNzaW9uIHdlIHdhbnQgdG8gcHJlc2VydmUgdGhlIEhUVFAgbWV0aG9kIGFuZFxuICAgIC8vIHJlLXN1Ym1pdCB0aGUgR0VUL1BPU1QvUFVUL1BBVENIL0RFTEVURSBhcyBhIHN1Ym1pc3Npb24gbmF2aWdhdGlvbiB0byB0aGVcbiAgICAvLyByZWRpcmVjdGVkIGxvY2F0aW9uXG4gICAgbGV0IGFjdGl2ZVN1Ym1pc3Npb24gPSBzdWJtaXNzaW9uIHx8IGZldGNoZXJTdWJtaXNzaW9uO1xuICAgIGlmIChyZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMuaGFzKHJlZGlyZWN0LnJlc3BvbnNlLnN0YXR1cykgJiYgYWN0aXZlU3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKGFjdGl2ZVN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgc3VibWlzc2lvbjogX2V4dGVuZHMoe30sIGFjdGl2ZVN1Ym1pc3Npb24sIHtcbiAgICAgICAgICBmb3JtQWN0aW9uOiBsb2NhdGlvblxuICAgICAgICB9KSxcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIG5hdmlnYXRpb24gc3VibWlzc2lvbiwgd2Ugd2lsbCBwcmVzZXJ2ZSBpdCB0aHJvdWdoIHRoZVxuICAgICAgLy8gcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgbGV0IG92ZXJyaWRlTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKHJlZGlyZWN0TG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBvdmVycmlkZU5hdmlnYXRpb24sXG4gICAgICAgIC8vIFNlbmQgZmV0Y2hlciBzdWJtaXNzaW9ucyB0aHJvdWdoIGZvciBzaG91bGRSZXZhbGlkYXRlXG4gICAgICAgIGZldGNoZXJTdWJtaXNzaW9uLFxuICAgICAgICAvLyBQcmVzZXJ2ZSB0aGlzIGZsYWcgYWNyb3NzIHJlZGlyZWN0c1xuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IGNsaWVudC1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3kodHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcykge1xuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3lJbXBsKGRhdGFTdHJhdGVneUltcGwsIHR5cGUsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMpO1xuICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMubWFwKChyZXN1bHQsIGkpID0+IHtcbiAgICAgICAgaWYgKGlzUmVkaXJlY3RIYW5kbGVyUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgICBsZXQgcmVzcG9uc2UgPSByZXN1bHQucmVzdWx0O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICAgICAgcmVzcG9uc2U6IG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWRbaV0ucm91dGUuaWQsIG1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udmVydEhhbmRsZXJSZXN1bHRUb0RhdGFSZXN1bHQocmVzdWx0KTtcbiAgICAgIH0pKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgb3V0ZXIgZGF0YVN0cmF0ZWd5IG1ldGhvZCB0aHJvd3MsIGp1c3QgcmV0dXJuIHRoZSBlcnJvciBmb3IgYWxsXG4gICAgICAvLyBtYXRjaGVzIC0gYW5kIGl0J2xsIG5hdHVyYWxseSBidWJibGUgdG8gdGhlIHJvb3RcbiAgICAgIHJldHVybiBtYXRjaGVzVG9Mb2FkLm1hcCgoKSA9PiAoe1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmdW5jdGlvbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoY3VycmVudE1hdGNoZXMsIG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGZldGNoZXJzVG9Mb2FkLCByZXF1ZXN0KSB7XG4gICAgbGV0IFtsb2FkZXJSZXN1bHRzLCAuLi5mZXRjaGVyUmVzdWx0c10gPSBhd2FpdCBQcm9taXNlLmFsbChbbWF0Y2hlc1RvTG9hZC5sZW5ndGggPyBjYWxsRGF0YVN0cmF0ZWd5KFwibG9hZGVyXCIsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWQsIG1hdGNoZXMpIDogW10sIC4uLmZldGNoZXJzVG9Mb2FkLm1hcChmID0+IHtcbiAgICAgIGlmIChmLm1hdGNoZXMgJiYgZi5tYXRjaCAmJiBmLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgbGV0IGZldGNoZXJSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIGYuY29udHJvbGxlci5zaWduYWwpO1xuICAgICAgICByZXR1cm4gY2FsbERhdGFTdHJhdGVneShcImxvYWRlclwiLCBmZXRjaGVyUmVxdWVzdCwgW2YubWF0Y2hdLCBmLm1hdGNoZXMpLnRoZW4ociA9PiByWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSldKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICBsb2FkZXJSZXN1bHRzLFxuICAgICAgZmV0Y2hlclJlc3VsdHNcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGludGVycnVwdEFjdGl2ZUxvYWRzKCkge1xuICAgIC8vIEV2ZXJ5IGludGVycnVwdGlvbiB0cmlnZ2VycyBhIHJldmFsaWRhdGlvblxuICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIC8vIENhbmNlbCBwZW5kaW5nIHJvdXRlLWxldmVsIGRlZmVycmVkcyBhbmQgbWFyayBjYW5jZWxsZWQgcm91dGVzIGZvclxuICAgIC8vIHJldmFsaWRhdGlvblxuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLnB1c2goLi4uY2FuY2VsQWN0aXZlRGVmZXJyZWRzKCkpO1xuICAgIC8vIEFib3J0IGluLWZsaWdodCBmZXRjaGVyIGxvYWRzXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGZldGNoZXIsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKVxuICAgIH0sIHtcbiAgICAgIGZsdXNoU3luYzogKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShzdGF0ZS5tYXRjaGVzLCByb3V0ZUlkKTtcbiAgICBkZWxldGVGZXRjaGVyKGtleSk7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZXJyb3JzOiB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogZXJyb3JcbiAgICAgIH0sXG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGdldEZldGNoZXIoa2V5KSB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgYWN0aXZlRmV0Y2hlcnMuc2V0KGtleSwgKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApICsgMSk7XG4gICAgICAvLyBJZiB0aGlzIGZldGNoZXIgd2FzIHByZXZpb3VzbHkgbWFya2VkIGZvciBkZWxldGlvbiwgdW5tYXJrIGl0IHNpbmNlIHdlXG4gICAgICAvLyBoYXZlIGEgbmV3IGluc3RhbmNlXG4gICAgICBpZiAoZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXRlLmZldGNoZXJzLmdldChrZXkpIHx8IElETEVfRkVUQ0hFUjtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyKGtleSkge1xuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgLy8gRG9uJ3QgYWJvcnQgdGhlIGNvbnRyb2xsZXIgaWYgdGhpcyBpcyBhIGRlbGV0aW9uIG9mIGEgZmV0Y2hlci5zdWJtaXQoKVxuICAgIC8vIGluIGl0J3MgbG9hZGluZyBwaGFzZSBzaW5jZSAtIHdlIGRvbid0IHdhbnQgdG8gYWJvcnQgdGhlIGNvcnJlc3BvbmRpbmdcbiAgICAvLyByZXZhbGlkYXRpb24gYW5kIHdhbnQgdGhlbSB0byBjb21wbGV0ZSBhbmQgbGFuZFxuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpICYmICEoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJiBmZXRjaFJlbG9hZElkcy5oYXMoa2V5KSkpIHtcbiAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICBmZXRjaExvYWRNYXRjaGVzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVsb2FkSWRzLmRlbGV0ZShrZXkpO1xuICAgIGZldGNoUmVkaXJlY3RJZHMuZGVsZXRlKGtleSk7XG4gICAgZGVsZXRlZEZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZShrZXkpIHtcbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBsZXQgY291bnQgPSAoYWN0aXZlRmV0Y2hlcnMuZ2V0KGtleSkgfHwgMCkgLSAxO1xuICAgICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgICAgYWN0aXZlRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGRlbGV0ZWRGZXRjaGVycy5hZGQoa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIGNvdW50KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIH1cbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhYm9ydEZldGNoZXIoa2V5KSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBcIkV4cGVjdGVkIGZldGNoIGNvbnRyb2xsZXI6IFwiICsga2V5KTtcbiAgICBjb250cm9sbGVyLmFib3J0KCk7XG4gICAgZmV0Y2hDb250cm9sbGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXMpIHtcbiAgICBmb3IgKGxldCBrZXkgb2Yga2V5cykge1xuICAgICAgbGV0IGZldGNoZXIgPSBnZXRGZXRjaGVyKGtleSk7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihmZXRjaGVyLmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCkge1xuICAgIGxldCBkb25lS2V5cyA9IFtdO1xuICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImxvYWRpbmdcIikge1xuICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkb25lS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHVwZGF0ZWRGZXRjaGVycyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIG1hcmtGZXRjaGVyc0RvbmUoZG9uZUtleXMpO1xuICAgIHJldHVybiB1cGRhdGVkRmV0Y2hlcnM7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRTdGFsZUZldGNoTG9hZHMobGFuZGVkSWQpIHtcbiAgICBsZXQgeWVldGVkS2V5cyA9IFtdO1xuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIFwiRXhwZWN0ZWQgZmV0Y2hlcjogXCIgKyBrZXkpO1xuICAgICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgICAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICB5ZWV0ZWRLZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKHllZXRlZEtleXMpO1xuICAgIHJldHVybiB5ZWV0ZWRLZXlzLmxlbmd0aCA+IDA7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0QmxvY2tlcihrZXksIGZuKSB7XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoa2V5KSB8fCBJRExFX0JMT0NLRVI7XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG4gICAgcmV0dXJuIGJsb2NrZXI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlQmxvY2tlcihrZXkpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuICB9XG4gIC8vIFV0aWxpdHkgZnVuY3Rpb24gdG8gdXBkYXRlIGJsb2NrZXJzLCBlbnN1cmluZyB2YWxpZCBzdGF0ZSB0cmFuc2l0aW9uc1xuICBmdW5jdGlvbiB1cGRhdGVCbG9ja2VyKGtleSwgbmV3QmxvY2tlcikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuICAgIGludmFyaWFudChibG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIgfHwgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiwgXCJJbnZhbGlkIGJsb2NrZXIgc3RhdGUgdHJhbnNpdGlvbjogXCIgKyBibG9ja2VyLnN0YXRlICsgXCIgLT4gXCIgKyBuZXdCbG9ja2VyLnN0YXRlKTtcbiAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICBibG9ja2Vycy5zZXQoa2V5LCBuZXdCbG9ja2VyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBibG9ja2Vyc1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNob3VsZEJsb2NrTmF2aWdhdGlvbihfcmVmNCkge1xuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IF9yZWY0O1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2Ugb255IHN1cHBvcnQgYSBzaW5nbGUgYWN0aXZlIGJsb2NrZXIgYXQgdGhlIG1vbWVudCBzaW5jZSB3ZSBkb24ndCBoYXZlXG4gICAgLy8gYW55IGNvbXBlbGxpbmcgdXNlIGNhc2VzIGZvciBtdWx0aS1ibG9ja2VyIHlldFxuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPiAxKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkEgcm91dGVyIG9ubHkgc3VwcG9ydHMgb25lIGJsb2NrZXIgYXQgYSB0aW1lXCIpO1xuICAgIH1cbiAgICBsZXQgZW50cmllcyA9IEFycmF5LmZyb20oYmxvY2tlckZ1bmN0aW9ucy5lbnRyaWVzKCkpO1xuICAgIGxldCBbYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSA9IGVudHJpZXNbZW50cmllcy5sZW5ndGggLSAxXTtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KTtcbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBrbm93IHdlJ3JlIHVuYmxvY2tlZC9ibG9ja2VkIHNvIHdlIG5lZWQgdG8gY2hlY2sgdGhlXG4gICAgLy8gdXNlci1wcm92aWRlZCBibG9ja2VyIGZ1bmN0aW9uXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjYW5jZWxBY3RpdmVEZWZlcnJlZHMocHJlZGljYXRlKSB7XG4gICAgbGV0IGNhbmNlbGxlZFJvdXRlSWRzID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH1cbiAgLy8gT3B0IGluIHRvIGNhcHR1cmluZyBhbmQgcmVwb3J0aW5nIHNjcm9sbCBwb3NpdGlvbnMgZHVyaW5nIG5hdmlnYXRpb25zLFxuICAvLyB1c2VkIGJ5IHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICBmdW5jdGlvbiBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbihwb3NpdGlvbnMsIGdldFBvc2l0aW9uLCBnZXRLZXkpIHtcbiAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IHBvc2l0aW9ucztcbiAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGdldFBvc2l0aW9uO1xuICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gZ2V0S2V5IHx8IG51bGw7XG4gICAgLy8gUGVyZm9ybSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24sIHNpbmNlIHdlIG1pc3MgdGhlIGJvYXQgb25cbiAgICAvLyB0aGUgaW5pdGlhbCB1cGRhdGVTdGF0ZSgpIGJlY2F1c2Ugd2UndmUgbm90IHlldCByZW5kZXJlZCA8U2Nyb2xsUmVzdG9yYXRpb24vPlxuICAgIC8vIGFuZCB0aGVyZWZvcmUgaGF2ZSBubyBzYXZlZFNjcm9sbFBvc2l0aW9ucyBhdmFpbGFibGVcbiAgICBpZiAoIWluaXRpYWxTY3JvbGxSZXN0b3JlZCAmJiBzdGF0ZS5uYXZpZ2F0aW9uID09PSBJRExFX05BVklHQVRJT04pIHtcbiAgICAgIGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IHRydWU7XG4gICAgICBsZXQgeSA9IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgICAgaWYgKHkgIT0gbnVsbCkge1xuICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiB5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAgICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2Nyb2xsS2V5KGxvY2F0aW9uLCBtYXRjaGVzKSB7XG4gICAgaWYgKGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KSB7XG4gICAgICBsZXQga2V5ID0gZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkobG9jYXRpb24sIG1hdGNoZXMubWFwKG0gPT4gY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgc3RhdGUubG9hZGVyRGF0YSkpKTtcbiAgICAgIHJldHVybiBrZXkgfHwgbG9jYXRpb24ua2V5O1xuICAgIH1cbiAgICByZXR1cm4gbG9jYXRpb24ua2V5O1xuICB9XG4gIGZ1bmN0aW9uIHNhdmVTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcyk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucykge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcyk7XG4gICAgICBsZXQgeSA9IHNhdmVkU2Nyb2xsUG9zaXRpb25zW2tleV07XG4gICAgICBpZiAodHlwZW9mIHkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGZ1bmN0aW9uIF9pbnRlcm5hbFNldFJvdXRlcyhuZXdSb3V0ZXMpIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMobmV3Um91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICB9XG4gIHJvdXRlciA9IHtcbiAgICBnZXQgYmFzZW5hbWUoKSB7XG4gICAgICByZXR1cm4gYmFzZW5hbWU7XG4gICAgfSxcbiAgICBnZXQgZnV0dXJlKCkge1xuICAgICAgcmV0dXJuIGZ1dHVyZTtcbiAgICB9LFxuICAgIGdldCBzdGF0ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9LFxuICAgIGdldCByb3V0ZXMoKSB7XG4gICAgICByZXR1cm4gZGF0YVJvdXRlcztcbiAgICB9LFxuICAgIGdldCB3aW5kb3coKSB7XG4gICAgICByZXR1cm4gcm91dGVyV2luZG93O1xuICAgIH0sXG4gICAgaW5pdGlhbGl6ZSxcbiAgICBzdWJzY3JpYmUsXG4gICAgZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24sXG4gICAgbmF2aWdhdGUsXG4gICAgZmV0Y2gsXG4gICAgcmV2YWxpZGF0ZSxcbiAgICAvLyBQYXNzdGhyb3VnaCB0byBoaXN0b3J5LWF3YXJlIGNyZWF0ZUhyZWYgdXNlZCBieSB1c2VIcmVmIHNvIHdlIGdldCBwcm9wZXJcbiAgICAvLyBoYXNoLWF3YXJlIFVSTHMgaW4gRE9NIHBhdGhzXG4gICAgY3JlYXRlSHJlZjogdG8gPT4gaW5pdC5oaXN0b3J5LmNyZWF0ZUhyZWYodG8pLFxuICAgIGVuY29kZUxvY2F0aW9uOiB0byA9PiBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24odG8pLFxuICAgIGdldEZldGNoZXIsXG4gICAgZGVsZXRlRmV0Y2hlcjogZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlLFxuICAgIGRpc3Bvc2UsXG4gICAgZ2V0QmxvY2tlcixcbiAgICBkZWxldGVCbG9ja2VyLFxuICAgIF9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnM6IGZldGNoQ29udHJvbGxlcnMsXG4gICAgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMsXG4gICAgLy8gVE9ETzogUmVtb3ZlIHNldFJvdXRlcywgaXQncyB0ZW1wb3JhcnkgdG8gYXZvaWQgZGVhbGluZyB3aXRoXG4gICAgLy8gdXBkYXRpbmcgdGhlIHRyZWUgd2hpbGUgdmFsaWRhdGluZyB0aGUgdXBkYXRlIGFsZ29yaXRobS5cbiAgICBfaW50ZXJuYWxTZXRSb3V0ZXNcbiAgfTtcbiAgcmV0dXJuIHJvdXRlcjtcbn1cbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVTdGF0aWNIYW5kbGVyXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuY29uc3QgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCA9IFN5bWJvbChcImRlZmVycmVkXCIpO1xuZnVuY3Rpb24gY3JlYXRlU3RhdGljSGFuZGxlcihyb3V0ZXMsIG9wdHMpIHtcbiAgaW52YXJpYW50KHJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVN0YXRpY0hhbmRsZXJcIik7XG4gIGxldCBtYW5pZmVzdCA9IHt9O1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKG9wdHMgIT0gbnVsbCAmJiBvcHRzLm1hcFJvdXRlUHJvcGVydGllcykge1xuICAgIG1hcFJvdXRlUHJvcGVydGllcyA9IG9wdHMubWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9IGVsc2UgaWYgKG9wdHMgIT0gbnVsbCAmJiBvcHRzLmRldGVjdEVycm9yQm91bmRhcnkpIHtcbiAgICAvLyBJZiB0aGV5IGFyZSBzdGlsbCB1c2luZyB0aGUgZGVwcmVjYXRlZCB2ZXJzaW9uLCB3cmFwIGl0IHdpdGggdGhlIG5ldyBBUElcbiAgICBsZXQgZGV0ZWN0RXJyb3JCb3VuZGFyeSA9IG9wdHMuZGV0ZWN0RXJyb3JCb3VuZGFyeTtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZGV0ZWN0RXJyb3JCb3VuZGFyeShyb3V0ZSlcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBkZWZhdWx0TWFwUm91dGVQcm9wZXJ0aWVzO1xuICB9XG4gIC8vIENvbmZpZyBkcml2ZW4gYmVoYXZpb3IgZmxhZ3NcbiAgbGV0IGZ1dHVyZSA9IF9leHRlbmRzKHtcbiAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogZmFsc2UsXG4gICAgdjdfdGhyb3dBYm9ydFJlYXNvbjogZmFsc2VcbiAgfSwgb3B0cyA/IG9wdHMuZnV0dXJlIDogbnVsbCk7XG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMsIG1hcFJvdXRlUHJvcGVydGllcywgdW5kZWZpbmVkLCBtYW5pZmVzdCk7XG4gIC8qKlxuICAgKiBUaGUgcXVlcnkoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIGRvY3VtZW50IHJlcXVlc3RzLCBpbiB3aGljaCB3ZSB3YW50IHRvXG4gICAqIGNhbGwgYW4gb3B0aW9uYWwgYWN0aW9uIGFuZCBwb3RlbnRpYWxseSBtdWx0aXBsZSBsb2FkZXJzIGZvciBhbGwgbmVzdGVkXG4gICAqIHJvdXRlcy4gIEl0IHJldHVybnMgYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBvYmplY3QsIHdoaWNoIGlzIHZlcnkgc2ltaWxhclxuICAgKiB0byB0aGUgcm91dGVyIHN0YXRlIChsb2NhdGlvbiwgbG9hZGVyRGF0YSwgYWN0aW9uRGF0YSwgZXJyb3JzLCBldGMuKSBhbmRcbiAgICogYWxzbyBhZGRzIFNTUi1zcGVjaWZpYyBpbmZvcm1hdGlvbiBzdWNoIGFzIHRoZSBzdGF0dXNDb2RlIGFuZCBoZWFkZXJzXG4gICAqIGZyb20gYWN0aW9uL2xvYWRlcnMgUmVzcG9uc2VzLlxuICAgKlxuICAgKiBJdCBfc2hvdWxkXyBuZXZlciB0aHJvdyBhbmQgc2hvdWxkIHJlcG9ydCBhbGwgZXJyb3JzIHRocm91Z2ggdGhlXG4gICAqIHJldHVybmVkIGNvbnRleHQuZXJyb3JzIG9iamVjdCwgcHJvcGVybHkgYXNzb2NpYXRpbmcgZXJyb3JzIHRvIHRoZWlyIGVycm9yXG4gICAqIGJvdW5kYXJ5LiAgQWRkaXRpb25hbGx5LCBpdCB0cmFja3MgX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgd2hpY2ggY2FuIGJlXG4gICAqIHVzZWQgdG8gZW11bGF0ZSBSZWFjdCBlcnJvciBib3VuZGFyaWVzIGR1cmluZyBTU3IgYnkgcGVyZm9ybWluZyBhIHNlY29uZFxuICAgKiBwYXNzIG9ubHkgZG93biB0byB0aGUgYm91bmRhcnlJZC5cbiAgICpcbiAgICogVGhlIG9uZSBleGNlcHRpb24gd2hlcmUgd2UgZG8gbm90IHJldHVybiBhIFN0YXRpY0hhbmRsZXJDb250ZXh0IGlzIHdoZW4gYVxuICAgKiByZWRpcmVjdCByZXNwb25zZSBpcyByZXR1cm5lZCBvciB0aHJvd24gZnJvbSBhbnkgYWN0aW9uL2xvYWRlci4gIFdlXG4gICAqIHByb3BhZ2F0ZSB0aGF0IG91dCBhbmQgcmV0dXJuIHRoZSByYXcgUmVzcG9uc2Ugc28gdGhlIEhUVFAgc2VydmVyIGNhblxuICAgKiByZXR1cm4gaXQgZGlyZWN0bHkuXG4gICAqXG4gICAqIC0gYG9wdHMucmVxdWVzdENvbnRleHRgIGlzIGFuIG9wdGlvbmFsIHNlcnZlciBjb250ZXh0IHRoYXQgd2lsbCBiZSBwYXNzZWRcbiAgICogICB0byBhY3Rpb25zL2xvYWRlcnMgaW4gdGhlIGBjb250ZXh0YCBwYXJhbWV0ZXJcbiAgICogLSBgb3B0cy5za2lwTG9hZGVyRXJyb3JCdWJibGluZ2AgaXMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRoYXQgd2lsbCBwcmV2ZW50XG4gICAqICAgdGhlIGJ1YmJsaW5nIG9mIGVycm9ycyB3aGljaCBhbGxvd3Mgc2luZ2xlLWZldGNoLXR5cGUgaW1wbGVtZW50YXRpb25zXG4gICAqICAgd2hlcmUgdGhlIGNsaWVudCB3aWxsIGhhbmRsZSB0aGUgYnViYmxpbmcgYW5kIHdlIG1heSBuZWVkIHRvIHJldHVybiBkYXRhXG4gICAqICAgZm9yIHRoZSBoYW5kbGluZyByb3V0ZVxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAzKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgc2tpcExvYWRlckVycm9yQnViYmxpbmcsXG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3lcbiAgICB9ID0gX3RlbXAzID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMztcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZFxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmICghbWF0Y2hlcykge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KTtcbiAgICAgIGxldCB7XG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgcm91dGVcbiAgICAgIH0gPSBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5IHx8IG51bGwsIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nID09PSB0cnVlLCBudWxsKTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2NhdGlvbixcbiAgICAgIGJhc2VuYW1lXG4gICAgfSwgcmVzdWx0KTtcbiAgfVxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKlxuICAgKiAtIGBvcHRzLnJvdXRlSWRgIGFsbG93cyB5b3UgdG8gc3BlY2lmeSB0aGUgc3BlY2lmaWMgcm91dGUgaGFuZGxlciB0byBjYWxsLlxuICAgKiAgIElmIG5vdCBwcm92aWRlZCB0aGUgaGFuZGxlciB3aWxsIGRldGVybWluZSB0aGUgcHJvcGVyIHJvdXRlIGJ5IG1hdGNoaW5nXG4gICAqICAgYWdhaW5zdCBgcmVxdWVzdC51cmxgXG4gICAqIC0gYG9wdHMucmVxdWVzdENvbnRleHRgIGlzIGFuIG9wdGlvbmFsIHNlcnZlciBjb250ZXh0IHRoYXQgd2lsbCBiZSBwYXNzZWRcbiAgICogICAgdG8gYWN0aW9ucy9sb2FkZXJzIGluIHRoZSBgY29udGV4dGAgcGFyYW1ldGVyXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wNCkge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3lcbiAgICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIgJiYgbWV0aG9kICE9PSBcIk9QVElPTlNcIikge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3kgfHwgbnVsbCwgZmFsc2UsIG1hdGNoKTtcbiAgICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3JzID8gT2JqZWN0LnZhbHVlcyhyZXN1bHQuZXJyb3JzKVswXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgLy8gUGljayBvZmYgdGhlIHJpZ2h0IHN0YXRlIHZhbHVlIHRvIHJldHVyblxuICAgIGlmIChyZXN1bHQuYWN0aW9uRGF0YSkge1xuICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMocmVzdWx0LmFjdGlvbkRhdGEpWzBdO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LmxvYWRlckRhdGEpIHtcbiAgICAgIHZhciBfcmVzdWx0JGFjdGl2ZURlZmVycmU7XG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuICAgICAgaWYgKChfcmVzdWx0JGFjdGl2ZURlZmVycmUgPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzKSAhPSBudWxsICYmIF9yZXN1bHQkYWN0aXZlRGVmZXJyZVttYXRjaC5yb3V0ZS5pZF0pIHtcbiAgICAgICAgZGF0YVtVTlNBRkVfREVGRVJSRURfU1lNQk9MXSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHNbbWF0Y2gucm91dGUuaWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCkge1xuICAgIGludmFyaWFudChyZXF1ZXN0LnNpZ25hbCwgXCJxdWVyeSgpL3F1ZXJ5Um91dGUoKSByZXF1ZXN0cyBtdXN0IGNvbnRhaW4gYW4gQWJvcnRDb250cm9sbGVyIHNpZ25hbFwiKTtcbiAgICB0cnkge1xuICAgICAgaWYgKGlzTXV0YXRpb25NZXRob2QocmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCByb3V0ZU1hdGNoIHx8IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSwgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIHJvdXRlTWF0Y2ggIT0gbnVsbCk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZXQgcmVzdWx0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCk7XG4gICAgICByZXR1cm4gaXNSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0IDogX2V4dGVuZHMoe30sIHJlc3VsdCwge1xuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fVxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhlIHVzZXIgdGhyZXcvcmV0dXJuZWQgYSBSZXNwb25zZSBpbiBjYWxsTG9hZGVyT3JBY3Rpb24gZm9yIGFcbiAgICAgIC8vIGBxdWVyeVJvdXRlYCBjYWxsLCB3ZSB0aHJvdyB0aGUgYEhhbmRsZXJSZXN1bHRgIHRvIGJhaWwgb3V0IGVhcmx5XG4gICAgICAvLyBhbmQgdGhlbiByZXR1cm4gb3IgdGhyb3cgdGhlIHJhdyBSZXNwb25zZSBoZXJlIGFjY29yZGluZ2x5XG4gICAgICBpZiAoaXNIYW5kbGVyUmVzdWx0KGUpICYmIGlzUmVzcG9uc2UoZS5yZXN1bHQpKSB7XG4gICAgICAgIGlmIChlLnR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICAgICAgICB0aHJvdyBlLnJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5yZXN1bHQ7XG4gICAgICB9XG4gICAgICAvLyBSZWRpcmVjdHMgYXJlIGFsd2F5cyByZXR1cm5lZCBzaW5jZSB0aGV5IGRvbid0IHByb3BhZ2F0ZSB0byBjYXRjaFxuICAgICAgLy8gYm91bmRhcmllc1xuICAgICAgaWYgKGlzUmVkaXJlY3RSZXNwb25zZShlKSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICAgIH1cbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHN1Ym1pdChyZXF1ZXN0LCBtYXRjaGVzLCBhY3Rpb25NYXRjaCwgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhYWN0aW9uTWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiByZXF1ZXN0Lm1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IG5ldyBVUkwocmVxdWVzdC51cmwpLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJhY3Rpb25cIiwgcmVxdWVzdCwgW2FjdGlvbk1hdGNoXSwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3kpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0c1swXTtcbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHRocm93U3RhdGljSGFuZGxlckFib3J0ZWRFcnJvcihyZXF1ZXN0LCBpc1JvdXRlUmVxdWVzdCwgZnV0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gVWhoaGggLSB0aGlzIHNob3VsZCBuZXZlciBoYXBwZW4sIHdlIHNob3VsZCBhbHdheXMgdGhyb3cgdGhlc2UgZnJvbVxuICAgICAgLy8gY2FsbExvYWRlck9yQWN0aW9uLCBidXQgdGhlIHR5cGUgbmFycm93aW5nIGhlcmUga2VlcHMgVFMgaGFwcHkgYW5kIHdlXG4gICAgICAvLyBjYW4gZ2V0IGJhY2sgb24gdGhlIFwidGhyb3cgYWxsIHJlZGlyZWN0IHJlc3BvbnNlc1wiIHRyYWluIGhlcmUgc2hvdWxkXG4gICAgICAvLyB0aGlzIGV2ZXIgaGFwcGVuIDovXG4gICAgICB0aHJvdyBuZXcgUmVzcG9uc2UobnVsbCwge1xuICAgICAgICBzdGF0dXM6IHJlc3VsdC5yZXNwb25zZS5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBMb2NhdGlvbjogcmVzdWx0LnJlc3BvbnNlLmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIilcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIHR5cGU6IFwiZGVmZXItYWN0aW9uXCJcbiAgICAgIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvclxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaGVzOiBbYWN0aW9uTWF0Y2hdLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICBsZXQgbG9hZGVyUmVxdWVzdCA9IG5ldyBSZXF1ZXN0KHJlcXVlc3QudXJsLCB7XG4gICAgICBoZWFkZXJzOiByZXF1ZXN0LmhlYWRlcnMsXG4gICAgICByZWRpcmVjdDogcmVxdWVzdC5yZWRpcmVjdCxcbiAgICAgIHNpZ25hbDogcmVxdWVzdC5zaWduYWxcbiAgICB9KTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gc2tpcExvYWRlckVycm9yQnViYmxpbmcgPyBhY3Rpb25NYXRjaCA6IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgbGV0IGNvbnRleHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKGxvYWRlclJlcXVlc3QsIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3ksIHNraXBMb2FkZXJFcnJvckJ1YmJsaW5nLCBudWxsLCBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZCwgcmVzdWx0XSk7XG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpID8gcmVzdWx0LmVycm9yLnN0YXR1cyA6IHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgPyByZXN1bHQuc3RhdHVzQ29kZSA6IDUwMCxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzXG4gICAgICAgIH0gOiB7fSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHVuc3RhYmxlX2RhdGFTdHJhdGVneSwgc2tpcExvYWRlckVycm9yQnViYmxpbmcsIG51bGwpO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgICAgYWN0aW9uRGF0YToge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YVxuICAgICAgfVxuICAgIH0sIHJlc3VsdC5zdGF0dXNDb2RlID8ge1xuICAgICAgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1c0NvZGVcbiAgICB9IDoge30sIHtcbiAgICAgIGFjdGlvbkhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9XG4gICAgfSk7XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5zdGFibGVfZGF0YVN0cmF0ZWd5LCBza2lwTG9hZGVyRXJyb3JCdWJibGluZywgcm91dGVNYXRjaCwgcGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBwZW5kaW5nQWN0aW9uUmVzdWx0ICYmIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBwZW5kaW5nQWN0aW9uUmVzdWx0WzBdKSA6IG1hdGNoZXM7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIobSA9PiBtLnJvdXRlLmxvYWRlciB8fCBtLnJvdXRlLmxhenkpO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSlcbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgICAgW20ucm91dGUuaWRdOiBudWxsXG4gICAgICAgIH0pLCB7fSksXG4gICAgICAgIGVycm9yczogcGVuZGluZ0FjdGlvblJlc3VsdCAmJiBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8ge1xuICAgICAgICAgIFtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXTogcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvclxuICAgICAgICB9IDogbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3koXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3kpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IGFjdGl2ZURlZmVycmVkcyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgY29udGV4dCA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0FjdGlvblJlc3VsdCwgYWN0aXZlRGVmZXJyZWRzLCBza2lwTG9hZGVyRXJyb3JCdWJibGluZyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICAvLyBVdGlsaXR5IHdyYXBwZXIgZm9yIGNhbGxpbmcgZGF0YVN0cmF0ZWd5IHNlcnZlci1zaWRlIHdpdGhvdXQgaGF2aW5nIHRvXG4gIC8vIHBhc3MgYXJvdW5kIHRoZSBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGNhbGxEYXRhU3RyYXRlZ3kodHlwZSwgcmVxdWVzdCwgbWF0Y2hlc1RvTG9hZCwgbWF0Y2hlcywgaXNSb3V0ZVJlcXVlc3QsIHJlcXVlc3RDb250ZXh0LCB1bnN0YWJsZV9kYXRhU3RyYXRlZ3kpIHtcbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IGNhbGxEYXRhU3RyYXRlZ3lJbXBsKHVuc3RhYmxlX2RhdGFTdHJhdGVneSB8fCBkZWZhdWx0RGF0YVN0cmF0ZWd5LCB0eXBlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKHJlc3VsdHMubWFwKChyZXN1bHQsIGkpID0+IHtcbiAgICAgIGlmIChpc1JlZGlyZWN0SGFuZGxlclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIGxldCByZXNwb25zZSA9IHJlc3VsdC5yZXN1bHQ7XG4gICAgICAgIC8vIFRocm93IHJlZGlyZWN0cyBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIHRoZW0gd2l0aCBhbiBIVFRQIHJlZGlyZWN0XG4gICAgICAgIHRocm93IG5vcm1hbGl6ZVJlbGF0aXZlUm91dGluZ1JlZGlyZWN0UmVzcG9uc2UocmVzcG9uc2UsIHJlcXVlc3QsIG1hdGNoZXNUb0xvYWRbaV0ucm91dGUuaWQsIG1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgfVxuICAgICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0LnJlc3VsdCkgJiYgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgLy8gRm9yIFNTUiBzaW5nbGUtcm91dGUgcmVxdWVzdHMsIHdlIHdhbnQgdG8gaGFuZCBSZXNwb25zZXMgYmFja1xuICAgICAgICAvLyBkaXJlY3RseSB3aXRob3V0IHVud3JhcHBpbmdcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnZlcnRIYW5kbGVyUmVzdWx0VG9EYXRhUmVzdWx0KHJlc3VsdCk7XG4gICAgfSkpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGF0YVJvdXRlcyxcbiAgICBxdWVyeSxcbiAgICBxdWVyeVJvdXRlXG4gIH07XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICogR2l2ZW4gYW4gZXhpc3RpbmcgU3RhdGljSGFuZGxlckNvbnRleHQgYW5kIGFuIGVycm9yIHRocm93biBhdCByZW5kZXIgdGltZSxcbiAqIHByb3ZpZGUgYW4gdXBkYXRlZCBTdGF0aWNIYW5kbGVyQ29udGV4dCBzdWl0YWJsZSBmb3IgYSBzZWNvbmQgU1NSIHJlbmRlclxuICovXG5mdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKHJvdXRlcywgY29udGV4dCwgZXJyb3IpIHtcbiAgbGV0IG5ld0NvbnRleHQgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCwge1xuICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yKSA/IGVycm9yLnN0YXR1cyA6IDUwMCxcbiAgICBlcnJvcnM6IHtcbiAgICAgIFtjb250ZXh0Ll9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHx8IHJvdXRlc1swXS5pZF06IGVycm9yXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5mdW5jdGlvbiB0aHJvd1N0YXRpY0hhbmRsZXJBYm9ydGVkRXJyb3IocmVxdWVzdCwgaXNSb3V0ZVJlcXVlc3QsIGZ1dHVyZSkge1xuICBpZiAoZnV0dXJlLnY3X3Rocm93QWJvcnRSZWFzb24gJiYgcmVxdWVzdC5zaWduYWwucmVhc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyByZXF1ZXN0LnNpZ25hbC5yZWFzb247XG4gIH1cbiAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gIHRocm93IG5ldyBFcnJvcihtZXRob2QgKyBcIigpIGNhbGwgYWJvcnRlZDogXCIgKyByZXF1ZXN0Lm1ldGhvZCArIFwiIFwiICsgcmVxdWVzdC51cmwpO1xufVxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSB7XG4gIHJldHVybiBvcHRzICE9IG51bGwgJiYgKFwiZm9ybURhdGFcIiBpbiBvcHRzICYmIG9wdHMuZm9ybURhdGEgIT0gbnVsbCB8fCBcImJvZHlcIiBpbiBvcHRzICYmIG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKGxvY2F0aW9uLCBtYXRjaGVzLCBiYXNlbmFtZSwgcHJlcGVuZEJhc2VuYW1lLCB0bywgdjdfcmVsYXRpdmVTcGxhdFBhdGgsIGZyb21Sb3V0ZUlkLCByZWxhdGl2ZSkge1xuICBsZXQgY29udGV4dHVhbE1hdGNoZXM7XG4gIGxldCBhY3RpdmVSb3V0ZU1hdGNoO1xuICBpZiAoZnJvbVJvdXRlSWQpIHtcbiAgICAvLyBHcmFiIG1hdGNoZXMgdXAgdG8gdGhlIGNhbGxpbmcgcm91dGUgc28gb3VyIHJvdXRlLXJlbGF0aXZlIGxvZ2ljIGlzXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGNvcnJlY3Qgc291cmNlIHJvdXRlXG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb250ZXh0dWFsTWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCA9PT0gZnJvbVJvdXRlSWQpIHtcbiAgICAgICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gUmVzb2x2ZSB0aGUgcmVsYXRpdmUgcGF0aFxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0byA/IHRvIDogXCIuXCIsIGdldFJlc29sdmVUb01hdGNoZXMoY29udGV4dHVhbE1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICAvLyBXaGVuIGB0b2AgaXMgbm90IHNwZWNpZmllZCB3ZSBpbmhlcml0IHNlYXJjaC9oYXNoIGZyb20gdGhlIGN1cnJlbnRcbiAgLy8gbG9jYXRpb24sIHVubGlrZSB3aGVuIHRvPVwiLlwiIGFuZCB3ZSBqdXN0IGluaGVyaXQgdGhlIHBhdGguXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgaWYgKHRvID09IG51bGwpIHtcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB9XG4gIC8vIEFkZCBhbiA/aW5kZXggcGFyYW0gZm9yIG1hdGNoZWQgaW5kZXggcm91dGVzIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKCh0byA9PSBudWxsIHx8IHRvID09PSBcIlwiIHx8IHRvID09PSBcIi5cIikgJiYgYWN0aXZlUm91dGVNYXRjaCAmJiBhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKG5vcm1hbGl6ZUZvcm1NZXRob2QsIGlzRmV0Y2hlciwgcGF0aCwgb3B0cykge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH1cbiAgbGV0IGdldEludmFsaWRCb2R5RXJyb3IgPSAoKSA9PiAoe1xuICAgIHBhdGgsXG4gICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICB0eXBlOiBcImludmFsaWQtYm9keVwiXG4gICAgfSlcbiAgfSk7XG4gIC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuICBsZXQgcmF3Rm9ybU1ldGhvZCA9IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiO1xuICBsZXQgZm9ybU1ldGhvZCA9IG5vcm1hbGl6ZUZvcm1NZXRob2QgPyByYXdGb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCkgOiByYXdGb3JtTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmb3JtQWN0aW9uID0gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCk7XG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuYm9keSA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8IG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNwbGFpbi10ZXh0LWZvcm0tZGF0YVxuICAgICAgQXJyYXkuZnJvbShvcHRzLmJvZHkuZW50cmllcygpKS5yZWR1Y2UoKGFjYywgX3JlZjUpID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSBfcmVmNTtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBhY2MgKyBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICB9LCBcIlwiKSA6IFN0cmluZyhvcHRzLmJvZHkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgLy8ganNvbiBvbmx5IHN1cHBvcnRzIFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQganNvbiA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGludmFyaWFudCh0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIiwgXCJGb3JtRGF0YSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG4gIGxldCBzZWFyY2hQYXJhbXM7XG4gIGxldCBmb3JtRGF0YTtcbiAgaWYgKG9wdHMuZm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuZm9ybURhdGE7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5ib2R5O1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHNlYXJjaFBhcmFtcyA9IG9wdHMuYm9keTtcbiAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5ID09IG51bGwpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgfVxuICB9XG4gIGxldCBzdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZFxuICB9O1xuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfTtcbiAgfVxuICAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgLy8gT24gR0VUIG5hdmlnYXRpb24gc3VibWlzc2lvbnMgd2UgY2FuIGRyb3AgdGhlID9pbmRleCBwYXJhbSBmcm9tIHRoZVxuICAvLyByZXN1bHRpbmcgbG9jYXRpb24gc2luY2UgYWxsIGxvYWRlcnMgd2lsbCBydW4uICBCdXQgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnNcbiAgLy8gb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIHNvIHdlIG5lZWQgdG8gcHJlc2VydmUgYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gXCI/XCIgKyBzZWFyY2hQYXJhbXM7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKSxcbiAgICBzdWJtaXNzaW9uXG4gIH07XG59XG4vLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5mdW5jdGlvbiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzSW5pdGlhbExvYWQsIHNraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiwgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMsIGNhbmNlbGxlZEZldGNoZXJMb2FkcywgZGVsZXRlZEZldGNoZXJzLCBmZXRjaExvYWRNYXRjaGVzLCBmZXRjaFJlZGlyZWN0SWRzLCByb3V0ZXNUb1VzZSwgYmFzZW5hbWUsIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgbGV0IGFjdGlvblJlc3VsdCA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgPyBpc0Vycm9yUmVzdWx0KHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0pID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5lcnJvciA6IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YSA6IHVuZGVmaW5lZDtcbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuICAvLyBQaWNrIG5hdmlnYXRpb24gbWF0Y2hlcyB0aGF0IGFyZSBuZXQtbmV3IG9yIHF1YWxpZnkgZm9yIHJldmFsaWRhdGlvblxuICBsZXQgYm91bmRhcnlJZCA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMF0gOiB1bmRlZmluZWQ7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBib3VuZGFyeUlkID8gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCkgOiBtYXRjaGVzO1xuICAvLyBEb24ndCByZXZhbGlkYXRlIGxvYWRlcnMgYnkgZGVmYXVsdCBhZnRlciBhY3Rpb24gNHh4LzV4eCByZXNwb25zZXNcbiAgLy8gd2hlbiB0aGUgZmxhZyBpcyBlbmFibGVkLiAgVGhleSBjYW4gc3RpbGwgb3B0LWludG8gcmV2YWxpZGF0aW9uIHZpYVxuICAvLyBgc2hvdWxkUmV2YWxpZGF0ZWAgdmlhIGBhY3Rpb25SZXN1bHRgXG4gIGxldCBhY3Rpb25TdGF0dXMgPSBwZW5kaW5nQWN0aW9uUmVzdWx0ID8gcGVuZGluZ0FjdGlvblJlc3VsdFsxXS5zdGF0dXNDb2RlIDogdW5kZWZpbmVkO1xuICBsZXQgc2hvdWxkU2tpcFJldmFsaWRhdGlvbiA9IHNraXBBY3Rpb25FcnJvclJldmFsaWRhdGlvbiAmJiBhY3Rpb25TdGF0dXMgJiYgYWN0aW9uU3RhdHVzID49IDQwMDtcbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIHJvdXRlXG4gICAgfSA9IG1hdGNoO1xuICAgIGlmIChyb3V0ZS5sYXp5KSB7XG4gICAgICAvLyBXZSBoYXZlbid0IGxvYWRlZCB0aGlzIHJvdXRlIHlldCBzbyB3ZSBkb24ndCBrbm93IGlmIGl0J3MgZ290IGEgbG9hZGVyIVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChyb3V0ZS5sb2FkZXIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoaXNJbml0aWFsTG9hZCkge1xuICAgICAgaWYgKHR5cGVvZiByb3V0ZS5sb2FkZXIgIT09IFwiZnVuY3Rpb25cIiB8fCByb3V0ZS5sb2FkZXIuaHlkcmF0ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmIChcbiAgICAgIC8vIERvbid0IHJlLXJ1biBpZiB0aGUgbG9hZGVyIHJhbiBhbmQgdGhyZXcgYW4gZXJyb3JcbiAgICAgICFzdGF0ZS5lcnJvcnMgfHwgc3RhdGUuZXJyb3JzW3JvdXRlLmlkXSA9PT0gdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoaXNOZXdMb2FkZXIoc3RhdGUubG9hZGVyRGF0YSwgc3RhdGUubWF0Y2hlc1tpbmRleF0sIG1hdGNoKSB8fCBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKGlkID0+IGlkID09PSBtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBUaGlzIGlzIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciB3aGVuIHdlIHJldmFsaWRhdGUuICBJZiB0aGUgcm91dGVcbiAgICAvLyBwcm92aWRlcyBpdCdzIG93biBpbXBsZW1lbnRhdGlvbiwgdGhlbiB3ZSBnaXZlIHRoZW0gZnVsbCBjb250cm9sIGJ1dFxuICAgIC8vIHByb3ZpZGUgdGhpcyB2YWx1ZSBzbyB0aGV5IGNhbiBsZXZlcmFnZSBpdCBpZiBuZWVkZWQgYWZ0ZXIgdGhleSBjaGVja1xuICAgIC8vIHRoZWlyIG93biBzcGVjaWZpYyB1c2UgY2FzZXNcbiAgICBsZXQgY3VycmVudFJvdXRlTWF0Y2ggPSBzdGF0ZS5tYXRjaGVzW2luZGV4XTtcbiAgICBsZXQgbmV4dFJvdXRlTWF0Y2ggPSBtYXRjaDtcbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXNcbiAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICB1bnN0YWJsZV9hY3Rpb25TdGF0dXM6IGFjdGlvblN0YXR1cyxcbiAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBzaG91bGRTa2lwUmV2YWxpZGF0aW9uID8gZmFsc2UgOlxuICAgICAgLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZVxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCB8fCBjdXJyZW50VXJsLnBhdGhuYW1lICsgY3VycmVudFVybC5zZWFyY2ggPT09IG5leHRVcmwucGF0aG5hbWUgKyBuZXh0VXJsLnNlYXJjaCB8fFxuICAgICAgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgICAgIGN1cnJlbnRVcmwuc2VhcmNoICE9PSBuZXh0VXJsLnNlYXJjaCB8fCBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudFJvdXRlTWF0Y2gsIG5leHRSb3V0ZU1hdGNoKVxuICAgIH0pKTtcbiAgfSk7XG4gIC8vIFBpY2sgZmV0Y2hlci5sb2FkcyB0aGF0IG5lZWQgdG8gYmUgcmV2YWxpZGF0ZWRcbiAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXJzID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoZiwga2V5KSA9PiB7XG4gICAgLy8gRG9uJ3QgcmV2YWxpZGF0ZTpcbiAgICAvLyAgLSBvbiBpbml0aWFsIGxvYWQgKHNob3VsZG4ndCBiZSBhbnkgZmV0Y2hlcnMgdGhlbiBhbnl3YXkpXG4gICAgLy8gIC0gaWYgZmV0Y2hlciB3b24ndCBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlclxuICAgIC8vICAgIC0gbm8gbG9uZ2VyIG1hdGNoZXMgdGhlIFVSTCAodjdfZmV0Y2hlclBlcnNpc3Q9ZmFsc2UpXG4gICAgLy8gICAgLSB3YXMgdW5tb3VudGVkIGJ1dCBwZXJzaXN0ZWQgZHVlIHRvIHY3X2ZldGNoZXJQZXJzaXN0PXRydWVcbiAgICBpZiAoaXNJbml0aWFsTG9hZCB8fCAhbWF0Y2hlcy5zb21lKG0gPT4gbS5yb3V0ZS5pZCA9PT0gZi5yb3V0ZUlkKSB8fCBkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGZldGNoZXJNYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIGYucGF0aCwgYmFzZW5hbWUpO1xuICAgIC8vIElmIHRoZSBmZXRjaGVyIHBhdGggbm8gbG9uZ2VyIG1hdGNoZXMsIHB1c2ggaXQgaW4gd2l0aCBudWxsIG1hdGNoZXMgc29cbiAgICAvLyB3ZSBjYW4gdHJpZ2dlciBhIDQwNCBpbiBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEuICBOb3RlIHRoaXMgaXNcbiAgICAvLyBjdXJyZW50bHkgb25seSBhIHVzZS1jYXNlIGZvciBSZW1peCBITVIgd2hlcmUgdGhlIHJvdXRlIHRyZWUgY2FuIGNoYW5nZVxuICAgIC8vIGF0IHJ1bnRpbWUgYW5kIHJlbW92ZSBhIHJvdXRlIHByZXZpb3VzbHkgbG9hZGVkIHZpYSBhIGZldGNoZXJcbiAgICBpZiAoIWZldGNoZXJNYXRjaGVzKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHtcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkOiBmLnJvdXRlSWQsXG4gICAgICAgIHBhdGg6IGYucGF0aCxcbiAgICAgICAgbWF0Y2hlczogbnVsbCxcbiAgICAgICAgbWF0Y2g6IG51bGwsXG4gICAgICAgIGNvbnRyb2xsZXI6IG51bGxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXZhbGlkYXRpbmcgZmV0Y2hlcnMgYXJlIGRlY291cGxlZCBmcm9tIHRoZSByb3V0ZSBtYXRjaGVzIHNpbmNlIHRoZXlcbiAgICAvLyBsb2FkIGZyb20gYSBzdGF0aWMgaHJlZi4gIFRoZXkgcmV2YWxpZGF0ZSBiYXNlZCBvbiBleHBsaWNpdCByZXZhbGlkYXRpb25cbiAgICAvLyAoc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0b3IsIG9yIFgtUmVtaXgtUmV2YWxpZGF0ZSlcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBmZXRjaGVyTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChmZXRjaGVyTWF0Y2hlcywgZi5wYXRoKTtcbiAgICBsZXQgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIGlmIChmZXRjaFJlZGlyZWN0SWRzLmhhcyhrZXkpKSB7XG4gICAgICAvLyBOZXZlciB0cmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFuIGFjdGl2ZWx5IHJlZGlyZWN0aW5nIGZldGNoZXJcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAvLyBBbHdheXMgcmV2YWxpZGF0ZSBpZiB0aGUgZmV0Y2hlciB3YXMgY2FuY2VsbGVkXG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSAhPT0gXCJpZGxlXCIgJiYgZmV0Y2hlci5kYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHRoZSBmZXRjaGVyIGhhc24ndCBldmVyIGNvbXBsZXRlZCBsb2FkaW5nIHlldCwgdGhlbiB0aGlzIGlzbid0IGFcbiAgICAgIC8vIHJldmFsaWRhdGlvbiwgaXQgd291bGQganVzdCBiZSBhIGJyYW5kIG5ldyBsb2FkIGlmIGFuIGV4cGxpY2l0XG4gICAgICAvLyByZXZhbGlkYXRpb24gaXMgcmVxdWlyZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBpc1JldmFsaWRhdGlvblJlcXVpcmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UgZmFsbCBiYWNrIG9uIGFueSB1c2VyLWRlZmluZWQgc2hvdWxkUmV2YWxpZGF0ZSwgZGVmYXVsdGluZ1xuICAgICAgLy8gdG8gZXhwbGljaXQgcmV2YWxpZGF0aW9ucyBvbmx5XG4gICAgICBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmZXRjaGVyTWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgY3VycmVudFBhcmFtczogc3RhdGUubWF0Y2hlc1tzdGF0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgbmV4dFVybCxcbiAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtc1xuICAgICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgICBhY3Rpb25SZXN1bHQsXG4gICAgICAgIHVuc3RhYmxlX2FjdGlvblN0YXR1czogYWN0aW9uU3RhdHVzLFxuICAgICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTogc2hvdWxkU2tpcFJldmFsaWRhdGlvbiA/IGZhbHNlIDogaXNSZXZhbGlkYXRpb25SZXF1aXJlZFxuICAgICAgfSkpO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7XG4gICAgICAgIGtleSxcbiAgICAgICAgcm91dGVJZDogZi5yb3V0ZUlkLFxuICAgICAgICBwYXRoOiBmLnBhdGgsXG4gICAgICAgIG1hdGNoZXM6IGZldGNoZXJNYXRjaGVzLFxuICAgICAgICBtYXRjaDogZmV0Y2hlck1hdGNoLFxuICAgICAgICBjb250cm9sbGVyOiBuZXcgQWJvcnRDb250cm9sbGVyKClcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBbbmF2aWdhdGlvbk1hdGNoZXMsIHJldmFsaWRhdGluZ0ZldGNoZXJzXTtcbn1cbmZ1bmN0aW9uIGlzTmV3TG9hZGVyKGN1cnJlbnRMb2FkZXJEYXRhLCBjdXJyZW50TWF0Y2gsIG1hdGNoKSB7XG4gIGxldCBpc05ldyA9XG4gIC8vIFthXSAtPiBbYSwgYl1cbiAgIWN1cnJlbnRNYXRjaCB8fFxuICAvLyBbYSwgYl0gLT4gW2EsIGNdXG4gIG1hdGNoLnJvdXRlLmlkICE9PSBjdXJyZW50TWF0Y2gucm91dGUuaWQ7XG4gIC8vIEhhbmRsZSB0aGUgY2FzZSB0aGF0IHdlIGRvbid0IGhhdmUgZGF0YSBmb3IgYSByZS11c2VkIHJvdXRlLCBwb3RlbnRpYWxseVxuICAvLyBmcm9tIGEgcHJpb3IgZXJyb3Igb3IgZnJvbSBhIGNhbmNlbGxlZCBwZW5kaW5nIGRlZmVycmVkXG4gIGxldCBpc01pc3NpbmdEYXRhID0gY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQ7XG4gIC8vIEFsd2F5cyBsb2FkIGlmIHRoaXMgaXMgYSBuZXQtbmV3IHJvdXRlIG9yIHdlIGRvbid0IHlldCBoYXZlIGRhdGFcbiAgcmV0dXJuIGlzTmV3IHx8IGlzTWlzc2luZ0RhdGE7XG59XG5mdW5jdGlvbiBpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgY3VycmVudFBhdGggPSBjdXJyZW50TWF0Y2gucm91dGUucGF0aDtcbiAgcmV0dXJuIChcbiAgICAvLyBwYXJhbSBjaGFuZ2UgZm9yIHRoaXMgbWF0Y2gsIC91c2Vycy8xMjMgLT4gL3VzZXJzLzQ1NlxuICAgIGN1cnJlbnRNYXRjaC5wYXRobmFtZSAhPT0gbWF0Y2gucGF0aG5hbWUgfHxcbiAgICAvLyBzcGxhdCBwYXJhbSBjaGFuZ2VkLCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiBtYXRjaC5wYXRoXG4gICAgLy8gZS5nLiAvZmlsZXMvaW1hZ2VzL2F2YXRhci5qcGcgLT4gZmlsZXMvZmluYW5jZXMueGxzXG4gICAgY3VycmVudFBhdGggIT0gbnVsbCAmJiBjdXJyZW50UGF0aC5lbmRzV2l0aChcIipcIikgJiYgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl1cbiAgKTtcbn1cbmZ1bmN0aW9uIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobG9hZGVyTWF0Y2gsIGFyZykge1xuICBpZiAobG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZSkge1xuICAgIGxldCByb3V0ZUNob2ljZSA9IGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUoYXJnKTtcbiAgICBpZiAodHlwZW9mIHJvdXRlQ2hvaWNlID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHJvdXRlQ2hvaWNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJnLmRlZmF1bHRTaG91bGRSZXZhbGlkYXRlO1xufVxuLyoqXG4gKiBFeGVjdXRlIHJvdXRlLmxhenkoKSBtZXRob2RzIHRvIGxhemlseSBsb2FkIHJvdXRlIG1vZHVsZXMgKGxvYWRlciwgYWN0aW9uLFxuICogc2hvdWxkUmV2YWxpZGF0ZSkgYW5kIHVwZGF0ZSB0aGUgcm91dGVNYW5pZmVzdCBpbiBwbGFjZSB3aGljaCBzaGFyZXMgb2JqZWN0c1xuICogd2l0aCBkYXRhUm91dGVzIHNvIHRob3NlIGdldCB1cGRhdGVkIGFzIHdlbGwuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGxvYWRMYXp5Um91dGVNb2R1bGUocm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpIHtcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBsYXp5Um91dGUgPSBhd2FpdCByb3V0ZS5sYXp5KCk7XG4gIC8vIElmIHRoZSBsYXp5IHJvdXRlIGZ1bmN0aW9uIHdhcyBleGVjdXRlZCBhbmQgcmVtb3ZlZCBieSBhbm90aGVyIHBhcmFsbGVsXG4gIC8vIGNhbGwgdGhlbiB3ZSBjYW4gcmV0dXJuIC0gZmlyc3QgbGF6eSgpIHRvIGZpbmlzaCB3aW5zIGJlY2F1c2UgdGhlIHJldHVyblxuICAvLyB2YWx1ZSBvZiBsYXp5IGlzIGV4cGVjdGVkIHRvIGJlIHN0YXRpY1xuICBpZiAoIXJvdXRlLmxhenkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHJvdXRlVG9VcGRhdGUgPSBtYW5pZmVzdFtyb3V0ZS5pZF07XG4gIGludmFyaWFudChyb3V0ZVRvVXBkYXRlLCBcIk5vIHJvdXRlIGZvdW5kIGluIG1hbmlmZXN0XCIpO1xuICAvLyBVcGRhdGUgdGhlIHJvdXRlIGluIHBsYWNlLiAgVGhpcyBzaG91bGQgYmUgc2FmZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gd2F5XG4gIC8vIHdlIGNvdWxkIHlldCBiZSBzaXR0aW5nIG9uIHRoaXMgcm91dGUgYXMgd2UgY2FuJ3QgZ2V0IHRoZXJlIHdpdGhvdXRcbiAgLy8gcmVzb2x2aW5nIGxhenkoKSBmaXJzdC5cbiAgLy9cbiAgLy8gVGhpcyBpcyBkaWZmZXJlbnQgdGhhbiB0aGUgSE1SIFwidXBkYXRlXCIgdXNlLWNhc2Ugd2hlcmUgd2UgbWF5IGFjdGl2ZWx5IGJlXG4gIC8vIG9uIHRoZSByb3V0ZSBiZWluZyB1cGRhdGVkLiAgVGhlIG1haW4gY29uY2VybiBib2lscyBkb3duIHRvIFwiZG9lcyB0aGlzXG4gIC8vIG11dGF0aW9uIGFmZmVjdCBhbnkgb25nb2luZyBuYXZpZ2F0aW9ucyBvciBhbnkgY3VycmVudCBzdGF0ZS5tYXRjaGVzXG4gIC8vIHZhbHVlcz9cIi4gIElmIG5vdCwgaXQgc2hvdWxkIGJlIHNhZmUgdG8gdXBkYXRlIGluIHBsYWNlLlxuICBsZXQgcm91dGVVcGRhdGVzID0ge307XG4gIGZvciAobGV0IGxhenlSb3V0ZVByb3BlcnR5IGluIGxhenlSb3V0ZSkge1xuICAgIGxldCBzdGF0aWNSb3V0ZVZhbHVlID0gcm91dGVUb1VwZGF0ZVtsYXp5Um91dGVQcm9wZXJ0eV07XG4gICAgbGV0IGlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCA9IHN0YXRpY1JvdXRlVmFsdWUgIT09IHVuZGVmaW5lZCAmJlxuICAgIC8vIFRoaXMgcHJvcGVydHkgaXNuJ3Qgc3RhdGljIHNpbmNlIGl0IHNob3VsZCBhbHdheXMgYmUgdXBkYXRlZCBiYXNlZFxuICAgIC8vIG9uIHRoZSByb3V0ZSB1cGRhdGVzXG4gICAgbGF6eVJvdXRlUHJvcGVydHkgIT09IFwiaGFzRXJyb3JCb3VuZGFyeVwiO1xuICAgIHdhcm5pbmcoIWlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCwgXCJSb3V0ZSBcXFwiXCIgKyByb3V0ZVRvVXBkYXRlLmlkICsgXCJcXFwiIGhhcyBhIHN0YXRpYyBwcm9wZXJ0eSBcXFwiXCIgKyBsYXp5Um91dGVQcm9wZXJ0eSArIFwiXFxcIiBcIiArIFwiZGVmaW5lZCBidXQgaXRzIGxhenkgZnVuY3Rpb24gaXMgYWxzbyByZXR1cm5pbmcgYSB2YWx1ZSBmb3IgdGhpcyBwcm9wZXJ0eS4gXCIgKyAoXCJUaGUgbGF6eSByb3V0ZSBwcm9wZXJ0eSBcXFwiXCIgKyBsYXp5Um91dGVQcm9wZXJ0eSArIFwiXFxcIiB3aWxsIGJlIGlnbm9yZWQuXCIpKTtcbiAgICBpZiAoIWlzUHJvcGVydHlTdGF0aWNhbGx5RGVmaW5lZCAmJiAhaW1tdXRhYmxlUm91dGVLZXlzLmhhcyhsYXp5Um91dGVQcm9wZXJ0eSkpIHtcbiAgICAgIHJvdXRlVXBkYXRlc1tsYXp5Um91dGVQcm9wZXJ0eV0gPSBsYXp5Um91dGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIH1cbiAgfVxuICAvLyBNdXRhdGUgdGhlIHJvdXRlIHdpdGggdGhlIHByb3ZpZGVkIHVwZGF0ZXMuICBEbyB0aGlzIGZpcnN0IHNvIHdlIHBhc3NcbiAgLy8gdGhlIHVwZGF0ZWQgdmVyc2lvbiB0byBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgT2JqZWN0LmFzc2lnbihyb3V0ZVRvVXBkYXRlLCByb3V0ZVVwZGF0ZXMpO1xuICAvLyBNdXRhdGUgdGhlIGBoYXNFcnJvckJvdW5kYXJ5YCBwcm9wZXJ0eSBvbiB0aGUgcm91dGUgYmFzZWQgb24gdGhlIHJvdXRlXG4gIC8vIHVwZGF0ZXMgYW5kIHJlbW92ZSB0aGUgYGxhenlgIGZ1bmN0aW9uIHNvIHdlIGRvbid0IHJlc29sdmUgdGhlIGxhenlcbiAgLy8gcm91dGUgYWdhaW4uXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgX2V4dGVuZHMoe30sIG1hcFJvdXRlUHJvcGVydGllcyhyb3V0ZVRvVXBkYXRlKSwge1xuICAgIGxhenk6IHVuZGVmaW5lZFxuICB9KSk7XG59XG4vLyBEZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIGBkYXRhU3RyYXRlZ3lgIHdoaWNoIGZldGNoZXMgYWxsIGxvYWRlcnMgaW4gcGFyYWxsZWxcbmZ1bmN0aW9uIGRlZmF1bHREYXRhU3RyYXRlZ3kob3B0cykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwob3B0cy5tYXRjaGVzLm1hcChtID0+IG0ucmVzb2x2ZSgpKSk7XG59XG5hc3luYyBmdW5jdGlvbiBjYWxsRGF0YVN0cmF0ZWd5SW1wbChkYXRhU3RyYXRlZ3lJbXBsLCB0eXBlLCByZXF1ZXN0LCBtYXRjaGVzVG9Mb2FkLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCByZXF1ZXN0Q29udGV4dCkge1xuICBsZXQgcm91dGVJZHNUb0xvYWQgPSBtYXRjaGVzVG9Mb2FkLnJlZHVjZSgoYWNjLCBtKSA9PiBhY2MuYWRkKG0ucm91dGUuaWQpLCBuZXcgU2V0KCkpO1xuICBsZXQgbG9hZGVkTWF0Y2hlcyA9IG5ldyBTZXQoKTtcbiAgLy8gU2VuZCBhbGwgbWF0Y2hlcyBoZXJlIHRvIGFsbG93IGZvciBhIG1pZGRsZXdhcmUtdHlwZSBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gaGFuZGxlciB3aWxsIGJlIGEgbm8tb3AgZm9yIHVubmVlZGVkIHJvdXRlcyBhbmQgd2UgZmlsdGVyIHRob3NlIHJlc3VsdHNcbiAgLy8gYmFjayBvdXQgYmVsb3cuXG4gIGxldCByZXN1bHRzID0gYXdhaXQgZGF0YVN0cmF0ZWd5SW1wbCh7XG4gICAgbWF0Y2hlczogbWF0Y2hlcy5tYXAobWF0Y2ggPT4ge1xuICAgICAgbGV0IHNob3VsZExvYWQgPSByb3V0ZUlkc1RvTG9hZC5oYXMobWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gYHJlc29sdmVgIGVuY2Fwc3VsYXRlcyB0aGUgcm91dGUubGF6eSwgZXhlY3V0aW5nIHRoZVxuICAgICAgLy8gbG9hZGVyL2FjdGlvbiwgYW5kIG1hcHBpbmcgcmV0dXJuIHZhbHVlcy90aHJvd24gZXJyb3JzIHRvIGFcbiAgICAgIC8vIEhhbmRsZXJSZXN1bHQuICBVc2VycyBjYW4gcGFzcyBhIGNhbGxiYWNrIHRvIHRha2UgZmluZS1ncmFpbmVkIGNvbnRyb2xcbiAgICAgIC8vIG92ZXIgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbG9hZGVyL2FjdGlvblxuICAgICAgbGV0IHJlc29sdmUgPSBoYW5kbGVyT3ZlcnJpZGUgPT4ge1xuICAgICAgICBsb2FkZWRNYXRjaGVzLmFkZChtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICAgIHJldHVybiBzaG91bGRMb2FkID8gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBoYW5kbGVyT3ZlcnJpZGUsIHJlcXVlc3RDb250ZXh0KSA6IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICAgIHJlc3VsdDogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgbWF0Y2gsIHtcbiAgICAgICAgc2hvdWxkTG9hZCxcbiAgICAgICAgcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSksXG4gICAgcmVxdWVzdCxcbiAgICBwYXJhbXM6IG1hdGNoZXNbMF0ucGFyYW1zLFxuICAgIGNvbnRleHQ6IHJlcXVlc3RDb250ZXh0XG4gIH0pO1xuICAvLyBUaHJvdyBpZiBhbnkgbG9hZFJvdXRlIGltcGxlbWVudGF0aW9ucyBub3QgY2FsbGVkIHNpbmNlIHRoZXkgYXJlIHdoYXRcbiAgLy8gZW5zdXJlcyBhIHJvdXRlIGlzIGZ1bGx5IGxvYWRlZFxuICBtYXRjaGVzLmZvckVhY2gobSA9PiBpbnZhcmlhbnQobG9hZGVkTWF0Y2hlcy5oYXMobS5yb3V0ZS5pZCksIFwiYG1hdGNoLnJlc29sdmUoKWAgd2FzIG5vdCBjYWxsZWQgZm9yIHJvdXRlIGlkIFxcXCJcIiArIG0ucm91dGUuaWQgKyBcIlxcXCIuIFwiICsgXCJZb3UgbXVzdCBjYWxsIGBtYXRjaC5yZXNvbHZlKClgIG9uIGV2ZXJ5IG1hdGNoIHBhc3NlZCB0byBcIiArIFwiYGRhdGFTdHJhdGVneWAgdG8gZW5zdXJlIGFsbCByb3V0ZXMgYXJlIHByb3Blcmx5IGxvYWRlZC5cIikpO1xuICAvLyBGaWx0ZXIgb3V0IGFueSBtaWRkbGV3YXJlLW9ubHkgbWF0Y2hlcyBmb3Igd2hpY2ggd2UgZGlkbid0IG5lZWQgdG8gcnVuIGhhbmRsZXJzXG4gIHJldHVybiByZXN1bHRzLmZpbHRlcigoXywgaSkgPT4gcm91dGVJZHNUb0xvYWQuaGFzKG1hdGNoZXNbaV0ucm91dGUuaWQpKTtcbn1cbi8vIERlZmF1bHQgbG9naWMgZm9yIGNhbGxpbmcgYSBsb2FkZXIvYWN0aW9uIGlzIHRoZSB1c2VyIGhhcyBubyBzcGVjaWZpZWQgYSBkYXRhU3RyYXRlZ3lcbmFzeW5jIGZ1bmN0aW9uIGNhbGxMb2FkZXJPckFjdGlvbih0eXBlLCByZXF1ZXN0LCBtYXRjaCwgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgaGFuZGxlck92ZXJyaWRlLCBzdGF0aWNDb250ZXh0KSB7XG4gIGxldCByZXN1bHQ7XG4gIGxldCBvblJlamVjdDtcbiAgbGV0IHJ1bkhhbmRsZXIgPSBoYW5kbGVyID0+IHtcbiAgICAvLyBTZXR1cCBhIHByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCBzbyB0aGF0IGFib3J0IHNpZ25hbHMgc2hvcnQgY2lyY3VpdFxuICAgIGxldCByZWplY3Q7XG4gICAgLy8gVGhpcyB3aWxsIG5ldmVyIHJlc29sdmUgc28gc2FmZSB0byB0eXBlIGl0IGFzIFByb21pc2U8SGFuZGxlclJlc3VsdD4gdG9cbiAgICAvLyBzYXRpc2Z5IHRoZSBmdW5jdGlvbiByZXR1cm4gdmFsdWVcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICBsZXQgYWN0dWFsSGFuZGxlciA9IGN0eCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiWW91IGNhbm5vdCBjYWxsIHRoZSBoYW5kbGVyIGZvciBhIHJvdXRlIHdoaWNoIGRlZmluZXMgYSBib29sZWFuIFwiICsgKFwiXFxcIlwiICsgdHlwZSArIFwiXFxcIiBbcm91dGVJZDogXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXVwiKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhbmRsZXIoe1xuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgICAgY29udGV4dDogc3RhdGljQ29udGV4dFxuICAgICAgfSwgLi4uKGN0eCAhPT0gdW5kZWZpbmVkID8gW2N0eF0gOiBbXSkpO1xuICAgIH07XG4gICAgbGV0IGhhbmRsZXJQcm9taXNlO1xuICAgIGlmIChoYW5kbGVyT3ZlcnJpZGUpIHtcbiAgICAgIGhhbmRsZXJQcm9taXNlID0gaGFuZGxlck92ZXJyaWRlKGN0eCA9PiBhY3R1YWxIYW5kbGVyKGN0eCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoYW5kbGVyUHJvbWlzZSA9IChhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbGV0IHZhbCA9IGF3YWl0IGFjdHVhbEhhbmRsZXIoKTtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJkYXRhXCIsXG4gICAgICAgICAgICByZXN1bHQ6IHZhbFxuICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgcmVzdWx0OiBlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfSkoKTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmFjZShbaGFuZGxlclByb21pc2UsIGFib3J0UHJvbWlzZV0pO1xuICB9O1xuICB0cnkge1xuICAgIGxldCBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxhenkpIHtcbiAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgIC8vIFJ1biBzdGF0aWNhbGx5IGRlZmluZWQgaGFuZGxlciBpbiBwYXJhbGxlbCB3aXRoIGxhenkoKVxuICAgICAgICBsZXQgaGFuZGxlckVycm9yO1xuICAgICAgICBsZXQgW3ZhbHVlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgLy8gSWYgdGhlIGhhbmRsZXIgdGhyb3dzLCBkb24ndCBsZXQgaXQgaW1tZWRpYXRlbHkgYnViYmxlIG91dCxcbiAgICAgICAgLy8gc2luY2Ugd2UgbmVlZCB0byBsZXQgdGhlIGxhenkoKSBleGVjdXRpb24gZmluaXNoIHNvIHdlIGtub3cgaWYgdGhpc1xuICAgICAgICAvLyByb3V0ZSBoYXMgYSBib3VuZGFyeSB0aGF0IGNhbiBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgIHJ1bkhhbmRsZXIoaGFuZGxlcikuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgaGFuZGxlckVycm9yID0gZTtcbiAgICAgICAgfSksIGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpXSk7XG4gICAgICAgIGlmIChoYW5kbGVyRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRocm93IGhhbmRsZXJFcnJvcjtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvYWQgbGF6eSByb3V0ZSBtb2R1bGUsIHRoZW4gcnVuIGFueSByZXR1cm5lZCBoYW5kbGVyXG4gICAgICAgIGF3YWl0IGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpO1xuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW5zIGV2ZW4gaWYgd2UgZ290IGludGVycnVwdGVkIHRvIG1haW50YWluIGNvbnNpc3RlbmN5XG4gICAgICAgICAgLy8gd2l0aCB1bi1hYm9ydGFibGUgYmVoYXZpb3Igb2YgaGFuZGxlciBleGVjdXRpb24gb24gbm9uLWxhenkgb3JcbiAgICAgICAgICAvLyBwcmV2aW91c2x5LWxhenktbG9hZGVkIHJvdXRlc1xuICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJhY3Rpb25cIikge1xuICAgICAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgICBsZXQgcGF0aG5hbWUgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgICByb3V0ZUlkOiBtYXRjaC5yb3V0ZS5pZFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGxhenkoKSByb3V0ZSBoYXMgbm8gbG9hZGVyIHRvIHJ1bi4gIFNob3J0IGNpcmN1aXQgaGVyZSBzbyB3ZSBkb24ndFxuICAgICAgICAgIC8vIGhpdCB0aGUgaW52YXJpYW50IGJlbG93IHRoYXQgZXJyb3JzIG9uIHJldHVybmluZyB1bmRlZmluZWQuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgICAgIHJlc3VsdDogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICAgIGludmFyaWFudChyZXN1bHQucmVzdWx0ICE9PSB1bmRlZmluZWQsIFwiWW91IGRlZmluZWQgXCIgKyAodHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCIpICsgXCIgZm9yIHJvdXRlIFwiICsgKFwiXFxcIlwiICsgbWF0Y2gucm91dGUuaWQgKyBcIlxcXCIgYnV0IGRpZG4ndCByZXR1cm4gYW55dGhpbmcgZnJvbSB5b3VyIGBcIiArIHR5cGUgKyBcImAgXCIpICsgXCJmdW5jdGlvbi4gUGxlYXNlIHJldHVybiBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBXZSBzaG91bGQgYWxyZWFkeSBiZSBjYXRjaGluZyBhbmQgY29udmVydGluZyBub3JtYWwgaGFuZGxlciBleGVjdXRpb25zIHRvXG4gICAgLy8gSGFuZGxlclJlc3VsdHMgYW5kIHJldHVybmluZyB0aGVtLCBzbyBhbnl0aGluZyB0aGF0IHRocm93cyBoZXJlIGlzIGFuXG4gICAgLy8gdW5leHBlY3RlZCBlcnJvciB3ZSBzdGlsbCBuZWVkIHRvIHdyYXBcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgIHJlc3VsdDogZVxuICAgIH07XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuYXN5bmMgZnVuY3Rpb24gY29udmVydEhhbmRsZXJSZXN1bHRUb0RhdGFSZXN1bHQoaGFuZGxlclJlc3VsdCkge1xuICBsZXQge1xuICAgIHJlc3VsdCxcbiAgICB0eXBlLFxuICAgIHN0YXR1c1xuICB9ID0gaGFuZGxlclJlc3VsdDtcbiAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIGxldCBkYXRhO1xuICAgIHRyeSB7XG4gICAgICBsZXQgY29udGVudFR5cGUgPSByZXN1bHQuaGVhZGVycy5nZXQoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAvLyBDaGVjayBiZXR3ZWVuIHdvcmQgYm91bmRhcmllcyBpbnN0ZWFkIG9mIHN0YXJ0c1dpdGgoKSBkdWUgdG8gdGhlIGxhc3RcbiAgICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIC9cXGJhcHBsaWNhdGlvblxcL2pzb25cXGIvLnRlc3QoY29udGVudFR5cGUpKSB7XG4gICAgICAgIGlmIChyZXN1bHQuYm9keSA9PSBudWxsKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IG5ldyBFcnJvclJlc3BvbnNlSW1wbChyZXN1bHQuc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgIH07XG4gIH1cbiAgaWYgKHR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgIGVycm9yOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQpID8gcmVzdWx0LnN0YXR1cyA6IHN0YXR1c1xuICAgIH07XG4gIH1cbiAgaWYgKGlzRGVmZXJyZWREYXRhKHJlc3VsdCkpIHtcbiAgICB2YXIgX3Jlc3VsdCRpbml0LCBfcmVzdWx0JGluaXQyO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiBSZXN1bHRUeXBlLmRlZmVycmVkLFxuICAgICAgZGVmZXJyZWREYXRhOiByZXN1bHQsXG4gICAgICBzdGF0dXNDb2RlOiAoX3Jlc3VsdCRpbml0ID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogKChfcmVzdWx0JGluaXQyID0gcmVzdWx0LmluaXQpID09IG51bGwgPyB2b2lkIDAgOiBfcmVzdWx0JGluaXQyLmhlYWRlcnMpICYmIG5ldyBIZWFkZXJzKHJlc3VsdC5pbml0LmhlYWRlcnMpXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQsXG4gICAgc3RhdHVzQ29kZTogc3RhdHVzXG4gIH07XG59XG4vLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG5mdW5jdGlvbiBub3JtYWxpemVSZWxhdGl2ZVJvdXRpbmdSZWRpcmVjdFJlc3BvbnNlKHJlc3BvbnNlLCByZXF1ZXN0LCByb3V0ZUlkLCBtYXRjaGVzLCBiYXNlbmFtZSwgdjdfcmVsYXRpdmVTcGxhdFBhdGgpIHtcbiAgbGV0IGxvY2F0aW9uID0gcmVzcG9uc2UuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgaW52YXJpYW50KGxvY2F0aW9uLCBcIlJlZGlyZWN0cyByZXR1cm5lZC90aHJvd24gZnJvbSBsb2FkZXJzL2FjdGlvbnMgbXVzdCBoYXZlIGEgTG9jYXRpb24gaGVhZGVyXCIpO1xuICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgIGxldCB0cmltbWVkTWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpO1xuICAgIGxvY2F0aW9uID0gbm9ybWFsaXplVG8obmV3IFVSTChyZXF1ZXN0LnVybCksIHRyaW1tZWRNYXRjaGVzLCBiYXNlbmFtZSwgdHJ1ZSwgbG9jYXRpb24sIHY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICByZXNwb25zZS5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgfVxuICByZXR1cm4gcmVzcG9uc2U7XG59XG5mdW5jdGlvbiBub3JtYWxpemVSZWRpcmVjdExvY2F0aW9uKGxvY2F0aW9uLCBjdXJyZW50VXJsLCBiYXNlbmFtZSkge1xuICBpZiAoQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QobG9jYXRpb24pKSB7XG4gICAgLy8gU3RyaXAgb2ZmIHRoZSBwcm90b2NvbCtvcmlnaW4gZm9yIHNhbWUtb3JpZ2luICsgc2FtZS1iYXNlbmFtZSBhYnNvbHV0ZSByZWRpcmVjdHNcbiAgICBsZXQgbm9ybWFsaXplZExvY2F0aW9uID0gbG9jYXRpb247XG4gICAgbGV0IHVybCA9IG5vcm1hbGl6ZWRMb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyBub3JtYWxpemVkTG9jYXRpb24pIDogbmV3IFVSTChub3JtYWxpemVkTG9jYXRpb24pO1xuICAgIGxldCBpc1NhbWVCYXNlbmFtZSA9IHN0cmlwQmFzZW5hbWUodXJsLnBhdGhuYW1lLCBiYXNlbmFtZSkgIT0gbnVsbDtcbiAgICBpZiAodXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgaXNTYW1lQmFzZW5hbWUpIHtcbiAgICAgIHJldHVybiB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoICsgdXJsLmhhc2g7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb2NhdGlvbjtcbn1cbi8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChoaXN0b3J5LCBsb2NhdGlvbiwgc2lnbmFsLCBzdWJtaXNzaW9uKSB7XG4gIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0ID0ge1xuICAgIHNpZ25hbFxuICB9O1xuICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1FbmNUeXBlXG4gICAgfSA9IHN1Ym1pc3Npb247XG4gICAgLy8gRGlkbid0IHRoaW5rIHdlIG5lZWRlZCB0aGlzIGJ1dCBpdCB0dXJucyBvdXQgdW5saWtlIG90aGVyIG1ldGhvZHMsIHBhdGNoXG4gICAgLy8gd29uJ3QgYmUgcHJvcGVybHkgbm9ybWFsaXplZCB0byB1cHBlcmNhc2UgYW5kIHJlc3VsdHMgaW4gYSA0MDUgZXJyb3IuXG4gICAgLy8gU2VlOiBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1tZXRob2RcbiAgICBpbml0Lm1ldGhvZCA9IGZvcm1NZXRob2QudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB7XG4gICAgICBpbml0LmhlYWRlcnMgPSBuZXcgSGVhZGVycyh7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IGZvcm1FbmNUeXBlXG4gICAgICB9KTtcbiAgICAgIGluaXQuYm9keSA9IEpTT04uc3RyaW5naWZ5KHN1Ym1pc3Npb24uanNvbik7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJ0ZXh0L3BsYWluXCIpIHtcbiAgICAgIC8vIENvbnRlbnQtVHlwZSBpcyBpbmZlcnJlZCAoaHR0cHM6Ly9mZXRjaC5zcGVjLndoYXR3Zy5vcmcvI2RvbS1yZXF1ZXN0KVxuICAgICAgaW5pdC5ib2R5ID0gc3VibWlzc2lvbi50ZXh0O1xuICAgIH0gZWxzZSBpZiAoZm9ybUVuY1R5cGUgPT09IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgJiYgc3VibWlzc2lvbi5mb3JtRGF0YSkge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhzdWJtaXNzaW9uLmZvcm1EYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLmZvcm1EYXRhO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFJlcXVlc3QodXJsLCBpbml0KTtcbn1cbmZ1bmN0aW9uIGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKSB7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNjb252ZXJ0aW5nLWFuLWVudHJ5LWxpc3QtdG8tYS1saXN0LW9mLW5hbWUtdmFsdWUtcGFpcnNcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUgOiB2YWx1ZS5uYW1lKTtcbiAgfVxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuZnVuY3Rpb24gY29udmVydFNlYXJjaFBhcmFtc1RvRm9ybURhdGEoc2VhcmNoUGFyYW1zKSB7XG4gIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2Ygc2VhcmNoUGFyYW1zLmVudHJpZXMoKSkge1xuICAgIGZvcm1EYXRhLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gZm9ybURhdGE7XG59XG5mdW5jdGlvbiBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgc2tpcExvYWRlckVycm9yQnViYmxpbmcpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgbGV0IHBlbmRpbmdFcnJvciA9IHBlbmRpbmdBY3Rpb25SZXN1bHQgJiYgaXNFcnJvclJlc3VsdChwZW5kaW5nQWN0aW9uUmVzdWx0WzFdKSA/IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZXJyb3IgOiB1bmRlZmluZWQ7XG4gIC8vIFByb2Nlc3MgbG9hZGVyIHJlc3VsdHMgaW50byBzdGF0ZS5sb2FkZXJEYXRhL3N0YXRlLmVycm9yc1xuICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICBsZXQgaWQgPSBtYXRjaGVzVG9Mb2FkW2luZGV4XS5yb3V0ZS5pZDtcbiAgICBpbnZhcmlhbnQoIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSwgXCJDYW5ub3QgaGFuZGxlIHJlZGlyZWN0IHJlc3VsdHMgaW4gcHJvY2Vzc0xvYWRlckRhdGFcIik7XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXJyb3IgPSBwZW5kaW5nRXJyb3I7XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGVycm9ycyA9IGVycm9ycyB8fCB7fTtcbiAgICAgIGlmIChza2lwTG9hZGVyRXJyb3JCdWJibGluZykge1xuICAgICAgICBlcnJvcnNbaWRdID0gZXJyb3I7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3JcbiAgICAgICAgLy8gYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2guICBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlc1xuICAgICAgICAvLyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICAgIGlmIChlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0gPT0gbnVsbCkge1xuICAgICAgICAgIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSA9IGVycm9yO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiYgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJiAhZm91bmRFcnJvcikge1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgICAgaWYgKHJlc3VsdC5zdGF0dXNDb2RlICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgICBzdGF0dXNDb2RlID0gcmVzdWx0LnN0YXR1c0NvZGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8vIElmIHdlIGRpZG4ndCBjb25zdW1lIHRoZSBwZW5kaW5nIGFjdGlvbiBlcnJvciAoaS5lLiwgYWxsIGxvYWRlcnNcbiAgLy8gcmVzb2x2ZWQpLCB0aGVuIGNvbnN1bWUgaXQgaGVyZS4gIEFsc28gY2xlYXIgb3V0IGFueSBsb2FkZXJEYXRhIGZvciB0aGVcbiAgLy8gdGhyb3dpbmcgcm91dGVcbiAgaWYgKHBlbmRpbmdFcnJvciAhPT0gdW5kZWZpbmVkICYmIHBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICBlcnJvcnMgPSB7XG4gICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdFcnJvclxuICAgIH07XG4gICAgbG9hZGVyRGF0YVtwZW5kaW5nQWN0aW9uUmVzdWx0WzBdXSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uUmVzdWx0LCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdBY3Rpb25SZXN1bHQsIGFjdGl2ZURlZmVycmVkcywgZmFsc2UgLy8gVGhpcyBtZXRob2QgaXMgb25seSBjYWxsZWQgY2xpZW50IHNpZGUgc28gd2UgYWx3YXlzIHdhbnQgdG8gYnViYmxlXG4gICk7XG4gIC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7XG4gICAgICBrZXksXG4gICAgICBtYXRjaCxcbiAgICAgIGNvbnRyb2xsZXJcbiAgICB9ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbaW5kZXhdO1xuICAgIGludmFyaWFudChmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLCBcIkRpZCBub3QgZmluZCBjb3JyZXNwb25kaW5nIGZldGNoZXIgcmVzdWx0XCIpO1xuICAgIGxldCByZXN1bHQgPSBmZXRjaGVyUmVzdWx0c1tpbmRleF07XG4gICAgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcbiAgICBpZiAoY29udHJvbGxlciAmJiBjb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBOb3RoaW5nIHRvIGRvIGZvciBhYm9ydGVkIGZldGNoZXJzXG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KHN0YXRlLm1hdGNoZXMsIG1hdGNoID09IG51bGwgPyB2b2lkIDAgOiBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBpZiAoIShlcnJvcnMgJiYgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdKSkge1xuICAgICAgICBlcnJvcnMgPSBfZXh0ZW5kcyh7fSwgZXJyb3JzLCB7XG4gICAgICAgICAgW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZXJyb3JcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICB9IGVsc2UgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCByZWRpcmVjdHMgc2hvdWxkIGdldCBwcm9jZXNzZWQgYWJvdmUsIGJ1dCB3ZVxuICAgICAgLy8ga2VlcCB0aGlzIHRvIHR5cGUgbmFycm93IHRvIGEgc3VjY2VzcyByZXN1bHQgaW4gdGhlIGVsc2VcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciByZXZhbGlkYXRpb24gcmVkaXJlY3RcIik7XG4gICAgfSBlbHNlIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFNob3VsZCBuZXZlciBnZXQgaGVyZSwgZGVmZXJyZWQgZGF0YSBzaG91bGQgYmUgYXdhaXRlZCBmb3IgZmV0Y2hlcnNcbiAgICAgIC8vIGluIHJlc29sdmVEZWZlcnJlZFJlc3VsdHNcbiAgICAgIGludmFyaWFudChmYWxzZSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZG9uZUZldGNoZXIgPSBnZXREb25lRmV0Y2hlcihyZXN1bHQuZGF0YSk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbG9hZGVyRGF0YSxcbiAgICBlcnJvcnNcbiAgfTtcbn1cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShsb2FkZXJEYXRhLCBuZXdMb2FkZXJEYXRhLCBtYXRjaGVzLCBlcnJvcnMpIHtcbiAgbGV0IG1lcmdlZExvYWRlckRhdGEgPSBfZXh0ZW5kcyh7fSwgbmV3TG9hZGVyRGF0YSk7XG4gIGZvciAobGV0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICBsZXQgaWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgICBpZiAobmV3TG9hZGVyRGF0YS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIGlmIChuZXdMb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbmV3TG9hZGVyRGF0YVtpZF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2FkZXJEYXRhW2lkXSAhPT0gdW5kZWZpbmVkICYmIG1hdGNoLnJvdXRlLmxvYWRlcikge1xuICAgICAgLy8gUHJlc2VydmUgZXhpc3Rpbmcga2V5cyBub3QgaW5jbHVkZWQgaW4gbmV3TG9hZGVyRGF0YSBhbmQgd2hlcmUgYSBsb2FkZXJcbiAgICAgIC8vIHdhc24ndCByZW1vdmVkIGJ5IEhNUlxuICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBsb2FkZXJEYXRhW2lkXTtcbiAgICB9XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn1cbmZ1bmN0aW9uIGdldEFjdGlvbkRhdGFGb3JDb21taXQocGVuZGluZ0FjdGlvblJlc3VsdCkge1xuICBpZiAoIXBlbmRpbmdBY3Rpb25SZXN1bHQpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgcmV0dXJuIGlzRXJyb3JSZXN1bHQocGVuZGluZ0FjdGlvblJlc3VsdFsxXSkgPyB7XG4gICAgLy8gQ2xlYXIgb3V0IHByaW9yIGFjdGlvbkRhdGEgb24gZXJyb3JzXG4gICAgYWN0aW9uRGF0YToge31cbiAgfSA6IHtcbiAgICBhY3Rpb25EYXRhOiB7XG4gICAgICBbcGVuZGluZ0FjdGlvblJlc3VsdFswXV06IHBlbmRpbmdBY3Rpb25SZXN1bHRbMV0uZGF0YVxuICAgIH1cbiAgfTtcbn1cbi8vIEZpbmQgdGhlIG5lYXJlc3QgZXJyb3IgYm91bmRhcnksIGxvb2tpbmcgdXB3YXJkcyBmcm9tIHRoZSBsZWFmIHJvdXRlIChvciB0aGVcbi8vIHJvdXRlIHNwZWNpZmllZCBieSByb3V0ZUlkKSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgZXJyb3IgYm91bmRhcnksXG4vLyBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG5mdW5jdGlvbiBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIHJvdXRlSWQpIHtcbiAgbGV0IGVsaWdpYmxlTWF0Y2hlcyA9IHJvdXRlSWQgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgKyAxKSA6IFsuLi5tYXRjaGVzXTtcbiAgcmV0dXJuIGVsaWdpYmxlTWF0Y2hlcy5yZXZlcnNlKCkuZmluZChtID0+IG0ucm91dGUuaGFzRXJyb3JCb3VuZGFyeSA9PT0gdHJ1ZSkgfHwgbWF0Y2hlc1swXTtcbn1cbmZ1bmN0aW9uIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzKSB7XG4gIC8vIFByZWZlciBhIHJvb3QgbGF5b3V0IHJvdXRlIGlmIHByZXNlbnQsIG90aGVyd2lzZSBzaGltIGluIGEgcm91dGUgb2JqZWN0XG4gIGxldCByb3V0ZSA9IHJvdXRlcy5sZW5ndGggPT09IDEgPyByb3V0ZXNbMF0gOiByb3V0ZXMuZmluZChyID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IFwiX19zaGltLWVycm9yLXJvdXRlX19cIlxuICB9O1xuICByZXR1cm4ge1xuICAgIG1hdGNoZXM6IFt7XG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICByb3V0ZVxuICAgIH1dLFxuICAgIHJvdXRlXG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKHN0YXR1cywgX3RlbXA1KSB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWUsXG4gICAgcm91dGVJZCxcbiAgICBtZXRob2QsXG4gICAgdHlwZVxuICB9ID0gX3RlbXA1ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNTtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcbiAgaWYgKHN0YXR1cyA9PT0gNDAwKSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiQmFkIFJlcXVlc3RcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZCArIFwiIHJlcXVlc3QgdG8gXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCIgYnV0IFwiICsgKFwiZGlkIG5vdCBwcm92aWRlIGEgYGxvYWRlcmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZGVmZXItYWN0aW9uXCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiZGVmZXIoKSBpcyBub3Qgc3VwcG9ydGVkIGluIGFjdGlvbnNcIjtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiaW52YWxpZC1ib2R5XCIpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiVW5hYmxlIHRvIGVuY29kZSBzdWJtaXNzaW9uIGJvZHlcIjtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJGb3JiaWRkZW5cIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIlJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIgZG9lcyBub3QgbWF0Y2ggVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDQpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJOb3QgRm91bmRcIjtcbiAgICBlcnJvck1lc3NhZ2UgPSBcIk5vIHJvdXRlIG1hdGNoZXMgVVJMIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiXCI7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID09PSA0MDUpIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJNZXRob2QgTm90IEFsbG93ZWRcIjtcbiAgICBpZiAobWV0aG9kICYmIHBhdGhuYW1lICYmIHJvdXRlSWQpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IFwiWW91IG1hZGUgYSBcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYW4gYGFjdGlvbmAgZm9yIHJvdXRlIFxcXCJcIiArIHJvdXRlSWQgKyBcIlxcXCIsIFwiKSArIFwic28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5cIjtcbiAgICB9IGVsc2UgaWYgKG1ldGhvZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFxcXCJcIiArIG1ldGhvZC50b1VwcGVyQ2FzZSgpICsgXCJcXFwiXCI7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRXJyb3JSZXNwb25zZUltcGwoc3RhdHVzIHx8IDUwMCwgc3RhdHVzVGV4dCwgbmV3IEVycm9yKGVycm9yTWVzc2FnZSksIHRydWUpO1xufVxuLy8gRmluZCBhbnkgcmV0dXJuZWQgcmVkaXJlY3QgZXJyb3JzLCBzdGFydGluZyBmcm9tIHRoZSBsb3dlc3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmRSZWRpcmVjdChyZXN1bHRzKSB7XG4gIGZvciAobGV0IGkgPSByZXN1bHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBpZHg6IGlcbiAgICAgIH07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdHJpcEhhc2hGcm9tUGF0aChwYXRoKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aChfZXh0ZW5kcyh7fSwgcGFyc2VkUGF0aCwge1xuICAgIGhhc2g6IFwiXCJcbiAgfSkpO1xufVxuZnVuY3Rpb24gaXNIYXNoQ2hhbmdlT25seShhLCBiKSB7XG4gIGlmIChhLnBhdGhuYW1lICE9PSBiLnBhdGhuYW1lIHx8IGEuc2VhcmNoICE9PSBiLnNlYXJjaCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYS5oYXNoID09PSBcIlwiKSB7XG4gICAgLy8gL3BhZ2UgLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiBiLmhhc2ggIT09IFwiXCI7XG4gIH0gZWxzZSBpZiAoYS5oYXNoID09PSBiLmhhc2gpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI2hhc2hcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChiLmhhc2ggIT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlI290aGVyXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgdGhlIGhhc2ggaXMgcmVtb3ZlZCB0aGUgYnJvd3NlciB3aWxsIHJlLXBlcmZvcm0gYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXJcbiAgLy8gL3BhZ2UjaGFzaCAtPiAvcGFnZVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpc0hhbmRsZXJSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQgIT0gbnVsbCAmJiB0eXBlb2YgcmVzdWx0ID09PSBcIm9iamVjdFwiICYmIFwidHlwZVwiIGluIHJlc3VsdCAmJiBcInJlc3VsdFwiIGluIHJlc3VsdCAmJiAocmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGF0YSB8fCByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcik7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0SGFuZGxlclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0LnJlc3VsdCkgJiYgcmVkaXJlY3RTdGF0dXNDb2Rlcy5oYXMocmVzdWx0LnJlc3VsdC5zdGF0dXMpO1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmRlZmVycmVkO1xufVxuZnVuY3Rpb24gaXNFcnJvclJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuZnVuY3Rpb24gaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpIHtcbiAgcmV0dXJuIChyZXN1bHQgJiYgcmVzdWx0LnR5cGUpID09PSBSZXN1bHRUeXBlLnJlZGlyZWN0O1xufVxuZnVuY3Rpb24gaXNEZWZlcnJlZERhdGEodmFsdWUpIHtcbiAgbGV0IGRlZmVycmVkID0gdmFsdWU7XG4gIHJldHVybiBkZWZlcnJlZCAmJiB0eXBlb2YgZGVmZXJyZWQgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLmRhdGEgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGRlZmVycmVkLnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBkZWZlcnJlZC5jYW5jZWwgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQucmVzb2x2ZURhdGEgPT09IFwiZnVuY3Rpb25cIjtcbn1cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgdmFsdWUuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgdmFsdWUuaGVhZGVycyA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXNwb25zZShyZXN1bHQpIHtcbiAgaWYgKCFpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICByZXR1cm4gc3RhdHVzID49IDMwMCAmJiBzdGF0dXMgPD0gMzk5ICYmIGxvY2F0aW9uICE9IG51bGw7XG59XG5mdW5jdGlvbiBpc1ZhbGlkTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRSZXF1ZXN0TWV0aG9kcy5oYXMobWV0aG9kLnRvTG93ZXJDYXNlKCkpO1xufVxuZnVuY3Rpb24gaXNNdXRhdGlvbk1ldGhvZChtZXRob2QpIHtcbiAgcmV0dXJuIHZhbGlkTXV0YXRpb25NZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWRSZXN1bHRzKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBzaWduYWxzLCBpc0ZldGNoZXIsIGN1cnJlbnRMb2FkZXJEYXRhKSB7XG4gIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByZXN1bHRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2luZGV4XTtcbiAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzVG9Mb2FkW2luZGV4XTtcbiAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbWF0Y2gsIHRoZW4gd2UgY2FuIGhhdmUgYSBkZWZlcnJlZCByZXN1bHQgdG8gZG9cbiAgICAvLyBhbnl0aGluZyB3aXRoLiAgVGhpcyBpcyBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXJzIHdoZXJlIHRoZSByb3V0ZSB3YXNcbiAgICAvLyByZW1vdmVkIGR1cmluZyBITVJcbiAgICBpZiAoIW1hdGNoKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgbGV0IGN1cnJlbnRNYXRjaCA9IGN1cnJlbnRNYXRjaGVzLmZpbmQobSA9PiBtLnJvdXRlLmlkID09PSBtYXRjaC5yb3V0ZS5pZCk7XG4gICAgbGV0IGlzUmV2YWxpZGF0aW5nTG9hZGVyID0gY3VycmVudE1hdGNoICE9IG51bGwgJiYgIWlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50TWF0Y2gsIG1hdGNoKSAmJiAoY3VycmVudExvYWRlckRhdGEgJiYgY3VycmVudExvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdKSAhPT0gdW5kZWZpbmVkO1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkgJiYgKGlzRmV0Y2hlciB8fCBpc1JldmFsaWRhdGluZ0xvYWRlcikpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvIG5vdCBoYXZlIHRvIHRvdWNoIGFjdGl2ZURlZmVycmVkcyBoZXJlIHNpbmNlIHdlIHJhY2UgdGhlbVxuICAgICAgLy8gYWdhaW5zdCB0aGUgc2lnbmFsIGluIHJlc29sdmVEZWZlcnJlZERhdGEgYW5kIHRoZXknbGwgZ2V0IGFib3J0ZWRcbiAgICAgIC8vIHRoZXJlIGlmIG5lZWRlZFxuICAgICAgbGV0IHNpZ25hbCA9IHNpZ25hbHNbaW5kZXhdO1xuICAgICAgaW52YXJpYW50KHNpZ25hbCwgXCJFeHBlY3RlZCBhbiBBYm9ydFNpZ25hbCBmb3IgcmV2YWxpZGF0aW5nIGZldGNoZXIgZGVmZXJyZWQgcmVzdWx0XCIpO1xuICAgICAgYXdhaXQgcmVzb2x2ZURlZmVycmVkRGF0YShyZXN1bHQsIHNpZ25hbCwgaXNGZXRjaGVyKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5hc3luYyBmdW5jdGlvbiByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCB1bndyYXApIHtcbiAgaWYgKHVud3JhcCA9PT0gdm9pZCAwKSB7XG4gICAgdW53cmFwID0gZmFsc2U7XG4gIH1cbiAgbGV0IGFib3J0ZWQgPSBhd2FpdCByZXN1bHQuZGVmZXJyZWREYXRhLnJlc29sdmVEYXRhKHNpZ25hbCk7XG4gIGlmIChhYm9ydGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh1bndyYXApIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLnVud3JhcHBlZERhdGFcbiAgICAgIH07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSGFuZGxlIGFueSBUcmFja2VkUHJvbWlzZS5fZXJyb3IgdmFsdWVzIGVuY291bnRlcmVkIHdoaWxlIHVud3JhcHBpbmdcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICBkYXRhOiByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGFcbiAgfTtcbn1cbmZ1bmN0aW9uIGhhc05ha2VkSW5kZXhRdWVyeShzZWFyY2gpIHtcbiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXMoc2VhcmNoKS5nZXRBbGwoXCJpbmRleFwiKS5zb21lKHYgPT4gdiA9PT0gXCJcIik7XG59XG5mdW5jdGlvbiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbikge1xuICBsZXQgc2VhcmNoID0gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uKS5zZWFyY2ggOiBsb2NhdGlvbi5zZWFyY2g7XG4gIGlmIChtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuaW5kZXggJiYgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCBcIlwiKSkge1xuICAgIC8vIFJldHVybiB0aGUgbGVhZiBpbmRleCByb3V0ZSB3aGVuIGluZGV4IGlzIHByZXNlbnRcbiAgICByZXR1cm4gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICB9XG4gIC8vIE90aGVyd2lzZSBncmFiIHRoZSBkZWVwZXN0IFwicGF0aCBjb250cmlidXRpbmdcIiBtYXRjaCAoaWdub3JpbmcgaW5kZXggYW5kXG4gIC8vIHBhdGhsZXNzIGxheW91dCByb3V0ZXMpXG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICByZXR1cm4gcGF0aE1hdGNoZXNbcGF0aE1hdGNoZXMubGVuZ3RoIC0gMV07XG59XG5mdW5jdGlvbiBnZXRTdWJtaXNzaW9uRnJvbU5hdmlnYXRpb24obmF2aWdhdGlvbikge1xuICBsZXQge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZSxcbiAgICB0ZXh0LFxuICAgIGZvcm1EYXRhLFxuICAgIGpzb25cbiAgfSA9IG5hdmlnYXRpb247XG4gIGlmICghZm9ybU1ldGhvZCB8fCAhZm9ybUFjdGlvbiB8fCAhZm9ybUVuY1R5cGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHRleHQgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgIHRleHRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGZvcm1EYXRhICE9IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfSBlbHNlIGlmIChqc29uICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pIHtcbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dFxuICAgIH07XG4gICAgcmV0dXJuIG5hdmlnYXRpb247XG4gIH0gZWxzZSB7XG4gICAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkXG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pIHtcbiAgbGV0IG5hdmlnYXRpb24gPSB7XG4gICAgc3RhdGU6IFwic3VibWl0dGluZ1wiLFxuICAgIGxvY2F0aW9uLFxuICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dFxuICB9O1xuICByZXR1cm4gbmF2aWdhdGlvbjtcbn1cbmZ1bmN0aW9uIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGRhdGEpIHtcbiAgaWYgKHN1Ym1pc3Npb24pIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHN1Ym1pc3Npb24uZm9ybURhdGEsXG4gICAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZmV0Y2hlciA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dDogdW5kZWZpbmVkLFxuICAgICAgZGF0YVxuICAgIH07XG4gICAgcmV0dXJuIGZldGNoZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1Ym1pdHRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGV4aXN0aW5nRmV0Y2hlcikge1xuICBsZXQgZmV0Y2hlciA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0LFxuICAgIGRhdGE6IGV4aXN0aW5nRmV0Y2hlciA/IGV4aXN0aW5nRmV0Y2hlci5kYXRhIDogdW5kZWZpbmVkXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuZnVuY3Rpb24gZ2V0RG9uZUZldGNoZXIoZGF0YSkge1xuICBsZXQgZmV0Y2hlciA9IHtcbiAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZCxcbiAgICBkYXRhXG4gIH07XG4gIHJldHVybiBmZXRjaGVyO1xufVxuZnVuY3Rpb24gcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICB0cnkge1xuICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gX3dpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZKTtcbiAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKHNlc3Npb25Qb3NpdGlvbnMpO1xuICAgICAgZm9yIChsZXQgW2ssIHZdIG9mIE9iamVjdC5lbnRyaWVzKGpzb24gfHwge30pKSB7XG4gICAgICAgIGlmICh2ICYmIEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgICB0cmFuc2l0aW9ucy5zZXQoaywgbmV3IFNldCh2IHx8IFtdKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gIH1cbn1cbmZ1bmN0aW9uIHBlcnNpc3RBcHBsaWVkVHJhbnNpdGlvbnMoX3dpbmRvdywgdHJhbnNpdGlvbnMpIHtcbiAgaWYgKHRyYW5zaXRpb25zLnNpemUgPiAwKSB7XG4gICAgbGV0IGpzb24gPSB7fTtcbiAgICBmb3IgKGxldCBbaywgdl0gb2YgdHJhbnNpdGlvbnMpIHtcbiAgICAgIGpzb25ba10gPSBbLi4udl07XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBfd2luZG93LnNlc3Npb25TdG9yYWdlLnNldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVksIEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBhcHBsaWVkIHZpZXcgdHJhbnNpdGlvbnMgaW4gc2Vzc2lvblN0b3JhZ2UgKFwiICsgZXJyb3IgKyBcIikuXCIpO1xuICAgIH1cbiAgfVxufVxuLy8jZW5kcmVnaW9uXG5cbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24sIElETEVfQkxPQ0tFUiwgSURMRV9GRVRDSEVSLCBJRExFX05BVklHQVRJT04sIFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wsIERlZmVycmVkRGF0YSBhcyBVTlNBRkVfRGVmZXJyZWREYXRhLCBFcnJvclJlc3BvbnNlSW1wbCBhcyBVTlNBRkVfRXJyb3JSZXNwb25zZUltcGwsIGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyBhcyBVTlNBRkVfY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcywgZ2V0UmVzb2x2ZVRvTWF0Y2hlcyBhcyBVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcywgaW52YXJpYW50IGFzIFVOU0FGRV9pbnZhcmlhbnQsIHdhcm5pbmcgYXMgVU5TQUZFX3dhcm5pbmcsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVyLCBjcmVhdGVTdGF0aWNIYW5kbGVyLCBkZWZlciwgZ2VuZXJhdGVQYXRoLCBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yLCBnZXRUb1BhdGhuYW1lLCBpc0RlZmVycmVkRGF0YSwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpvaW5QYXRocywganNvbiwgbWF0Y2hQYXRoLCBtYXRjaFJvdXRlcywgbm9ybWFsaXplUGF0aG5hbWUsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoLCByZXNvbHZlVG8sIHN0cmlwQmFzZW5hbWUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvdXRlci5qcy5tYXBcbiIsIi8qKlxuICogUmVhY3QgUm91dGVyIHY2LjIzLjFcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIFJlbWl4IFNvZnR3YXJlIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UubWQgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVU5TQUZFX2ludmFyaWFudCwgam9pblBhdGhzLCBtYXRjaFBhdGgsIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBVTlNBRkVfd2FybmluZywgcmVzb2x2ZVRvLCBwYXJzZVBhdGgsIG1hdGNoUm91dGVzLCBBY3Rpb24sIFVOU0FGRV9jb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaCwgc3RyaXBCYXNlbmFtZSwgSURMRV9CTE9DS0VSLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgQWJvcnRlZERlZmVycmVkRXJyb3IsIGNyZWF0ZVJvdXRlciB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcbmV4cG9ydCB7IEFib3J0ZWREZWZlcnJlZEVycm9yLCBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUsIGNyZWF0ZVBhdGgsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZXNvbHZlUGF0aCB9IGZyb20gJ0ByZW1peC1ydW4vcm91dGVyJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8vIENyZWF0ZSByZWFjdC1zcGVjaWZpYyB0eXBlcyBmcm9tIHRoZSBhZ25vc3RpYyB0eXBlcyBpbiBAcmVtaXgtcnVuL3JvdXRlciB0b1xuLy8gZXhwb3J0IGZyb20gcmVhY3Qtcm91dGVyXG5jb25zdCBEYXRhUm91dGVyQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyU3RhdGVcIjtcbn1cbmNvbnN0IEF3YWl0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBBd2FpdENvbnRleHQuZGlzcGxheU5hbWUgPSBcIkF3YWl0XCI7XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIGA8Um91dGVyPmAgQVBJXG4gKiB3aGVyZSBib3RoIHRoZSBsb2NhdGlvbiBhbmQgYSBuYXZpZ2F0b3IgbXVzdCBiZSBwcm92aWRlZCBzZXBhcmF0ZWx5IGluIG9yZGVyXG4gKiB0byBhdm9pZCBcInRlYXJpbmdcIiB0aGF0IG1heSBvY2N1ciBpbiBhIHN1c3BlbnNlLWVuYWJsZWQgYXBwIGlmIHRoZSBhY3Rpb25cbiAqIGFuZC9vciBsb2NhdGlvbiB3ZXJlIHRvIGJlIHJlYWQgZGlyZWN0bHkgZnJvbSB0aGUgaGlzdG9yeSBpbnN0YW5jZS5cbiAqL1xuXG5jb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBOYXZpZ2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTmF2aWdhdGlvblwiO1xufVxuY29uc3QgTG9jYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExvY2F0aW9uQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiTG9jYXRpb25cIjtcbn1cbmNvbnN0IFJvdXRlQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbiAgaXNEYXRhUm91dGU6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJSb3V0ZVwiO1xufVxuY29uc3QgUm91dGVFcnJvckNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5mdW5jdGlvbiB1c2VIcmVmKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VIcmVmKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIGhhc2gsXG4gICAgcGF0aG5hbWUsXG4gICAgc2VhcmNoXG4gIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZVxuICB9KTtcbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhuYW1lXSk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHtcbiAgICBwYXRobmFtZTogam9pbmVkUGF0aG5hbWUsXG4gICAgc2VhcmNoLFxuICAgIGhhc2hcbiAgfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIGA8Um91dGVyPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaW4tcm91dGVyLWNvbnRleHRcbiAqL1xuZnVuY3Rpb24gdXNlSW5Sb3V0ZXJDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpICE9IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBsb2NhdGlvbiBvYmplY3QsIHdoaWNoIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgVVJMIGluIHdlYlxuICogYnJvd3NlcnMuXG4gKlxuICogTm90ZTogSWYgeW91J3JlIHVzaW5nIHRoaXMgaXQgbWF5IG1lYW4geW91J3JlIGRvaW5nIHNvbWUgb2YgeW91ciBvd25cbiAqIFwicm91dGluZ1wiIGluIHlvdXIgYXBwLCBhbmQgd2UnZCBsaWtlIHRvIGtub3cgd2hhdCB5b3VyIHVzZSBjYXNlIGlzLiBXZSBtYXlcbiAqIGJlIGFibGUgdG8gcHJvdmlkZSBzb21ldGhpbmcgaGlnaGVyLWxldmVsIHRvIGJldHRlciBzdWl0IHlvdXIgbmVlZHMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbG9jYXRpb25cbiAqL1xuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTG9jYXRpb24oKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLmxvY2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBhY3Rpb24gd2hpY2ggZGVzY3JpYmVzIGhvdyB0aGUgcm91dGVyIGNhbWUgdG9cbiAqIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBlaXRoZXIgYnkgYSBwb3AsIHB1c2gsIG9yIHJlcGxhY2Ugb24gdGhlIGhpc3Rvcnkgc3RhY2suXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGlvbi10eXBlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChMb2NhdGlvbkNvbnRleHQpLm5hdmlnYXRpb25UeXBlO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBQYXRoTWF0Y2ggb2JqZWN0IGlmIHRoZSBnaXZlbiBwYXR0ZXJuIG1hdGNoZXMgdGhlIGN1cnJlbnQgVVJMLlxuICogVGhpcyBpcyB1c2VmdWwgZm9yIGNvbXBvbmVudHMgdGhhdCBuZWVkIHRvIGtub3cgXCJhY3RpdmVcIiBzdGF0ZSwgZS5nLlxuICogYDxOYXZMaW5rPmAuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbWF0Y2hcbiAqL1xuZnVuY3Rpb24gdXNlTWF0Y2gocGF0dGVybikge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBwYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSwgW3BhdGhuYW1lLCBwYXR0ZXJuXSk7XG59XG5cbi8qKlxuICogVGhlIGludGVyZmFjZSBmb3IgdGhlIG5hdmlnYXRlKCkgZnVuY3Rpb24gcmV0dXJuZWQgZnJvbSB1c2VOYXZpZ2F0ZSgpLlxuICovXG5cbmNvbnN0IG5hdmlnYXRlRWZmZWN0V2FybmluZyA9IFwiWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gXCIgKyBcInlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLlwiO1xuXG4vLyBNdXRlIHdhcm5pbmdzIGZvciBjYWxscyB0byB1c2VOYXZpZ2F0ZSBpbiBTU1IgZW52aXJvbm1lbnRzXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KGNiKSB7XG4gIGxldCBpc1N0YXRpYyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpLnN0YXRpYztcbiAgaWYgKCFpc1N0YXRpYykge1xuICAgIC8vIFdlIHNob3VsZCBiZSBhYmxlIHRvIGdldCByaWQgb2YgdGhpcyBvbmNlIHJlYWN0IDE4LjMgaXMgcmVsZWFzZWRcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzI2Mzk1XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KGNiKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gaW1wZXJhdGl2ZSBtZXRob2QgZm9yIGNoYW5naW5nIHRoZSBsb2NhdGlvbi4gVXNlZCBieSBgPExpbms+YHMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlKCkge1xuICBsZXQge1xuICAgIGlzRGF0YVJvdXRlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIC8vIENvbmRpdGlvbmFsIHVzYWdlIGlzIE9LIGhlcmUgYmVjYXVzZSB0aGUgdXNhZ2Ugb2YgYSBkYXRhIHJvdXRlciBpcyBzdGF0aWNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gIHJldHVybiBpc0RhdGFSb3V0ZSA/IHVzZU5hdmlnYXRlU3RhYmxlKCkgOiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCk7XG59XG5mdW5jdGlvbiB1c2VOYXZpZ2F0ZVVuc3RhYmxlKCkge1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZU5hdmlnYXRlKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyQ29udGV4dCk7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgZnV0dXJlLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBhY3RpdmVSZWYuY3VycmVudCA9IHRydWU7XG4gIH0pO1xuICBsZXQgbmF2aWdhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAodG8sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGFjdGl2ZVJlZi5jdXJyZW50LCBuYXZpZ2F0ZUVmZmVjdFdhcm5pbmcpIDogdm9pZCAwO1xuXG4gICAgLy8gU2hvcnQgY2lyY3VpdCBoZXJlIHNpbmNlIGlmIHRoaXMgaGFwcGVucyBvbiBmaXJzdCByZW5kZXIgdGhlIG5hdmlnYXRlXG4gICAgLy8gaXMgdXNlbGVzcyBiZWNhdXNlIHdlIGhhdmVuJ3Qgd2lyZWQgdXAgb3VyIGhpc3RvcnkgbGlzdGVuZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG5hdmlnYXRvci5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIG9wdGlvbnMucmVsYXRpdmUgPT09IFwicGF0aFwiKTtcblxuICAgIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgICAvLyB0byBoYW5kaW5nIG9mZiB0byBoaXN0b3J5IChidXQgb25seSBpZiB3ZSdyZSBub3QgaW4gYSBkYXRhIHJvdXRlcixcbiAgICAvLyBvdGhlcndpc2UgaXQnbGwgcHJlcGVuZCB0aGUgYmFzZW5hbWUgaW5zaWRlIG9mIHRoZSByb3V0ZXIpLlxuICAgIC8vIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2UgbmF2aWdhdGUgdG8gdGhlIHJhdyBiYXNlbmFtZVxuICAgIC8vIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYVxuICAgIC8vIHRyYWlsaW5nIHNsYXNoIG9uIHJvb3QgbGlua3NcbiAgICBpZiAoZGF0YVJvdXRlckNvbnRleHQgPT0gbnVsbCAmJiBiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICAgIH1cbiAgICAoISFvcHRpb25zLnJlcGxhY2UgPyBuYXZpZ2F0b3IucmVwbGFjZSA6IG5hdmlnYXRvci5wdXNoKShwYXRoLCBvcHRpb25zLnN0YXRlLCBvcHRpb25zKTtcbiAgfSwgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgZGF0YVJvdXRlckNvbnRleHRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgT3V0bGV0Q29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGNvbnRleHQgKGlmIHByb3ZpZGVkKSBmb3IgdGhlIGNoaWxkIHJvdXRlIGF0IHRoaXMgbGV2ZWwgb2YgdGhlIHJvdXRlXG4gKiBoaWVyYXJjaHkuXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXQtY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0KCkge1xuICByZXR1cm4gUmVhY3QudXNlQ29udGV4dChPdXRsZXRDb250ZXh0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IGA8T3V0bGV0PmAgdG8gcmVuZGVyIGNoaWxkIHJvdXRlcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1vdXRsZXRcbiAqL1xuZnVuY3Rpb24gdXNlT3V0bGV0KGNvbnRleHQpIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoT3V0bGV0Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRcbiAgICB9LCBvdXRsZXQpO1xuICB9XG4gIHJldHVybiBvdXRsZXQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3Qgb2Yga2V5L3ZhbHVlIHBhaXJzIG9mIHRoZSBkeW5hbWljIHBhcmFtcyBmcm9tIHRoZSBjdXJyZW50XG4gKiBVUkwgdGhhdCB3ZXJlIG1hdGNoZWQgYnkgdGhlIHJvdXRlIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcGFyYW1zXG4gKi9cbmZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGFyYW1zIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5mdW5jdGlvbiB1c2VSZXNvbHZlZFBhdGgodG8sIF90ZW1wMikge1xuICBsZXQge1xuICAgIHJlbGF0aXZlXG4gIH0gPSBfdGVtcDIgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAyO1xuICBsZXQge1xuICAgIGZ1dHVyZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMobWF0Y2hlcywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKSk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHJlc29sdmVUbyh0bywgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpLCBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IG9mIHRoZSByb3V0ZSB0aGF0IG1hdGNoZWQgdGhlIGN1cnJlbnQgbG9jYXRpb24sIHByZXBhcmVkXG4gKiB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHQgdG8gcmVuZGVyIHRoZSByZW1haW5kZXIgb2YgdGhlIHJvdXRlIHRyZWUuIFJvdXRlXG4gKiBlbGVtZW50cyBpbiB0aGUgdHJlZSBtdXN0IHJlbmRlciBhbiBgPE91dGxldD5gIHRvIHJlbmRlciB0aGVpciBjaGlsZCByb3V0ZSdzXG4gKiBlbGVtZW50LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLXJvdXRlc1xuICovXG5mdW5jdGlvbiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbkFyZykge1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIGxvY2F0aW9uQXJnKTtcbn1cblxuLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gd2l0aCBhY2NlcHQgb3B0aW9uYWwgcGFyYW0gZm9yIFJvdXRlclByb3ZpZGVyIHVzYWdlXG5mdW5jdGlvbiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlUm91dGVzKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3JcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQge1xuICAgIG1hdGNoZXM6IHBhcmVudE1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBwYXJlbnRNYXRjaGVzW3BhcmVudE1hdGNoZXMubGVuZ3RoIC0gMV07XG4gIGxldCBwYXJlbnRQYXJhbXMgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbiAgbGV0IHBhcmVudFBhdGhuYW1lID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWUgOiBcIi9cIjtcbiAgbGV0IHBhcmVudFBhdGhuYW1lQmFzZSA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhdGhuYW1lQmFzZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50Um91dGUgPSByb3V0ZU1hdGNoICYmIHJvdXRlTWF0Y2gucm91dGU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAvLyBZb3Ugd29uJ3QgZ2V0IGEgd2FybmluZyBhYm91dCAyIGRpZmZlcmVudCA8Um91dGVzPiB1bmRlciBhIDxSb3V0ZT5cbiAgICAvLyB3aXRob3V0IGEgdHJhaWxpbmcgKiwgYnV0IHRoaXMgaXMgYSBiZXN0LWVmZm9ydCB3YXJuaW5nIGFueXdheSBzaW5jZSB3ZVxuICAgIC8vIGNhbm5vdCBldmVuIGdpdmUgdGhlIHdhcm5pbmcgdW5sZXNzIHRoZXkgbGFuZCBhdCB0aGUgcGFyZW50IHJvdXRlLlxuICAgIC8vXG4gICAgLy8gRXhhbXBsZTpcbiAgICAvL1xuICAgIC8vIDxSb3V0ZXM+XG4gICAgLy8gICB7LyogVGhpcyByb3V0ZSBwYXRoIE1VU1QgZW5kIHdpdGggLyogYmVjYXVzZSBvdGhlcndpc2VcbiAgICAvLyAgICAgICBpdCB3aWxsIG5ldmVyIG1hdGNoIC9ibG9nL3Bvc3QvMTIzICovfVxuICAgIC8vICAgPFJvdXRlIHBhdGg9XCJibG9nXCIgZWxlbWVudD17PEJsb2cgLz59IC8+XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2cvZmVlZFwiIGVsZW1lbnQ9ezxCbG9nRmVlZCAvPn0gLz5cbiAgICAvLyA8L1JvdXRlcz5cbiAgICAvL1xuICAgIC8vIGZ1bmN0aW9uIEJsb2coKSB7XG4gICAgLy8gICByZXR1cm4gKFxuICAgIC8vICAgICA8Um91dGVzPlxuICAgIC8vICAgICAgIDxSb3V0ZSBwYXRoPVwicG9zdC86aWRcIiBlbGVtZW50PXs8UG9zdCAvPn0gLz5cbiAgICAvLyAgICAgPC9Sb3V0ZXM+XG4gICAgLy8gICApO1xuICAgIC8vIH1cbiAgICBsZXQgcGFyZW50UGF0aCA9IHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGggfHwgXCJcIjtcbiAgICB3YXJuaW5nT25jZShwYXJlbnRQYXRobmFtZSwgIXBhcmVudFJvdXRlIHx8IHBhcmVudFBhdGguZW5kc1dpdGgoXCIqXCIpLCBcIllvdSByZW5kZXJlZCBkZXNjZW5kYW50IDxSb3V0ZXM+IChvciBjYWxsZWQgYHVzZVJvdXRlcygpYCkgYXQgXCIgKyAoXCJcXFwiXCIgKyBwYXJlbnRQYXRobmFtZSArIFwiXFxcIiAodW5kZXIgPFJvdXRlIHBhdGg9XFxcIlwiICsgcGFyZW50UGF0aCArIFwiXFxcIj4pIGJ1dCB0aGUgXCIpICsgXCJwYXJlbnQgcm91dGUgcGF0aCBoYXMgbm8gdHJhaWxpbmcgXFxcIipcXFwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBcIiArIFwiZGVlcGVyLCB0aGUgcGFyZW50IHdvbid0IG1hdGNoIGFueW1vcmUgYW5kIHRoZXJlZm9yZSB0aGUgY2hpbGQgXCIgKyBcInJvdXRlcyB3aWxsIG5ldmVyIHJlbmRlci5cXG5cXG5cIiArIChcIlBsZWFzZSBjaGFuZ2UgdGhlIHBhcmVudCA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPiB0byA8Um91dGUgXCIpICsgKFwicGF0aD1cXFwiXCIgKyAocGFyZW50UGF0aCA9PT0gXCIvXCIgPyBcIipcIiA6IHBhcmVudFBhdGggKyBcIi8qXCIpICsgXCJcXFwiPi5cIikpO1xuICB9XG4gIGxldCBsb2NhdGlvbkZyb21Db250ZXh0ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IGxvY2F0aW9uO1xuICBpZiAobG9jYXRpb25BcmcpIHtcbiAgICB2YXIgX3BhcnNlZExvY2F0aW9uQXJnJHBhO1xuICAgIGxldCBwYXJzZWRMb2NhdGlvbkFyZyA9IHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcbiAgICAhKHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHwgKChfcGFyc2VkTG9jYXRpb25BcmckcGEgPSBwYXJzZWRMb2NhdGlvbkFyZy5wYXRobmFtZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9wYXJzZWRMb2NhdGlvbkFyZyRwYS5zdGFydHNXaXRoKHBhcmVudFBhdGhuYW1lQmFzZSkpKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiV2hlbiBvdmVycmlkaW5nIHRoZSBsb2NhdGlvbiB1c2luZyBgPFJvdXRlcyBsb2NhdGlvbj5gIG9yIGB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbilgLCBcIiArIFwidGhlIGxvY2F0aW9uIHBhdGhuYW1lIG11c3QgYmVnaW4gd2l0aCB0aGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIFwiICsgKFwibWF0Y2hlZCBieSBhbGwgcGFyZW50IHJvdXRlcy4gVGhlIGN1cnJlbnQgcGF0aG5hbWUgYmFzZSBpcyBcXFwiXCIgKyBwYXJlbnRQYXRobmFtZUJhc2UgKyBcIlxcXCIgXCIpICsgKFwiYnV0IHBhdGhuYW1lIFxcXCJcIiArIHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lICsgXCJcXFwiIHdhcyBnaXZlbiBpbiB0aGUgYGxvY2F0aW9uYCBwcm9wLlwiKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICBsb2NhdGlvbiA9IHBhcnNlZExvY2F0aW9uQXJnO1xuICB9IGVsc2Uge1xuICAgIGxvY2F0aW9uID0gbG9jYXRpb25Gcm9tQ29udGV4dDtcbiAgfVxuICBsZXQgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIjtcbiAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gcGF0aG5hbWU7XG4gIGlmIChwYXJlbnRQYXRobmFtZUJhc2UgIT09IFwiL1wiKSB7XG4gICAgLy8gRGV0ZXJtaW5lIHRoZSByZW1haW5pbmcgcGF0aG5hbWUgYnkgcmVtb3ZpbmcgdGhlICMgb2YgVVJMIHNlZ21lbnRzIHRoZVxuICAgIC8vIHBhcmVudFBhdGhuYW1lQmFzZSBoYXMsIGluc3RlYWQgb2YgcmVtb3ZpbmcgYmFzZWQgb24gY2hhcmFjdGVyIGNvdW50LlxuICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSBjYW4ndCBndWFyYW50ZWUgdGhhdCBpbmNvbWluZy9vdXRnb2luZyBlbmNvZGluZ3MvXG4gICAgLy8gZGVjb2RpbmdzIHdpbGwgbWF0Y2ggZXhhY3RseS5cbiAgICAvLyBXZSBkZWNvZGUgcGF0aHMgYmVmb3JlIG1hdGNoaW5nIG9uIGEgcGVyLXNlZ21lbnQgYmFzaXMgd2l0aFxuICAgIC8vIGRlY29kZVVSSUNvbXBvbmVudCgpLCBidXQgd2UgcmUtZW5jb2RlIHBhdGhuYW1lcyB2aWEgYG5ldyBVUkwoKWAgc28gdGhleVxuICAgIC8vIG1hdGNoIHdoYXQgYHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZWAgd291bGQgcmVmbGVjdC4gIFRob3NlIGRvbid0IDEwMCVcbiAgICAvLyBhbGlnbiB3aGVuIGl0IGNvbWVzIHRvIGVuY29kZWQgVVJJIGNoYXJhY3RlcnMgc3VjaCBhcyAlIGFuZCAmLlxuICAgIC8vXG4gICAgLy8gU28gd2UgbWF5IGVuZCB1cCB3aXRoOlxuICAgIC8vICAgcGF0aG5hbWU6ICAgICAgICAgICBcIi9kZXNjZW5kYW50L2ElMjViL21hdGNoXCJcbiAgICAvLyAgIHBhcmVudFBhdGhuYW1lQmFzZTogXCIvZGVzY2VuZGFudC9hJWJcIlxuICAgIC8vXG4gICAgLy8gQW5kIHRoZSBkaXJlY3Qgc3Vic3RyaW5nIHJlbW92YWwgYXBwcm9hY2ggd29uJ3Qgd29yayA6L1xuICAgIGxldCBwYXJlbnRTZWdtZW50cyA9IHBhcmVudFBhdGhuYW1lQmFzZS5yZXBsYWNlKC9eXFwvLywgXCJcIikuc3BsaXQoXCIvXCIpO1xuICAgIGxldCBzZWdtZW50cyA9IHBhdGhuYW1lLnJlcGxhY2UoL15cXC8vLCBcIlwiKS5zcGxpdChcIi9cIik7XG4gICAgcmVtYWluaW5nUGF0aG5hbWUgPSBcIi9cIiArIHNlZ21lbnRzLnNsaWNlKHBhcmVudFNlZ21lbnRzLmxlbmd0aCkuam9pbihcIi9cIik7XG4gIH1cbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmxhenkgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yICE9PSB1bmRlZmluZWQgPyBwcm9wcy5lcnJvciA6IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciAhPT0gdW5kZWZpbmVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yb3V0ZUNvbnRleHRcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICB9KSkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuXG4gIC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkpKSB7XG4gICAgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCA9IG1hdGNoLnJvdXRlLmlkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcm91dGVDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlMjtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChmdXR1cmUgPT09IHZvaWQgMCkge1xuICAgIGZ1dHVyZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICAgIGlmICgoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgIT0gbnVsbCAmJiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUyID0gZGF0YVJvdXRlclN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFSb3V0ZXJTdGF0ZTIuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkgIT09IHVuZGVmaW5lZCk7XG4gICAgIShlcnJvckluZGV4ID49IDApID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciBlcnJvcnMgb24gcm91dGUgSURzOiBcIiArIE9iamVjdC5rZXlzKGVycm9ycykuam9pbihcIixcIikpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgcmVuZGVyZWRNYXRjaGVzID0gcmVuZGVyZWRNYXRjaGVzLnNsaWNlKDAsIE1hdGgubWluKHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGgsIGVycm9ySW5kZXggKyAxKSk7XG4gIH1cblxuICAvLyBJZiB3ZSdyZSBpbiBhIHBhcnRpYWwgaHlkcmF0aW9uIG1vZGUsIGRldGVjdCBpZiB3ZSBuZWVkIHRvIHJlbmRlciBkb3duIHRvXG4gIC8vIGEgZ2l2ZW4gSHlkcmF0ZUZhbGxiYWNrIHdoaWxlIHdlIGxvYWQgdGhlIHJlc3Qgb2YgdGhlIGh5ZHJhdGlvbiBkYXRhXG4gIGxldCByZW5kZXJGYWxsYmFjayA9IGZhbHNlO1xuICBsZXQgZmFsbGJhY2tJbmRleCA9IC0xO1xuICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGZ1dHVyZSAmJiBmdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVuZGVyZWRNYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbWF0Y2ggPSByZW5kZXJlZE1hdGNoZXNbaV07XG4gICAgICAvLyBUcmFjayB0aGUgZGVlcGVzdCBmYWxsYmFjayB1cCB1bnRpbCB0aGUgZmlyc3Qgcm91dGUgd2l0aG91dCBkYXRhXG4gICAgICBpZiAobWF0Y2gucm91dGUuSHlkcmF0ZUZhbGxiYWNrIHx8IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgZmFsbGJhY2tJbmRleCA9IGk7XG4gICAgICB9XG4gICAgICBpZiAobWF0Y2gucm91dGUuaWQpIHtcbiAgICAgICAgbGV0IHtcbiAgICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICAgIGVycm9yc1xuICAgICAgICB9ID0gZGF0YVJvdXRlclN0YXRlO1xuICAgICAgICBsZXQgbmVlZHNUb1J1bkxvYWRlciA9IG1hdGNoLnJvdXRlLmxvYWRlciAmJiBsb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkICYmICghZXJyb3JzIHx8IGVycm9yc1ttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChtYXRjaC5yb3V0ZS5sYXp5IHx8IG5lZWRzVG9SdW5Mb2FkZXIpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCB0aGUgZmlyc3Qgcm91dGUgdGhhdCdzIG5vdCByZWFkeSB0byByZW5kZXIgKHdhaXRpbmcgb25cbiAgICAgICAgICAvLyBsYXp5LCBvciBoYXMgYSBsb2FkZXIgdGhhdCBoYXNuJ3QgcnVuIHlldCkuICBGbGFnIHRoYXQgd2UgbmVlZCB0b1xuICAgICAgICAgIC8vIHJlbmRlciBhIGZhbGxiYWNrIGFuZCByZW5kZXIgdXAgdW50aWwgdGhlIGFwcHJvcHJpYXRlIGZhbGxiYWNrXG4gICAgICAgICAgcmVuZGVyRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGlmIChmYWxsYmFja0luZGV4ID49IDApIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBmYWxsYmFja0luZGV4ICsgMSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTWF0Y2hlcyA9IFtyZW5kZXJlZE1hdGNoZXNbMF1dO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyZWRNYXRjaGVzLnJlZHVjZVJpZ2h0KChvdXRsZXQsIG1hdGNoLCBpbmRleCkgPT4ge1xuICAgIC8vIE9ubHkgZGF0YSByb3V0ZXJzIGhhbmRsZSBlcnJvcnMvZmFsbGJhY2tzXG4gICAgbGV0IGVycm9yO1xuICAgIGxldCBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSBmYWxzZTtcbiAgICBsZXQgZXJyb3JFbGVtZW50ID0gbnVsbDtcbiAgICBsZXQgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSkge1xuICAgICAgZXJyb3IgPSBlcnJvcnMgJiYgbWF0Y2gucm91dGUuaWQgPyBlcnJvcnNbbWF0Y2gucm91dGUuaWRdIDogdW5kZWZpbmVkO1xuICAgICAgZXJyb3JFbGVtZW50ID0gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGRlZmF1bHRFcnJvckVsZW1lbnQ7XG4gICAgICBpZiAocmVuZGVyRmFsbGJhY2spIHtcbiAgICAgICAgaWYgKGZhbGxiYWNrSW5kZXggPCAwICYmIGluZGV4ID09PSAwKSB7XG4gICAgICAgICAgd2FybmluZ09uY2UoXCJyb3V0ZS1mYWxsYmFja1wiLCBmYWxzZSwgXCJObyBgSHlkcmF0ZUZhbGxiYWNrYCBlbGVtZW50IHByb3ZpZGVkIHRvIHJlbmRlciBkdXJpbmcgaW5pdGlhbCBoeWRyYXRpb25cIik7XG4gICAgICAgICAgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBoeWRyYXRlRmFsbGJhY2tFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChmYWxsYmFja0luZGV4ID09PSBpbmRleCkge1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG1hdGNoLnJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWF0Y2hlcyA9IHBhcmVudE1hdGNoZXMuY29uY2F0KHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBpbmRleCArIDEpKTtcbiAgICBsZXQgZ2V0Q2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgICBsZXQgY2hpbGRyZW47XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBlcnJvckVsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjaykge1xuICAgICAgICBjaGlsZHJlbiA9IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ7XG4gICAgICB9IGVsc2UgaWYgKG1hdGNoLnJvdXRlLkNvbXBvbmVudCkge1xuICAgICAgICAvLyBOb3RlOiBUaGlzIGlzIGEgZGUtb3B0aW1pemVkIHBhdGggc2luY2UgUmVhY3Qgd29uJ3QgcmUtdXNlIHRoZVxuICAgICAgICAvLyBSZWFjdEVsZW1lbnQgc2luY2UgaXQncyBpZGVudGl0eSBjaGFuZ2VzIHdpdGggZWFjaCBuZXdcbiAgICAgICAgLy8gUmVhY3QuY3JlYXRlRWxlbWVudCBjYWxsLiAgV2Uga2VlcCB0aGlzIHNvIGZvbGtzIGNhbiB1c2VcbiAgICAgICAgLy8gYDxSb3V0ZSBDb21wb25lbnQ9ey4uLn0+YCBpbiBgPFJvdXRlcz5gIGJ1dCBnZW5lcmFsbHkgYENvbXBvbmVudGBcbiAgICAgICAgLy8gdXNhZ2UgaXMgb25seSBhZHZpc2VkIGluIGBSb3V0ZXJQcm92aWRlcmAgd2hlbiB3ZSBjYW4gY29udmVydCBpdCB0b1xuICAgICAgICAvLyBgZWxlbWVudGAgYWhlYWQgb2YgdGltZS5cbiAgICAgICAgY2hpbGRyZW4gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChtYXRjaC5yb3V0ZS5Db21wb25lbnQsIG51bGwpO1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIGNoaWxkcmVuID0gbWF0Y2gucm91dGUuZWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gb3V0bGV0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlcmVkUm91dGUsIHtcbiAgICAgICAgbWF0Y2g6IG1hdGNoLFxuICAgICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgICBvdXRsZXQsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBpc0RhdGFSb3V0ZTogZGF0YVJvdXRlclN0YXRlICE9IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICB9KTtcbiAgICB9O1xuICAgIC8vIE9ubHkgd3JhcCBpbiBhbiBlcnJvciBib3VuZGFyeSB3aXRoaW4gZGF0YSByb3V0ZXIgdXNhZ2VzIHdoZW4gd2UgaGF2ZSBhblxuICAgIC8vIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IG9uIHRoaXMgcm91dGUuICBPdGhlcndpc2UgbGV0IGl0IGJ1YmJsZSB1cCB0b1xuICAgIC8vIGFuIGFuY2VzdG9yIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50XG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuRXJyb3JCb3VuZGFyeSB8fCBtYXRjaC5yb3V0ZS5lcnJvckVsZW1lbnQgfHwgaW5kZXggPT09IDApID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVuZGVyRXJyb3JCb3VuZGFyeSwge1xuICAgICAgbG9jYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJldmFsaWRhdGlvbjogZGF0YVJvdXRlclN0YXRlLnJldmFsaWRhdGlvbixcbiAgICAgIGNvbXBvbmVudDogZXJyb3JFbGVtZW50LFxuICAgICAgZXJyb3I6IGVycm9yLFxuICAgICAgY2hpbGRyZW46IGdldENoaWxkcmVuKCksXG4gICAgICByb3V0ZUNvbnRleHQ6IHtcbiAgICAgICAgb3V0bGV0OiBudWxsLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBpc0RhdGFSb3V0ZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pIDogZ2V0Q2hpbGRyZW4oKTtcbiAgfSwgbnVsbCk7XG59XG52YXIgRGF0YVJvdXRlckhvb2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVySG9va1tcIlVzZU5hdmlnYXRlU3RhYmxlXCJdID0gXCJ1c2VOYXZpZ2F0ZVwiO1xuICByZXR1cm4gRGF0YVJvdXRlckhvb2s7XG59KERhdGFSb3V0ZXJIb29rIHx8IHt9KTtcbnZhciBEYXRhUm91dGVyU3RhdGVIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVyU3RhdGVIb29rKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VCbG9ja2VyXCJdID0gXCJ1c2VCbG9ja2VyXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VMb2FkZXJEYXRhXCJdID0gXCJ1c2VMb2FkZXJEYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VBY3Rpb25EYXRhXCJdID0gXCJ1c2VBY3Rpb25EYXRhXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUVycm9yXCJdID0gXCJ1c2VSb3V0ZUVycm9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0aW9uXCJdID0gXCJ1c2VOYXZpZ2F0aW9uXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUxvYWRlckRhdGFcIl0gPSBcInVzZVJvdXRlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTWF0Y2hlc1wiXSA9IFwidXNlTWF0Y2hlc1wiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUmV2YWxpZGF0b3JcIl0gPSBcInVzZVJldmFsaWRhdG9yXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJvdXRlSWRcIl0gPSBcInVzZVJvdXRlSWRcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJTdGF0ZUhvb2s7XG59KERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwge30pO1xuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkge1xuICByZXR1cm4gaG9va05hbWUgKyBcIiBtdXN0IGJlIHVzZWQgd2l0aGluIGEgZGF0YSByb3V0ZXIuICBTZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vcm91dGVycy9waWNraW5nLWEtcm91dGVyLlwiO1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICAhY3R4ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBjdHg7XG59XG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWUpIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlQ29udGV4dChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gcm91dGU7XG59XG5cbi8vIEludGVybmFsIHZlcnNpb24gd2l0aCBob29rTmFtZS1hd2FyZSBkZWJ1Z2dpbmdcbmZ1bmN0aW9uIHVzZUN1cnJlbnRSb3V0ZUlkKGhvb2tOYW1lKSB7XG4gIGxldCByb3V0ZSA9IHVzZVJvdXRlQ29udGV4dChob29rTmFtZSk7XG4gIGxldCB0aGlzUm91dGUgPSByb3V0ZS5tYXRjaGVzW3JvdXRlLm1hdGNoZXMubGVuZ3RoIC0gMV07XG4gICF0aGlzUm91dGUucm91dGUuaWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBob29rTmFtZSArIFwiIGNhbiBvbmx5IGJlIHVzZWQgb24gcm91dGVzIHRoYXQgY29udGFpbiBhIHVuaXF1ZSBcXFwiaWRcXFwiXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiB0aGlzUm91dGUucm91dGUuaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgZm9yIHRoZSBuZWFyZXN0IGNvbnRleHR1YWwgcm91dGVcbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVJZCgpIHtcbiAgcmV0dXJuIHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVJZCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uLCBkZWZhdWx0aW5nIHRvIGFuIFwiaWRsZVwiIG5hdmlnYXRpb24gd2hlblxuICogbm8gbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzc1xuICovXG5mdW5jdGlvbiB1c2VOYXZpZ2F0aW9uKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VOYXZpZ2F0aW9uKTtcbiAgcmV0dXJuIHN0YXRlLm5hdmlnYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyBhIHJldmFsaWRhdGUgZnVuY3Rpb24gZm9yIG1hbnVhbGx5IHRyaWdnZXJpbmcgcmV2YWxpZGF0aW9uLCBhcyB3ZWxsXG4gKiBhcyB0aGUgY3VycmVudCBzdGF0ZSBvZiBhbnkgbWFudWFsIHJldmFsaWRhdGlvbnNcbiAqL1xuZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb25cbiAgfSksIFtkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSwgc3RhdGUucmV2YWxpZGF0aW9uXSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmZ1bmN0aW9uIHVzZU1hdGNoZXMoKSB7XG4gIGxldCB7XG4gICAgbWF0Y2hlcyxcbiAgICBsb2FkZXJEYXRhXG4gIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gbWF0Y2hlcy5tYXAobSA9PiBVTlNBRkVfY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2gobSwgbG9hZGVyRGF0YSkpLCBbbWF0Y2hlcywgbG9hZGVyRGF0YV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuZnVuY3Rpb24gdXNlTG9hZGVyRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgaWYgKHN0YXRlLmVycm9ycyAmJiBzdGF0ZS5lcnJvcnNbcm91dGVJZF0gIT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJZb3UgY2Fubm90IGB1c2VMb2FkZXJEYXRhYCBpbiBhbiBlcnJvckVsZW1lbnQgKHJvdXRlSWQ6IFwiICsgcm91dGVJZCArIFwiKVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlckRhdGEgZm9yIHRoZSBnaXZlbiByb3V0ZUlkXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlTG9hZGVyRGF0YShyb3V0ZUlkKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBhY3Rpb25cbiAqL1xuZnVuY3Rpb24gdXNlQWN0aW9uRGF0YSgpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQWN0aW9uRGF0YSk7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VMb2FkZXJEYXRhKTtcbiAgcmV0dXJuIHN0YXRlLmFjdGlvbkRhdGEgPyBzdGF0ZS5hY3Rpb25EYXRhW3JvdXRlSWRdIDogdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIEVycm9yQm91bmRhcnkvZXJyb3JFbGVtZW50IHRvIGRpc3BsYXkgYSBwcm9wZXIgZXJyb3IgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gdXNlUm91dGVFcnJvcigpIHtcbiAgdmFyIF9zdGF0ZSRlcnJvcnM7XG4gIGxldCBlcnJvciA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVFcnJvckNvbnRleHQpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcbiAgbGV0IHJvdXRlSWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlRXJyb3IpO1xuXG4gIC8vIElmIHRoaXMgd2FzIGEgcmVuZGVyIGVycm9yLCB3ZSBwdXQgaXQgaW4gYSBSb3V0ZUVycm9yIGNvbnRleHQgaW5zaWRlXG4gIC8vIG9mIFJlbmRlckVycm9yQm91bmRhcnlcbiAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICAvLyBPdGhlcndpc2UgbG9vayBmb3IgZXJyb3JzIGZyb20gb3VyIGRhdGEgcm91dGVyIHN0YXRlXG4gIHJldHVybiAoX3N0YXRlJGVycm9ycyA9IHN0YXRlLmVycm9ycykgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRlcnJvcnNbcm91dGVJZF07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaGFwcHktcGF0aCBkYXRhIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgYDxBd2FpdCAvPmAgdmFsdWVcbiAqL1xuZnVuY3Rpb24gdXNlQXN5bmNFcnJvcigpIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZvaWQgMCA6IHZhbHVlLl9lcnJvcjtcbn1cbmxldCBibG9ja2VySWQgPSAwO1xuXG4vKipcbiAqIEFsbG93IHRoZSBhcHBsaWNhdGlvbiB0byBibG9jayBuYXZpZ2F0aW9ucyB3aXRoaW4gdGhlIFNQQSBhbmQgcHJlc2VudCB0aGVcbiAqIHVzZXIgYSBjb25maXJtYXRpb24gZGlhbG9nIHRvIGNvbmZpcm0gdGhlIG5hdmlnYXRpb24uICBNb3N0bHkgdXNlZCB0byBhdm9pZFxuICogdXNpbmcgaGFsZi1maWxsZWQgZm9ybSBkYXRhLiAgVGhpcyBkb2VzIG5vdCBoYW5kbGUgaGFyZC1yZWxvYWRzIG9yXG4gKiBjcm9zcy1vcmlnaW4gbmF2aWdhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUJsb2NrZXIoc2hvdWxkQmxvY2spIHtcbiAgbGV0IHtcbiAgICByb3V0ZXIsXG4gICAgYmFzZW5hbWVcbiAgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IFtibG9ja2VyS2V5LCBzZXRCbG9ja2VyS2V5XSA9IFJlYWN0LnVzZVN0YXRlKFwiXCIpO1xuICBsZXQgYmxvY2tlckZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soYXJnID0+IHtcbiAgICBpZiAodHlwZW9mIHNob3VsZEJsb2NrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiAhIXNob3VsZEJsb2NrO1xuICAgIH1cbiAgICBpZiAoYmFzZW5hbWUgPT09IFwiL1wiKSB7XG4gICAgICByZXR1cm4gc2hvdWxkQmxvY2soYXJnKTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGV5IHByb3ZpZGVkIHVzIGEgZnVuY3Rpb24gYW5kIHdlJ3ZlIGdvdCBhbiBhY3RpdmUgYmFzZW5hbWUsIHN0cmlwXG4gICAgLy8gaXQgZnJvbSB0aGUgbG9jYXRpb25zIHdlIGV4cG9zZSB0byB0aGUgdXNlciB0byBtYXRjaCB0aGUgYmVoYXZpb3Igb2ZcbiAgICAvLyB1c2VMb2NhdGlvblxuICAgIGxldCB7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSA9IGFyZztcbiAgICByZXR1cm4gc2hvdWxkQmxvY2soe1xuICAgICAgY3VycmVudExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgY3VycmVudExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBuZXh0TG9jYXRpb246IF9leHRlbmRzKHt9LCBuZXh0TG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uLnBhdGhuYW1lLCBiYXNlbmFtZSkgfHwgbmV4dExvY2F0aW9uLnBhdGhuYW1lXG4gICAgICB9KSxcbiAgICAgIGhpc3RvcnlBY3Rpb25cbiAgICB9KTtcbiAgfSwgW2Jhc2VuYW1lLCBzaG91bGRCbG9ja10pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGlzIGluIGNoYXJnZSBvZiBibG9ja2VyIGtleSBhc3NpZ25tZW50IGFuZCBkZWxldGlvbiAod2hpY2ggaXNcbiAgLy8gdGlnaHRseSBjb3VwbGVkIHRvIHRoZSBrZXkpXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGtleSA9IFN0cmluZygrK2Jsb2NrZXJJZCk7XG4gICAgc2V0QmxvY2tlcktleShrZXkpO1xuICAgIHJldHVybiAoKSA9PiByb3V0ZXIuZGVsZXRlQmxvY2tlcihrZXkpO1xuICB9LCBbcm91dGVyXSk7XG5cbiAgLy8gVGhpcyBlZmZlY3QgaGFuZGxlcyBhc3NpZ25pbmcgdGhlIGJsb2NrZXJGdW5jdGlvbi4gIFRoaXMgaXMgdG8gaGFuZGxlXG4gIC8vIHVuc3RhYmxlIGJsb2NrZXIgZnVuY3Rpb24gaWRlbnRpdGllcywgYW5kIGhhcHBlbnMgb25seSBhZnRlciB0aGUgcHJpb3JcbiAgLy8gZWZmZWN0IHNvIHdlIGRvbid0IGdldCBhbiBvcnBoYW5lZCBibG9ja2VyRnVuY3Rpb24gaW4gdGhlIHJvdXRlciB3aXRoIGFcbiAgLy8ga2V5IG9mIFwiXCIuICBVbnRpbCB0aGVuIHdlIGp1c3QgaGF2ZSB0aGUgSURMRV9CTE9DS0VSLlxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChibG9ja2VyS2V5ICE9PSBcIlwiKSB7XG4gICAgICByb3V0ZXIuZ2V0QmxvY2tlcihibG9ja2VyS2V5LCBibG9ja2VyRnVuY3Rpb24pO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uXSk7XG5cbiAgLy8gUHJlZmVyIHRoZSBibG9ja2VyIGZyb20gYHN0YXRlYCBub3QgYHJvdXRlci5zdGF0ZWAgc2luY2UgRGF0YVJvdXRlckNvbnRleHRcbiAgLy8gaXMgbWVtb2l6ZWQgc28gdGhpcyBlbnN1cmVzIHdlIHVwZGF0ZSBvbiBibG9ja2VyIHN0YXRlIHVwZGF0ZXNcbiAgcmV0dXJuIGJsb2NrZXJLZXkgJiYgc3RhdGUuYmxvY2tlcnMuaGFzKGJsb2NrZXJLZXkpID8gc3RhdGUuYmxvY2tlcnMuZ2V0KGJsb2NrZXJLZXkpIDogSURMRV9CTE9DS0VSO1xufVxuXG4vKipcbiAqIFN0YWJsZSB2ZXJzaW9uIG9mIHVzZU5hdmlnYXRlIHRoYXQgaXMgdXNlZCB3aGVuIHdlIGFyZSBpbiB0aGUgY29udGV4dCBvZlxuICogYSBSb3V0ZXJQcm92aWRlci5cbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGVTdGFibGUoKSB7XG4gIGxldCB7XG4gICAgcm91dGVyXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VOYXZpZ2F0ZVN0YWJsZSk7XG4gIGxldCBpZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgYWN0aXZlUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgYWN0aXZlUmVmLmN1cnJlbnQgPSB0cnVlO1xuICB9KTtcbiAgbGV0IG5hdmlnYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRvLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhhY3RpdmVSZWYuY3VycmVudCwgbmF2aWdhdGVFZmZlY3RXYXJuaW5nKSA6IHZvaWQgMDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaGVyZSBzaW5jZSBpZiB0aGlzIGhhcHBlbnMgb24gZmlyc3QgcmVuZGVyIHRoZSBuYXZpZ2F0ZVxuICAgIC8vIGlzIHVzZWxlc3MgYmVjYXVzZSB3ZSBoYXZlbid0IHdpcmVkIHVwIG91ciByb3V0ZXIgc3Vic2NyaWJlciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91dGVyLm5hdmlnYXRlKHRvLCBfZXh0ZW5kcyh7XG4gICAgICAgIGZyb21Sb3V0ZUlkOiBpZFxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH1cbiAgfSwgW3JvdXRlciwgaWRdKTtcbiAgcmV0dXJuIG5hdmlnYXRlO1xufVxuY29uc3QgYWxyZWFkeVdhcm5lZCA9IHt9O1xuZnVuY3Rpb24gd2FybmluZ09uY2Uoa2V5LCBjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCAmJiAhYWxyZWFkeVdhcm5lZFtrZXldKSB7XG4gICAgYWxyZWFkeVdhcm5lZFtrZXldID0gdHJ1ZTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgbWVzc2FnZSkgOiB2b2lkIDA7XG4gIH1cbn1cblxuLyoqXG4gIFdlYnBhY2sgKyBSZWFjdCAxNyBmYWlscyB0byBjb21waWxlIG9uIGFueSBvZiB0aGUgZm9sbG93aW5nIGJlY2F1c2Ugd2VicGFja1xuICBjb21wbGFpbnMgdGhhdCBgc3RhcnRUcmFuc2l0aW9uYCBkb2Vzbid0IGV4aXN0IGluIGBSZWFjdGA6XG4gICogaW1wb3J0IHsgc3RhcnRUcmFuc2l0aW9uIH0gZnJvbSBcInJlYWN0XCJcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdC5zdGFydFRyYW5zaXRpb24oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3RbXCJzdGFydFRyYW5zaXRpb25cIl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgTW92aW5nIGl0IHRvIGEgY29uc3RhbnQgc3VjaCBhcyB0aGUgZm9sbG93aW5nIHNvbHZlcyB0aGUgV2VicGFjay9SZWFjdCAxNyBpc3N1ZTpcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIGNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuICAgIFNUQVJUX1RSQU5TSVRJT04gaW4gUmVhY3QgPyBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBIb3dldmVyLCB0aGF0IGludHJvZHVjZXMgd2VicGFjay90ZXJzZXIgbWluaWZpY2F0aW9uIGlzc3VlcyBpbiBwcm9kdWN0aW9uIGJ1aWxkc1xuICBpbiBSZWFjdCAxOCB3aGVyZSBtaW5pZmljYXRpb24vb2JmdXNjYXRpb24gZW5kcyB1cCByZW1vdmluZyB0aGUgY2FsbCBvZlxuICBSZWFjdC5zdGFydFRyYW5zaXRpb24gZW50aXJlbHkgZnJvbSB0aGUgZmlyc3QgaGFsZiBvZiB0aGUgdGVybmFyeS4gIEdyYWJiaW5nXG4gIHRoaXMgZXhwb3J0ZWQgcmVmZXJlbmNlIG9uY2UgdXAgZnJvbnQgcmVzb2x2ZXMgdGhhdCBpc3N1ZS5cblxuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9yZWFjdC1yb3V0ZXIvaXNzdWVzLzEwNTc5XG4qL1xuY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG5jb25zdCBzdGFydFRyYW5zaXRpb25JbXBsID0gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl07XG5cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIGlmICh2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgICB9XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuXG4gIC8vIE5lZWQgdG8gdXNlIGEgbGF5b3V0IGVmZmVjdCBoZXJlIHNvIHdlIGFyZSBzdWJzY3JpYmVkIGVhcmx5IGVub3VnaCB0b1xuICAvLyBwaWNrIHVwIG9uIGFueSByZW5kZXItZHJpdmVuIHJlZGlyZWN0cy9uYXZpZ2F0aW9ucyAodXNlRWZmZWN0LzxOYXZpZ2F0ZT4pXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiByb3V0ZXIuc3Vic2NyaWJlKHNldFN0YXRlKSwgW3JvdXRlciwgc2V0U3RhdGVdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuXG4gIC8vIFRoZSBmcmFnbWVudCBhbmQge251bGx9IGhlcmUgYXJlIGltcG9ydGFudCEgIFdlIG5lZWQgdGhlbSB0byBrZWVwIFJlYWN0IDE4J3NcbiAgLy8gdXNlSWQgaGFwcHkgd2hlbiB3ZSBhcmUgc2VydmVyLXJlbmRlcmluZyBzaW5jZSB3ZSBtYXkgaGF2ZSBhIDxzY3JpcHQ+IGhlcmVcbiAgLy8gY29udGFpbmluZyB0aGUgaHlkcmF0ZWQgc2VydmVyLXNpZGUgc3RhdGljQ29udGV4dCAoZnJvbSBTdGF0aWNSb3V0ZXJQcm92aWRlcikuXG4gIC8vIHVzZUlkIHJlbGllcyBvbiB0aGUgY29tcG9uZW50IHRyZWUgc3RydWN0dXJlIHRvIGdlbmVyYXRlIGRldGVybWluaXN0aWMgaWQnc1xuICAvLyBzbyB3ZSBuZWVkIHRvIGVuc3VyZSBpdCByZW1haW5zIHRoZSBzYW1lIG9uIHRoZSBjbGllbnQgZXZlbiB0aG91Z2hcbiAgLy8gd2UgZG9uJ3QgbmVlZCB0aGUgPHNjcmlwdD4gdGFnXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZGF0YVJvdXRlckNvbnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgIG5hdmlnYXRvcjogbmF2aWdhdG9yLFxuICAgIGZ1dHVyZToge1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IHJvdXRlci5mdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGhcbiAgICB9XG4gIH0sIHN0YXRlLmluaXRpYWxpemVkIHx8IHJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXMsIHtcbiAgICByb3V0ZXM6IHJvdXRlci5yb3V0ZXMsXG4gICAgZnV0dXJlOiByb3V0ZXIuZnV0dXJlLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KSA6IGZhbGxiYWNrRWxlbWVudCkpKSwgbnVsbCk7XG59XG5mdW5jdGlvbiBEYXRhUm91dGVzKF9yZWYyKSB7XG4gIGxldCB7XG4gICAgcm91dGVzLFxuICAgIGZ1dHVyZSxcbiAgICBzdGF0ZVxuICB9ID0gX3JlZjI7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgdW5kZWZpbmVkLCBzdGF0ZSwgZnV0dXJlKTtcbn1cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gTWVtb3J5Um91dGVyKF9yZWYzKSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgaW5pdGlhbEVudHJpZXMsXG4gICAgaW5pdGlhbEluZGV4LFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjM7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXgsXG4gICAgICB2NUNvbXBhdDogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb25cbiAgfSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb24gJiYgc3RhcnRUcmFuc2l0aW9uSW1wbCA/IHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSkgOiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpO1xuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnksIHNldFN0YXRlXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuYWN0aW9uLFxuICAgIG5hdmlnYXRvcjogaGlzdG9yeSxcbiAgICBmdXR1cmU6IGZ1dHVyZVxuICB9KTtcbn1cbi8qKlxuICogQ2hhbmdlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBOb3RlOiBUaGlzIEFQSSBpcyBtb3N0bHkgdXNlZnVsIGluIFJlYWN0LkNvbXBvbmVudCBzdWJjbGFzc2VzIHRoYXQgYXJlIG5vdFxuICogYWJsZSB0byB1c2UgaG9va3MuIEluIGZ1bmN0aW9uYWwgY29tcG9uZW50cywgd2UgcmVjb21tZW5kIHlvdSB1c2UgdGhlXG4gKiBgdXNlTmF2aWdhdGVgIGhvb2sgaW5zdGVhZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gTmF2aWdhdGUoX3JlZjQpIHtcbiAgbGV0IHtcbiAgICB0byxcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0gPSBfcmVmNDtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2ZcbiAgLy8gdGhlIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCI8TmF2aWdhdGU+IG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgZnV0dXJlLFxuICAgIHN0YXRpYzogaXNTdGF0aWNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyghaXNTdGF0aWMsIFwiPE5hdmlnYXRlPiBtdXN0IG5vdCBiZSB1c2VkIG9uIHRoZSBpbml0aWFsIHJlbmRlciBpbiBhIDxTdGF0aWNSb3V0ZXI+LiBcIiArIFwiVGhpcyBpcyBhIG5vLW9wLCBidXQgeW91IHNob3VsZCBtb2RpZnkgeW91ciBjb2RlIHNvIHRoZSA8TmF2aWdhdGU+IGlzIFwiICsgXCJvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5cIikgOiB2b2lkIDA7XG4gIGxldCB7XG4gICAgbWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvblBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuXG4gIC8vIFJlc29sdmUgdGhlIHBhdGggb3V0c2lkZSBvZiB0aGUgZWZmZWN0IHNvIHRoYXQgd2hlbiBlZmZlY3RzIHJ1biB0d2ljZSBpblxuICAvLyBTdHJpY3RNb2RlIHRoZXkgbmF2aWdhdGUgdG8gdGhlIHNhbWUgcGxhY2VcbiAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIik7XG4gIGxldCBqc29uUGF0aCA9IEpTT04uc3RyaW5naWZ5KHBhdGgpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4gbmF2aWdhdGUoSlNPTi5wYXJzZShqc29uUGF0aCksIHtcbiAgICByZXBsYWNlLFxuICAgIHN0YXRlLFxuICAgIHJlbGF0aXZlXG4gIH0pLCBbbmF2aWdhdGUsIGpzb25QYXRoLCByZWxhdGl2ZSwgcmVwbGFjZSwgc3RhdGVdKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJlbmRlcnMgdGhlIGNoaWxkIHJvdXRlJ3MgZWxlbWVudCwgaWYgdGhlcmUgaXMgb25lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9vdXRsZXRcbiAqL1xuZnVuY3Rpb24gT3V0bGV0KHByb3BzKSB7XG4gIHJldHVybiB1c2VPdXRsZXQocHJvcHMuY29udGV4dCk7XG59XG4vKipcbiAqIERlY2xhcmVzIGFuIGVsZW1lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQgYXQgYSBjZXJ0YWluIFVSTCBwYXRoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vY29tcG9uZW50cy9yb3V0ZVxuICovXG5mdW5jdGlvbiBSb3V0ZShfcHJvcHMpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIFwiICsgXCJuZXZlciByZW5kZXJlZCBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciA8Um91dGU+IGluIGEgPFJvdXRlcz4uXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgO1xufVxuLyoqXG4gKiBQcm92aWRlcyBsb2NhdGlvbiBjb250ZXh0IGZvciB0aGUgcmVzdCBvZiB0aGUgYXBwLlxuICpcbiAqIE5vdGU6IFlvdSB1c3VhbGx5IHdvbid0IHJlbmRlciBhIGA8Um91dGVyPmAgZGlyZWN0bHkuIEluc3RlYWQsIHlvdSdsbCByZW5kZXIgYVxuICogcm91dGVyIHRoYXQgaXMgbW9yZSBzcGVjaWZpYyB0byB5b3VyIGVudmlyb25tZW50IHN1Y2ggYXMgYSBgPEJyb3dzZXJSb3V0ZXI+YFxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgYDxTdGF0aWNSb3V0ZXI+YCBmb3Igc2VydmVyIHJlbmRlcmluZy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL3JvdXRlclxuICovXG5mdW5jdGlvbiBSb3V0ZXIoX3JlZjUpIHtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZTogYmFzZW5hbWVQcm9wID0gXCIvXCIsXG4gICAgY2hpbGRyZW4gPSBudWxsLFxuICAgIGxvY2F0aW9uOiBsb2NhdGlvblByb3AsXG4gICAgbmF2aWdhdGlvblR5cGUgPSBBY3Rpb24uUG9wLFxuICAgIG5hdmlnYXRvcixcbiAgICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZSxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY1O1xuICAhIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90IHJlbmRlciBhIDxSb3V0ZXI+IGluc2lkZSBhbm90aGVyIDxSb3V0ZXI+LlwiICsgXCIgWW91IHNob3VsZCBuZXZlciBoYXZlIG1vcmUgdGhhbiBvbmUgaW4geW91ciBhcHAuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG5cbiAgLy8gUHJlc2VydmUgdHJhaWxpbmcgc2xhc2hlcyBvbiBiYXNlbmFtZSwgc28gd2UgY2FuIGxldCB0aGUgdXNlciBjb250cm9sXG4gIC8vIHRoZSBlbmZvcmNlbWVudCBvZiB0cmFpbGluZyBzbGFzaGVzIHRocm91Z2hvdXQgdGhlIGFwcFxuICBsZXQgYmFzZW5hbWUgPSBiYXNlbmFtZVByb3AucmVwbGFjZSgvXlxcLyovLCBcIi9cIik7XG4gIGxldCBuYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICBiYXNlbmFtZSxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe1xuICAgICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gICAgfSwgZnV0dXJlKVxuICB9KSwgW2Jhc2VuYW1lLCBmdXR1cmUsIG5hdmlnYXRvciwgc3RhdGljUHJvcF0pO1xuICBpZiAodHlwZW9mIGxvY2F0aW9uUHJvcCA9PT0gXCJzdHJpbmdcIikge1xuICAgIGxvY2F0aW9uUHJvcCA9IHBhcnNlUGF0aChsb2NhdGlvblByb3ApO1xuICB9XG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIlxuICB9ID0gbG9jYXRpb25Qcm9wO1xuICBsZXQgbG9jYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IHRyYWlsaW5nUGF0aG5hbWUgPSBzdHJpcEJhc2VuYW1lKHBhdGhuYW1lLCBiYXNlbmFtZSk7XG4gICAgaWYgKHRyYWlsaW5nUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBsb2NhdGlvbjoge1xuICAgICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgICAgc2VhcmNoLFxuICAgICAgICBoYXNoLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAga2V5XG4gICAgICB9LFxuICAgICAgbmF2aWdhdGlvblR5cGVcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXksIG5hdmlnYXRpb25UeXBlXSk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGxvY2F0aW9uQ29udGV4dCAhPSBudWxsLCBcIjxSb3V0ZXIgYmFzZW5hbWU9XFxcIlwiICsgYmFzZW5hbWUgKyBcIlxcXCI+IGlzIG5vdCBhYmxlIHRvIG1hdGNoIHRoZSBVUkwgXCIgKyAoXCJcXFwiXCIgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2ggKyBcIlxcXCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBcIikgKyBcImJhc2VuYW1lLCBzbyB0aGUgPFJvdXRlcj4gd29uJ3QgcmVuZGVyIGFueXRoaW5nLlwiKSA6IHZvaWQgMDtcbiAgaWYgKGxvY2F0aW9uQ29udGV4dCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IG5hdmlnYXRpb25Db250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExvY2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICB2YWx1ZTogbG9jYXRpb25Db250ZXh0XG4gIH0pKTtcbn1cbi8qKlxuICogQSBjb250YWluZXIgZm9yIGEgbmVzdGVkIHRyZWUgb2YgYDxSb3V0ZT5gIGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmZ1bmN0aW9uIFJvdXRlcyhfcmVmNikge1xuICBsZXQge1xuICAgIGNoaWxkcmVuLFxuICAgIGxvY2F0aW9uXG4gIH0gPSBfcmVmNjtcbiAgcmV0dXJuIHVzZVJvdXRlcyhjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oY2hpbGRyZW4pLCBsb2NhdGlvbik7XG59XG4vKipcbiAqIENvbXBvbmVudCB0byB1c2UgZm9yIHJlbmRlcmluZyBsYXppbHkgbG9hZGVkIGRhdGEgZnJvbSByZXR1cm5pbmcgZGVmZXIoKVxuICogaW4gYSBsb2FkZXIgZnVuY3Rpb25cbiAqL1xuZnVuY3Rpb24gQXdhaXQoX3JlZjcpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBlcnJvckVsZW1lbnQsXG4gICAgcmVzb2x2ZVxuICB9ID0gX3JlZjc7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdEVycm9yQm91bmRhcnksIHtcbiAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgIGVycm9yRWxlbWVudDogZXJyb3JFbGVtZW50XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlc29sdmVBd2FpdCwgbnVsbCwgY2hpbGRyZW4pKTtcbn1cbnZhciBBd2FpdFJlbmRlclN0YXR1cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoQXdhaXRSZW5kZXJTdGF0dXMpIHtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJwZW5kaW5nXCJdID0gMF0gPSBcInBlbmRpbmdcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJzdWNjZXNzXCJdID0gMV0gPSBcInN1Y2Nlc3NcIjtcbiAgQXdhaXRSZW5kZXJTdGF0dXNbQXdhaXRSZW5kZXJTdGF0dXNbXCJlcnJvclwiXSA9IDJdID0gXCJlcnJvclwiO1xuICByZXR1cm4gQXdhaXRSZW5kZXJTdGF0dXM7XG59KEF3YWl0UmVuZGVyU3RhdHVzIHx8IHt9KTtcbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5jbGFzcyBBd2FpdEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZXJyb3I6IG51bGxcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JcbiAgICB9O1xuICB9XG4gIGNvbXBvbmVudERpZENhdGNoKGVycm9yLCBlcnJvckluZm8pIHtcbiAgICBjb25zb2xlLmVycm9yKFwiPEF3YWl0PiBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBsZXQge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBlcnJvckVsZW1lbnQsXG4gICAgICByZXNvbHZlXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgbGV0IHByb21pc2UgPSBudWxsO1xuICAgIGxldCBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuICAgIGlmICghKHJlc29sdmUgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xuICAgICAgLy8gRGlkbid0IGdldCBhIHByb21pc2UgLSBwcm92aWRlIGFzIGEgcmVzb2x2ZWQgcHJvbWlzZVxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2VzcztcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZXNvbHZlXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHRydWVcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiByZW5kZXJFcnJvclxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChyZXNvbHZlLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9IFwiX2Vycm9yXCIgaW4gcHJvbWlzZSA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yIDogXCJfZGF0YVwiIGluIHByb21pc2UgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY4O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcbiAgbGV0IHRvUmVuZGVyID0gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihkYXRhKSA6IGNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHRvUmVuZGVyKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenlcbiAgICB9O1xuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSB7XG4gIGxldCB1cGRhdGVzID0ge1xuICAgIC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAgIC8vIHRoZXJlIGlmIHlvdSBjaGFuZ2UgdGhpcyAtLSBwbGVhc2UgYW5kIHRoYW5rIHlvdSFcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiByb3V0ZS5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgcm91dGUuZXJyb3JFbGVtZW50ICE9IG51bGxcbiAgfTtcbiAgaWYgKHJvdXRlLkNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYENvbXBvbmVudGAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5Db21wb25lbnQpLFxuICAgICAgQ29tcG9uZW50OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBIeWRyYXRlRmFsbGJhY2tgIGFuZCBgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgSHlkcmF0ZUZhbGxiYWNrYCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkh5ZHJhdGVGYWxsYmFjayksXG4gICAgICBIeWRyYXRlRmFsbGJhY2s6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnVuc3RhYmxlX2RhdGFTdHJhdGVneVxuICB9KS5pbml0aWFsaXplKCk7XG59XG5cbmV4cG9ydCB7IEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBPdXRsZXQsIFJvdXRlLCBSb3V0ZXIsIFJvdXRlclByb3ZpZGVyLCBSb3V0ZXMsIERhdGFSb3V0ZXJDb250ZXh0IGFzIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgRGF0YVJvdXRlclN0YXRlQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgTG9jYXRpb25Db250ZXh0IGFzIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIE5hdmlnYXRpb25Db250ZXh0IGFzIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgUm91dGVDb250ZXh0IGFzIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIG1hcFJvdXRlUHJvcGVydGllcyBhcyBVTlNBRkVfbWFwUm91dGVQcm9wZXJ0aWVzLCB1c2VSb3V0ZUlkIGFzIFVOU0FGRV91c2VSb3V0ZUlkLCB1c2VSb3V0ZXNJbXBsIGFzIFVOU0FGRV91c2VSb3V0ZXNJbXBsLCBjcmVhdGVNZW1vcnlSb3V0ZXIsIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIGFzIGNyZWF0ZVJvdXRlc0Zyb21FbGVtZW50cywgcmVuZGVyTWF0Y2hlcywgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgdmFyIGZpcnN0ID0gbnVsbDtcbiAgdmFyIGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgbnVsbExpc3RlbmVycyA9IHtcbiAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7fSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gIHZhciB1bnN1YnNjcmliZTtcbiAgdmFyIGxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG5cbiAgZnVuY3Rpb24gYWRkTmVzdGVkU3ViKGxpc3RlbmVyKSB7XG4gICAgdHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIGxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICBsaXN0ZW5lcnMubm90aWZ5KCk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVDaGFuZ2VXcmFwcGVyKCkge1xuICAgIGlmIChzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odW5zdWJzY3JpYmUpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdW5zdWJzY3JpYmUpIHtcbiAgICAgIHVuc3Vic2NyaWJlID0gcGFyZW50U3ViID8gcGFyZW50U3ViLmFkZE5lc3RlZFN1YihoYW5kbGVDaGFuZ2VXcmFwcGVyKSA6IHN0b3JlLnN1YnNjcmliZShoYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIGxpc3RlbmVycyA9IGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgdW5zdWJzY3JpYmUoKTtcbiAgICAgIHVuc3Vic2NyaWJlID0gdW5kZWZpbmVkO1xuICAgICAgbGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICBsaXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB7XG4gICAgYWRkTmVzdGVkU3ViOiBhZGROZXN0ZWRTdWIsXG4gICAgbm90aWZ5TmVzdGVkU3Viczogbm90aWZ5TmVzdGVkU3VicyxcbiAgICBoYW5kbGVDaGFuZ2VXcmFwcGVyOiBoYW5kbGVDaGFuZ2VXcmFwcGVyLFxuICAgIGlzU3Vic2NyaWJlZDogaXNTdWJzY3JpYmVkLFxuICAgIHRyeVN1YnNjcmliZTogdHJ5U3Vic2NyaWJlLFxuICAgIHRyeVVuc3Vic2NyaWJlOiB0cnlVbnN1YnNjcmliZSxcbiAgICBnZXRMaXN0ZW5lcnM6IGZ1bmN0aW9uIGdldExpc3RlbmVycygpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuICByZXR1cm4gc3Vic2NyaXB0aW9uO1xufSIsImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSAncmVhY3QnOyAvLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci4gV2UgbmVlZCB1c2VMYXlvdXRFZmZlY3QgdG8gZW5zdXJlIHRoZSBzdG9yZVxuLy8gc3Vic2NyaXB0aW9uIGNhbGxiYWNrIGFsd2F5cyBoYXMgdGhlIHNlbGVjdG9yIGZyb20gdGhlIGxhdGVzdCByZW5kZXIgY29tbWl0XG4vLyBhdmFpbGFibGUsIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgaGFwcGVuIGJldHdlZW4gcmVuZGVyIGFuZCB0aGUgZWZmZWN0LFxuLy8gd2hpY2ggbWF5IGNhdXNlIG1pc3NlZCB1cGRhdGVzOyB3ZSBhbHNvIG11c3QgZW5zdXJlIHRoZSBzdG9yZSBzdWJzY3JpcHRpb25cbi8vIGlzIGNyZWF0ZWQgc3luY2hyb25vdXNseSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBvY2N1ciBiZWZvcmUgdGhlXG4vLyBzdWJzY3JpcHRpb24gaXMgY3JlYXRlZCBhbmQgYW4gaW5jb25zaXN0ZW50IHN0YXRlIG1heSBiZSBvYnNlcnZlZFxuXG5leHBvcnQgdmFyIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnID8gdXNlTGF5b3V0RWZmZWN0IDogdXNlRWZmZWN0OyIsImltcG9ydCBSZWFjdCwgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjb250ZXh0VmFsdWUuc3Vic2NyaXB0aW9uO1xuICAgIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnM7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgfSwgY2hpbGRyZW4pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gICAgc3RvcmU6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICBzdWJzY3JpYmU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBkaXNwYXRjaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGdldFN0YXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSksXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQcm92aWRlcjsiLCJmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgcmV0dXJuIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKG4pIHtcbiAgICBmb3IgKHZhciBlID0gMTsgZSA8IGFyZ3VtZW50cy5sZW5ndGg7IGUrKykge1xuICAgICAgdmFyIHQgPSBhcmd1bWVudHNbZV07XG4gICAgICBmb3IgKHZhciByIGluIHQpICh7fSkuaGFzT3duUHJvcGVydHkuY2FsbCh0LCByKSAmJiAobltyXSA9IHRbcl0pO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbiAgfSwgX2V4dGVuZHMuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCB7IF9leHRlbmRzIGFzIGRlZmF1bHQgfTsiLCJmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShyLCBlKSB7XG4gIGlmIChudWxsID09IHIpIHJldHVybiB7fTtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgbiBpbiByKSBpZiAoe30uaGFzT3duUHJvcGVydHkuY2FsbChyLCBuKSkge1xuICAgIGlmIChlLmluZGV4T2YobikgPj0gMCkgY29udGludWU7XG4gICAgdFtuXSA9IHJbbl07XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5leHBvcnQgeyBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbnZhciBfZXhjbHVkZWQgPSBbXCJnZXREaXNwbGF5TmFtZVwiLCBcIm1ldGhvZE5hbWVcIiwgXCJyZW5kZXJDb3VudFByb3BcIiwgXCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXNcIiwgXCJzdG9yZUtleVwiLCBcIndpdGhSZWZcIiwgXCJmb3J3YXJkUmVmXCIsIFwiY29udGV4dFwiXSxcbiAgICBfZXhjbHVkZWQyID0gW1wicmVhY3RSZWR1eEZvcndhcmRlZFJlZlwiXTtcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQsIHVzZU1lbW8sIHVzZVJlZiwgdXNlUmVkdWNlciB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGlzVmFsaWRFbGVtZW50VHlwZSwgaXNDb250ZXh0Q29uc3VtZXIgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgeyBjcmVhdGVTdWJzY3JpcHRpb24gfSBmcm9tICcuLi91dGlscy9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCB9IGZyb20gJy4uL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL0NvbnRleHQnOyAvLyBEZWZpbmUgc29tZSBjb25zdGFudCBhcnJheXMganVzdCB0byBhdm9pZCByZS1jcmVhdGluZyB0aGVzZVxuXG52YXIgRU1QVFlfQVJSQVkgPSBbXTtcbnZhciBOT19TVUJTQ1JJUFRJT05fQVJSQVkgPSBbbnVsbCwgbnVsbF07XG5cbnZhciBzdHJpbmdpZnlDb21wb25lbnQgPSBmdW5jdGlvbiBzdHJpbmdpZnlDb21wb25lbnQoQ29tcCkge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShDb21wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuIFN0cmluZyhDb21wKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RvcmVTdGF0ZVVwZGF0ZXNSZWR1Y2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgdmFyIHVwZGF0ZUNvdW50ID0gc3RhdGVbMV07XG4gIHJldHVybiBbYWN0aW9uLnBheWxvYWQsIHVwZGF0ZUNvdW50ICsgMV07XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhlZmZlY3RGdW5jLCBlZmZlY3RBcmdzLCBkZXBlbmRlbmNpZXMpIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGVmZmVjdEZ1bmMuYXBwbHkodm9pZCAwLCBlZmZlY3RBcmdzKTtcbiAgfSwgZGVwZW5kZW5jaWVzKTtcbn1cblxuZnVuY3Rpb24gY2FwdHVyZVdyYXBwZXJQcm9wcyhsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIHdyYXBwZXJQcm9wcywgYWN0dWFsQ2hpbGRQcm9wcywgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSwgbm90aWZ5TmVzdGVkU3Vicykge1xuICAvLyBXZSB3YW50IHRvIGNhcHR1cmUgdGhlIHdyYXBwZXIgcHJvcHMgYW5kIGNoaWxkIHByb3BzIHdlIHVzZWQgZm9yIGxhdGVyIGNvbXBhcmlzb25zXG4gIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCA9IHdyYXBwZXJQcm9wcztcbiAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IGFjdHVhbENoaWxkUHJvcHM7XG4gIHJlbmRlcklzU2NoZWR1bGVkLmN1cnJlbnQgPSBmYWxzZTsgLy8gSWYgdGhlIHJlbmRlciB3YXMgZnJvbSBhIHN0b3JlIHVwZGF0ZSwgY2xlYXIgb3V0IHRoYXQgcmVmZXJlbmNlIGFuZCBjYXNjYWRlIHRoZSBzdWJzY3JpYmVyIHVwZGF0ZVxuXG4gIGlmIChjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQpIHtcbiAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBudWxsO1xuICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVVcGRhdGVzKHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcywgc3RvcmUsIHN1YnNjcmlwdGlvbiwgY2hpbGRQcm9wc1NlbGVjdG9yLCBsYXN0V3JhcHBlclByb3BzLCBsYXN0Q2hpbGRQcm9wcywgcmVuZGVySXNTY2hlZHVsZWQsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMsIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2gpIHtcbiAgLy8gSWYgd2UncmUgbm90IHN1YnNjcmliZWQgdG8gdGhlIHN0b3JlLCBub3RoaW5nIHRvIGRvIGhlcmVcbiAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybjsgLy8gQ2FwdHVyZSB2YWx1ZXMgZm9yIGNoZWNraW5nIGlmIGFuZCB3aGVuIHRoaXMgY29tcG9uZW50IHVubW91bnRzXG5cbiAgdmFyIGRpZFVuc3Vic2NyaWJlID0gZmFsc2U7XG4gIHZhciBsYXN0VGhyb3duRXJyb3IgPSBudWxsOyAvLyBXZSdsbCBydW4gdGhpcyBjYWxsYmFjayBldmVyeSB0aW1lIGEgc3RvcmUgc3Vic2NyaXB0aW9uIHVwZGF0ZSBwcm9wYWdhdGVzIHRvIHRoaXMgY29tcG9uZW50XG5cbiAgdmFyIGNoZWNrRm9yVXBkYXRlcyA9IGZ1bmN0aW9uIGNoZWNrRm9yVXBkYXRlcygpIHtcbiAgICBpZiAoZGlkVW5zdWJzY3JpYmUpIHtcbiAgICAgIC8vIERvbid0IHJ1biBzdGFsZSBsaXN0ZW5lcnMuXG4gICAgICAvLyBSZWR1eCBkb2Vzbid0IGd1YXJhbnRlZSB1bnN1YnNjcmlwdGlvbnMgaGFwcGVuIHVudGlsIG5leHQgZGlzcGF0Y2guXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxhdGVzdFN0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIHZhciBuZXdDaGlsZFByb3BzLCBlcnJvcjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBY3R1YWxseSBydW4gdGhlIHNlbGVjdG9yIHdpdGggdGhlIG1vc3QgcmVjZW50IHN0b3JlIHN0YXRlIGFuZCB3cmFwcGVyIHByb3BzXG4gICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlXG4gICAgICBuZXdDaGlsZFByb3BzID0gY2hpbGRQcm9wc1NlbGVjdG9yKGxhdGVzdFN0b3JlU3RhdGUsIGxhc3RXcmFwcGVyUHJvcHMuY3VycmVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZXJyb3IgPSBlO1xuICAgICAgbGFzdFRocm93bkVycm9yID0gZTtcbiAgICB9XG5cbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBsYXN0VGhyb3duRXJyb3IgPSBudWxsO1xuICAgIH0gLy8gSWYgdGhlIGNoaWxkIHByb3BzIGhhdmVuJ3QgY2hhbmdlZCwgbm90aGluZyB0byBkbyBoZXJlIC0gY2FzY2FkZSB0aGUgc3Vic2NyaXB0aW9uIHVwZGF0ZVxuXG5cbiAgICBpZiAobmV3Q2hpbGRQcm9wcyA9PT0gbGFzdENoaWxkUHJvcHMuY3VycmVudCkge1xuICAgICAgaWYgKCFyZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50KSB7XG4gICAgICAgIG5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gU2F2ZSByZWZlcmVuY2VzIHRvIHRoZSBuZXcgY2hpbGQgcHJvcHMuICBOb3RlIHRoYXQgd2UgdHJhY2sgdGhlIFwiY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGVcIlxuICAgICAgLy8gYXMgYSByZWYgaW5zdGVhZCBvZiBhIHVzZVN0YXRlL3VzZVJlZHVjZXIgYmVjYXVzZSB3ZSBuZWVkIGEgd2F5IHRvIGRldGVybWluZSBpZiB0aGF0IHZhbHVlIGhhc1xuICAgICAgLy8gYmVlbiBwcm9jZXNzZWQuICBJZiB0aGlzIHdlbnQgaW50byB1c2VTdGF0ZS91c2VSZWR1Y2VyLCB3ZSBjb3VsZG4ndCBjbGVhciBvdXQgdGhlIHZhbHVlIHdpdGhvdXRcbiAgICAgIC8vIGZvcmNpbmcgYW5vdGhlciByZS1yZW5kZXIsIHdoaWNoIHdlIGRvbid0IHdhbnQuXG4gICAgICBsYXN0Q2hpbGRQcm9wcy5jdXJyZW50ID0gbmV3Q2hpbGRQcm9wcztcbiAgICAgIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gdHJ1ZTsgLy8gSWYgdGhlIGNoaWxkIHByb3BzIF9kaWRfIGNoYW5nZSAob3Igd2UgY2F1Z2h0IGFuIGVycm9yKSwgdGhpcyB3cmFwcGVyIGNvbXBvbmVudCBuZWVkcyB0byByZS1yZW5kZXJcblxuICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTVE9SRV9VUERBVEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGVycm9yOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07IC8vIEFjdHVhbGx5IHN1YnNjcmliZSB0byB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IgKG9yIHN0b3JlKVxuXG5cbiAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBjaGVja0ZvclVwZGF0ZXM7XG4gIHN1YnNjcmlwdGlvbi50cnlTdWJzY3JpYmUoKTsgLy8gUHVsbCBkYXRhIGZyb20gdGhlIHN0b3JlIGFmdGVyIGZpcnN0IHJlbmRlciBpbiBjYXNlIHRoZSBzdG9yZSBoYXNcbiAgLy8gY2hhbmdlZCBzaW5jZSB3ZSBiZWdhbi5cblxuICBjaGVja0ZvclVwZGF0ZXMoKTtcblxuICB2YXIgdW5zdWJzY3JpYmVXcmFwcGVyID0gZnVuY3Rpb24gdW5zdWJzY3JpYmVXcmFwcGVyKCkge1xuICAgIGRpZFVuc3Vic2NyaWJlID0gdHJ1ZTtcbiAgICBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG5cbiAgICBpZiAobGFzdFRocm93bkVycm9yKSB7XG4gICAgICAvLyBJdCdzIHBvc3NpYmxlIHRoYXQgd2UgY2F1Z2h0IGFuIGVycm9yIGR1ZSB0byBhIGJhZCBtYXBTdGF0ZSBmdW5jdGlvbiwgYnV0IHRoZVxuICAgICAgLy8gcGFyZW50IHJlLXJlbmRlcmVkIHdpdGhvdXQgdGhpcyBjb21wb25lbnQgYW5kIHdlJ3JlIGFib3V0IHRvIHVubW91bnQuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCBoYXBwZW4gYXMgbG9uZyBhcyB3ZSBkbyB0b3AtZG93biBzdWJzY3JpcHRpb25zIGNvcnJlY3RseSwgYnV0XG4gICAgICAvLyBpZiB3ZSBldmVyIGRvIHRob3NlIHdyb25nLCB0aGlzIHRocm93IHdpbGwgc3VyZmFjZSB0aGUgZXJyb3IgaW4gb3VyIHRlc3RzLlxuICAgICAgLy8gSW4gdGhhdCBjYXNlLCB0aHJvdyB0aGUgZXJyb3IgZnJvbSBoZXJlIHNvIGl0IGRvZXNuJ3QgZ2V0IGxvc3QuXG4gICAgICB0aHJvdyBsYXN0VGhyb3duRXJyb3I7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1bnN1YnNjcmliZVdyYXBwZXI7XG59XG5cbnZhciBpbml0U3RhdGVVcGRhdGVzID0gZnVuY3Rpb24gaW5pdFN0YXRlVXBkYXRlcygpIHtcbiAgcmV0dXJuIFtudWxsLCAwXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbm5lY3RBZHZhbmNlZChcbi8qXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGlzIGEgZnVuYyB0aGF0IGlzIHJlc3BvbnNpYmxlIGZvciByZXR1cm5pbmcgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uIHVzZWQgdG9cclxuICBjb21wdXRlIG5ldyBwcm9wcyBmcm9tIHN0YXRlLCBwcm9wcywgYW5kIGRpc3BhdGNoLiBGb3IgZXhhbXBsZTpcclxuICAgICAgZXhwb3J0IGRlZmF1bHQgY29ubmVjdEFkdmFuY2VkKChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKHN0YXRlLCBwcm9wcykgPT4gKHtcclxuICAgICAgdGhpbmc6IHN0YXRlLnRoaW5nc1twcm9wcy50aGluZ0lkXSxcclxuICAgICAgc2F2ZVRoaW5nOiBmaWVsZHMgPT4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvcnMuc2F2ZVRoaW5nKHByb3BzLnRoaW5nSWQsIGZpZWxkcykpLFxyXG4gICAgfSkpKFlvdXJDb21wb25lbnQpXHJcbiAgICBBY2Nlc3MgdG8gZGlzcGF0Y2ggaXMgcHJvdmlkZWQgdG8gdGhlIGZhY3Rvcnkgc28gc2VsZWN0b3JGYWN0b3JpZXMgY2FuIGJpbmQgYWN0aW9uQ3JlYXRvcnNcclxuICBvdXRzaWRlIG9mIHRoZWlyIHNlbGVjdG9yIGFzIGFuIG9wdGltaXphdGlvbi4gT3B0aW9ucyBwYXNzZWQgdG8gY29ubmVjdEFkdmFuY2VkIGFyZSBwYXNzZWQgdG9cclxuICB0aGUgc2VsZWN0b3JGYWN0b3J5LCBhbG9uZyB3aXRoIGRpc3BsYXlOYW1lIGFuZCBXcmFwcGVkQ29tcG9uZW50LCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LlxyXG4gICAgTm90ZSB0aGF0IHNlbGVjdG9yRmFjdG9yeSBpcyByZXNwb25zaWJsZSBmb3IgYWxsIGNhY2hpbmcvbWVtb2l6YXRpb24gb2YgaW5ib3VuZCBhbmQgb3V0Ym91bmRcclxuICBwcm9wcy4gRG8gbm90IHVzZSBjb25uZWN0QWR2YW5jZWQgZGlyZWN0bHkgd2l0aG91dCBtZW1vaXppbmcgcmVzdWx0cyBiZXR3ZWVuIGNhbGxzIHRvIHlvdXJcclxuICBzZWxlY3Rvciwgb3RoZXJ3aXNlIHRoZSBDb25uZWN0IGNvbXBvbmVudCB3aWxsIHJlLXJlbmRlciBvbiBldmVyeSBzdGF0ZSBvciBwcm9wcyBjaGFuZ2UuXHJcbiovXG5zZWxlY3RvckZhY3RvcnksIC8vIG9wdGlvbnMgb2JqZWN0OlxuX3JlZikge1xuICBpZiAoX3JlZiA9PT0gdm9pZCAwKSB7XG4gICAgX3JlZiA9IHt9O1xuICB9XG5cbiAgdmFyIF9yZWYyID0gX3JlZixcbiAgICAgIF9yZWYyJGdldERpc3BsYXlOYW1lID0gX3JlZjIuZ2V0RGlzcGxheU5hbWUsXG4gICAgICBnZXREaXNwbGF5TmFtZSA9IF9yZWYyJGdldERpc3BsYXlOYW1lID09PSB2b2lkIDAgPyBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBcIkNvbm5lY3RBZHZhbmNlZChcIiArIG5hbWUgKyBcIilcIjtcbiAgfSA6IF9yZWYyJGdldERpc3BsYXlOYW1lLFxuICAgICAgX3JlZjIkbWV0aG9kTmFtZSA9IF9yZWYyLm1ldGhvZE5hbWUsXG4gICAgICBtZXRob2ROYW1lID0gX3JlZjIkbWV0aG9kTmFtZSA9PT0gdm9pZCAwID8gJ2Nvbm5lY3RBZHZhbmNlZCcgOiBfcmVmMiRtZXRob2ROYW1lLFxuICAgICAgX3JlZjIkcmVuZGVyQ291bnRQcm9wID0gX3JlZjIucmVuZGVyQ291bnRQcm9wLFxuICAgICAgcmVuZGVyQ291bnRQcm9wID0gX3JlZjIkcmVuZGVyQ291bnRQcm9wID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRyZW5kZXJDb3VudFByb3AsXG4gICAgICBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPSBfcmVmMi5zaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMgPSBfcmVmMiRzaG91bGRIYW5kbGVTdGEgPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmMiRzaG91bGRIYW5kbGVTdGEsXG4gICAgICBfcmVmMiRzdG9yZUtleSA9IF9yZWYyLnN0b3JlS2V5LFxuICAgICAgc3RvcmVLZXkgPSBfcmVmMiRzdG9yZUtleSA9PT0gdm9pZCAwID8gJ3N0b3JlJyA6IF9yZWYyJHN0b3JlS2V5LFxuICAgICAgX3JlZjIkd2l0aFJlZiA9IF9yZWYyLndpdGhSZWYsXG4gICAgICB3aXRoUmVmID0gX3JlZjIkd2l0aFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiR3aXRoUmVmLFxuICAgICAgX3JlZjIkZm9yd2FyZFJlZiA9IF9yZWYyLmZvcndhcmRSZWYsXG4gICAgICBmb3J3YXJkUmVmID0gX3JlZjIkZm9yd2FyZFJlZiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRmb3J3YXJkUmVmLFxuICAgICAgX3JlZjIkY29udGV4dCA9IF9yZWYyLmNvbnRleHQsXG4gICAgICBjb250ZXh0ID0gX3JlZjIkY29udGV4dCA9PT0gdm9pZCAwID8gUmVhY3RSZWR1eENvbnRleHQgOiBfcmVmMiRjb250ZXh0LFxuICAgICAgY29ubmVjdE9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgX2V4Y2x1ZGVkKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IHByb3BzLnJlYWN0UmVkdXhGb3J3YXJkZWRSZWYsXG4gICAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgX2V4Y2x1ZGVkMik7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmLCB3cmFwcGVyUHJvcHNdO1xuICAgICAgfSwgW3Byb3BzXSksXG4gICAgICAgICAgcHJvcHNDb250ZXh0ID0gX3VzZU1lbW9bMF0sXG4gICAgICAgICAgcmVhY3RSZWR1eEZvcndhcmRlZFJlZiA9IF91c2VNZW1vWzFdLFxuICAgICAgICAgIHdyYXBwZXJQcm9wcyA9IF91c2VNZW1vWzJdO1xuXG4gICAgICB2YXIgQ29udGV4dFRvVXNlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFVzZXJzIG1heSBvcHRpb25hbGx5IHBhc3MgaW4gYSBjdXN0b20gY29udGV4dCBpbnN0YW5jZSB0byB1c2UgaW5zdGVhZCBvZiBvdXIgUmVhY3RSZWR1eENvbnRleHQuXG4gICAgICAgIC8vIE1lbW9pemUgdGhlIGNoZWNrIHRoYXQgZGV0ZXJtaW5lcyB3aGljaCBjb250ZXh0IGluc3RhbmNlIHdlIHNob3VsZCB1c2UuXG4gICAgICAgIHJldHVybiBwcm9wc0NvbnRleHQgJiYgcHJvcHNDb250ZXh0LkNvbnN1bWVyICYmIGlzQ29udGV4dENvbnN1bWVyKCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChwcm9wc0NvbnRleHQuQ29uc3VtZXIsIG51bGwpKSA/IHByb3BzQ29udGV4dCA6IENvbnRleHQ7XG4gICAgICB9LCBbcHJvcHNDb250ZXh0LCBDb250ZXh0XSk7IC8vIFJldHJpZXZlIHRoZSBzdG9yZSBhbmQgYW5jZXN0b3Igc3Vic2NyaXB0aW9uIHZpYSBjb250ZXh0LCBpZiBhdmFpbGFibGVcblxuICAgICAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoQ29udGV4dFRvVXNlKTsgLy8gVGhlIHN0b3JlIF9tdXN0XyBleGlzdCBhcyBlaXRoZXIgYSBwcm9wIG9yIGluIGNvbnRleHQuXG4gICAgICAvLyBXZSdsbCBjaGVjayB0byBzZWUgaWYgaXQgX2xvb2tzXyBsaWtlIGEgUmVkdXggc3RvcmUgZmlyc3QuXG4gICAgICAvLyBUaGlzIGFsbG93cyB1cyB0byBwYXNzIHRocm91Z2ggYSBgc3RvcmVgIHByb3AgdGhhdCBpcyBqdXN0IGEgcGxhaW4gdmFsdWUuXG5cbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPSBCb29sZWFuKHByb3BzLnN0b3JlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmdldFN0YXRlKSAmJiBCb29sZWFuKHByb3BzLnN0b3JlLmRpc3BhdGNoKTtcbiAgICAgIHZhciBkaWRTdG9yZUNvbWVGcm9tQ29udGV4dCA9IEJvb2xlYW4oY29udGV4dFZhbHVlKSAmJiBCb29sZWFuKGNvbnRleHRWYWx1ZS5zdG9yZSk7XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFkaWRTdG9yZUNvbWVGcm9tUHJvcHMgJiYgIWRpZFN0b3JlQ29tZUZyb21Db250ZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIFxcXCJzdG9yZVxcXCIgaW4gdGhlIGNvbnRleHQgb2YgXCIgKyAoXCJcXFwiXCIgKyBkaXNwbGF5TmFtZSArIFwiXFxcIi4gRWl0aGVyIHdyYXAgdGhlIHJvb3QgY29tcG9uZW50IGluIGEgPFByb3ZpZGVyPiwgXCIpICsgXCJvciBwYXNzIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgcHJvdmlkZXIgdG8gPFByb3ZpZGVyPiBhbmQgdGhlIGNvcnJlc3BvbmRpbmcgXCIgKyAoXCJSZWFjdCBjb250ZXh0IGNvbnN1bWVyIHRvIFwiICsgZGlzcGxheU5hbWUgKyBcIiBpbiBjb25uZWN0IG9wdGlvbnMuXCIpKTtcbiAgICAgIH0gLy8gQmFzZWQgb24gdGhlIHByZXZpb3VzIGNoZWNrLCBvbmUgb2YgdGhlc2UgbXVzdCBiZSB0cnVlXG5cblxuICAgICAgdmFyIHN0b3JlID0gZGlkU3RvcmVDb21lRnJvbVByb3BzID8gcHJvcHMuc3RvcmUgOiBjb250ZXh0VmFsdWUuc3RvcmU7XG4gICAgICB2YXIgY2hpbGRQcm9wc1NlbGVjdG9yID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBjaGlsZCBwcm9wcyBzZWxlY3RvciBuZWVkcyB0aGUgc3RvcmUgcmVmZXJlbmNlIGFzIGFuIGlucHV0LlxuICAgICAgICAvLyBSZS1jcmVhdGUgdGhpcyBzZWxlY3RvciB3aGVuZXZlciB0aGUgc3RvcmUgY2hhbmdlcy5cbiAgICAgICAgcmV0dXJuIGNyZWF0ZUNoaWxkU2VsZWN0b3Ioc3RvcmUpO1xuICAgICAgfSwgW3N0b3JlXSk7XG5cbiAgICAgIHZhciBfdXNlTWVtbzIgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMpIHJldHVybiBOT19TVUJTQ1JJUFRJT05fQVJSQVk7IC8vIFRoaXMgU3Vic2NyaXB0aW9uJ3Mgc291cmNlIHNob3VsZCBtYXRjaCB3aGVyZSBzdG9yZSBjYW1lIGZyb206IHByb3BzIHZzLiBjb250ZXh0LiBBIGNvbXBvbmVudFxuICAgICAgICAvLyBjb25uZWN0ZWQgdG8gdGhlIHN0b3JlIHZpYSBwcm9wcyBzaG91bGRuJ3QgdXNlIHN1YnNjcmlwdGlvbiBmcm9tIGNvbnRleHQsIG9yIHZpY2UgdmVyc2EuXG5cbiAgICAgICAgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNyZWF0ZVN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIC8vIGBub3RpZnlOZXN0ZWRTdWJzYCBpcyBkdXBsaWNhdGVkIHRvIGhhbmRsZSB0aGUgY2FzZSB3aGVyZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZCBpblxuICAgICAgICAvLyB0aGUgbWlkZGxlIG9mIHRoZSBub3RpZmljYXRpb24gbG9vcCwgd2hlcmUgYHN1YnNjcmlwdGlvbmAgd2lsbCB0aGVuIGJlIG51bGwuIFRoaXMgY2FuXG4gICAgICAgIC8vIHByb2JhYmx5IGJlIGF2b2lkZWQgaWYgU3Vic2NyaXB0aW9uJ3MgbGlzdGVuZXJzIGxvZ2ljIGlzIGNoYW5nZWQgdG8gbm90IGNhbGwgbGlzdGVuZXJzXG4gICAgICAgIC8vIHRoYXQgaGF2ZSBiZWVuIHVuc3Vic2NyaWJlZCBpbiB0aGUgIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgX2V4dGVuZHMoe30sIGFjdHVhbENoaWxkUHJvcHMsIHtcbiAgICAgICAgICByZWY6IHJlYWN0UmVkdXhGb3J3YXJkZWRSZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSwgW3JlYWN0UmVkdXhGb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0VG9Vc2UuUHJvdmlkZXIsIHtcbiAgICAgICAgICAgIHZhbHVlOiBvdmVycmlkZGVuQ29udGV4dFZhbHVlXG4gICAgICAgICAgfSwgcmVuZGVyZWRXcmFwcGVkQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQ7XG4gICAgICB9LCBbQ29udGV4dFRvVXNlLCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQsIG92ZXJyaWRkZW5Db250ZXh0VmFsdWVdKTtcbiAgICAgIHJldHVybiByZW5kZXJlZENoaWxkO1xuICAgIH0gLy8gSWYgd2UncmUgaW4gXCJwdXJlXCIgbW9kZSwgZW5zdXJlIG91ciB3cmFwcGVyIGNvbXBvbmVudCBvbmx5IHJlLXJlbmRlcnMgd2hlbiBpbmNvbWluZyBwcm9wcyBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBDb25uZWN0ID0gcHVyZSA/IFJlYWN0Lm1lbW8oQ29ubmVjdEZ1bmN0aW9uKSA6IENvbm5lY3RGdW5jdGlvbjtcbiAgICBDb25uZWN0LldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIENvbm5lY3QuZGlzcGxheU5hbWUgPSBDb25uZWN0RnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcblxuICAgIGlmIChmb3J3YXJkUmVmKSB7XG4gICAgICB2YXIgZm9yd2FyZGVkID0gUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBmb3J3YXJkQ29ubmVjdFJlZihwcm9wcywgcmVmKSB7XG4gICAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb25uZWN0LCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgICByZWFjdFJlZHV4Rm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcykge1xuICByZXR1cm4gbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gbnVsbCAmJiBtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzICE9PSB1bmRlZmluZWQgPyBCb29sZWFuKG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIDogbWFwVG9Qcm9wcy5sZW5ndGggIT09IDE7XG59IC8vIFVzZWQgYnkgd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24gYW5kIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLFxuLy8gdGhpcyBmdW5jdGlvbiB3cmFwcyBtYXBUb1Byb3BzIGluIGEgcHJveHkgZnVuY3Rpb24gd2hpY2ggZG9lcyBzZXZlcmFsIHRoaW5nczpcbi8vXG4vLyAgKiBEZXRlY3RzIHdoZXRoZXIgdGhlIG1hcFRvUHJvcHMgZnVuY3Rpb24gYmVpbmcgY2FsbGVkIGRlcGVuZHMgb24gcHJvcHMsIHdoaWNoXG4vLyAgICBpcyB1c2VkIGJ5IHNlbGVjdG9yRmFjdG9yeSB0byBkZWNpZGUgaWYgaXQgc2hvdWxkIHJlaW52b2tlIG9uIHByb3BzIGNoYW5nZXMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgaGFuZGxlcyBtYXBUb1Byb3BzIGlmIHJldHVybnMgYW5vdGhlciBmdW5jdGlvbiwgYW5kIHRyZWF0cyB0aGF0XG4vLyAgICBuZXcgZnVuY3Rpb24gYXMgdGhlIHRydWUgbWFwVG9Qcm9wcyBmb3Igc3Vic2VxdWVudCBjYWxscy5cbi8vXG4vLyAgKiBPbiBmaXJzdCBjYWxsLCB2ZXJpZmllcyB0aGUgZmlyc3QgcmVzdWx0IGlzIGEgcGxhaW4gb2JqZWN0LCBpbiBvcmRlciB0byB3YXJuXG4vLyAgICB0aGUgZGV2ZWxvcGVyIHRoYXQgdGhlaXIgbWFwVG9Qcm9wcyBmdW5jdGlvbiBpcyBub3QgcmV0dXJuaW5nIGEgdmFsaWQgcmVzdWx0LlxuLy9cblxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBUb1Byb3BzLCBtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0UHJveHlTZWxlY3RvcihkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWU7XG5cbiAgICB2YXIgcHJveHkgPSBmdW5jdGlvbiBtYXBUb1Byb3BzUHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcmV0dXJuIHByb3h5LmRlcGVuZHNPbk93blByb3BzID8gcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSA6IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoKTtcbiAgICB9OyAvLyBhbGxvdyBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IHRvIGdldCBvd25Qcm9wc1xuXG5cbiAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IHRydWU7XG5cbiAgICBwcm94eS5tYXBUb1Byb3BzID0gZnVuY3Rpb24gZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICBwcm94eS5tYXBUb1Byb3BzID0gbWFwVG9Qcm9wcztcbiAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMobWFwVG9Qcm9wcyk7XG4gICAgICB2YXIgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcblxuICAgICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwcm94eS5tYXBUb1Byb3BzID0gcHJvcHM7XG4gICAgICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gZ2V0RGVwZW5kc09uT3duUHJvcHMocHJvcHMpO1xuICAgICAgICBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSIsImltcG9ydCBiaW5kQWN0aW9uQ3JlYXRvcnMgZnJvbSAnLi4vdXRpbHMvYmluZEFjdGlvbkNyZWF0b3JzJztcbmltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBEaXNwYXRjaFRvUHJvcHMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nKG1hcERpc3BhdGNoVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcERpc3BhdGNoVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc3BhdGNoOiBkaXNwYXRjaFxuICAgIH07XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdChtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcERpc3BhdGNoVG9Qcm9wcyAmJiB0eXBlb2YgbWFwRGlzcGF0Y2hUb1Byb3BzID09PSAnb2JqZWN0JyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKGRpc3BhdGNoKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9ycyhtYXBEaXNwYXRjaFRvUHJvcHMsIGRpc3BhdGNoKTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc01pc3NpbmcsIHdoZW5NYXBEaXNwYXRjaFRvUHJvcHNJc09iamVjdF07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cykpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgX2xvb3Aoa2V5KTtcbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufSIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCBzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdE1lcmdlUHJvcHNQcm94eShkaXNwYXRjaCwgX3JlZikge1xuICAgIHZhciBkaXNwbGF5TmFtZSA9IF9yZWYuZGlzcGxheU5hbWUsXG4gICAgICAgIHB1cmUgPSBfcmVmLnB1cmUsXG4gICAgICAgIGFyZU1lcmdlZFByb3BzRXF1YWwgPSBfcmVmLmFyZU1lcmdlZFByb3BzRXF1YWw7XG4gICAgdmFyIGhhc1J1bk9uY2UgPSBmYWxzZTtcbiAgICB2YXIgbWVyZ2VkUHJvcHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlUHJvcHNQcm94eShzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICAgICAgdmFyIG5leHRNZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuXG4gICAgICBpZiAoaGFzUnVuT25jZSkge1xuICAgICAgICBpZiAoIXB1cmUgfHwgIWFyZU1lcmdlZFByb3BzRXF1YWwobmV4dE1lcmdlZFByb3BzLCBtZXJnZWRQcm9wcykpIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaGFzUnVuT25jZSA9IHRydWU7XG4gICAgICAgIG1lcmdlZFByb3BzID0gbmV4dE1lcmdlZFByb3BzO1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykgdmVyaWZ5UGxhaW5PYmplY3QobWVyZ2VkUHJvcHMsIGRpc3BsYXlOYW1lLCAnbWVyZ2VQcm9wcycpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gICAgfTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzRnVuY3Rpb24obWVyZ2VQcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1lcmdlUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWVyZ2VQcm9wc0Z1bmMobWVyZ2VQcm9wcykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1lcmdlUHJvcHNJc09taXR0ZWQobWVyZ2VQcm9wcykge1xuICByZXR1cm4gIW1lcmdlUHJvcHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNZXJnZVByb3BzO1xuICB9IDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NZXJnZVByb3BzSXNGdW5jdGlvbiwgd2hlbk1lcmdlUHJvcHNJc09taXR0ZWRdOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl07XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUsIG5leHRPd25Qcm9wcywgb3duUHJvcHMpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIF9leGNsdWRlZCk7XG5cbiAgdmFyIG1hcFN0YXRlVG9Qcm9wcyA9IGluaXRNYXBTdGF0ZVRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWFwRGlzcGF0Y2hUb1Byb3BzID0gaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3B0aW9ucyk7XG4gIHZhciBtZXJnZVByb3BzID0gaW5pdE1lcmdlUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmVyaWZ5U3Vic2VsZWN0b3JzKG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBvcHRpb25zLmRpc3BsYXlOYW1lKTtcbiAgfVxuXG4gIHZhciBzZWxlY3RvckZhY3RvcnkgPSBvcHRpb25zLnB1cmUgPyBwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSA6IGltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3Rvcnk7XG4gIHJldHVybiBzZWxlY3RvckZhY3RvcnkobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIGRpc3BhdGNoLCBvcHRpb25zKTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xudmFyIF9leGNsdWRlZCA9IFtcInB1cmVcIiwgXCJhcmVTdGF0ZXNFcXVhbFwiLCBcImFyZU93blByb3BzRXF1YWxcIiwgXCJhcmVTdGF0ZVByb3BzRXF1YWxcIiwgXCJhcmVNZXJnZWRQcm9wc0VxdWFsXCJdO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuLi9jb21wb25lbnRzL2Nvbm5lY3RBZHZhbmNlZCc7XG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gJy4uL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5pbXBvcnQgZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcERpc3BhdGNoVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyBmcm9tICcuL21hcFN0YXRlVG9Qcm9wcyc7XG5pbXBvcnQgZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tZXJnZVByb3BzJztcbmltcG9ydCBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IGZyb20gJy4vc2VsZWN0b3JGYWN0b3J5Jztcbi8qXHJcbiAgY29ubmVjdCBpcyBhIGZhY2FkZSBvdmVyIGNvbm5lY3RBZHZhbmNlZC4gSXQgdHVybnMgaXRzIGFyZ3MgaW50byBhIGNvbXBhdGlibGVcclxuICBzZWxlY3RvckZhY3RvcnksIHdoaWNoIGhhcyB0aGUgc2lnbmF0dXJlOlxyXG5cclxuICAgIChkaXNwYXRjaCwgb3B0aW9ucykgPT4gKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA9PiBuZXh0RmluYWxQcm9wc1xyXG4gIFxyXG4gIGNvbm5lY3QgcGFzc2VzIGl0cyBhcmdzIHRvIGNvbm5lY3RBZHZhbmNlZCBhcyBvcHRpb25zLCB3aGljaCB3aWxsIGluIHR1cm4gcGFzcyB0aGVtIHRvXHJcbiAgc2VsZWN0b3JGYWN0b3J5IGVhY2ggdGltZSBhIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIGlzIGluc3RhbnRpYXRlZCBvciBob3QgcmVsb2FkZWQuXHJcblxyXG4gIHNlbGVjdG9yRmFjdG9yeSByZXR1cm5zIGEgZmluYWwgcHJvcHMgc2VsZWN0b3IgZnJvbSBpdHMgbWFwU3RhdGVUb1Byb3BzLFxyXG4gIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsIG1lcmdlUHJvcHMsXHJcbiAgbWVyZ2VQcm9wc0ZhY3RvcmllcywgYW5kIHB1cmUgYXJncy5cclxuXHJcbiAgVGhlIHJlc3VsdGluZyBmaW5hbCBwcm9wcyBzZWxlY3RvciBpcyBjYWxsZWQgYnkgdGhlIENvbm5lY3QgY29tcG9uZW50IGluc3RhbmNlIHdoZW5ldmVyXHJcbiAgaXQgcmVjZWl2ZXMgbmV3IHByb3BzIG9yIHN0b3JlIHN0YXRlLlxyXG4gKi9cblxuZnVuY3Rpb24gbWF0Y2goYXJnLCBmYWN0b3JpZXMsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IGZhY3Rvcmllcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciByZXN1bHQgPSBmYWN0b3JpZXNbaV0oYXJnKTtcbiAgICBpZiAocmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdmFsdWUgb2YgdHlwZSBcIiArIHR5cGVvZiBhcmcgKyBcIiBmb3IgXCIgKyBuYW1lICsgXCIgYXJndW1lbnQgd2hlbiBjb25uZWN0aW5nIGNvbXBvbmVudCBcIiArIG9wdGlvbnMud3JhcHBlZENvbXBvbmVudE5hbWUgKyBcIi5cIik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0cmljdEVxdWFsKGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59IC8vIGNyZWF0ZUNvbm5lY3Qgd2l0aCBkZWZhdWx0IGFyZ3MgYnVpbGRzIHRoZSAnb2ZmaWNpYWwnIGNvbm5lY3QgYmVoYXZpb3IuIENhbGxpbmcgaXQgd2l0aFxuLy8gZGlmZmVyZW50IG9wdGlvbnMgb3BlbnMgdXAgc29tZSB0ZXN0aW5nIGFuZCBleHRlbnNpYmlsaXR5IHNjZW5hcmlvc1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDb25uZWN0KF90ZW1wKSB7XG4gIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICBfcmVmJGNvbm5lY3RIT0MgPSBfcmVmLmNvbm5lY3RIT0MsXG4gICAgICBjb25uZWN0SE9DID0gX3JlZiRjb25uZWN0SE9DID09PSB2b2lkIDAgPyBjb25uZWN0QWR2YW5jZWQgOiBfcmVmJGNvbm5lY3RIT0MsXG4gICAgICBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPSBfcmVmLm1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwU3RhdGVUb1Byb3BzRiA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwU3RhdGVUb1Byb3BzRixcbiAgICAgIF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9IF9yZWYubWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLFxuICAgICAgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzID0gX3JlZiRtYXBEaXNwYXRjaFRvUHJvID09PSB2b2lkIDAgPyBkZWZhdWx0TWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIDogX3JlZiRtYXBEaXNwYXRjaFRvUHJvLFxuICAgICAgX3JlZiRtZXJnZVByb3BzRmFjdG9yID0gX3JlZi5tZXJnZVByb3BzRmFjdG9yaWVzLFxuICAgICAgbWVyZ2VQcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9PT0gdm9pZCAwID8gZGVmYXVsdE1lcmdlUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1lcmdlUHJvcHNGYWN0b3IsXG4gICAgICBfcmVmJHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYuc2VsZWN0b3JGYWN0b3J5LFxuICAgICAgc2VsZWN0b3JGYWN0b3J5ID0gX3JlZiRzZWxlY3RvckZhY3RvcnkgPT09IHZvaWQgMCA/IGRlZmF1bHRTZWxlY3RvckZhY3RvcnkgOiBfcmVmJHNlbGVjdG9yRmFjdG9yeTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgX3JlZjIpIHtcbiAgICBpZiAoX3JlZjIgPT09IHZvaWQgMCkge1xuICAgICAgX3JlZjIgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgX3JlZjMkcHVyZSA9IF9yZWYzLnB1cmUsXG4gICAgICAgIHB1cmUgPSBfcmVmMyRwdXJlID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjMkcHVyZSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVzRXF1YWwgPSBfcmVmMy5hcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgYXJlU3RhdGVzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZXNFcXVhbCA9PT0gdm9pZCAwID8gc3RyaWN0RXF1YWwgOiBfcmVmMyRhcmVTdGF0ZXNFcXVhbCxcbiAgICAgICAgX3JlZjMkYXJlT3duUHJvcHNFcXVhID0gX3JlZjMuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU93blByb3BzRXF1YSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlT3duUHJvcHNFcXVhLFxuICAgICAgICBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPSBfcmVmMy5hcmVTdGF0ZVByb3BzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlU3RhdGVQcm9wc0VxLFxuICAgICAgICBfcmVmMyRhcmVNZXJnZWRQcm9wc0UgPSBfcmVmMy5hcmVNZXJnZWRQcm9wc0VxdWFsLFxuICAgICAgICBhcmVNZXJnZWRQcm9wc0VxdWFsID0gX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID09PSB2b2lkIDAgPyBzaGFsbG93RXF1YWwgOiBfcmVmMyRhcmVNZXJnZWRQcm9wc0UsXG4gICAgICAgIGV4dHJhT3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBfZXhjbHVkZWQpO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgLyojX19QVVJFX18qL2NyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQsIHVzZURlYnVnVmFsdWUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCB7IGNyZWF0ZVN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IH0gZnJvbSAnLi4vdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5cbnZhciByZWZFcXVhbGl0eSA9IGZ1bmN0aW9uIHJlZkVxdWFsaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgPT09IGI7XG59O1xuXG5mdW5jdGlvbiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpIHtcbiAgdmFyIF91c2VSZWR1Y2VyID0gdXNlUmVkdWNlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzICsgMTtcbiAgfSwgMCksXG4gICAgICBmb3JjZVJlbmRlciA9IF91c2VSZWR1Y2VyWzFdO1xuXG4gIHZhciBzdWJzY3JpcHRpb24gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3JlYXRlU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U3RvcmVTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc3RvcmVTdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gIHZhciBzZWxlY3RlZFN0YXRlO1xuXG4gIHRyeSB7XG4gICAgaWYgKHNlbGVjdG9yICE9PSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50IHx8IHN0b3JlU3RhdGUgIT09IGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuZXdTZWxlY3RlZFN0YXRlID0gc2VsZWN0b3Ioc3RvcmVTdGF0ZSk7IC8vIGVuc3VyZSBsYXRlc3Qgc2VsZWN0ZWQgc3RhdGUgaXMgcmV1c2VkIHNvIHRoYXQgYSBjdXN0b20gZXF1YWxpdHkgZnVuY3Rpb24gY2FuIHJlc3VsdCBpbiBpZGVudGljYWwgcmVmZXJlbmNlc1xuXG4gICAgICBpZiAobGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID09PSB1bmRlZmluZWQgfHwgIWVxdWFsaXR5Rm4obmV3U2VsZWN0ZWRTdGF0ZSwgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50KSkge1xuICAgICAgICBzZWxlY3RlZFN0YXRlID0gbmV3U2VsZWN0ZWRTdGF0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQ7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAobGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50KSB7XG4gICAgICBlcnIubWVzc2FnZSArPSBcIlxcblRoZSBlcnJvciBtYXkgYmUgY29ycmVsYXRlZCB3aXRoIHRoaXMgcHJldmlvdXMgZXJyb3I6XFxuXCIgKyBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQuc3RhY2sgKyBcIlxcblxcblwiO1xuICAgIH1cblxuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGxhdGVzdFNlbGVjdG9yLmN1cnJlbnQgPSBzZWxlY3RvcjtcbiAgICBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQgPSBzdG9yZVN0YXRlO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1N0b3JlU3RhdGUgPSBzdG9yZS5nZXRTdGF0ZSgpOyAvLyBBdm9pZCBjYWxsaW5nIHNlbGVjdG9yIG11bHRpcGxlIHRpbWVzIGlmIHRoZSBzdG9yZSdzIHN0YXRlIGhhcyBub3QgY2hhbmdlZFxuXG4gICAgICAgIGlmIChuZXdTdG9yZVN0YXRlID09PSBsYXRlc3RTdG9yZVN0YXRlLmN1cnJlbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX25ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KG5ld1N0b3JlU3RhdGUpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKF9uZXdTZWxlY3RlZFN0YXRlLCBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGF0ZXN0U2VsZWN0ZWRTdGF0ZS5jdXJyZW50ID0gX25ld1NlbGVjdGVkU3RhdGU7XG4gICAgICAgIGxhdGVzdFN0b3JlU3RhdGUuY3VycmVudCA9IG5ld1N0b3JlU3RhdGU7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gd2UgaWdub3JlIGFsbCBlcnJvcnMgaGVyZSwgc2luY2Ugd2hlbiB0aGUgY29tcG9uZW50XG4gICAgICAgIC8vIGlzIHJlLXJlbmRlcmVkLCB0aGUgc2VsZWN0b3JzIGFyZSBjYWxsZWQgYWdhaW4sIGFuZFxuICAgICAgICAvLyB3aWxsIHRocm93IGFnYWluLCBpZiBuZWl0aGVyIHByb3BzIG5vciBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyBjaGFuZ2VkXG4gICAgICAgIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudCA9IGVycjtcbiAgICAgIH1cblxuICAgICAgZm9yY2VSZW5kZXIoKTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBzZWxlY3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCBwYXNzIGEgZnVuY3Rpb24gYXMgYSBzZWxlY3RvciB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBlcXVhbGl0eUZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHBhc3MgYSBmdW5jdGlvbiBhcyBhbiBlcXVhbGl0eSBmdW5jdGlvbiB0byB1c2VTZWxlY3RvclwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHZhciBzZWxlY3RlZFN0YXRlID0gdXNlU2VsZWN0b3JXaXRoU3RvcmVBbmRTdWJzY3JpcHRpb24oc2VsZWN0b3IsIGVxdWFsaXR5Rm4sIHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgICB1c2VEZWJ1Z1ZhbHVlKHNlbGVjdGVkU3RhdGUpO1xuICAgIHJldHVybiBzZWxlY3RlZFN0YXRlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID0gLyojX19QVVJFX18qL2NyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImV4cG9ydCAqIGZyb20gJy4vZXhwb3J0cyc7XG5pbXBvcnQgeyB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyBhcyBiYXRjaCB9IGZyb20gJy4vdXRpbHMvcmVhY3RCYXRjaGVkVXBkYXRlcyc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnOyAvLyBFbmFibGUgYmF0Y2hlZCB1cGRhdGVzIGluIG91ciBzdWJzY3JpcHRpb25zIGZvciB1c2Vcbi8vIHdpdGggc3RhbmRhcmQgUmVhY3QgcmVuZGVyZXJzIChSZWFjdERPTSwgUmVhY3QgTmF0aXZlKVxuXG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBiYXRjaCB9OyIsImltcG9ydCBzdHJpbmdIYXNoIGZyb20gJ3N0cmluZy1oYXNoJztcbmltcG9ydCBhc2FwIGZyb20gJ2FzYXAnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBfdHlwZW9mID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblxuICAgIGlmICh0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIHN5bSkuZW51bWVyYWJsZTtcbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBvd25LZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7XG4gIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7XG59XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuXG4gICAgcmV0dXJuIGFycjI7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheShpdGVyKSB7XG4gIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpdGVyKSA9PT0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIikgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpO1xufVxuXG4vKiBAZmxvdyAqL1xuLyogOjpcbnR5cGUgT2JqZWN0TWFwID0geyBbaWQ6c3RyaW5nXTogYW55IH07XG4qL1xuXG52YXIgVVBQRVJDQVNFX1JFID0gLyhbQS1aXSkvZztcblxudmFyIFVQUEVSQ0FTRV9SRV9UT19LRUJBQiA9IGZ1bmN0aW9uIFVQUEVSQ0FTRV9SRV9UT19LRUJBQihtYXRjaFxuLyogOiBzdHJpbmcgKi9cbikge1xuICByZXR1cm4gKFxuICAgIC8qIDogc3RyaW5nICovXG4gICAgXCItXCIuY29uY2F0KG1hdGNoLnRvTG93ZXJDYXNlKCkpXG4gICk7XG59O1xuXG52YXIga2ViYWJpZnlTdHlsZU5hbWUgPSBmdW5jdGlvbiBrZWJhYmlmeVN0eWxlTmFtZShzdHJpbmdcbi8qIDogc3RyaW5nICovXG4pXG4vKiA6IHN0cmluZyAqL1xue1xuICB2YXIgcmVzdWx0ID0gc3RyaW5nLnJlcGxhY2UoVVBQRVJDQVNFX1JFLCBVUFBFUkNBU0VfUkVfVE9fS0VCQUIpO1xuXG4gIGlmIChyZXN1bHRbMF0gPT09ICdtJyAmJiByZXN1bHRbMV0gPT09ICdzJyAmJiByZXN1bHRbMl0gPT09ICctJykge1xuICAgIHJldHVybiBcIi1cIi5jb25jYXQocmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuLyoqXG4gKiBDU1MgcHJvcGVydGllcyB3aGljaCBhY2NlcHQgbnVtYmVycyBidXQgYXJlIG5vdCBpbiB1bml0cyBvZiBcInB4XCIuXG4gKiBUYWtlbiBmcm9tIFJlYWN0J3MgQ1NTUHJvcGVydHkuanNcbiAqL1xuXG52YXIgaXNVbml0bGVzc051bWJlciA9IHtcbiAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6IHRydWUsXG4gIGJvcmRlckltYWdlT3V0c2V0OiB0cnVlLFxuICBib3JkZXJJbWFnZVNsaWNlOiB0cnVlLFxuICBib3JkZXJJbWFnZVdpZHRoOiB0cnVlLFxuICBib3hGbGV4OiB0cnVlLFxuICBib3hGbGV4R3JvdXA6IHRydWUsXG4gIGJveE9yZGluYWxHcm91cDogdHJ1ZSxcbiAgY29sdW1uQ291bnQ6IHRydWUsXG4gIGZsZXg6IHRydWUsXG4gIGZsZXhHcm93OiB0cnVlLFxuICBmbGV4UG9zaXRpdmU6IHRydWUsXG4gIGZsZXhTaHJpbms6IHRydWUsXG4gIGZsZXhOZWdhdGl2ZTogdHJ1ZSxcbiAgZmxleE9yZGVyOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcbi8qKlxuICogVGFrZW4gZnJvbSBSZWFjdCdzIENTU1Byb3BlcnR5LmpzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKiBUYWtlbiBmcm9tIFJlYWN0J3MgQ1NTUHJvcGVydHkuanNcbiAqL1xuXG5cbnZhciBwcmVmaXhlcyA9IFsnV2Via2l0JywgJ21zJywgJ01veicsICdPJ107IC8vIFVzaW5nIE9iamVjdC5rZXlzIGhlcmUsIG9yIGVsc2UgdGhlIHZhbmlsbGEgZm9yLWluIGxvb3AgbWFrZXMgSUU4IGdvIGludG8gYW5cbi8vIGluZmluaXRlIGxvb3AsIGJlY2F1c2UgaXQgaXRlcmF0ZXMgb3ZlciB0aGUgbmV3bHkgYWRkZWQgcHJvcHMgdG9vLlxuLy8gVGFrZW4gZnJvbSBSZWFjdCdzIENTU1Byb3BlcnR5LmpzXG5cbk9iamVjdC5rZXlzKGlzVW5pdGxlc3NOdW1iZXIpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgaXNVbml0bGVzc051bWJlcltwcmVmaXhLZXkocHJlZml4LCBwcm9wKV0gPSBpc1VuaXRsZXNzTnVtYmVyW3Byb3BdO1xuICB9KTtcbn0pO1xudmFyIHN0cmluZ2lmeVZhbHVlID0gZnVuY3Rpb24gc3RyaW5naWZ5VmFsdWUoa2V5XG4vKiA6IHN0cmluZyAqL1xuLCBwcm9wXG4vKiA6IGFueSAqL1xuKVxuLyogOiBzdHJpbmcgKi9cbntcbiAgaWYgKHR5cGVvZiBwcm9wID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKGlzVW5pdGxlc3NOdW1iZXJba2V5XSkge1xuICAgICAgcmV0dXJuIFwiXCIgKyBwcm9wO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJvcCArIFwicHhcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICcnICsgcHJvcDtcbiAgfVxufTtcbnZhciBzdHJpbmdpZnlBbmRJbXBvcnRhbnRpZnlWYWx1ZSA9IGZ1bmN0aW9uIHN0cmluZ2lmeUFuZEltcG9ydGFudGlmeVZhbHVlKGtleVxuLyogOiBzdHJpbmcgKi9cbiwgcHJvcFxuLyogOiBhbnkgKi9cbikge1xuICByZXR1cm4gKFxuICAgIC8qIDogc3RyaW5nICovXG4gICAgaW1wb3J0YW50aWZ5KHN0cmluZ2lmeVZhbHVlKGtleSwgcHJvcCkpXG4gICk7XG59OyAvLyBUdXJuIGEgc3RyaW5nIGludG8gYSBoYXNoIHN0cmluZyBvZiBiYXNlLTM2IHZhbHVlcyAodXNpbmcgbGV0dGVycyBhbmQgbnVtYmVycylcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuXG52YXIgaGFzaFN0cmluZyA9IGZ1bmN0aW9uIGhhc2hTdHJpbmcoc3RyaW5nXG4vKiA6IHN0cmluZyAqL1xuLCBrZXlcbi8qIDogP3N0cmluZyAqL1xuKSB7XG4gIHJldHVybiAoXG4gICAgLyogc3RyaW5nICovXG4gICAgc3RyaW5nSGFzaChzdHJpbmcpLnRvU3RyaW5nKDM2KVxuICApO1xufTsgLy8gSGFzaCBhIGphdmFzY3JpcHQgb2JqZWN0IHVzaW5nIEpTT04uc3RyaW5naWZ5LiBUaGlzIGlzIHZlcnkgZmFzdCwgYWJvdXQgM1xuLy8gbWljcm9zZWNvbmRzIG9uIG15IGNvbXB1dGVyIGZvciBhIHNhbXBsZSBvYmplY3Q6XG4vLyBodHRwOi8vanNwZXJmLmNvbS90ZXN0LWhhc2hmbnYzMmEtaGFzaC81XG4vL1xuLy8gTm90ZSB0aGF0IHRoaXMgdXNlcyBKU09OLnN0cmluZ2lmeSB0byBzdHJpbmdpZnkgdGhlIG9iamVjdHMgc28gaW4gb3JkZXIgZm9yXG4vLyB0aGlzIHRvIHByb2R1Y2UgY29uc2lzdGVudCBoYXNoZXMgYnJvd3NlcnMgbmVlZCB0byBoYXZlIGEgY29uc2lzdGVudFxuLy8gb3JkZXJpbmcgb2Ygb2JqZWN0cy4gQmVuIEFscGVydCBzYXlzIHRoYXQgRmFjZWJvb2sgZGVwZW5kcyBvbiB0aGlzLCBzbyB3ZVxuLy8gY2FuIHByb2JhYmx5IGRlcGVuZCBvbiB0aGlzIHRvby5cblxudmFyIGhhc2hPYmplY3QgPSBmdW5jdGlvbiBoYXNoT2JqZWN0KG9iamVjdFxuLyogOiBPYmplY3RNYXAgKi9cbikge1xuICByZXR1cm4gKFxuICAgIC8qIDogc3RyaW5nICovXG4gICAgaGFzaFN0cmluZyhKU09OLnN0cmluZ2lmeShvYmplY3QpKVxuICApO1xufTsgLy8gR2l2ZW4gYSBzaW5nbGUgc3R5bGUgdmFsdWUgc3RyaW5nIGxpa2UgdGhlIFwiYlwiIGZyb20gXCJhOiBiO1wiLCBhZGRzICFpbXBvcnRhbnRcbi8vIHRvIGdlbmVyYXRlIFwiYiAhaW1wb3J0YW50XCIuXG5cbnZhciBpbXBvcnRhbnRpZnkgPSBmdW5jdGlvbiBpbXBvcnRhbnRpZnkoc3RyaW5nXG4vKiA6IHN0cmluZyAqL1xuKSB7XG4gIHJldHVybiAoXG4gICAgLyogOiBzdHJpbmcgKi9cbiAgICAvLyBCcmFja2V0IHN0cmluZyBjaGFyYWN0ZXIgYWNjZXNzIGlzIHZlcnkgZmFzdCwgYW5kIGluIHRoZSBkZWZhdWx0IGNhc2Ugd2VcbiAgICAvLyBub3JtYWxseSBkb24ndCBleHBlY3QgdGhlcmUgdG8gYmUgXCIhaW1wb3J0YW50XCIgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nXG4gICAgLy8gc28gd2UgY2FuIHVzZSB0aGlzIHNpbXBsZSBjaGVjayB0byB0YWtlIGFuIG9wdGltaXplZCBwYXRoLiBJZiB0aGVyZVxuICAgIC8vIGhhcHBlbnMgdG8gYmUgYSBcIiFcIiBpbiB0aGlzIHBvc2l0aW9uLCB3ZSBmb2xsb3cgdXAgd2l0aCBhIG1vcmUgdGhvcm91Z2hcbiAgICAvLyBjaGVjay5cbiAgICBzdHJpbmdbc3RyaW5nLmxlbmd0aCAtIDEwXSA9PT0gJyEnICYmIHN0cmluZy5zbGljZSgtMTEpID09PSAnICFpbXBvcnRhbnQnID8gc3RyaW5nIDogXCJcIi5jb25jYXQoc3RyaW5nLCBcIiAhaW1wb3J0YW50XCIpXG4gICk7XG59O1xuXG4vKiBAZmxvdyAqL1xudmFyIE1BUF9FWElTVFMgPSB0eXBlb2YgTWFwICE9PSAndW5kZWZpbmVkJztcblxudmFyIE9yZGVyZWRFbGVtZW50cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qIDo6XG4gIGVsZW1lbnRzOiB7W3N0cmluZ106IGFueX07XG4gIGtleU9yZGVyOiBzdHJpbmdbXTtcbiAgKi9cbiAgZnVuY3Rpb24gT3JkZXJlZEVsZW1lbnRzKCkge1xuICAgIHRoaXMuZWxlbWVudHMgPSB7fTtcbiAgICB0aGlzLmtleU9yZGVyID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gT3JkZXJlZEVsZW1lbnRzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tcbiAgLyogOiAoc3RyaW5nLCBhbnkpID0+IHZvaWQgKi9cbiAgKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmtleU9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAodmFsdWUsIGtleSkgdG8gbWF0Y2ggTWFwJ3MgQVBJXG4gICAgICBjYWxsYmFjayh0aGlzLmVsZW1lbnRzW3RoaXMua2V5T3JkZXJbaV1dLCB0aGlzLmtleU9yZGVyW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldCA9IGZ1bmN0aW9uIHNldChrZXlcbiAgLyogOiBzdHJpbmcgKi9cbiAgLCB2YWx1ZVxuICAvKiA6IGFueSAqL1xuICAsIHNob3VsZFJlb3JkZXJcbiAgLyogOiA/Ym9vbGVhbiAqL1xuICApIHtcbiAgICBpZiAoIXRoaXMuZWxlbWVudHMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdGhpcy5rZXlPcmRlci5wdXNoKGtleSk7XG4gICAgfSBlbHNlIGlmIChzaG91bGRSZW9yZGVyKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLmtleU9yZGVyLmluZGV4T2Yoa2V5KTtcbiAgICAgIHRoaXMua2V5T3JkZXIuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHRoaXMua2V5T3JkZXIucHVzaChrZXkpO1xuICAgIH1cblxuICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoTUFQX0VYSVNUUyAmJiB2YWx1ZSBpbnN0YW5jZW9mIE1hcCB8fCB2YWx1ZSBpbnN0YW5jZW9mIE9yZGVyZWRFbGVtZW50cykge1xuICAgICAgLy8gV2UgaGF2ZSBmb3VuZCBhIG5lc3RlZCBNYXAsIHNvIHdlIG5lZWQgdG8gcmVjdXJzZSBzbyB0aGF0IGFsbFxuICAgICAgLy8gb2YgdGhlIG5lc3RlZCBvYmplY3RzIGFuZCBNYXBzIGFyZSBtZXJnZWQgcHJvcGVybHkuXG4gICAgICB2YXIgbmVzdGVkID0gdGhpcy5lbGVtZW50cy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gdGhpcy5lbGVtZW50c1trZXldIDogbmV3IE9yZGVyZWRFbGVtZW50cygpO1xuICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBuZXN0ZWQuc2V0KGtleSwgdmFsdWUsIHNob3VsZFJlb3JkZXIpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBuZXN0ZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIC8vIFdlIGhhdmUgZm91bmQgYSBuZXN0ZWQgb2JqZWN0LCBzbyB3ZSBuZWVkIHRvIHJlY3Vyc2Ugc28gdGhhdCBhbGxcbiAgICAgIC8vIG9mIHRoZSBuZXN0ZWQgb2JqZWN0cyBhbmQgTWFwcyBhcmUgbWVyZ2VkIHByb3Blcmx5LlxuICAgICAgdmFyIF9uZXN0ZWQgPSB0aGlzLmVsZW1lbnRzLmhhc093blByb3BlcnR5KGtleSkgPyB0aGlzLmVsZW1lbnRzW2tleV0gOiBuZXcgT3JkZXJlZEVsZW1lbnRzKCk7XG5cbiAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgX25lc3RlZC5zZXQoa2V5c1tpXSwgdmFsdWVba2V5c1tpXV0sIHNob3VsZFJlb3JkZXIpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnRzW2tleV0gPSBfbmVzdGVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHNba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5XG4gIC8qIDogc3RyaW5nICovXG4gIClcbiAgLyogOiBhbnkgKi9cbiAge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2tleV07XG4gIH07XG5cbiAgX3Byb3RvLmhhcyA9IGZ1bmN0aW9uIGhhcyhrZXlcbiAgLyogOiBzdHJpbmcgKi9cbiAgKVxuICAvKiA6IGJvb2xlYW4gKi9cbiAge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzLmhhc093blByb3BlcnR5KGtleSk7XG4gIH07XG5cbiAgX3Byb3RvLmFkZFN0eWxlVHlwZSA9IGZ1bmN0aW9uIGFkZFN0eWxlVHlwZShzdHlsZVR5cGVcbiAgLyogOiBhbnkgKi9cbiAgKVxuICAvKiA6IHZvaWQgKi9cbiAge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoTUFQX0VYSVNUUyAmJiBzdHlsZVR5cGUgaW5zdGFuY2VvZiBNYXAgfHwgc3R5bGVUeXBlIGluc3RhbmNlb2YgT3JkZXJlZEVsZW1lbnRzKSB7XG4gICAgICBzdHlsZVR5cGUuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICBfdGhpcy5zZXQoa2V5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzdHlsZVR5cGUpO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5zZXQoa2V5c1tpXSwgc3R5bGVUeXBlW2tleXNbaV1dLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIE9yZGVyZWRFbGVtZW50cztcbn0oKTtcblxuZnVuY3Rpb24gdW53cmFwRXhwb3J0cyAoeCkge1xuXHRyZXR1cm4geCAmJiB4Ll9fZXNNb2R1bGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdkZWZhdWx0JykgPyB4LmRlZmF1bHQgOiB4O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxuZnVuY3Rpb24gZ2V0Q2pzRXhwb3J0RnJvbU5hbWVzcGFjZSAobikge1xuXHRyZXR1cm4gbiAmJiBuLmRlZmF1bHQgfHwgbjtcbn1cblxudmFyIGNhcGl0YWxpemVTdHJpbmdfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhcGl0YWxpemVTdHJpbmc7XG5mdW5jdGlvbiBjYXBpdGFsaXplU3RyaW5nKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxufSk7XG5cbnVud3JhcEV4cG9ydHMoY2FwaXRhbGl6ZVN0cmluZ18xKTtcblxudmFyIHByZWZpeFByb3BlcnR5XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhQcm9wZXJ0eTtcblxuXG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGNhcGl0YWxpemVTdHJpbmdfMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHByZWZpeFByb3BlcnR5KHByZWZpeFByb3BlcnRpZXMsIHByb3BlcnR5LCBzdHlsZSkge1xuICBpZiAocHJlZml4UHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgbmV3U3R5bGUgPSB7fTtcbiAgICB2YXIgcmVxdWlyZWRQcmVmaXhlcyA9IHByZWZpeFByb3BlcnRpZXNbcHJvcGVydHldO1xuICAgIHZhciBjYXBpdGFsaXplZFByb3BlcnR5ID0gKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSk7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzdHlsZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0eSA9IGtleXNbaV07XG4gICAgICBpZiAoc3R5bGVQcm9wZXJ0eSA9PT0gcHJvcGVydHkpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCByZXF1aXJlZFByZWZpeGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgbmV3U3R5bGVbcmVxdWlyZWRQcmVmaXhlc1tqXSArIGNhcGl0YWxpemVkUHJvcGVydHldID0gc3R5bGVbcHJvcGVydHldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXdTdHlsZVtzdHlsZVByb3BlcnR5XSA9IHN0eWxlW3N0eWxlUHJvcGVydHldO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxufSk7XG5cbnVud3JhcEV4cG9ydHMocHJlZml4UHJvcGVydHlfMSk7XG5cbnZhciBwcmVmaXhWYWx1ZV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4VmFsdWU7XG5mdW5jdGlvbiBwcmVmaXhWYWx1ZShwbHVnaW5zLCBwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBtZXRhRGF0YSkge1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gcGx1Z2lucy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHBsdWdpbnNbaV0ocHJvcGVydHksIHZhbHVlLCBzdHlsZSwgbWV0YURhdGEpO1xuXG4gICAgLy8gd2UgY2FuIHN0b3AgcHJvY2Vzc2luZyBpZiBhIHZhbHVlIGlzIHJldHVybmVkXG4gICAgLy8gYXMgYWxsIHBsdWdpbiBjcml0ZXJpYSBhcmUgdW5pcXVlXG4gICAgaWYgKHByb2Nlc3NlZFZhbHVlKSB7XG4gICAgICByZXR1cm4gcHJvY2Vzc2VkVmFsdWU7XG4gICAgfVxuICB9XG59XG59KTtcblxudW53cmFwRXhwb3J0cyhwcmVmaXhWYWx1ZV8xKTtcblxudmFyIGFkZE5ld1ZhbHVlc09ubHlfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGFkZE5ld1ZhbHVlc09ubHk7XG5mdW5jdGlvbiBhZGRJZk5ldyhsaXN0LCB2YWx1ZSkge1xuICBpZiAobGlzdC5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICBsaXN0LnB1c2godmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZE5ld1ZhbHVlc09ubHkobGlzdCwgdmFsdWVzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICBhZGRJZk5ldyhsaXN0LCB2YWx1ZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhZGRJZk5ldyhsaXN0LCB2YWx1ZXMpO1xuICB9XG59XG59KTtcblxudW53cmFwRXhwb3J0cyhhZGROZXdWYWx1ZXNPbmx5XzEpO1xuXG52YXIgaXNPYmplY3RfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbn0pO1xuXG51bndyYXBFeHBvcnRzKGlzT2JqZWN0XzEpO1xuXG52YXIgY3JlYXRlUHJlZml4ZXJfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZVByZWZpeGVyO1xuXG5cblxudmFyIF9wcmVmaXhQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHByZWZpeFByb3BlcnR5XzEpO1xuXG5cblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHByZWZpeFZhbHVlXzEpO1xuXG5cblxudmFyIF9hZGROZXdWYWx1ZXNPbmx5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoYWRkTmV3VmFsdWVzT25seV8xKTtcblxuXG5cbnZhciBfaXNPYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc09iamVjdF8xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gY3JlYXRlUHJlZml4ZXIoX3JlZikge1xuICB2YXIgcHJlZml4TWFwID0gX3JlZi5wcmVmaXhNYXAsXG4gICAgICBwbHVnaW5zID0gX3JlZi5wbHVnaW5zO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwcmVmaXgoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAvLyBoYW5kbGUgbmVzdGVkIG9iamVjdHNcbiAgICAgIGlmICgoMCwgX2lzT2JqZWN0Mi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gcHJlZml4KHZhbHVlKTtcbiAgICAgICAgLy8gaGFuZGxlIGFycmF5IHZhbHVlc1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YXIgY29tYmluZWRWYWx1ZSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZVtpXSwgc3R5bGUsIHByZWZpeE1hcCk7XG4gICAgICAgICAgKDAsIF9hZGROZXdWYWx1ZXNPbmx5Mi5kZWZhdWx0KShjb21iaW5lZFZhbHVlLCBwcm9jZXNzZWRWYWx1ZSB8fCB2YWx1ZVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICBpZiAoY29tYmluZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gY29tYmluZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9wcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByZWZpeE1hcCk7XG5cbiAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICAgICAgaWYgKF9wcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IF9wcm9jZXNzZWRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0eWxlID0gKDAsIF9wcmVmaXhQcm9wZXJ0eTIuZGVmYXVsdCkocHJlZml4TWFwLCBwcm9wZXJ0eSwgc3R5bGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfTtcbn1cbn0pO1xuXG52YXIgY3JlYXRlUHJlZml4ZXIgPSB1bndyYXBFeHBvcnRzKGNyZWF0ZVByZWZpeGVyXzEpO1xuXG52YXIgYmFja2dyb3VuZENsaXBfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGJhY2tncm91bmRDbGlwO1xuXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvYmFja2dyb3VuZC1jbGlwI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuZnVuY3Rpb24gYmFja2dyb3VuZENsaXAocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHZhbHVlID09PSAndGV4dCcpIHtcbiAgICByZXR1cm4gWyctd2Via2l0LXRleHQnLCAndGV4dCddO1xuICB9XG59XG59KTtcblxudmFyIGJhY2tncm91bmRDbGlwID0gdW53cmFwRXhwb3J0cyhiYWNrZ3JvdW5kQ2xpcF8xKTtcblxudmFyIGlzUHJlZml4ZWRWYWx1ZV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNQcmVmaXhlZFZhbHVlO1xudmFyIHJlZ2V4ID0gLy13ZWJraXQtfC1tb3otfC1tcy0vO1xuXG5mdW5jdGlvbiBpc1ByZWZpeGVkVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgcmVnZXgudGVzdCh2YWx1ZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG51bndyYXBFeHBvcnRzKGlzUHJlZml4ZWRWYWx1ZV8xKTtcblxudmFyIGNhbGNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNhbGM7XG5cblxuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KGlzUHJlZml4ZWRWYWx1ZV8xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcbmZ1bmN0aW9uIGNhbGMocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2NhbGMoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2NhbGNcXCgvZywgcHJlZml4ICsgJ2NhbGMoJyk7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgY2FsYyA9IHVud3JhcEV4cG9ydHMoY2FsY18xKTtcblxudmFyIGNyb3NzRmFkZV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY3Jvc3NGYWRlO1xuXG5cblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc1ByZWZpeGVkVmFsdWVfMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWNyb3NzLWZhZGVcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnJ107XG5mdW5jdGlvbiBjcm9zc0ZhZGUocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2Nyb3NzLWZhZGUoJykgPiAtMSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL2Nyb3NzLWZhZGVcXCgvZywgcHJlZml4ICsgJ2Nyb3NzLWZhZGUoJyk7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgY3Jvc3NGYWRlID0gdW53cmFwRXhwb3J0cyhjcm9zc0ZhZGVfMSk7XG5cbnZhciBjdXJzb3JfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGN1cnNvcjtcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciB2YWx1ZXMgPSB7XG4gICd6b29tLWluJzogdHJ1ZSxcbiAgJ3pvb20tb3V0JzogdHJ1ZSxcbiAgZ3JhYjogdHJ1ZSxcbiAgZ3JhYmJpbmc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGN1cnNvcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnR5ID09PSAnY3Vyc29yJyAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgY3Vyc29yID0gdW53cmFwRXhwb3J0cyhjdXJzb3JfMSk7XG5cbnZhciBmaWx0ZXJfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZpbHRlcjtcblxuXG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaXNQcmVmaXhlZFZhbHVlXzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWZpbHRlci1mdW5jdGlvblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGZpbHRlcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignZmlsdGVyKCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9maWx0ZXJcXCgvZywgcHJlZml4ICsgJ2ZpbHRlcignKTtcbiAgICB9KTtcbiAgfVxufVxufSk7XG5cbnZhciBmaWx0ZXIgPSB1bndyYXBFeHBvcnRzKGZpbHRlcl8xKTtcblxudmFyIGZsZXhfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXg7XG52YXIgdmFsdWVzID0ge1xuICBmbGV4OiBbJy13ZWJraXQtYm94JywgJy1tb3otYm94JywgJy1tcy1mbGV4Ym94JywgJy13ZWJraXQtZmxleCcsICdmbGV4J10sXG4gICdpbmxpbmUtZmxleCc6IFsnLXdlYmtpdC1pbmxpbmUtYm94JywgJy1tb3otaW5saW5lLWJveCcsICctbXMtaW5saW5lLWZsZXhib3gnLCAnLXdlYmtpdC1pbmxpbmUtZmxleCcsICdpbmxpbmUtZmxleCddXG59O1xuXG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlc1t2YWx1ZV07XG4gIH1cbn1cbn0pO1xuXG52YXIgZmxleCA9IHVud3JhcEV4cG9ydHMoZmxleF8xKTtcblxudmFyIGZsZXhib3hJRV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveElFO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2Rpc3RyaWJ1dGUnLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJ1xufTtcbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkNvbnRlbnQ6ICdtc0ZsZXhMaW5lUGFjaycsXG4gIGFsaWduU2VsZjogJ21zRmxleEl0ZW1BbGlnbicsXG4gIGFsaWduSXRlbXM6ICdtc0ZsZXhBbGlnbicsXG4gIGp1c3RpZnlDb250ZW50OiAnbXNGbGV4UGFjaycsXG4gIG9yZGVyOiAnbXNGbGV4T3JkZXInLFxuICBmbGV4R3JvdzogJ21zRmxleFBvc2l0aXZlJyxcbiAgZmxleFNocmluazogJ21zRmxleE5lZ2F0aXZlJyxcbiAgZmxleEJhc2lzOiAnbXNGbGV4UHJlZmVycmVkU2l6ZSdcbiAgLy8gRnVsbCBleHBhbmRlZCBzeW50YXggaXMgZmxleC1ncm93IHwgZmxleC1zaHJpbmsgfCBmbGV4LWJhc2lzLlxufTt2YXIgZmxleFNob3J0aGFuZE1hcHBpbmdzID0ge1xuICBhdXRvOiAnMSAxIGF1dG8nLFxuICBpbmhlcml0OiAnaW5oZXJpdCcsXG4gIGluaXRpYWw6ICcwIDEgYXV0bycsXG4gIG5vbmU6ICcwIDAgYXV0bycsXG4gIHVuc2V0OiAndW5zZXQnXG59O1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSAvXlxcZCsoXFwuXFxkKyk/JC87XG5cbmZ1bmN0aW9uIGZsZXhib3hJRShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWx0ZXJuYXRpdmVQcm9wcywgcHJvcGVydHkpKSB7XG4gICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wc1twcm9wZXJ0eV1dID0gYWx0ZXJuYXRpdmVWYWx1ZXNbdmFsdWVdIHx8IHZhbHVlO1xuICB9XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXgnKSB7XG4gICAgLy8gRm9yIGNlcnRhaW4gdmFsdWVzIHdlIGNhbiBkbyBzdHJhaWdodCBtYXBwaW5ncyBiYXNlZCBvbiB0aGUgc3BlY1xuICAgIC8vIGZvciB0aGUgZXhwYW5zaW9ucy5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGZsZXhTaG9ydGhhbmRNYXBwaW5ncywgdmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0ZsZXggPSBmbGV4U2hvcnRoYW5kTWFwcGluZ3NbdmFsdWVdO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBIZXJlIHdlIGhhdmUgbm8gZGlyZWN0IG1hcHBpbmcsIHNvIHdlIGZhdm9yIGxvb2tpbmcgZm9yIGFcbiAgICAvLyB1bml0bGVzcyBwb3NpdGl2ZSBudW1iZXIgYXMgdGhhdCB3aWxsIGJlIHRoZSBtb3N0IGNvbW1vbiB1c2UtY2FzZS5cbiAgICBpZiAoaXNVbml0bGVzc051bWJlci50ZXN0KHZhbHVlKSkge1xuICAgICAgc3R5bGUubXNGbGV4ID0gdmFsdWUgKyAnIDEgMCUnO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRoZSBuZXh0IHRoaW5nIHdlIGNhbiBsb29rIGZvciBpcyBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmFsdWVzLlxuICAgIHZhciBmbGV4VmFsdWVzID0gdmFsdWUuc3BsaXQoL1xccy8pO1xuICAgIC8vIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSB2YWx1ZSB0aGF0IHdhc24ndCBhIHBvc2l0aXZlIHVuaXRsZXNzXG4gICAgLy8gb3IgYSBwcmUtbWFwcGVkIHZhbHVlLCB0aGVuIHdlIGNhbiBhc3N1bWUgaXQgaXMgYSB1bml0IHZhbHVlLlxuICAgIHN3aXRjaCAoZmxleFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgc3R5bGUubXNGbGV4ID0gJzEgMSAnICsgdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSAyIHVuaXRzLCB0aGVuIHdlIGV4cGVjdCB0aGF0IHRoZSBmaXJzdCB3aWxsXG4gICAgICAgIC8vIGFsd2F5cyBiZSBhIHVuaXRsZXNzIG51bWJlciBhbmQgcmVwcmVzZW50cyBmbGV4LWdyb3cuXG4gICAgICAgIC8vIFRoZSBzZWNvbmQgdW5pdCB3aWxsIHJlcHJlc2VudCBmbGV4LXNocmluayBmb3IgYSB1bml0bGVzc1xuICAgICAgICAvLyB2YWx1ZSwgb3IgZmxleC1iYXNpcyBvdGhlcndpc2UuXG4gICAgICAgIGlmIChpc1VuaXRsZXNzTnVtYmVyLnRlc3QoZmxleFZhbHVlc1sxXSkpIHtcbiAgICAgICAgICBzdHlsZS5tc0ZsZXggPSBmbGV4VmFsdWVzWzBdICsgJyAnICsgZmxleFZhbHVlc1sxXSArICcgMCUnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlLm1zRmxleCA9IGZsZXhWYWx1ZXNbMF0gKyAnIDEgJyArIGZsZXhWYWx1ZXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgc3R5bGUubXNGbGV4ID0gdmFsdWU7XG4gICAgfVxuICB9XG59XG59KTtcblxudmFyIGZsZXhib3hJRSA9IHVud3JhcEV4cG9ydHMoZmxleGJveElFXzEpO1xuXG52YXIgZmxleGJveE9sZF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmxleGJveE9sZDtcbnZhciBhbHRlcm5hdGl2ZVZhbHVlcyA9IHtcbiAgJ3NwYWNlLWFyb3VuZCc6ICdqdXN0aWZ5JyxcbiAgJ3NwYWNlLWJldHdlZW4nOiAnanVzdGlmeScsXG4gICdmbGV4LXN0YXJ0JzogJ3N0YXJ0JyxcbiAgJ2ZsZXgtZW5kJzogJ2VuZCcsXG4gICd3cmFwLXJldmVyc2UnOiAnbXVsdGlwbGUnLFxuICB3cmFwOiAnbXVsdGlwbGUnXG59O1xuXG52YXIgYWx0ZXJuYXRpdmVQcm9wcyA9IHtcbiAgYWxpZ25JdGVtczogJ1dlYmtpdEJveEFsaWduJyxcbiAganVzdGlmeUNvbnRlbnQ6ICdXZWJraXRCb3hQYWNrJyxcbiAgZmxleFdyYXA6ICdXZWJraXRCb3hMaW5lcycsXG4gIGZsZXhHcm93OiAnV2Via2l0Qm94RmxleCdcbn07XG5cbmZ1bmN0aW9uIGZsZXhib3hPbGQocHJvcGVydHksIHZhbHVlLCBzdHlsZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdmbGV4RGlyZWN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ2NvbHVtbicpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveE9yaWVudCA9ICd2ZXJ0aWNhbCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveE9yaWVudCA9ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKHZhbHVlLmluZGV4T2YoJ3JldmVyc2UnKSA+IC0xKSB7XG4gICAgICBzdHlsZS5XZWJraXRCb3hEaXJlY3Rpb24gPSAncmV2ZXJzZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdub3JtYWwnO1xuICAgIH1cbiAgfVxuICBpZiAoYWx0ZXJuYXRpdmVQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICBzdHlsZVthbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XV0gPSBhbHRlcm5hdGl2ZVZhbHVlc1t2YWx1ZV0gfHwgdmFsdWU7XG4gIH1cbn1cbn0pO1xuXG52YXIgZmxleGJveE9sZCA9IHVud3JhcEV4cG9ydHMoZmxleGJveE9sZF8xKTtcblxudmFyIGdyYWRpZW50XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxuXG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaXNQcmVmaXhlZFZhbHVlXzEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0gL2xpbmVhci1ncmFkaWVudHxyYWRpYWwtZ3JhZGllbnR8cmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudHxyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50L2dpO1xuXG5mdW5jdGlvbiBncmFkaWVudChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWVzLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSh2YWx1ZXMsIGZ1bmN0aW9uIChncmFkKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyBncmFkO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgZ3JhZGllbnQgPSB1bndyYXBFeHBvcnRzKGdyYWRpZW50XzEpO1xuXG52YXIgZ3JpZF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdyaWQ7XG5mdW5jdGlvbiBpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKTtcbn1cblxudmFyIGFsaWdubWVudFZhbHVlcyA9IFsnY2VudGVyJywgJ2VuZCcsICdzdGFydCcsICdzdHJldGNoJ107XG5cbnZhciBkaXNwbGF5VmFsdWVzID0ge1xuICAnaW5saW5lLWdyaWQnOiBbJy1tcy1pbmxpbmUtZ3JpZCcsICdpbmxpbmUtZ3JpZCddLFxuICBncmlkOiBbJy1tcy1ncmlkJywgJ2dyaWQnXVxufTtcblxudmFyIHByb3BlcnR5Q29udmVydGVycyA9IHtcbiAgYWxpZ25TZWxmOiBmdW5jdGlvbiBhbGlnblNlbGYodmFsdWUsIHN0eWxlKSB7XG4gICAgaWYgKGFsaWdubWVudFZhbHVlcy5pbmRleE9mKHZhbHVlKSA+IC0xKSB7XG4gICAgICBzdHlsZS5tc0dyaWRSb3dBbGlnbiA9IHZhbHVlO1xuICAgIH1cbiAgfSxcblxuICBncmlkQ29sdW1uOiBmdW5jdGlvbiBncmlkQ29sdW1uKHZhbHVlLCBzdHlsZSkge1xuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0dyaWRDb2x1bW4gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF92YWx1ZSRzcGxpdCRtYXAgPSB2YWx1ZS5zcGxpdCgnLycpLm1hcChmdW5jdGlvbiAocG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuICtwb3NpdGlvbjtcbiAgICAgIH0pLFxuICAgICAgICAgIF92YWx1ZSRzcGxpdCRtYXAyID0gX3NsaWNlZFRvQXJyYXkoX3ZhbHVlJHNwbGl0JG1hcCwgMiksXG4gICAgICAgICAgc3RhcnQgPSBfdmFsdWUkc3BsaXQkbWFwMlswXSxcbiAgICAgICAgICBlbmQgPSBfdmFsdWUkc3BsaXQkbWFwMlsxXTtcblxuICAgICAgcHJvcGVydHlDb252ZXJ0ZXJzLmdyaWRDb2x1bW5TdGFydChzdGFydCwgc3R5bGUpO1xuICAgICAgcHJvcGVydHlDb252ZXJ0ZXJzLmdyaWRDb2x1bW5FbmQoZW5kLCBzdHlsZSk7XG4gICAgfVxuICB9LFxuXG4gIGdyaWRDb2x1bW5FbmQ6IGZ1bmN0aW9uIGdyaWRDb2x1bW5FbmQodmFsdWUsIHN0eWxlKSB7XG4gICAgdmFyIG1zR3JpZENvbHVtbiA9IHN0eWxlLm1zR3JpZENvbHVtbjtcblxuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpICYmIGlzU2ltcGxlUG9zaXRpb25WYWx1ZShtc0dyaWRDb2x1bW4pKSB7XG4gICAgICBzdHlsZS5tc0dyaWRDb2x1bW5TcGFuID0gdmFsdWUgLSBtc0dyaWRDb2x1bW47XG4gICAgfVxuICB9LFxuXG4gIGdyaWRDb2x1bW5TdGFydDogZnVuY3Rpb24gZ3JpZENvbHVtblN0YXJ0KHZhbHVlLCBzdHlsZSkge1xuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0dyaWRDb2x1bW4gPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZFJvdzogZnVuY3Rpb24gZ3JpZFJvdyh2YWx1ZSwgc3R5bGUpIHtcbiAgICBpZiAoaXNTaW1wbGVQb3NpdGlvblZhbHVlKHZhbHVlKSkge1xuICAgICAgc3R5bGUubXNHcmlkUm93ID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdmFsdWUkc3BsaXQkbWFwMyA9IHZhbHVlLnNwbGl0KCcvJykubWFwKGZ1bmN0aW9uIChwb3NpdGlvbikge1xuICAgICAgICByZXR1cm4gK3Bvc2l0aW9uO1xuICAgICAgfSksXG4gICAgICAgICAgX3ZhbHVlJHNwbGl0JG1hcDQgPSBfc2xpY2VkVG9BcnJheShfdmFsdWUkc3BsaXQkbWFwMywgMiksXG4gICAgICAgICAgc3RhcnQgPSBfdmFsdWUkc3BsaXQkbWFwNFswXSxcbiAgICAgICAgICBlbmQgPSBfdmFsdWUkc3BsaXQkbWFwNFsxXTtcblxuICAgICAgcHJvcGVydHlDb252ZXJ0ZXJzLmdyaWRSb3dTdGFydChzdGFydCwgc3R5bGUpO1xuICAgICAgcHJvcGVydHlDb252ZXJ0ZXJzLmdyaWRSb3dFbmQoZW5kLCBzdHlsZSk7XG4gICAgfVxuICB9LFxuXG4gIGdyaWRSb3dFbmQ6IGZ1bmN0aW9uIGdyaWRSb3dFbmQodmFsdWUsIHN0eWxlKSB7XG4gICAgdmFyIG1zR3JpZFJvdyA9IHN0eWxlLm1zR3JpZFJvdztcblxuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpICYmIGlzU2ltcGxlUG9zaXRpb25WYWx1ZShtc0dyaWRSb3cpKSB7XG4gICAgICBzdHlsZS5tc0dyaWRSb3dTcGFuID0gdmFsdWUgLSBtc0dyaWRSb3c7XG4gICAgfVxuICB9LFxuXG4gIGdyaWRSb3dTdGFydDogZnVuY3Rpb24gZ3JpZFJvd1N0YXJ0KHZhbHVlLCBzdHlsZSkge1xuICAgIGlmIChpc1NpbXBsZVBvc2l0aW9uVmFsdWUodmFsdWUpKSB7XG4gICAgICBzdHlsZS5tc0dyaWRSb3cgPSB2YWx1ZTtcbiAgICB9XG4gIH0sXG5cbiAgZ3JpZFRlbXBsYXRlQ29sdW1uczogZnVuY3Rpb24gZ3JpZFRlbXBsYXRlQ29sdW1ucyh2YWx1ZSwgc3R5bGUpIHtcbiAgICBzdHlsZS5tc0dyaWRDb2x1bW5zID0gdmFsdWU7XG4gIH0sXG5cbiAgZ3JpZFRlbXBsYXRlUm93czogZnVuY3Rpb24gZ3JpZFRlbXBsYXRlUm93cyh2YWx1ZSwgc3R5bGUpIHtcbiAgICBzdHlsZS5tc0dyaWRSb3dzID0gdmFsdWU7XG4gIH0sXG5cbiAganVzdGlmeVNlbGY6IGZ1bmN0aW9uIGp1c3RpZnlTZWxmKHZhbHVlLCBzdHlsZSkge1xuICAgIGlmIChhbGlnbm1lbnRWYWx1ZXMuaW5kZXhPZih2YWx1ZSkgPiAtMSkge1xuICAgICAgc3R5bGUubXNHcmlkQ29sdW1uQWxpZ24gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdyaWQocHJvcGVydHksIHZhbHVlLCBzdHlsZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZSBpbiBkaXNwbGF5VmFsdWVzKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlWYWx1ZXNbdmFsdWVdO1xuICB9XG5cbiAgaWYgKHByb3BlcnR5IGluIHByb3BlcnR5Q29udmVydGVycykge1xuICAgIHZhciBwcm9wZXJ0eUNvbnZlcnRlciA9IHByb3BlcnR5Q29udmVydGVyc1twcm9wZXJ0eV07XG4gICAgcHJvcGVydHlDb252ZXJ0ZXIodmFsdWUsIHN0eWxlKTtcbiAgfVxufVxufSk7XG5cbnZhciBncmlkID0gdW53cmFwRXhwb3J0cyhncmlkXzEpO1xuXG52YXIgaW1hZ2VTZXRfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGltYWdlU2V0O1xuXG5cblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChpc1ByZWZpeGVkVmFsdWVfMSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8vIGh0dHA6Ly9jYW5pdXNlLmNvbS8jZmVhdD1jc3MtaW1hZ2Utc2V0XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJyddO1xuZnVuY3Rpb24gaW1hZ2VTZXQocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICEoMCwgX2lzUHJlZml4ZWRWYWx1ZTIuZGVmYXVsdCkodmFsdWUpICYmIHZhbHVlLmluZGV4T2YoJ2ltYWdlLXNldCgnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvaW1hZ2Utc2V0XFwoL2csIHByZWZpeCArICdpbWFnZS1zZXQoJyk7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgaW1hZ2VTZXQgPSB1bndyYXBFeHBvcnRzKGltYWdlU2V0XzEpO1xuXG52YXIgbG9naWNhbF8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbG9naWNhbDtcbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBtYXJnaW5CbG9ja1N0YXJ0OiBbJ1dlYmtpdE1hcmdpbkJlZm9yZSddLFxuICBtYXJnaW5CbG9ja0VuZDogWydXZWJraXRNYXJnaW5BZnRlciddLFxuICBtYXJnaW5JbmxpbmVTdGFydDogWydXZWJraXRNYXJnaW5TdGFydCcsICdNb3pNYXJnaW5TdGFydCddLFxuICBtYXJnaW5JbmxpbmVFbmQ6IFsnV2Via2l0TWFyZ2luRW5kJywgJ01vek1hcmdpbkVuZCddLFxuICBwYWRkaW5nQmxvY2tTdGFydDogWydXZWJraXRQYWRkaW5nQmVmb3JlJ10sXG4gIHBhZGRpbmdCbG9ja0VuZDogWydXZWJraXRQYWRkaW5nQWZ0ZXInXSxcbiAgcGFkZGluZ0lubGluZVN0YXJ0OiBbJ1dlYmtpdFBhZGRpbmdTdGFydCcsICdNb3pQYWRkaW5nU3RhcnQnXSxcbiAgcGFkZGluZ0lubGluZUVuZDogWydXZWJraXRQYWRkaW5nRW5kJywgJ01velBhZGRpbmdFbmQnXSxcbiAgYm9yZGVyQmxvY2tTdGFydDogWydXZWJraXRCb3JkZXJCZWZvcmUnXSxcbiAgYm9yZGVyQmxvY2tTdGFydENvbG9yOiBbJ1dlYmtpdEJvcmRlckJlZm9yZUNvbG9yJ10sXG4gIGJvcmRlckJsb2NrU3RhcnRTdHlsZTogWydXZWJraXRCb3JkZXJCZWZvcmVTdHlsZSddLFxuICBib3JkZXJCbG9ja1N0YXJ0V2lkdGg6IFsnV2Via2l0Qm9yZGVyQmVmb3JlV2lkdGgnXSxcbiAgYm9yZGVyQmxvY2tFbmQ6IFsnV2Via2l0Qm9yZGVyQWZ0ZXInXSxcbiAgYm9yZGVyQmxvY2tFbmRDb2xvcjogWydXZWJraXRCb3JkZXJBZnRlckNvbG9yJ10sXG4gIGJvcmRlckJsb2NrRW5kU3R5bGU6IFsnV2Via2l0Qm9yZGVyQWZ0ZXJTdHlsZSddLFxuICBib3JkZXJCbG9ja0VuZFdpZHRoOiBbJ1dlYmtpdEJvcmRlckFmdGVyV2lkdGgnXSxcbiAgYm9yZGVySW5saW5lU3RhcnQ6IFsnV2Via2l0Qm9yZGVyU3RhcnQnLCAnTW96Qm9yZGVyU3RhcnQnXSxcbiAgYm9yZGVySW5saW5lU3RhcnRDb2xvcjogWydXZWJraXRCb3JkZXJTdGFydENvbG9yJywgJ01vekJvcmRlclN0YXJ0Q29sb3InXSxcbiAgYm9yZGVySW5saW5lU3RhcnRTdHlsZTogWydXZWJraXRCb3JkZXJTdGFydFN0eWxlJywgJ01vekJvcmRlclN0YXJ0U3R5bGUnXSxcbiAgYm9yZGVySW5saW5lU3RhcnRXaWR0aDogWydXZWJraXRCb3JkZXJTdGFydFdpZHRoJywgJ01vekJvcmRlclN0YXJ0V2lkdGgnXSxcbiAgYm9yZGVySW5saW5lRW5kOiBbJ1dlYmtpdEJvcmRlckVuZCcsICdNb3pCb3JkZXJFbmQnXSxcbiAgYm9yZGVySW5saW5lRW5kQ29sb3I6IFsnV2Via2l0Qm9yZGVyRW5kQ29sb3InLCAnTW96Qm9yZGVyRW5kQ29sb3InXSxcbiAgYm9yZGVySW5saW5lRW5kU3R5bGU6IFsnV2Via2l0Qm9yZGVyRW5kU3R5bGUnLCAnTW96Qm9yZGVyRW5kU3R5bGUnXSxcbiAgYm9yZGVySW5saW5lRW5kV2lkdGg6IFsnV2Via2l0Qm9yZGVyRW5kV2lkdGgnLCAnTW96Qm9yZGVyRW5kV2lkdGgnXVxufTtcblxuZnVuY3Rpb24gbG9naWNhbChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYWx0ZXJuYXRpdmVQcm9wcywgcHJvcGVydHkpKSB7XG4gICAgdmFyIGFsdGVybmF0aXZlUHJvcExpc3QgPSBhbHRlcm5hdGl2ZVByb3BzW3Byb3BlcnR5XTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYWx0ZXJuYXRpdmVQcm9wTGlzdC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgc3R5bGVbYWx0ZXJuYXRpdmVQcm9wTGlzdFtpXV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbn1cbn0pO1xuXG52YXIgbG9naWNhbCA9IHVud3JhcEV4cG9ydHMobG9naWNhbF8xKTtcblxudmFyIHBvc2l0aW9uXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcbmZ1bmN0aW9uIHBvc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdwb3NpdGlvbicgJiYgdmFsdWUgPT09ICdzdGlja3knKSB7XG4gICAgcmV0dXJuIFsnLXdlYmtpdC1zdGlja3knLCAnc3RpY2t5J107XG4gIH1cbn1cbn0pO1xuXG52YXIgcG9zaXRpb24gPSB1bndyYXBFeHBvcnRzKHBvc2l0aW9uXzEpO1xuXG52YXIgc2l6aW5nXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBzaXppbmc7XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgbWF4SGVpZ2h0OiB0cnVlLFxuICBtYXhXaWR0aDogdHJ1ZSxcbiAgd2lkdGg6IHRydWUsXG4gIGhlaWdodDogdHJ1ZSxcbiAgY29sdW1uV2lkdGg6IHRydWUsXG4gIG1pbldpZHRoOiB0cnVlLFxuICBtaW5IZWlnaHQ6IHRydWVcbn07XG52YXIgdmFsdWVzID0ge1xuICAnbWluLWNvbnRlbnQnOiB0cnVlLFxuICAnbWF4LWNvbnRlbnQnOiB0cnVlLFxuICAnZmlsbC1hdmFpbGFibGUnOiB0cnVlLFxuICAnZml0LWNvbnRlbnQnOiB0cnVlLFxuICAnY29udGFpbi1mbG9hdHMnOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBzaXppbmcocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWU7XG4gICAgfSk7XG4gIH1cbn1cbn0pO1xuXG52YXIgc2l6aW5nID0gdW53cmFwRXhwb3J0cyhzaXppbmdfMSk7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nO1xudmFyIG1zUGF0dGVybiA9IC9ebXMtLztcbnZhciBjYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpO1xuICByZXR1cm4gKGNhY2hlW25hbWVdID0gbXNQYXR0ZXJuLnRlc3QoaE5hbWUpID8gJy0nICsgaE5hbWUgOiBoTmFtZSlcbn1cblxudmFyIGh5cGhlbmF0ZVN0eWxlTmFtZSQxID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBkZWZhdWx0OiBoeXBoZW5hdGVTdHlsZU5hbWVcbn0pO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZSA9IGdldENqc0V4cG9ydEZyb21OYW1lc3BhY2UoaHlwaGVuYXRlU3R5bGVOYW1lJDEpO1xuXG52YXIgaHlwaGVuYXRlUHJvcGVydHlfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGh5cGhlbmF0ZVByb3BlcnR5O1xuXG5cblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHlwaGVuYXRlU3R5bGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gaHlwaGVuYXRlUHJvcGVydHkocHJvcGVydHkpIHtcbiAgcmV0dXJuICgwLCBfaHlwaGVuYXRlU3R5bGVOYW1lMi5kZWZhdWx0KShwcm9wZXJ0eSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG51bndyYXBFeHBvcnRzKGh5cGhlbmF0ZVByb3BlcnR5XzEpO1xuXG52YXIgdHJhbnNpdGlvbl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdHJhbnNpdGlvbjtcblxuXG5cbnZhciBfaHlwaGVuYXRlUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChoeXBoZW5hdGVQcm9wZXJ0eV8xKTtcblxuXG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoaXNQcmVmaXhlZFZhbHVlXzEpO1xuXG5cblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoY2FwaXRhbGl6ZVN0cmluZ18xKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BlcnRpZXMgPSB7XG4gIHRyYW5zaXRpb246IHRydWUsXG4gIHRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvbjogdHJ1ZSxcbiAgV2Via2l0VHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uOiB0cnVlLFxuICBNb3pUcmFuc2l0aW9uUHJvcGVydHk6IHRydWVcbn07XG5cblxudmFyIHByZWZpeE1hcHBpbmcgPSB7XG4gIFdlYmtpdDogJy13ZWJraXQtJyxcbiAgTW96OiAnLW1vei0nLFxuICBtczogJy1tcy0nXG59O1xuXG5mdW5jdGlvbiBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgaWYgKCgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvLyBvbmx5IHNwbGl0IG11bHRpIHZhbHVlcywgbm90IGN1YmljIGJlemllcnNcbiAgdmFyIG11bHRpcGxlVmFsdWVzID0gdmFsdWUuc3BsaXQoLywoPyFbXigpXSooPzpcXChbXigpXSpcXCkpP1xcKSkvZyk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG11bHRpcGxlVmFsdWVzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHNpbmdsZVZhbHVlID0gbXVsdGlwbGVWYWx1ZXNbaV07XG4gICAgdmFyIHZhbHVlcyA9IFtzaW5nbGVWYWx1ZV07XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydHlQcmVmaXhNYXApIHtcbiAgICAgIHZhciBkYXNoQ2FzZVByb3BlcnR5ID0gKDAsIF9oeXBoZW5hdGVQcm9wZXJ0eTIuZGVmYXVsdCkocHJvcGVydHkpO1xuXG4gICAgICBpZiAoc2luZ2xlVmFsdWUuaW5kZXhPZihkYXNoQ2FzZVByb3BlcnR5KSA+IC0xICYmIGRhc2hDYXNlUHJvcGVydHkgIT09ICdvcmRlcicpIHtcbiAgICAgICAgdmFyIHByZWZpeGVzID0gcHJvcGVydHlQcmVmaXhNYXBbcHJvcGVydHldO1xuICAgICAgICBmb3IgKHZhciBqID0gMCwgcExlbiA9IHByZWZpeGVzLmxlbmd0aDsgaiA8IHBMZW47ICsraikge1xuICAgICAgICAgIC8vIGpvaW4gYWxsIHByZWZpeGVzIGFuZCBjcmVhdGUgYSBuZXcgdmFsdWVcbiAgICAgICAgICB2YWx1ZXMudW5zaGlmdChzaW5nbGVWYWx1ZS5yZXBsYWNlKGRhc2hDYXNlUHJvcGVydHksIHByZWZpeE1hcHBpbmdbcHJlZml4ZXNbal1dICsgZGFzaENhc2VQcm9wZXJ0eSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlwbGVWYWx1ZXNbaV0gPSB2YWx1ZXMuam9pbignLCcpO1xuICB9XG5cbiAgcmV0dXJuIG11bHRpcGxlVmFsdWVzLmpvaW4oJywnKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbihwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAvLyBhbHNvIGNoZWNrIGZvciBhbHJlYWR5IHByZWZpeGVkIHRyYW5zaXRpb25zXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmIHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIG91dHB1dFZhbHVlID0gcHJlZml4VmFsdWUodmFsdWUsIHByb3BlcnR5UHJlZml4TWFwKTtcbiAgICAvLyBpZiB0aGUgcHJvcGVydHkgaXMgYWxyZWFkeSBwcmVmaXhlZFxuICAgIHZhciB3ZWJraXRPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLW1vei18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdXZWJraXQnKSA+IC0xKSB7XG4gICAgICByZXR1cm4gd2Via2l0T3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBtb3pPdXRwdXQgPSBvdXRwdXRWYWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKS5maWx0ZXIoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuICEvLXdlYmtpdC18LW1zLS8udGVzdCh2YWwpO1xuICAgIH0pLmpvaW4oJywnKTtcblxuICAgIGlmIChwcm9wZXJ0eS5pbmRleE9mKCdNb3onKSA+IC0xKSB7XG4gICAgICByZXR1cm4gbW96T3V0cHV0O1xuICAgIH1cblxuICAgIHN0eWxlWydXZWJraXQnICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gd2Via2l0T3V0cHV0O1xuICAgIHN0eWxlWydNb3onICsgKDAsIF9jYXBpdGFsaXplU3RyaW5nMi5kZWZhdWx0KShwcm9wZXJ0eSldID0gbW96T3V0cHV0O1xuICAgIHJldHVybiBvdXRwdXRWYWx1ZTtcbiAgfVxufVxufSk7XG5cbnZhciB0cmFuc2l0aW9uID0gdW53cmFwRXhwb3J0cyh0cmFuc2l0aW9uXzEpO1xuXG52YXIgdyA9IFtcIldlYmtpdFwiXTtcbnZhciBtID0gW1wiTW96XCJdO1xudmFyIG1zID0gW1wibXNcIl07XG52YXIgd20gPSBbXCJXZWJraXRcIiwgXCJNb3pcIl07XG52YXIgd21zID0gW1wiV2Via2l0XCIsIFwibXNcIl07XG52YXIgd21tcyA9IFtcIldlYmtpdFwiLCBcIk1velwiLCBcIm1zXCJdO1xudmFyIHN0YXRpY0RhdGEgPSB7XG4gIHBsdWdpbnM6IFtiYWNrZ3JvdW5kQ2xpcCwgY2FsYywgY3Jvc3NGYWRlLCBjdXJzb3IsIGZpbHRlciwgZmxleCwgZmxleGJveElFLCBmbGV4Ym94T2xkLCBncmFkaWVudCwgZ3JpZCwgaW1hZ2VTZXQsIGxvZ2ljYWwsIHBvc2l0aW9uLCBzaXppbmcsIHRyYW5zaXRpb25dLFxuICBwcmVmaXhNYXA6IHtcbiAgICBcInRyYW5zZm9ybVwiOiB3bXMsXG4gICAgXCJ0cmFuc2Zvcm1PcmlnaW5cIjogd21zLFxuICAgIFwidHJhbnNmb3JtT3JpZ2luWFwiOiB3bXMsXG4gICAgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IHdtcyxcbiAgICBcImJhY2tmYWNlVmlzaWJpbGl0eVwiOiB3LFxuICAgIFwicGVyc3BlY3RpdmVcIjogdyxcbiAgICBcInBlcnNwZWN0aXZlT3JpZ2luXCI6IHcsXG4gICAgXCJ0cmFuc2Zvcm1TdHlsZVwiOiB3LFxuICAgIFwidHJhbnNmb3JtT3JpZ2luWlwiOiB3LFxuICAgIFwiYW5pbWF0aW9uXCI6IHcsXG4gICAgXCJhbmltYXRpb25EZWxheVwiOiB3LFxuICAgIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IHcsXG4gICAgXCJhbmltYXRpb25GaWxsTW9kZVwiOiB3LFxuICAgIFwiYW5pbWF0aW9uRHVyYXRpb25cIjogdyxcbiAgICBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHcsXG4gICAgXCJhbmltYXRpb25OYW1lXCI6IHcsXG4gICAgXCJhbmltYXRpb25QbGF5U3RhdGVcIjogdyxcbiAgICBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IHcsXG4gICAgXCJhcHBlYXJhbmNlXCI6IHdtLFxuICAgIFwidXNlclNlbGVjdFwiOiB3bW1zLFxuICAgIFwiZm9udEtlcm5pbmdcIjogdyxcbiAgICBcInRleHRFbXBoYXNpc1Bvc2l0aW9uXCI6IHcsXG4gICAgXCJ0ZXh0RW1waGFzaXNcIjogdyxcbiAgICBcInRleHRFbXBoYXNpc1N0eWxlXCI6IHcsXG4gICAgXCJ0ZXh0RW1waGFzaXNDb2xvclwiOiB3LFxuICAgIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IHcsXG4gICAgXCJjbGlwUGF0aFwiOiB3LFxuICAgIFwibWFza0ltYWdlXCI6IHcsXG4gICAgXCJtYXNrTW9kZVwiOiB3LFxuICAgIFwibWFza1JlcGVhdFwiOiB3LFxuICAgIFwibWFza1Bvc2l0aW9uXCI6IHcsXG4gICAgXCJtYXNrQ2xpcFwiOiB3LFxuICAgIFwibWFza09yaWdpblwiOiB3LFxuICAgIFwibWFza1NpemVcIjogdyxcbiAgICBcIm1hc2tDb21wb3NpdGVcIjogdyxcbiAgICBcIm1hc2tcIjogdyxcbiAgICBcIm1hc2tCb3JkZXJTb3VyY2VcIjogdyxcbiAgICBcIm1hc2tCb3JkZXJNb2RlXCI6IHcsXG4gICAgXCJtYXNrQm9yZGVyU2xpY2VcIjogdyxcbiAgICBcIm1hc2tCb3JkZXJXaWR0aFwiOiB3LFxuICAgIFwibWFza0JvcmRlck91dHNldFwiOiB3LFxuICAgIFwibWFza0JvcmRlclJlcGVhdFwiOiB3LFxuICAgIFwibWFza0JvcmRlclwiOiB3LFxuICAgIFwibWFza1R5cGVcIjogdyxcbiAgICBcInRleHREZWNvcmF0aW9uU3R5bGVcIjogd20sXG4gICAgXCJ0ZXh0RGVjb3JhdGlvblNraXBcIjogd20sXG4gICAgXCJ0ZXh0RGVjb3JhdGlvbkxpbmVcIjogd20sXG4gICAgXCJ0ZXh0RGVjb3JhdGlvbkNvbG9yXCI6IHdtLFxuICAgIFwiZmlsdGVyXCI6IHcsXG4gICAgXCJmb250RmVhdHVyZVNldHRpbmdzXCI6IHdtLFxuICAgIFwiYnJlYWtBZnRlclwiOiB3bW1zLFxuICAgIFwiYnJlYWtCZWZvcmVcIjogd21tcyxcbiAgICBcImJyZWFrSW5zaWRlXCI6IHdtbXMsXG4gICAgXCJjb2x1bW5Db3VudFwiOiB3bSxcbiAgICBcImNvbHVtbkZpbGxcIjogd20sXG4gICAgXCJjb2x1bW5HYXBcIjogd20sXG4gICAgXCJjb2x1bW5SdWxlXCI6IHdtLFxuICAgIFwiY29sdW1uUnVsZUNvbG9yXCI6IHdtLFxuICAgIFwiY29sdW1uUnVsZVN0eWxlXCI6IHdtLFxuICAgIFwiY29sdW1uUnVsZVdpZHRoXCI6IHdtLFxuICAgIFwiY29sdW1uc1wiOiB3bSxcbiAgICBcImNvbHVtblNwYW5cIjogd20sXG4gICAgXCJjb2x1bW5XaWR0aFwiOiB3bSxcbiAgICBcIndyaXRpbmdNb2RlXCI6IHdtcyxcbiAgICBcImZsZXhcIjogd21zLFxuICAgIFwiZmxleEJhc2lzXCI6IHcsXG4gICAgXCJmbGV4RGlyZWN0aW9uXCI6IHdtcyxcbiAgICBcImZsZXhHcm93XCI6IHcsXG4gICAgXCJmbGV4Rmxvd1wiOiB3bXMsXG4gICAgXCJmbGV4U2hyaW5rXCI6IHcsXG4gICAgXCJmbGV4V3JhcFwiOiB3bXMsXG4gICAgXCJhbGlnbkNvbnRlbnRcIjogdyxcbiAgICBcImFsaWduSXRlbXNcIjogdyxcbiAgICBcImFsaWduU2VsZlwiOiB3LFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogdyxcbiAgICBcIm9yZGVyXCI6IHcsXG4gICAgXCJ0cmFuc2l0aW9uRGVsYXlcIjogdyxcbiAgICBcInRyYW5zaXRpb25EdXJhdGlvblwiOiB3LFxuICAgIFwidHJhbnNpdGlvblByb3BlcnR5XCI6IHcsXG4gICAgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogdyxcbiAgICBcImJhY2tkcm9wRmlsdGVyXCI6IHcsXG4gICAgXCJzY3JvbGxTbmFwVHlwZVwiOiB3bXMsXG4gICAgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiB3bXMsXG4gICAgXCJzY3JvbGxTbmFwUG9pbnRzWVwiOiB3bXMsXG4gICAgXCJzY3JvbGxTbmFwRGVzdGluYXRpb25cIjogd21zLFxuICAgIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogd21zLFxuICAgIFwic2hhcGVJbWFnZVRocmVzaG9sZFwiOiB3LFxuICAgIFwic2hhcGVJbWFnZU1hcmdpblwiOiB3LFxuICAgIFwic2hhcGVJbWFnZU91dHNpZGVcIjogdyxcbiAgICBcImh5cGhlbnNcIjogd21tcyxcbiAgICBcImZsb3dJbnRvXCI6IHdtcyxcbiAgICBcImZsb3dGcm9tXCI6IHdtcyxcbiAgICBcInJlZ2lvbkZyYWdtZW50XCI6IHdtcyxcbiAgICBcInRleHRPcmllbnRhdGlvblwiOiB3LFxuICAgIFwiYm94U2l6aW5nXCI6IG0sXG4gICAgXCJ0ZXh0QWxpZ25MYXN0XCI6IG0sXG4gICAgXCJ0YWJTaXplXCI6IG0sXG4gICAgXCJ3cmFwRmxvd1wiOiBtcyxcbiAgICBcIndyYXBUaHJvdWdoXCI6IG1zLFxuICAgIFwid3JhcE1hcmdpblwiOiBtcyxcbiAgICBcInRvdWNoQWN0aW9uXCI6IG1zLFxuICAgIFwidGV4dFNpemVBZGp1c3RcIjogd21zLFxuICAgIFwiYm9yZGVySW1hZ2VcIjogdyxcbiAgICBcImJvcmRlckltYWdlT3V0c2V0XCI6IHcsXG4gICAgXCJib3JkZXJJbWFnZVJlcGVhdFwiOiB3LFxuICAgIFwiYm9yZGVySW1hZ2VTbGljZVwiOiB3LFxuICAgIFwiYm9yZGVySW1hZ2VTb3VyY2VcIjogdyxcbiAgICBcImJvcmRlckltYWdlV2lkdGhcIjogd1xuICB9XG59O1xuXG52YXIgcHJlZml4QWxsID0gY3JlYXRlUHJlZml4ZXIoc3RhdGljRGF0YSk7XG4vKiA6OlxuaW1wb3J0IHR5cGUgeyBTaGVldERlZmluaXRpb24gfSBmcm9tICcuL2luZGV4LmpzJztcbnR5cGUgU3RyaW5nSGFuZGxlcnMgPSB7IFtpZDpzdHJpbmddOiBGdW5jdGlvbiB9O1xudHlwZSBTZWxlY3RvckNhbGxiYWNrID0gKHNlbGVjdG9yOiBzdHJpbmcpID0+IHN0cmluZ1tdO1xuZXhwb3J0IHR5cGUgU2VsZWN0b3JIYW5kbGVyID0gKFxuICAgIHNlbGVjdG9yOiBzdHJpbmcsXG4gICAgYmFzZVNlbGVjdG9yOiBzdHJpbmcsXG4gICAgY2FsbGJhY2s6IFNlbGVjdG9yQ2FsbGJhY2tcbikgPT4gc3RyaW5nW10gfCBzdHJpbmcgfCBudWxsO1xuKi9cblxuLyoqXG4gKiBgc2VsZWN0b3JIYW5kbGVyc2AgYXJlIGZ1bmN0aW9ucyB3aGljaCBoYW5kbGUgc3BlY2lhbCBzZWxlY3RvcnMgd2hpY2ggYWN0XG4gKiBkaWZmZXJlbnRseSB0aGFuIG5vcm1hbCBzdHlsZSBkZWZpbml0aW9ucy4gVGhlc2UgZnVuY3Rpb25zIGxvb2sgYXQgdGhlXG4gKiBjdXJyZW50IHNlbGVjdG9yIGFuZCBjYW4gZ2VuZXJhdGUgQ1NTIGZvciB0aGUgc3R5bGVzIGluIHRoZWlyIHN1YnRyZWUgYnlcbiAqIGNhbGxpbmcgdGhlIGNhbGxiYWNrIHdpdGggYSBuZXcgc2VsZWN0b3IuXG4gKlxuICogRm9yIGV4YW1wbGUsIHdoZW4gZ2VuZXJhdGluZyBzdHlsZXMgd2l0aCBhIGJhc2Ugc2VsZWN0b3Igb2YgJy5mb28nIGFuZCB0aGVcbiAqIGZvbGxvd2luZyBzdHlsZXMgb2JqZWN0OlxuICpcbiAqICAge1xuICogICAgICc6bnRoLWNoaWxkKDJuKSc6IHtcbiAqICAgICAgICc6aG92ZXInOiB7XG4gKiAgICAgICAgIGNvbG9yOiAncmVkJ1xuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfVxuICpcbiAqIHdoZW4gd2UgcmVhY2ggdGhlICc6aG92ZXInIHN0eWxlLCB3ZSB3b3VsZCBjYWxsIG91ciBzZWxlY3RvciBoYW5kbGVycyBsaWtlXG4gKlxuICogICBoYW5kbGVyKCc6aG92ZXInLCAnLmZvbzpudGgtY2hpbGQoMm4pJywgY2FsbGJhY2spXG4gKlxuICogU2luY2Ugb3VyIGBwc2V1ZG9TZWxlY3RvcnNgIGhhbmRsZXMgJzpob3Zlcicgc3R5bGVzLCB0aGF0IGhhbmRsZXIgd291bGQgY2FsbFxuICogdGhlIGNhbGxiYWNrIGxpa2VcbiAqXG4gKiAgIGNhbGxiYWNrKCcuZm9vOm50aC1jaGlsZCgybik6aG92ZXInKVxuICpcbiAqIHRvIGdlbmVyYXRlIGl0cyBzdWJ0cmVlIGB7IGNvbG9yOiAncmVkJyB9YCBzdHlsZXMgd2l0aCBhXG4gKiAnLmZvbzpudGgtY2hpbGQoMm4pOmhvdmVyJyBzZWxlY3Rvci4gVGhlIGNhbGxiYWNrIHdvdWxkIHJldHVybiBhbiBhcnJheSBvZiBDU1NcbiAqIHJ1bGVzIGxpa2VcbiAqXG4gKiAgIFsnLmZvbzpudGgtY2hpbGQoMm4pOmhvdmVye2NvbG9yOnJlZCAhaW1wb3J0YW50O30nXVxuICpcbiAqIGFuZCB0aGUgaGFuZGxlciB3b3VsZCB0aGVuIHJldHVybiB0aGF0IHJlc3VsdGluZyBDU1MuXG4gKlxuICogYGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzYCBpcyB0aGUgbGlzdCBvZiBkZWZhdWx0IGhhbmRsZXJzIHVzZWQgaW4gYSBjYWxsIHRvXG4gKiBgZ2VuZXJhdGVDU1NgLlxuICpcbiAqIEBuYW1lIFNlbGVjdG9ySGFuZGxlclxuICogQGZ1bmN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3I6IFRoZSBjdXJyZW50bHkgaW5zcGVjdGVkIHNlbGVjdG9yLiAnOmhvdmVyJyBpbiB0aGVcbiAqICAgICBleGFtcGxlIGFib3ZlLlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VTZWxlY3RvcjogVGhlIHNlbGVjdG9yIG9mIHRoZSBwYXJlbnQgc3R5bGVzLlxuICogICAgICcuZm9vOm50aC1jaGlsZCgybiknIGluIHRoZSBleGFtcGxlIGFib3ZlLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZ2VuZXJhdGVTdWJ0cmVlU3R5bGVzOiBBIGZ1bmN0aW9uIHdoaWNoIGNhbiBiZSBjYWxsZWQgdG9cbiAqICAgICBnZW5lcmF0ZSBDU1MgZm9yIHRoZSBzdWJ0cmVlIG9mIHN0eWxlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBzZWxlY3Rvci5cbiAqICAgICBBY2NlcHRzIGEgbmV3IGJhc2VTZWxlY3RvciB0byB1c2UgZm9yIGdlbmVyYXRpbmcgdGhvc2Ugc3R5bGVzLlxuICogQHJldHVybnMge3N0cmluZ1tdIHwgc3RyaW5nIHwgbnVsbH0gVGhlIGdlbmVyYXRlZCBDU1MgZm9yIHRoaXMgc2VsZWN0b3IsIG9yXG4gKiAgICAgbnVsbCBpZiB3ZSBkb24ndCBoYW5kbGUgdGhpcyBzZWxlY3Rvci5cbiAqL1xuXG52YXIgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnNcbi8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbj0gWy8vIEhhbmRsZSBwc2V1ZG8tc2VsZWN0b3JzLCBsaWtlIDpob3ZlciBhbmQgOm50aC1jaGlsZCgzbilcbmZ1bmN0aW9uIHBzZXVkb1NlbGVjdG9ycyhzZWxlY3RvciwgYmFzZVNlbGVjdG9yLCBnZW5lcmF0ZVN1YnRyZWVTdHlsZXMpIHtcbiAgaWYgKHNlbGVjdG9yWzBdICE9PSBcIjpcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRlU3VidHJlZVN0eWxlcyhiYXNlU2VsZWN0b3IgKyBzZWxlY3Rvcik7XG59LCAvLyBIYW5kbGUgbWVkaWEgcXVlcmllcyAob3IgZm9udC1mYWNlcylcbmZ1bmN0aW9uIG1lZGlhUXVlcmllcyhzZWxlY3RvciwgYmFzZVNlbGVjdG9yLCBnZW5lcmF0ZVN1YnRyZWVTdHlsZXMpIHtcbiAgaWYgKHNlbGVjdG9yWzBdICE9PSBcIkBcIikge1xuICAgIHJldHVybiBudWxsO1xuICB9IC8vIEdlbmVyYXRlIHRoZSBzdHlsZXMgbm9ybWFsbHksIGFuZCB0aGVuIHdyYXAgdGhlbSBpbiB0aGUgbWVkaWEgcXVlcnkuXG5cblxuICB2YXIgZ2VuZXJhdGVkID0gZ2VuZXJhdGVTdWJ0cmVlU3R5bGVzKGJhc2VTZWxlY3Rvcik7XG4gIHJldHVybiBbXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwie1wiKS5jb25jYXQoZ2VuZXJhdGVkLmpvaW4oJycpLCBcIn1cIildO1xufV07XG4vKipcbiAqIEdlbmVyYXRlIENTUyBmb3IgYSBzZWxlY3RvciBhbmQgc29tZSBzdHlsZXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBtZWRpYSBxdWVyaWVzIGFuZCBwc2V1ZG8gc2VsZWN0b3JzIHRoYXQgY2FuIGJlIHVzZWRcbiAqIGluIGFwaHJvZGl0ZSBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yOiBBIGJhc2UgQ1NTIHNlbGVjdG9yIGZvciB0aGUgc3R5bGVzIHRvIGJlIGdlbmVyYXRlZFxuICogICAgIHdpdGguXG4gKiBAcGFyYW0ge09iamVjdH0gc3R5bGVUeXBlczogQSBsaXN0IG9mIHByb3BlcnRpZXMgb2YgdGhlIHJldHVybiB0eXBlIG9mXG4gKiAgICAgU3R5bGVTaGVldC5jcmVhdGUsIGUuZy4gW3N0eWxlcy5yZWQsIHN0eWxlcy5ibHVlXS5cbiAqIEBwYXJhbSB7QXJyYXkuPFNlbGVjdG9ySGFuZGxlcj59IHNlbGVjdG9ySGFuZGxlcnM6IEEgbGlzdCBvZiBzZWxlY3RvclxuICogICAgIGhhbmRsZXJzIHRvIHVzZSBmb3IgaGFuZGxpbmcgc3BlY2lhbCBzZWxlY3RvcnMuIFNlZVxuICogICAgIGBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyc2AuXG4gKiBAcGFyYW0gc3RyaW5nSGFuZGxlcnM6IFNlZSBgZ2VuZXJhdGVDU1NSdWxlc2V0YFxuICogQHBhcmFtIHVzZUltcG9ydGFudDogU2VlIGBnZW5lcmF0ZUNTU1J1bGVzZXRgXG4gKlxuICogVG8gYWN0dWFsbHkgZ2VuZXJhdGUgdGhlIENTUyBzcGVjaWFsLWNvbnN0cnVjdC1sZXNzIHN0eWxlcyBhcmUgcGFzc2VkIHRvXG4gKiBgZ2VuZXJhdGVDU1NSdWxlc2V0YC5cbiAqXG4gKiBGb3IgaW5zdGFuY2UsIGEgY2FsbCB0b1xuICpcbiAqICAgICBnZW5lcmF0ZUNTUyhcIi5mb29cIiwgW3tcbiAqICAgICAgIGNvbG9yOiBcInJlZFwiLFxuICogICAgICAgXCJAbWVkaWEgc2NyZWVuXCI6IHtcbiAqICAgICAgICAgaGVpZ2h0OiAyMCxcbiAqICAgICAgICAgXCI6aG92ZXJcIjoge1xuICogICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJibGFja1wiXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBcIjphY3RpdmVcIjoge1xuICogICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIlxuICogICAgICAgfVxuICogICAgIH1dLCBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycyk7XG4gKlxuICogd2l0aCB0aGUgZGVmYXVsdCBgc2VsZWN0b3JIYW5kbGVyc2Agd2lsbCBtYWtlIDUgY2FsbHMgdG9cbiAqIGBnZW5lcmF0ZUNTU1J1bGVzZXRgOlxuICpcbiAqICAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuZm9vXCIsIHsgY29sb3I6IFwicmVkXCIgfSwgLi4uKVxuICogICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5mb286YWN0aXZlXCIsIHsgZm9udFdlaWdodDogXCJib2xkXCIgfSwgLi4uKVxuICogICAgIC8vIFRoZXNlIDIgd2lsbCBiZSB3cmFwcGVkIGluIEBtZWRpYSBzY3JlZW4ge31cbiAqICAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuZm9vXCIsIHsgaGVpZ2h0OiAyMCB9LCAuLi4pXG4gKiAgICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmZvbzpob3ZlclwiLCB7IGJhY2tncm91bmRDb2xvcjogXCJibGFja1wiIH0sIC4uLilcbiAqL1xuXG52YXIgZ2VuZXJhdGVDU1MgPSBmdW5jdGlvbiBnZW5lcmF0ZUNTUyhzZWxlY3RvclxuLyogOiBzdHJpbmcgKi9cbiwgc3R5bGVUeXBlc1xuLyogOiBTaGVldERlZmluaXRpb25bXSAqL1xuLCBzZWxlY3RvckhhbmRsZXJzXG4vKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4sIHN0cmluZ0hhbmRsZXJzXG4vKiA6IFN0cmluZ0hhbmRsZXJzICovXG4sIHVzZUltcG9ydGFudFxuLyogOiBib29sZWFuICovXG4pXG4vKiA6IHN0cmluZ1tdICovXG57XG4gIHZhciBtZXJnZWQgPSBuZXcgT3JkZXJlZEVsZW1lbnRzKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZVR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWVyZ2VkLmFkZFN0eWxlVHlwZShzdHlsZVR5cGVzW2ldKTtcbiAgfVxuXG4gIHZhciBwbGFpbkRlY2xhcmF0aW9ucyA9IG5ldyBPcmRlcmVkRWxlbWVudHMoKTtcbiAgdmFyIGdlbmVyYXRlZFN0eWxlcyA9IFtdOyAvLyBUT0RPKGVtaWx5KTogYmVuY2htYXJrIHRoaXMgdG8gc2VlIGlmIGEgcGxhaW4gZm9yIGxvb3Agd291bGQgYmUgZmFzdGVyLlxuXG4gIG1lcmdlZC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwsIGtleSkge1xuICAgIC8vIEZvciBlYWNoIGtleSwgc2VlIGlmIG9uZSBvZiB0aGUgc2VsZWN0b3IgaGFuZGxlcnMgd2lsbCBoYW5kbGUgdGhlc2VcbiAgICAvLyBzdHlsZXMuXG4gICAgdmFyIGZvdW5kSGFuZGxlciA9IHNlbGVjdG9ySGFuZGxlcnMuc29tZShmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IGhhbmRsZXIoa2V5LCBzZWxlY3RvciwgZnVuY3Rpb24gKG5ld1NlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBnZW5lcmF0ZUNTUyhuZXdTZWxlY3RvciwgW3ZhbF0sIHNlbGVjdG9ySGFuZGxlcnMsIHN0cmluZ0hhbmRsZXJzLCB1c2VJbXBvcnRhbnQpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXN1bHQgIT0gbnVsbCkge1xuICAgICAgICAvLyBJZiB0aGUgaGFuZGxlciByZXR1cm5lZCBzb21ldGhpbmcsIGFkZCBpdCB0byB0aGUgZ2VuZXJhdGVkXG4gICAgICAgIC8vIENTUyBhbmQgc3RvcCBsb29raW5nIGZvciBhbm90aGVyIGhhbmRsZXIuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICBnZW5lcmF0ZWRTdHlsZXMucHVzaC5hcHBseShnZW5lcmF0ZWRTdHlsZXMsIF90b0NvbnN1bWFibGVBcnJheShyZXN1bHQpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IFNlbGVjdG9yIGhhbmRsZXJzIHNob3VsZCByZXR1cm4gYW4gYXJyYXkgb2YgcnVsZXMuJyArICdSZXR1cm5pbmcgYSBzdHJpbmcgY29udGFpbmluZyBtdWx0aXBsZSBydWxlcyBpcyBkZXByZWNhdGVkLicsIGhhbmRsZXIpO1xuICAgICAgICAgIGdlbmVyYXRlZFN0eWxlcy5wdXNoKFwiQG1lZGlhIGFsbCB7XCIuY29uY2F0KHJlc3VsdCwgXCJ9XCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pOyAvLyBJZiBub25lIG9mIHRoZSBoYW5kbGVycyBoYW5kbGVkIGl0LCBhZGQgaXQgdG8gdGhlIGxpc3Qgb2YgcGxhaW5cbiAgICAvLyBzdHlsZSBkZWNsYXJhdGlvbnMuXG5cbiAgICBpZiAoIWZvdW5kSGFuZGxlcikge1xuICAgICAgcGxhaW5EZWNsYXJhdGlvbnMuc2V0KGtleSwgdmFsLCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZ2VuZXJhdGVkUnVsZXNldCA9IGdlbmVyYXRlQ1NTUnVsZXNldChzZWxlY3RvciwgcGxhaW5EZWNsYXJhdGlvbnMsIHN0cmluZ0hhbmRsZXJzLCB1c2VJbXBvcnRhbnQsIHNlbGVjdG9ySGFuZGxlcnMpO1xuXG4gIGlmIChnZW5lcmF0ZWRSdWxlc2V0KSB7XG4gICAgZ2VuZXJhdGVkU3R5bGVzLnVuc2hpZnQoZ2VuZXJhdGVkUnVsZXNldCk7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdGVkU3R5bGVzO1xufTtcbi8qKlxuICogSGVscGVyIG1ldGhvZCBvZiBnZW5lcmF0ZUNTU1J1bGVzZXQgdG8gZmFjaWxpdGF0ZSBjdXN0b20gaGFuZGxpbmcgb2YgY2VydGFpblxuICogQ1NTIHByb3BlcnRpZXMuIFVzZWQgZm9yIGUuZy4gZm9udCBmYW1pbGllcy5cbiAqXG4gKiBTZWUgZ2VuZXJhdGVDU1NSdWxlc2V0IGZvciB1c2FnZSBhbmQgZG9jdW1lbnRhdGlvbiBvZiBwYXJhbWF0ZXIgdHlwZXMuXG4gKi9cblxudmFyIHJ1blN0cmluZ0hhbmRsZXJzID0gZnVuY3Rpb24gcnVuU3RyaW5nSGFuZGxlcnMoZGVjbGFyYXRpb25zXG4vKiA6IE9yZGVyZWRFbGVtZW50cyAqL1xuLCBzdHJpbmdIYW5kbGVyc1xuLyogOiBTdHJpbmdIYW5kbGVycyAqL1xuLCBzZWxlY3RvckhhbmRsZXJzXG4vKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4pXG4vKiA6IHZvaWQgKi9cbntcbiAgaWYgKCFzdHJpbmdIYW5kbGVycykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzdHJpbmdIYW5kbGVyS2V5cyA9IE9iamVjdC5rZXlzKHN0cmluZ0hhbmRsZXJzKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ0hhbmRsZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHN0cmluZ0hhbmRsZXJLZXlzW2ldO1xuXG4gICAgaWYgKGRlY2xhcmF0aW9ucy5oYXMoa2V5KSkge1xuICAgICAgLy8gQSBkZWNsYXJhdGlvbiBleGlzdHMgZm9yIHRoaXMgcGFydGljdWxhciBzdHJpbmcgaGFuZGxlciwgc28gd2VcbiAgICAgIC8vIG5lZWQgdG8gbGV0IHRoZSBzdHJpbmcgaGFuZGxlciBpbnRlcnByZXQgdGhlIGRlY2xhcmF0aW9uIGZpcnN0XG4gICAgICAvLyBiZWZvcmUgcHJvY2VlZGluZy5cbiAgICAgIC8vXG4gICAgICAvLyBUT0RPKGVtaWx5KTogUGFzcyBpbiBhIGNhbGxiYWNrIHdoaWNoIGdlbmVyYXRlcyBDU1MsIHNpbWlsYXIgdG9cbiAgICAgIC8vIGhvdyBvdXIgc2VsZWN0b3IgaGFuZGxlcnMgd29yaywgaW5zdGVhZCBvZiBwYXNzaW5nIGluXG4gICAgICAvLyBgc2VsZWN0b3JIYW5kbGVyc2AgYW5kIGhhdmUgdGhlbSBtYWtlIGNhbGxzIHRvIGBnZW5lcmF0ZUNTU2BcbiAgICAgIC8vIHRoZW1zZWx2ZXMuIFJpZ2h0IG5vdywgdGhpcyBpcyBpbXByYWN0aWNhbCBiZWNhdXNlIG91ciBzdHJpbmdcbiAgICAgIC8vIGhhbmRsZXJzIGFyZSB2ZXJ5IHNwZWNpYWxpemVkIGFuZCBkbyBjb21wbGV4IHRoaW5ncy5cbiAgICAgIGRlY2xhcmF0aW9ucy5zZXQoa2V5LCBzdHJpbmdIYW5kbGVyc1trZXldKGRlY2xhcmF0aW9ucy5nZXQoa2V5KSwgc2VsZWN0b3JIYW5kbGVycyksIC8vIFByZXNlcnZlIG9yZGVyIGhlcmUsIHNpbmNlIHdlIGFyZSByZWFsbHkgcmVwbGFjaW5nIGFuXG4gICAgICAvLyB1bnByb2Nlc3NlZCBzdHlsZSB3aXRoIGEgcHJvY2Vzc2VkIHN0eWxlLCBub3Qgb3ZlcnJpZGluZyBhblxuICAgICAgLy8gZWFybGllciBzdHlsZVxuICAgICAgZmFsc2UpO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHRyYW5zZm9ybVJ1bGUgPSBmdW5jdGlvbiB0cmFuc2Zvcm1SdWxlKGtleVxuLyogOiBzdHJpbmcgKi9cbiwgdmFsdWVcbi8qIDogc3RyaW5nICovXG4sIHRyYW5zZm9ybVZhbHVlXG4vKiA6IGZ1bmN0aW9uICovXG4pIHtcbiAgcmV0dXJuIChcbiAgICAvKiA6IHN0cmluZyAqL1xuICAgIFwiXCIuY29uY2F0KGtlYmFiaWZ5U3R5bGVOYW1lKGtleSksIFwiOlwiKS5jb25jYXQodHJhbnNmb3JtVmFsdWUoa2V5LCB2YWx1ZSksIFwiO1wiKVxuICApO1xufTtcblxudmFyIGFycmF5VG9PYmplY3RLZXlzUmVkdWNlciA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3RLZXlzUmVkdWNlcihhY2MsIHZhbCkge1xuICBhY2NbdmFsXSA9IHRydWU7XG4gIHJldHVybiBhY2M7XG59O1xuLyoqXG4gKiBHZW5lcmF0ZSBhIENTUyBydWxlc2V0IHdpdGggdGhlIHNlbGVjdG9yIGFuZCBjb250YWluaW5nIHRoZSBkZWNsYXJhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBhc3N1bWVzIHRoYXQgdGhlIGdpdmVuIGRlY2xhcmF0aW9ucyBkb24ndCBjb250YWluIGFueSBzcGVjaWFsXG4gKiBjaGlsZHJlbiAoc3VjaCBhcyBtZWRpYSBxdWVyaWVzLCBwc2V1ZG8tc2VsZWN0b3JzLCBvciBkZXNjZW5kYW50IHN0eWxlcykuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgbWV0aG9kIGRvZXMgbm90IGRlYWwgd2l0aCBuZXN0aW5nIHVzZWQgZm9yIGUuZy5cbiAqIHBzdWVkby1zZWxlY3RvcnMgb3IgbWVkaWEgcXVlcmllcy4gVGhhdCByZXNwb25zaWJpbGl0eSBpcyBsZWZ0IHRvICB0aGVcbiAqIGBnZW5lcmF0ZUNTU2AgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yOiB0aGUgc2VsZWN0b3IgYXNzb2NpYXRlZCB3aXRoIHRoZSBydWxlc2V0XG4gKiBAcGFyYW0ge09iamVjdH0gZGVjbGFyYXRpb25zOiBhIG1hcCBmcm9tIGNhbWVsQ2FzZWQgQ1NTIHByb3BlcnR5IG5hbWUgdG8gQ1NTXG4gKiAgICAgcHJvcGVydHkgdmFsdWUuXG4gKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCBmdW5jdGlvbj59IHN0cmluZ0hhbmRsZXJzOiBhIG1hcCBmcm9tIGNhbWVsQ2FzZWQgQ1NTXG4gKiAgICAgcHJvcGVydHkgbmFtZSB0byBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgbWFwIHRoZSBnaXZlbiB2YWx1ZSB0byB0aGUgdmFsdWVcbiAqICAgICB0aGF0IGlzIG91dHB1dC5cbiAqIEBwYXJhbSB7Ym9vbH0gdXNlSW1wb3J0YW50OiBBIGJvb2xlYW4gc2F5aW5nIHdoZXRoZXIgdG8gYXBwZW5kIFwiIWltcG9ydGFudFwiXG4gKiAgICAgdG8gZWFjaCBvZiB0aGUgQ1NTIGRlY2xhcmF0aW9ucy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5nIG9mIHJhdyBDU1MuXG4gKlxuICogRXhhbXBsZXM6XG4gKlxuICogICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmJsYWhcIiwgeyBjb2xvcjogXCJyZWRcIiB9KVxuICogICAgLT4gXCIuYmxhaHtjb2xvcjogcmVkICFpbXBvcnRhbnQ7fVwiXG4gKiAgICBnZW5lcmF0ZUNTU1J1bGVzZXQoXCIuYmxhaFwiLCB7IGNvbG9yOiBcInJlZFwiIH0sIHt9LCBmYWxzZSlcbiAqICAgIC0+IFwiLmJsYWh7Y29sb3I6IHJlZH1cIlxuICogICAgZ2VuZXJhdGVDU1NSdWxlc2V0KFwiLmJsYWhcIiwgeyBjb2xvcjogXCJyZWRcIiB9LCB7Y29sb3I6IGMgPT4gYy50b1VwcGVyQ2FzZX0pXG4gKiAgICAtPiBcIi5ibGFoe2NvbG9yOiBSRUR9XCJcbiAqICAgIGdlbmVyYXRlQ1NTUnVsZXNldChcIi5ibGFoOmhvdmVyXCIsIHsgY29sb3I6IFwicmVkXCIgfSlcbiAqICAgIC0+IFwiLmJsYWg6aG92ZXJ7Y29sb3I6IHJlZH1cIlxuICovXG5cblxudmFyIGdlbmVyYXRlQ1NTUnVsZXNldCA9IGZ1bmN0aW9uIGdlbmVyYXRlQ1NTUnVsZXNldChzZWxlY3RvclxuLyogOiBzdHJpbmcgKi9cbiwgZGVjbGFyYXRpb25zXG4vKiA6IE9yZGVyZWRFbGVtZW50cyAqL1xuLCBzdHJpbmdIYW5kbGVyc1xuLyogOiBTdHJpbmdIYW5kbGVycyAqL1xuLCB1c2VJbXBvcnRhbnRcbi8qIDogYm9vbGVhbiAqL1xuLCBzZWxlY3RvckhhbmRsZXJzXG4vKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4pXG4vKiA6IHN0cmluZyAqL1xue1xuICAvLyBNdXRhdGVzIGRlY2xhcmF0aW9uc1xuICBydW5TdHJpbmdIYW5kbGVycyhkZWNsYXJhdGlvbnMsIHN0cmluZ0hhbmRsZXJzLCBzZWxlY3RvckhhbmRsZXJzKTtcbiAgdmFyIG9yaWdpbmFsRWxlbWVudHMgPSBPYmplY3Qua2V5cyhkZWNsYXJhdGlvbnMuZWxlbWVudHMpLnJlZHVjZShhcnJheVRvT2JqZWN0S2V5c1JlZHVjZXIsIE9iamVjdC5jcmVhdGUobnVsbCkpOyAvLyBOT1RFKGVtaWx5KTogVGhpcyBtdXRhdGVzIGhhbmRsZWREZWNsYXJhdGlvbnMuZWxlbWVudHMuXG5cbiAgdmFyIHByZWZpeGVkRWxlbWVudHMgPSBwcmVmaXhBbGwoZGVjbGFyYXRpb25zLmVsZW1lbnRzKTtcbiAgdmFyIGVsZW1lbnROYW1lcyA9IE9iamVjdC5rZXlzKHByZWZpeGVkRWxlbWVudHMpO1xuXG4gIGlmIChlbGVtZW50TmFtZXMubGVuZ3RoICE9PSBkZWNsYXJhdGlvbnMua2V5T3JkZXIubGVuZ3RoKSB7XG4gICAgLy8gVGhlcmUgYXJlIHNvbWUgcHJlZml4ZWQgdmFsdWVzLCBzbyB3ZSBuZWVkIHRvIGZpZ3VyZSBvdXQgaG93IHRvIHNvcnRcbiAgICAvLyB0aGVtLlxuICAgIC8vXG4gICAgLy8gTG9vcCB0aHJvdWdoIHByZWZpeGVkRWxlbWVudHMsIGxvb2tpbmcgZm9yIGFueXRoaW5nIHRoYXQgaXMgbm90IGluXG4gICAgLy8gc29ydE9yZGVyLCB3aGljaCBtZWFucyBpdCB3YXMgYWRkZWQgYnkgcHJlZml4QWxsLiBUaGlzIG1lYW5zIHRoYXQgd2VcbiAgICAvLyBuZWVkIHRvIGZpZ3VyZSBvdXQgd2hlcmUgaXQgc2hvdWxkIGFwcGVhciBpbiB0aGUgc29ydE9yZGVyLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9yaWdpbmFsRWxlbWVudHNbZWxlbWVudE5hbWVzW2ldXSkge1xuICAgICAgICAvLyBUaGlzIGVsZW1lbnQgaXMgbm90IGluIHRoZSBzb3J0T3JkZXIsIHdoaWNoIG1lYW5zIGl0IGlzIGEgcHJlZml4ZWRcbiAgICAgICAgLy8gdmFsdWUgdGhhdCB3YXMgYWRkZWQgYnkgcHJlZml4QWxsLiBMZXQncyB0cnkgdG8gZmlndXJlIG91dCB3aGVyZSBpdFxuICAgICAgICAvLyBnb2VzLlxuICAgICAgICB2YXIgb3JpZ2luYWxTdHlsZSA9IHZvaWQgMDtcblxuICAgICAgICBpZiAoZWxlbWVudE5hbWVzW2ldWzBdID09PSAnVycpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgV2Via2l0LXByZWZpeGVkIHN0eWxlLCBsaWtlIFwiV2Via2l0VHJhbnNpdGlvblwiLiBMZXQnc1xuICAgICAgICAgIC8vIGZpbmQgaXRzIG9yaWdpbmFsIHN0eWxlJ3Mgc29ydCBvcmRlci5cbiAgICAgICAgICBvcmlnaW5hbFN0eWxlID0gZWxlbWVudE5hbWVzW2ldWzZdLnRvTG93ZXJDYXNlKCkgKyBlbGVtZW50TmFtZXNbaV0uc2xpY2UoNyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudE5hbWVzW2ldWzFdID09PSAnbycpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgTW96LXByZWZpeGVkIHN0eWxlLCBsaWtlIFwiTW96VHJhbnNpdGlvblwiLiBXZSBjaGVja1xuICAgICAgICAgIC8vIHRoZSBzZWNvbmQgY2hhcmFjdGVyIHRvIGF2b2lkIGNvbGxpZGluZyB3aXRoIE1zLXByZWZpeGVkXG4gICAgICAgICAgLy8gc3R5bGVzLiBMZXQncyBmaW5kIGl0cyBvcmlnaW5hbCBzdHlsZSdzIHNvcnQgb3JkZXIuXG4gICAgICAgICAgb3JpZ2luYWxTdHlsZSA9IGVsZW1lbnROYW1lc1tpXVszXS50b0xvd2VyQ2FzZSgpICsgZWxlbWVudE5hbWVzW2ldLnNsaWNlKDQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGlmIChlbGVtZW50TmFtZXNbaV1bMV0gPT09ICdzJykge1xuICAgICAgICAgIC8vIFRoaXMgaXMgYSBNcy1wcmVmaXhlZCBzdHlsZSwgbGlrZSBcIk1zVHJhbnNpdGlvblwiLlxuICAgICAgICAgIG9yaWdpbmFsU3R5bGUgPSBlbGVtZW50TmFtZXNbaV1bMl0udG9Mb3dlckNhc2UoKSArIGVsZW1lbnROYW1lc1tpXS5zbGljZSgzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmlnaW5hbFN0eWxlICYmIG9yaWdpbmFsRWxlbWVudHNbb3JpZ2luYWxTdHlsZV0pIHtcbiAgICAgICAgICB2YXIgb3JpZ2luYWxJbmRleCA9IGRlY2xhcmF0aW9ucy5rZXlPcmRlci5pbmRleE9mKG9yaWdpbmFsU3R5bGUpO1xuICAgICAgICAgIGRlY2xhcmF0aW9ucy5rZXlPcmRlci5zcGxpY2Uob3JpZ2luYWxJbmRleCwgMCwgZWxlbWVudE5hbWVzW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZSBkb24ndCBrbm93IHdoYXQgdGhlIG9yaWdpbmFsIHN0eWxlIHdhcywgc28gc29ydCBpdCB0b1xuICAgICAgICAgIC8vIHRvcC4gVGhpcyBjYW4gaGFwcGVuIGZvciBzdHlsZXMgdGhhdCBhcmUgYWRkZWQgdGhhdCBkb24ndFxuICAgICAgICAgIC8vIGhhdmUgdGhlIHNhbWUgYmFzZSBuYW1lIGFzIHRoZSBvcmlnaW5hbCBzdHlsZS5cbiAgICAgICAgICBkZWNsYXJhdGlvbnMua2V5T3JkZXIudW5zaGlmdChlbGVtZW50TmFtZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyYW5zZm9ybVZhbHVlID0gdXNlSW1wb3J0YW50ID09PSBmYWxzZSA/IHN0cmluZ2lmeVZhbHVlIDogc3RyaW5naWZ5QW5kSW1wb3J0YW50aWZ5VmFsdWU7XG4gIHZhciBydWxlcyA9IFtdO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBkZWNsYXJhdGlvbnMua2V5T3JkZXIubGVuZ3RoOyBfaSsrKSB7XG4gICAgdmFyIGtleSA9IGRlY2xhcmF0aW9ucy5rZXlPcmRlcltfaV07XG4gICAgdmFyIHZhbHVlID0gcHJlZml4ZWRFbGVtZW50c1trZXldO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAvLyBpbmxpbmUtc3R5bGUtcHJlZml4ZXIgcmV0dXJucyBhbiBhcnJheSB3aGVuIHRoZXJlIHNob3VsZCBiZVxuICAgICAgLy8gbXVsdGlwbGUgcnVsZXMgZm9yIHRoZSBzYW1lIGtleS4gSGVyZSB3ZSBmbGF0dGVuIHRvIG11bHRpcGxlXG4gICAgICAvLyBwYWlycyB3aXRoIHRoZSBzYW1lIGtleS5cbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgcnVsZXMucHVzaCh0cmFuc2Zvcm1SdWxlKGtleSwgdmFsdWVbal0sIHRyYW5zZm9ybVZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bGVzLnB1c2godHJhbnNmb3JtUnVsZShrZXksIHZhbHVlLCB0cmFuc2Zvcm1WYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChydWxlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoc2VsZWN0b3IsIFwie1wiKS5jb25jYXQocnVsZXMuam9pbihcIlwiKSwgXCJ9XCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG59O1xuXG4vKiA6OlxuaW1wb3J0IHR5cGUgeyBTaGVldERlZmluaXRpb24sIFNoZWV0RGVmaW5pdGlvbnMgfSBmcm9tICcuL2luZGV4LmpzJztcbmltcG9ydCB0eXBlIHsgTWF5YmVTaGVldERlZmluaXRpb24gfSBmcm9tICcuL2V4cG9ydHMuanMnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RvckhhbmRsZXIgfSBmcm9tICcuL2dlbmVyYXRlLmpzJztcbiovXG4vLyBUaGUgY3VycmVudCA8c3R5bGU+IHRhZyB3ZSBhcmUgaW5zZXJ0aW5nIGludG8sIG9yIG51bGwgaWYgd2UgaGF2ZW4ndFxuLy8gaW5zZXJ0ZWQgYW55dGhpbmcgeWV0LiBXZSBjb3VsZCBmaW5kIHRoaXMgZWFjaCB0aW1lIHVzaW5nXG4vLyBgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInN0eWxlW2RhdGEtYXBocm9kaXRlXCJdKWAsIGJ1dCBob2xkaW5nIG9udG8gaXQgaXNcbi8vIGZhc3Rlci5cblxudmFyIHN0eWxlVGFnXG4vKiA6ID9IVE1MU3R5bGVFbGVtZW50ICovXG49IG51bGw7IC8vIEluamVjdCBhIHNldCBvZiBydWxlcyBpbnRvIGEgPHN0eWxlPiB0YWcgaW4gdGhlIGhlYWQgb2YgdGhlIGRvY3VtZW50LiBUaGlzXG4vLyB3aWxsIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGEgc3R5bGUgdGFnIGFuZCB0aGVuIGNvbnRpbnVlIHRvIHVzZSBpdCBmb3Jcbi8vIG11bHRpcGxlIGluamVjdGlvbnMuIEl0IHdpbGwgYWxzbyB1c2UgYSBzdHlsZSB0YWcgd2l0aCB0aGUgYGRhdGEtYXBocm9kaXRlYFxuLy8gdGFnIG9uIGl0IGlmIHRoYXQgZXhpc3RzIGluIHRoZSBET00uIFRoaXMgY291bGQgYmUgdXNlZCBmb3IgZS5nLiByZXVzaW5nIHRoZVxuLy8gc2FtZSBzdHlsZSB0YWcgdGhhdCBzZXJ2ZXItc2lkZSByZW5kZXJpbmcgaW5zZXJ0cy5cblxudmFyIGluamVjdFN0eWxlVGFnID0gZnVuY3Rpb24gaW5qZWN0U3R5bGVUYWcoY3NzUnVsZXNcbi8qIDogc3RyaW5nW10gKi9cbikge1xuICBpZiAoc3R5bGVUYWcgPT0gbnVsbCkge1xuICAgIC8vIFRyeSB0byBmaW5kIGEgc3R5bGUgdGFnIHdpdGggdGhlIGBkYXRhLWFwaHJvZGl0ZWAgYXR0cmlidXRlIGZpcnN0LlxuICAgIHN0eWxlVGFnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInN0eWxlW2RhdGEtYXBocm9kaXRlXVwiKVxuICAgIC8qIDogYW55ICovXG4gICAgOyAvLyBJZiB0aGF0IGRvZXNuJ3Qgd29yaywgZ2VuZXJhdGUgYSBuZXcgc3R5bGUgdGFnLlxuXG4gICAgaWYgKHN0eWxlVGFnID09IG51bGwpIHtcbiAgICAgIC8vIFRha2VuIGZyb21cbiAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTI0Njk2L2hvdy10by1jcmVhdGUtYS1zdHlsZS10YWctd2l0aC1qYXZhc2NyaXB0XG4gICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgIHN0eWxlVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIHN0eWxlVGFnLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgc3R5bGVUYWcuc2V0QXR0cmlidXRlKFwiZGF0YS1hcGhyb2RpdGVcIiwgXCJcIik7XG4gICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlVGFnKTtcbiAgICB9XG4gIH0gLy8gJEZsb3dGaXhNZVxuXG5cbiAgdmFyIHNoZWV0ID0gc3R5bGVUYWcuc3R5bGVTaGVldCB8fCBzdHlsZVRhZy5zaGVldFxuICAvKiA6IGFueSAqL1xuICA7XG5cbiAgaWYgKHNoZWV0Lmluc2VydFJ1bGUpIHtcbiAgICB2YXIgbnVtUnVsZXMgPSBzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG4gICAgY3NzUnVsZXMuZm9yRWFjaChmdW5jdGlvbiAocnVsZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2hlZXQuaW5zZXJ0UnVsZShydWxlLCBudW1SdWxlcyk7XG4gICAgICAgIG51bVJ1bGVzICs9IDE7XG4gICAgICB9IGNhdGNoIChlKSB7Ly8gVGhlIHNlbGVjdG9yIGZvciB0aGlzIHJ1bGUgd2Fzbid0IGNvbXBhdGlibGUgd2l0aCB0aGUgYnJvd3NlclxuICAgICAgfVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlVGFnLmlubmVyVGV4dCA9IChzdHlsZVRhZy5pbm5lclRleHQgfHwgJycpICsgY3NzUnVsZXMuam9pbignJyk7XG4gIH1cbn07IC8vIEN1c3RvbSBoYW5kbGVycyBmb3Igc3RyaW5naWZ5aW5nIENTUyB2YWx1ZXMgdGhhdCBoYXZlIHNpZGUgZWZmZWN0c1xuLy8gKHN1Y2ggYXMgZm9udEZhbWlseSwgd2hpY2ggY2FuIGNhdXNlIEBmb250LWZhY2UgcnVsZXMgdG8gYmUgaW5qZWN0ZWQpXG5cblxudmFyIHN0cmluZ0hhbmRsZXJzID0ge1xuICAvLyBXaXRoIGZvbnRGYW1pbHkgd2UgbG9vayBmb3Igb2JqZWN0cyB0aGF0IGFyZSBwYXNzZWQgaW4gYW5kIGludGVycHJldFxuICAvLyB0aGVtIGFzIEBmb250LWZhY2UgcnVsZXMgdGhhdCB3ZSBuZWVkIHRvIGluamVjdC4gVGhlIHZhbHVlIG9mIGZvbnRGYW1pbHlcbiAgLy8gY2FuIGVpdGhlciBiZSBhIHN0cmluZyAoYXMgbm9ybWFsKSwgYW4gb2JqZWN0IChhIHNpbmdsZSBmb250IGZhY2UpLCBvclxuICAvLyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCBzdHJpbmdzLlxuICBmb250RmFtaWx5OiBmdW5jdGlvbiBmb250RmFtaWx5KHZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhciBuYW1lTWFwID0ge307XG4gICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICBuYW1lTWFwW2ZvbnRGYW1pbHkodildID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKG5hbWVNYXApLmpvaW4oXCIsXCIpO1xuICAgIH0gZWxzZSBpZiAoX3R5cGVvZih2YWwpID09PSBcIm9iamVjdFwiKSB7XG4gICAgICBpbmplY3RTdHlsZU9uY2UodmFsLnNyYywgXCJAZm9udC1mYWNlXCIsIFt2YWxdLCBmYWxzZSk7XG4gICAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHZhbC5mb250RmFtaWx5LCBcIlxcXCJcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9LFxuICAvLyBXaXRoIGFuaW1hdGlvbk5hbWUgd2UgbG9vayBmb3IgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMga2V5ZnJhbWVzIGFuZFxuICAvLyBpbmplY3QgdGhlbSBhcyBhbiBgQGtleWZyYW1lc2AgYmxvY2ssIHJldHVybmluZyBhIHVuaXF1ZWx5IGdlbmVyYXRlZFxuICAvLyBuYW1lLiBUaGUga2V5ZnJhbWVzIG9iamVjdCBzaG91bGQgbG9vayBsaWtlXG4gIC8vICBhbmltYXRpb25OYW1lOiB7XG4gIC8vICAgIGZyb206IHtcbiAgLy8gICAgICBsZWZ0OiAwLFxuICAvLyAgICAgIHRvcDogMCxcbiAgLy8gICAgfSxcbiAgLy8gICAgJzUwJSc6IHtcbiAgLy8gICAgICBsZWZ0OiAxNSxcbiAgLy8gICAgICB0b3A6IDUsXG4gIC8vICAgIH0sXG4gIC8vICAgIHRvOiB7XG4gIC8vICAgICAgbGVmdDogMjAsXG4gIC8vICAgICAgdG9wOiAyMCxcbiAgLy8gICAgfVxuICAvLyAgfVxuICAvLyBUT0RPKGVtaWx5KTogYHN0cmluZ0hhbmRsZXJzYCBkb2Vzbid0IGxldCB1cyByZW5hbWUgdGhlIGtleSwgc28gSSBoYXZlXG4gIC8vIHRvIHVzZSBgYW5pbWF0aW9uTmFtZWAgaGVyZS4gSW1wcm92ZSB0aGF0IHNvIHdlIGNhbiBjYWxsIHRoaXNcbiAgLy8gYGFuaW1hdGlvbmAgaW5zdGVhZCBvZiBgYW5pbWF0aW9uTmFtZWAuXG4gIGFuaW1hdGlvbk5hbWU6IGZ1bmN0aW9uIGFuaW1hdGlvbk5hbWUodmFsLCBzZWxlY3RvckhhbmRsZXJzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgcmV0dXJuIHZhbC5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgcmV0dXJuIGFuaW1hdGlvbk5hbWUodiwgc2VsZWN0b3JIYW5kbGVycyk7XG4gICAgICB9KS5qb2luKFwiLFwiKTtcbiAgICB9IGVsc2UgaWYgKF90eXBlb2YodmFsKSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgbmFtZSBiYXNlZCBvbiB0aGUgaGFzaCBvZiB0aGUgb2JqZWN0LiBXZSBjYW4ndFxuICAgICAgLy8ganVzdCB1c2UgdGhlIGhhc2ggYmVjYXVzZSB0aGUgbmFtZSBjYW4ndCBzdGFydCB3aXRoIGEgbnVtYmVyLlxuICAgICAgLy8gVE9ETyhlbWlseSk6IHRoaXMgcHJvYmFibHkgbWFrZXMgZGVidWdnaW5nIGhhcmQsIGFsbG93IGEgY3VzdG9tXG4gICAgICAvLyBuYW1lP1xuICAgICAgdmFyIG5hbWUgPSBcImtleWZyYW1lX1wiLmNvbmNhdChoYXNoT2JqZWN0KHZhbCkpOyAvLyBTaW5jZSBrZXlmcmFtZXMgbmVlZCAzIGxheWVycyBvZiBuZXN0aW5nLCB3ZSB1c2UgYGdlbmVyYXRlQ1NTYCB0b1xuICAgICAgLy8gYnVpbGQgdGhlIGlubmVyIGxheWVycyBhbmQgd3JhcCBpdCBpbiBgQGtleWZyYW1lc2Agb3Vyc2VsdmVzLlxuXG4gICAgICB2YXIgZmluYWxWYWwgPSBcIkBrZXlmcmFtZXMgXCIuY29uY2F0KG5hbWUsIFwie1wiKTsgLy8gVE9ETyBzZWUgaWYgd2UgY2FuIGZpbmQgYSB3YXkgd2hlcmUgY2hlY2tpbmcgZm9yIE9yZGVyZWRFbGVtZW50c1xuICAgICAgLy8gaGVyZSBpcyBub3QgbmVjZXNzYXJ5LiBBbHRlcm5hdGl2ZWx5LCBwZXJoYXBzIHdlIHNob3VsZCBoYXZlIGFcbiAgICAgIC8vIHV0aWxpdHkgbWV0aG9kIHRoYXQgY2FuIGl0ZXJhdGUgb3ZlciBlaXRoZXIgYSBwbGFpbiBvYmplY3QsIGFuXG4gICAgICAvLyBpbnN0YW5jZSBvZiBPcmRlcmVkRWxlbWVudHMsIG9yIGEgTWFwLCBhbmQgdGhlbiB1c2UgdGhhdCBoZXJlIGFuZFxuICAgICAgLy8gZWxzZXdoZXJlLlxuXG4gICAgICBpZiAodmFsIGluc3RhbmNlb2YgT3JkZXJlZEVsZW1lbnRzKSB7XG4gICAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWxWYWwsIHZhbEtleSkge1xuICAgICAgICAgIGZpbmFsVmFsICs9IGdlbmVyYXRlQ1NTKHZhbEtleSwgW3ZhbFZhbF0sIHNlbGVjdG9ySGFuZGxlcnMsIHN0cmluZ0hhbmRsZXJzLCBmYWxzZSkuam9pbignJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBmaW5hbFZhbCArPSBnZW5lcmF0ZUNTUyhrZXksIFt2YWxba2V5XV0sIHNlbGVjdG9ySGFuZGxlcnMsIHN0cmluZ0hhbmRsZXJzLCBmYWxzZSkuam9pbignJyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBmaW5hbFZhbCArPSAnfSc7XG4gICAgICBpbmplY3RHZW5lcmF0ZWRDU1NPbmNlKG5hbWUsIFtmaW5hbFZhbF0pO1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59OyAvLyBUaGlzIGlzIGEgbWFwIGZyb20gQXBocm9kaXRlJ3MgZ2VuZXJhdGVkIGNsYXNzIG5hbWVzIHRvIGB0cnVlYCAoYWN0aW5nIGFzIGFcbi8vIHNldCBvZiBjbGFzcyBuYW1lcylcblxudmFyIGFscmVhZHlJbmplY3RlZCA9IHt9OyAvLyBUaGlzIGlzIHRoZSBidWZmZXIgb2Ygc3R5bGVzIHdoaWNoIGhhdmUgbm90IHlldCBiZWVuIGZsdXNoZWQuXG5cbnZhciBpbmplY3Rpb25CdWZmZXJcbi8qIDogc3RyaW5nW10gKi9cbj0gW107IC8vIEEgZmxhZyB0byB0ZWxsIGlmIHdlIGFyZSBhbHJlYWR5IGJ1ZmZlcmluZyBzdHlsZXMuIFRoaXMgY291bGQgaGFwcGVuIGVpdGhlclxuLy8gYmVjYXVzZSB3ZSBzY2hlZHVsZWQgYSBmbHVzaCBjYWxsIGFscmVhZHksIHNvIG5ld2x5IGFkZGVkIHN0eWxlcyB3aWxsXG4vLyBhbHJlYWR5IGJlIGZsdXNoZWQsIG9yIGJlY2F1c2Ugd2UgYXJlIHN0YXRpY2FsbHkgYnVmZmVyaW5nIG9uIHRoZSBzZXJ2ZXIuXG5cbnZhciBpc0J1ZmZlcmluZyA9IGZhbHNlO1xuXG52YXIgaW5qZWN0R2VuZXJhdGVkQ1NTT25jZSA9IGZ1bmN0aW9uIGluamVjdEdlbmVyYXRlZENTU09uY2Uoa2V5LCBnZW5lcmF0ZWRDU1MpIHtcbiAgdmFyIF9pbmplY3Rpb25CdWZmZXI7XG5cbiAgaWYgKGFscmVhZHlJbmplY3RlZFtrZXldKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCFpc0J1ZmZlcmluZykge1xuICAgIC8vIFdlIHNob3VsZCBuZXZlciBiZSBhdXRvbWF0aWNhbGx5IGJ1ZmZlcmluZyBvbiB0aGUgc2VydmVyIChvciBhbnlcbiAgICAvLyBwbGFjZSB3aXRob3V0IGEgZG9jdW1lbnQpLCBzbyBndWFyZCBhZ2FpbnN0IHRoYXQuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGF1dG9tYXRpY2FsbHkgYnVmZmVyIHdpdGhvdXQgYSBkb2N1bWVudFwiKTtcbiAgICB9IC8vIElmIHdlJ3JlIG5vdCBhbHJlYWR5IGJ1ZmZlcmluZywgc2NoZWR1bGUgYSBjYWxsIHRvIGZsdXNoIHRoZVxuICAgIC8vIGN1cnJlbnQgc3R5bGVzLlxuXG5cbiAgICBpc0J1ZmZlcmluZyA9IHRydWU7XG4gICAgYXNhcChmbHVzaFRvU3R5bGVUYWcpO1xuICB9XG5cbiAgKF9pbmplY3Rpb25CdWZmZXIgPSBpbmplY3Rpb25CdWZmZXIpLnB1c2guYXBwbHkoX2luamVjdGlvbkJ1ZmZlciwgX3RvQ29uc3VtYWJsZUFycmF5KGdlbmVyYXRlZENTUykpO1xuXG4gIGFscmVhZHlJbmplY3RlZFtrZXldID0gdHJ1ZTtcbn07XG5cbnZhciBpbmplY3RTdHlsZU9uY2UgPSBmdW5jdGlvbiBpbmplY3RTdHlsZU9uY2Uoa2V5XG4vKiA6IHN0cmluZyAqL1xuLCBzZWxlY3RvclxuLyogOiBzdHJpbmcgKi9cbiwgZGVmaW5pdGlvbnNcbi8qIDogU2hlZXREZWZpbml0aW9uW10gKi9cbiwgdXNlSW1wb3J0YW50XG4vKiA6IGJvb2xlYW4gKi9cbikge1xuICB2YXIgc2VsZWN0b3JIYW5kbGVyc1xuICAvKiA6IFNlbGVjdG9ySGFuZGxlcltdICovXG4gID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBbXTtcblxuICBpZiAoYWxyZWFkeUluamVjdGVkW2tleV0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZ2VuZXJhdGVkID0gZ2VuZXJhdGVDU1Moc2VsZWN0b3IsIGRlZmluaXRpb25zLCBzZWxlY3RvckhhbmRsZXJzLCBzdHJpbmdIYW5kbGVycywgdXNlSW1wb3J0YW50KTtcbiAgaW5qZWN0R2VuZXJhdGVkQ1NTT25jZShrZXksIGdlbmVyYXRlZCk7XG59O1xudmFyIHJlc2V0ID0gZnVuY3Rpb24gcmVzZXQoKSB7XG4gIGluamVjdGlvbkJ1ZmZlciA9IFtdO1xuICBhbHJlYWR5SW5qZWN0ZWQgPSB7fTtcbiAgaXNCdWZmZXJpbmcgPSBmYWxzZTtcbiAgc3R5bGVUYWcgPSBudWxsO1xufTtcbnZhciByZXNldEluamVjdGVkU3R5bGUgPSBmdW5jdGlvbiByZXNldEluamVjdGVkU3R5bGUoa2V5XG4vKiA6IHN0cmluZyAqL1xuKSB7XG4gIGRlbGV0ZSBhbHJlYWR5SW5qZWN0ZWRba2V5XTtcbn07XG52YXIgZ2V0QnVmZmVyZWRTdHlsZXMgPSBmdW5jdGlvbiBnZXRCdWZmZXJlZFN0eWxlcygpIHtcbiAgcmV0dXJuIGluamVjdGlvbkJ1ZmZlcjtcbn07XG52YXIgc3RhcnRCdWZmZXJpbmcgPSBmdW5jdGlvbiBzdGFydEJ1ZmZlcmluZygpIHtcbiAgaWYgKGlzQnVmZmVyaW5nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJ1ZmZlciB3aGlsZSBhbHJlYWR5IGJ1ZmZlcmluZ1wiKTtcbiAgfVxuXG4gIGlzQnVmZmVyaW5nID0gdHJ1ZTtcbn07XG5cbnZhciBmbHVzaFRvQXJyYXkgPSBmdW5jdGlvbiBmbHVzaFRvQXJyYXkoKSB7XG4gIGlzQnVmZmVyaW5nID0gZmFsc2U7XG4gIHZhciByZXQgPSBpbmplY3Rpb25CdWZmZXI7XG4gIGluamVjdGlvbkJ1ZmZlciA9IFtdO1xuICByZXR1cm4gcmV0O1xufTtcblxudmFyIGZsdXNoVG9TdHJpbmcgPSBmdW5jdGlvbiBmbHVzaFRvU3RyaW5nKCkge1xuICByZXR1cm4gZmx1c2hUb0FycmF5KCkuam9pbignJyk7XG59O1xudmFyIGZsdXNoVG9TdHlsZVRhZyA9IGZ1bmN0aW9uIGZsdXNoVG9TdHlsZVRhZygpIHtcbiAgdmFyIGNzc1J1bGVzID0gZmx1c2hUb0FycmF5KCk7XG5cbiAgaWYgKGNzc1J1bGVzLmxlbmd0aCA+IDApIHtcbiAgICBpbmplY3RTdHlsZVRhZyhjc3NSdWxlcyk7XG4gIH1cbn07XG52YXIgZ2V0UmVuZGVyZWRDbGFzc05hbWVzID0gZnVuY3Rpb24gZ2V0UmVuZGVyZWRDbGFzc05hbWVzKClcbi8qIDogc3RyaW5nW10gKi9cbntcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGFscmVhZHlJbmplY3RlZCk7XG59O1xudmFyIGFkZFJlbmRlcmVkQ2xhc3NOYW1lcyA9IGZ1bmN0aW9uIGFkZFJlbmRlcmVkQ2xhc3NOYW1lcyhjbGFzc05hbWVzXG4vKiA6IHN0cmluZ1tdICovXG4pIHtcbiAgY2xhc3NOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICBhbHJlYWR5SW5qZWN0ZWRbY2xhc3NOYW1lXSA9IHRydWU7XG4gIH0pO1xufTtcblxudmFyIGlzVmFsaWRTdHlsZURlZmluaXRpb24gPSBmdW5jdGlvbiBpc1ZhbGlkU3R5bGVEZWZpbml0aW9uKGRlZlxuLyogOiBPYmplY3QgKi9cbikge1xuICByZXR1cm4gXCJfZGVmaW5pdGlvblwiIGluIGRlZiAmJiBcIl9uYW1lXCIgaW4gZGVmICYmIFwiX2xlblwiIGluIGRlZjtcbn07XG5cbnZhciBwcm9jZXNzU3R5bGVEZWZpbml0aW9ucyA9IGZ1bmN0aW9uIHByb2Nlc3NTdHlsZURlZmluaXRpb25zKHN0eWxlRGVmaW5pdGlvbnNcbi8qIDogYW55W10gKi9cbiwgY2xhc3NOYW1lQml0c1xuLyogOiBzdHJpbmdbXSAqL1xuLCBkZWZpbml0aW9uQml0c1xuLyogOiBPYmplY3RbXSAqL1xuLCBsZW5ndGhcbi8qIDogbnVtYmVyICovXG4pXG4vKiA6IG51bWJlciAqL1xue1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlRGVmaW5pdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyBGaWx0ZXIgb3V0IGZhbHN5IHZhbHVlcyBmcm9tIHRoZSBpbnB1dCwgdG8gYWxsb3cgZm9yXG4gICAgLy8gYGNzcyhhLCB0ZXN0ICYmIGMpYFxuICAgIGlmIChzdHlsZURlZmluaXRpb25zW2ldKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZURlZmluaXRpb25zW2ldKSkge1xuICAgICAgICAvLyBXZSd2ZSBlbmNvdW50ZXJlZCBhbiBhcnJheSwgc28gbGV0J3MgcmVjdXJzZVxuICAgICAgICBsZW5ndGggKz0gcHJvY2Vzc1N0eWxlRGVmaW5pdGlvbnMoc3R5bGVEZWZpbml0aW9uc1tpXSwgY2xhc3NOYW1lQml0cywgZGVmaW5pdGlvbkJpdHMsIGxlbmd0aCk7XG4gICAgICB9IGVsc2UgaWYgKGlzVmFsaWRTdHlsZURlZmluaXRpb24oc3R5bGVEZWZpbml0aW9uc1tpXSkpIHtcbiAgICAgICAgY2xhc3NOYW1lQml0cy5wdXNoKHN0eWxlRGVmaW5pdGlvbnNbaV0uX25hbWUpO1xuICAgICAgICBkZWZpbml0aW9uQml0cy5wdXNoKHN0eWxlRGVmaW5pdGlvbnNbaV0uX2RlZmluaXRpb24pO1xuICAgICAgICBsZW5ndGggKz0gc3R5bGVEZWZpbml0aW9uc1tpXS5fbGVuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBTdHlsZSBEZWZpbml0aW9uOiBTdHlsZXMgc2hvdWxkIGJlIGRlZmluZWQgdXNpbmcgdGhlIFN0eWxlU2hlZXQuY3JlYXRlIG1ldGhvZC5cIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxlbmd0aDtcbn07XG4vKipcbiAqIEluamVjdCBzdHlsZXMgYXNzb2NpYXRlZCB3aXRoIHRoZSBwYXNzZWQgc3R5bGUgZGVmaW5pdGlvbiBvYmplY3RzLCBhbmQgcmV0dXJuXG4gKiBhbiBhc3NvY2lhdGVkIENTUyBjbGFzcyBuYW1lLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdXNlSW1wb3J0YW50IElmIHRydWUsIHdpbGwgYXBwZW5kICFpbXBvcnRhbnQgdG8gZ2VuZXJhdGVkXG4gKiAgICAgQ1NTIG91dHB1dC4gZS5nLiB7Y29sb3I6IHJlZH0gLT4gXCJjb2xvcjogcmVkICFpbXBvcnRhbnRcIi5cbiAqIEBwYXJhbSB7KE9iamVjdHxPYmplY3RbXSlbXX0gc3R5bGVEZWZpbml0aW9ucyBzdHlsZSBkZWZpbml0aW9uIG9iamVjdHMsIG9yXG4gKiAgICAgYXJiaXRyYXJpbHkgbmVzdGVkIGFycmF5cyBvZiB0aGVtLCBhcyByZXR1cm5lZCBhcyBwcm9wZXJ0aWVzIG9mIHRoZVxuICogICAgIHJldHVybiB2YWx1ZSBvZiBTdHlsZVNoZWV0LmNyZWF0ZSgpLlxuICovXG5cblxudmFyIGluamVjdEFuZEdldENsYXNzTmFtZSA9IGZ1bmN0aW9uIGluamVjdEFuZEdldENsYXNzTmFtZSh1c2VJbXBvcnRhbnRcbi8qIDogYm9vbGVhbiAqL1xuLCBzdHlsZURlZmluaXRpb25zXG4vKiA6IE1heWJlU2hlZXREZWZpbml0aW9uW10gKi9cbiwgc2VsZWN0b3JIYW5kbGVyc1xuLyogOiBTZWxlY3RvckhhbmRsZXJbXSAqL1xuKVxuLyogOiBzdHJpbmcgKi9cbntcbiAgdmFyIGNsYXNzTmFtZUJpdHMgPSBbXTtcbiAgdmFyIGRlZmluaXRpb25CaXRzID0gW107IC8vIE11dGF0ZXMgY2xhc3NOYW1lQml0cyBhbmQgZGVmaW5pdGlvbkJpdHMgYW5kIHJldHVybnMgYSBsZW5ndGggd2hpY2ggd2VcbiAgLy8gd2lsbCBhcHBlbmQgdG8gdGhlIGhhc2ggdG8gZGVjcmVhc2UgdGhlIGNoYW5jZSBvZiBoYXNoIGNvbGxpc2lvbnMuXG5cbiAgdmFyIGxlbmd0aCA9IHByb2Nlc3NTdHlsZURlZmluaXRpb25zKHN0eWxlRGVmaW5pdGlvbnMsIGNsYXNzTmFtZUJpdHMsIGRlZmluaXRpb25CaXRzLCAwKTsgLy8gQnJlYWsgaWYgdGhlcmUgYXJlbid0IGFueSB2YWxpZCBzdHlsZXMuXG5cbiAgaWYgKGNsYXNzTmFtZUJpdHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cblxuICB2YXIgY2xhc3NOYW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lQml0cy5sZW5ndGggPT09IDEgPyBcIl9cIi5jb25jYXQoY2xhc3NOYW1lQml0c1swXSkgOiBcIl9cIi5jb25jYXQoaGFzaFN0cmluZyhjbGFzc05hbWVCaXRzLmpvaW4oKSkpLmNvbmNhdCgobGVuZ3RoICUgMzYpLnRvU3RyaW5nKDM2KSk7XG4gIH0gZWxzZSB7XG4gICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lQml0cy5qb2luKFwiLW9fTy1cIik7XG4gIH1cblxuICBpbmplY3RTdHlsZU9uY2UoY2xhc3NOYW1lLCBcIi5cIi5jb25jYXQoY2xhc3NOYW1lKSwgZGVmaW5pdGlvbkJpdHMsIHVzZUltcG9ydGFudCwgc2VsZWN0b3JIYW5kbGVycyk7XG4gIHJldHVybiBjbGFzc05hbWU7XG59O1xuXG4vKiA6OlxuaW1wb3J0IHR5cGUgeyBTZWxlY3RvckhhbmRsZXIgfSBmcm9tICcuL2dlbmVyYXRlLmpzJztcbmV4cG9ydCB0eXBlIFNoZWV0RGVmaW5pdGlvbiA9IHsgW2lkOnN0cmluZ106IGFueSB9O1xuZXhwb3J0IHR5cGUgU2hlZXREZWZpbml0aW9ucyA9IFNoZWV0RGVmaW5pdGlvbiB8IFNoZWV0RGVmaW5pdGlvbltdO1xudHlwZSBSZW5kZXJGdW5jdGlvbiA9ICgpID0+IHN0cmluZztcbnR5cGUgRXh0ZW5zaW9uID0ge1xuICAgIHNlbGVjdG9ySGFuZGxlcjogU2VsZWN0b3JIYW5kbGVyXG59O1xuZXhwb3J0IHR5cGUgTWF5YmVTaGVldERlZmluaXRpb24gPSBTaGVldERlZmluaXRpb24gfCBmYWxzZSB8IG51bGwgfCB2b2lkXG4qL1xuXG52YXIgdW5taW5pZmllZEhhc2hGbiA9IGZ1bmN0aW9uIHVubWluaWZpZWRIYXNoRm4oc3RyXG4vKiA6IHN0cmluZyAqL1xuLCBrZXlcbi8qIDogc3RyaW5nICovXG4pIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KGtleSwgXCJfXCIpLmNvbmNhdChoYXNoU3RyaW5nKHN0cikpO1xufTsgLy8gU3R5bGVTaGVldC5jcmVhdGUgaXMgaW4gYSBob3QgcGF0aCBzbyB3ZSB3YW50IHRvIGtlZXAgYXMgbXVjaCBsb2dpYyBvdXQgb2YgaXRcbi8vIGFzIHBvc3NpYmxlLiBTbywgd2UgZmlndXJlIG91dCB3aGljaCBoYXNoIGZ1bmN0aW9uIHRvIHVzZSBvbmNlLCBhbmQgb25seVxuLy8gc3dpdGNoIGl0IG91dCB2aWEgbWluaWZ5KCkgYXMgbmVjZXNzYXJ5LlxuLy9cbi8vIFRoaXMgaXMgaW4gYW4gZXhwb3J0ZWQgZnVuY3Rpb24gdG8gbWFrZSBpdCBlYXNpZXIgdG8gdGVzdC5cblxuXG52YXIgaW5pdGlhbEhhc2hGbiA9IGZ1bmN0aW9uIGluaXRpYWxIYXNoRm4oKSB7XG4gIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gaGFzaFN0cmluZyA6IHVubWluaWZpZWRIYXNoRm47XG59O1xudmFyIGhhc2hGbiA9IGluaXRpYWxIYXNoRm4oKTtcbnZhciBTdHlsZVNoZWV0ID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShzaGVldERlZmluaXRpb25cbiAgLyogOiBTaGVldERlZmluaXRpb24gKi9cbiAgKVxuICAvKiA6IE9iamVjdCAqL1xuICB7XG4gICAgdmFyIG1hcHBlZFNoZWV0RGVmaW5pdGlvbiA9IHt9O1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc2hlZXREZWZpbml0aW9uKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICB2YXIgdmFsID0gc2hlZXREZWZpbml0aW9uW2tleV07XG4gICAgICB2YXIgc3RyaW5nVmFsID0gSlNPTi5zdHJpbmdpZnkodmFsKTtcbiAgICAgIG1hcHBlZFNoZWV0RGVmaW5pdGlvbltrZXldID0ge1xuICAgICAgICBfbGVuOiBzdHJpbmdWYWwubGVuZ3RoLFxuICAgICAgICBfbmFtZTogaGFzaEZuKHN0cmluZ1ZhbCwga2V5KSxcbiAgICAgICAgX2RlZmluaXRpb246IHZhbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwcGVkU2hlZXREZWZpbml0aW9uO1xuICB9LFxuICByZWh5ZHJhdGU6IGZ1bmN0aW9uIHJlaHlkcmF0ZSgpIHtcbiAgICB2YXIgcmVuZGVyZWRDbGFzc05hbWVzXG4gICAgLyogOiBzdHJpbmdbXSAqL1xuICAgID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBbXTtcbiAgICBhZGRSZW5kZXJlZENsYXNzTmFtZXMocmVuZGVyZWRDbGFzc05hbWVzKTtcbiAgfVxufTtcbi8qKlxuICogVXRpbGl0aWVzIGZvciB1c2luZyBBcGhyb2RpdGUgc2VydmVyLXNpZGUuXG4gKlxuICogVGhpcyBjYW4gYmUgbWluaWZpZWQgb3V0IGluIGNsaWVudC1vbmx5IGJ1bmRsZXMgYnkgcmVwbGFjaW5nIGB0eXBlb2Ygd2luZG93YFxuICogd2l0aCBgXCJvYmplY3RcImAsIGUuZy4gdmlhIFdlYnBhY2sncyBEZWZpbmVQbHVnaW46XG4gKlxuICogICBuZXcgd2VicGFjay5EZWZpbmVQbHVnaW4oe1xuICogICAgIFwidHlwZW9mIHdpbmRvd1wiOiBKU09OLnN0cmluZ2lmeShcIm9iamVjdFwiKVxuICogICB9KVxuICovXG5cbnZhciBTdHlsZVNoZWV0U2VydmVyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyBudWxsIDoge1xuICByZW5kZXJTdGF0aWM6IGZ1bmN0aW9uIHJlbmRlclN0YXRpYyhyZW5kZXJGdW5jXG4gIC8qIDogUmVuZGVyRnVuY3Rpb24gKi9cbiAgKSB7XG4gICAgcmVzZXQoKTtcbiAgICBzdGFydEJ1ZmZlcmluZygpO1xuICAgIHZhciBodG1sID0gcmVuZGVyRnVuYygpO1xuICAgIHZhciBjc3NDb250ZW50ID0gZmx1c2hUb1N0cmluZygpO1xuICAgIHJldHVybiB7XG4gICAgICBodG1sOiBodG1sLFxuICAgICAgY3NzOiB7XG4gICAgICAgIGNvbnRlbnQ6IGNzc0NvbnRlbnQsXG4gICAgICAgIHJlbmRlcmVkQ2xhc3NOYW1lczogZ2V0UmVuZGVyZWRDbGFzc05hbWVzKClcbiAgICAgIH1cbiAgICB9O1xuICB9XG59O1xuLyoqXG4gKiBVdGlsaXRpZXMgZm9yIHVzaW5nIEFwaHJvZGl0ZSBpbiB0ZXN0cy5cbiAqXG4gKiBOb3QgbWVhbnQgdG8gYmUgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICovXG5cbnZhciBTdHlsZVNoZWV0VGVzdFV0aWxzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IG51bGwgOiB7XG4gIC8qKlxuICAqIFByZXZlbnQgc3R5bGVzIGZyb20gYmVpbmcgaW5qZWN0ZWQgaW50byB0aGUgRE9NLlxuICAqXG4gICogVGhpcyBpcyB1c2VmdWwgaW4gc2l0dWF0aW9ucyB3aGVyZSB5b3UnZCBsaWtlIHRvIHRlc3QgcmVuZGVyaW5nIFVJXG4gICogY29tcG9uZW50cyB3aGljaCB1c2UgQXBocm9kaXRlIHdpdGhvdXQgYW55IG9mIHRoZSBzaWRlLWVmZmVjdHMgb2ZcbiAgKiBBcGhyb2RpdGUgaGFwcGVuaW5nLiBQYXJ0aWN1bGFybHkgdXNlZnVsIGZvciB0ZXN0aW5nIHRoZSBvdXRwdXQgb2ZcbiAgKiBjb21wb25lbnRzIHdoZW4geW91IGhhdmUgbm8gRE9NLCBlLmcuIHRlc3RpbmcgaW4gTm9kZSB3aXRob3V0IGEgZmFrZSBET00uXG4gICpcbiAgKiBTaG91bGQgYmUgcGFpcmVkIHdpdGggYSBzdWJzZXF1ZW50IGNhbGwgdG9cbiAgKiBjbGVhckJ1ZmZlckFuZFJlc3VtZVN0eWxlSW5qZWN0aW9uLlxuICAqL1xuICBzdXBwcmVzc1N0eWxlSW5qZWN0aW9uOiBmdW5jdGlvbiBzdXBwcmVzc1N0eWxlSW5qZWN0aW9uKCkge1xuICAgIHJlc2V0KCk7XG4gICAgc3RhcnRCdWZmZXJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgKiBPcHBvc2l0ZSBtZXRob2Qgb2YgcHJldmVudFN0eWxlSW5qZWN0LlxuICAqL1xuICBjbGVhckJ1ZmZlckFuZFJlc3VtZVN0eWxlSW5qZWN0aW9uOiBmdW5jdGlvbiBjbGVhckJ1ZmZlckFuZFJlc3VtZVN0eWxlSW5qZWN0aW9uKCkge1xuICAgIHJlc2V0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICogUmV0dXJucyBhIHN0cmluZyBvZiBidWZmZXJlZCBzdHlsZXMgd2hpY2ggaGF2ZSBub3QgYmVlbiBmbHVzaGVkXG4gICpcbiAgKiBAcmV0dXJucyB7c3RyaW5nfSAgQnVmZmVyIG9mIHN0eWxlcyB3aGljaCBoYXZlIG5vdCB5ZXQgYmVlbiBmbHVzaGVkLlxuICAqL1xuICBnZXRCdWZmZXJlZFN0eWxlczogZnVuY3Rpb24gZ2V0QnVmZmVyZWRTdHlsZXMkMSgpIHtcbiAgICByZXR1cm4gZ2V0QnVmZmVyZWRTdHlsZXMoKTtcbiAgfVxufTtcbi8qKlxuICogR2VuZXJhdGUgdGhlIEFwaHJvZGl0ZSBBUEkgZXhwb3J0cywgd2l0aCBnaXZlbiBgc2VsZWN0b3JIYW5kbGVyc2AgYW5kXG4gKiBgdXNlSW1wb3J0YW50YCBzdGF0ZS5cbiAqL1xuXG5mdW5jdGlvbiBtYWtlRXhwb3J0cyh1c2VJbXBvcnRhbnRcbi8qIDogYm9vbGVhbiAqL1xuKSB7XG4gIHZhciBzZWxlY3RvckhhbmRsZXJzXG4gIC8qIDogU2VsZWN0b3JIYW5kbGVyW10gKi9cbiAgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzO1xuICByZXR1cm4ge1xuICAgIFN0eWxlU2hlZXQ6IF9vYmplY3RTcHJlYWQoe30sIFN0eWxlU2hlZXQsIHtcbiAgICAgIC8qKlxuICAgICAgICogUmV0dXJucyBhIHZlcnNpb24gb2YgdGhlIGV4cG9ydHMgb2YgQXBocm9kaXRlIChpLmUuIGFuIG9iamVjdFxuICAgICAgICogd2l0aCBgY3NzYCBhbmQgYFN0eWxlU2hlZXRgIHByb3BlcnRpZXMpIHdoaWNoIGhhdmUgc29tZVxuICAgICAgICogZXh0ZW5zaW9ucyBpbmNsdWRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0FycmF5LjxPYmplY3Q+fSBleHRlbnNpb25zOiBBbiBhcnJheSBvZiBleHRlbnNpb25zIHRvXG4gICAgICAgKiAgICAgYWRkIHRvIHRoaXMgaW5zdGFuY2Ugb2YgQXBocm9kaXRlLiBFYWNoIG9iamVjdCBzaG91bGQgaGF2ZSBhXG4gICAgICAgKiAgICAgc2luZ2xlIHByb3BlcnR5IG9uIGl0LCBkZWZpbmluZyB3aGljaCBraW5kIG9mIGV4dGVuc2lvbiB0b1xuICAgICAgICogICAgIGFkZC5cbiAgICAgICAqIEBwYXJhbSB7U2VsZWN0b3JIYW5kbGVyfSBbZXh0ZW5zaW9uc1tdLnNlbGVjdG9ySGFuZGxlcl06IEFcbiAgICAgICAqICAgICBzZWxlY3RvciBoYW5kbGVyIGV4dGVuc2lvbi4gU2VlIGBkZWZhdWx0U2VsZWN0b3JIYW5kbGVyc2AgaW5cbiAgICAgICAqICAgICBnZW5lcmF0ZS5qcy5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgZXhwb3J0cyBvZiB0aGUgbmV3XG4gICAgICAgKiAgICAgaW5zdGFuY2Ugb2YgQXBocm9kaXRlLlxuICAgICAgICovXG4gICAgICBleHRlbmQ6IGZ1bmN0aW9uIGV4dGVuZChleHRlbnNpb25zXG4gICAgICAvKiA6IEV4dGVuc2lvbltdICovXG4gICAgICApIHtcbiAgICAgICAgdmFyIGV4dGVuc2lvblNlbGVjdG9ySGFuZGxlcnMgPSBleHRlbnNpb25zIC8vIFB1bGwgb3V0IGV4dGVuc2lvbnMgd2l0aCBhIHNlbGVjdG9ySGFuZGxlciBwcm9wZXJ0eVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChleHRlbnNpb24pIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uLnNlbGVjdG9ySGFuZGxlcjtcbiAgICAgICAgfSkgLy8gUmVtb3ZlIG51bGxzIChpLmUuIGV4dGVuc2lvbnMgd2l0aG91dCBhIHNlbGVjdG9ySGFuZGxlciBwcm9wZXJ0eSkuXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICByZXR1cm4gaGFuZGxlcjtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBtYWtlRXhwb3J0cyh1c2VJbXBvcnRhbnQsIHNlbGVjdG9ySGFuZGxlcnMuY29uY2F0KGV4dGVuc2lvblNlbGVjdG9ySGFuZGxlcnMpKTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBTdHlsZVNoZWV0U2VydmVyOiBTdHlsZVNoZWV0U2VydmVyLFxuICAgIFN0eWxlU2hlZXRUZXN0VXRpbHM6IFN0eWxlU2hlZXRUZXN0VXRpbHMsXG4gICAgbWluaWZ5OiBmdW5jdGlvbiBtaW5pZnkoc2hvdWxkTWluaWZ5XG4gICAgLyogOiBib29sZWFuICovXG4gICAgKSB7XG4gICAgICBoYXNoRm4gPSBzaG91bGRNaW5pZnkgPyBoYXNoU3RyaW5nIDogdW5taW5pZmllZEhhc2hGbjtcbiAgICB9LFxuICAgIGNzczogZnVuY3Rpb24gY3NzKClcbiAgICAvKiA6IE1heWJlU2hlZXREZWZpbml0aW9uW10gKi9cbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVEZWZpbml0aW9ucyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc3R5bGVEZWZpbml0aW9uc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluamVjdEFuZEdldENsYXNzTmFtZSh1c2VJbXBvcnRhbnQsIHN0eWxlRGVmaW5pdGlvbnMsIHNlbGVjdG9ySGFuZGxlcnMpO1xuICAgIH0sXG4gICAgZmx1c2hUb1N0eWxlVGFnOiBmbHVzaFRvU3R5bGVUYWcsXG4gICAgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lOiBpbmplY3RBbmRHZXRDbGFzc05hbWUsXG4gICAgZGVmYXVsdFNlbGVjdG9ySGFuZGxlcnM6IGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzLFxuICAgIHJlc2V0OiByZXNldCxcbiAgICByZXNldEluamVjdGVkU3R5bGU6IHJlc2V0SW5qZWN0ZWRTdHlsZVxuICB9O1xufVxuXG5leHBvcnQgeyBtYWtlRXhwb3J0cyBhcyBhIH07XG4iLCJpbXBvcnQgeyBhIGFzIG1ha2VFeHBvcnRzIH0gZnJvbSAnLi9jaHVuay1mZWJjZTQ2Yi5qcyc7XG5pbXBvcnQgJ3N0cmluZy1oYXNoJztcbmltcG9ydCAnYXNhcCc7XG5cbnZhciB1c2VJbXBvcnRhbnQgPSB0cnVlOyAvLyBBZGQgIWltcG9ydGFudCB0byBhbGwgc3R5bGUgZGVmaW5pdGlvbnNcblxudmFyIEFwaHJvZGl0ZSA9IG1ha2VFeHBvcnRzKHVzZUltcG9ydGFudCk7XG52YXIgU3R5bGVTaGVldCA9IEFwaHJvZGl0ZS5TdHlsZVNoZWV0LFxuICAgIFN0eWxlU2hlZXRTZXJ2ZXIgPSBBcGhyb2RpdGUuU3R5bGVTaGVldFNlcnZlcixcbiAgICBTdHlsZVNoZWV0VGVzdFV0aWxzID0gQXBocm9kaXRlLlN0eWxlU2hlZXRUZXN0VXRpbHMsXG4gICAgY3NzID0gQXBocm9kaXRlLmNzcyxcbiAgICBtaW5pZnkgPSBBcGhyb2RpdGUubWluaWZ5LFxuICAgIGZsdXNoVG9TdHlsZVRhZyA9IEFwaHJvZGl0ZS5mbHVzaFRvU3R5bGVUYWcsXG4gICAgaW5qZWN0QW5kR2V0Q2xhc3NOYW1lID0gQXBocm9kaXRlLmluamVjdEFuZEdldENsYXNzTmFtZSxcbiAgICBkZWZhdWx0U2VsZWN0b3JIYW5kbGVycyA9IEFwaHJvZGl0ZS5kZWZhdWx0U2VsZWN0b3JIYW5kbGVycyxcbiAgICByZXNldCA9IEFwaHJvZGl0ZS5yZXNldCxcbiAgICByZXNldEluamVjdGVkU3R5bGUgPSBBcGhyb2RpdGUucmVzZXRJbmplY3RlZFN0eWxlO1xuXG5leHBvcnQgeyBTdHlsZVNoZWV0LCBTdHlsZVNoZWV0U2VydmVyLCBTdHlsZVNoZWV0VGVzdFV0aWxzLCBjc3MsIG1pbmlmeSwgZmx1c2hUb1N0eWxlVGFnLCBpbmplY3RBbmRHZXRDbGFzc05hbWUsIGRlZmF1bHRTZWxlY3RvckhhbmRsZXJzLCByZXNldCwgcmVzZXRJbmplY3RlZFN0eWxlIH07XG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuMjMuMVxuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgUm91dGVyLCBVTlNBRkVfdXNlUm91dGVzSW1wbCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCB1c2VOYXZpZ2F0ZSwgY3JlYXRlUGF0aCwgVU5TQUZFX3VzZVJvdXRlSWQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIHVzZUJsb2NrZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgVU5TQUZFX3VzZVJvdXRlSWQsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IHN0cmlwQmFzZW5hbWUsIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsLCBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIElETEVfRkVUQ0hFUiwgbWF0Y2hQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IGRlZmF1bHRNZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIHR5cGVvZiBvYmplY3QudGFnTmFtZSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzQnV0dG9uRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJ1dHRvblwiO1xufVxuZnVuY3Rpb24gaXNGb3JtRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZvcm1cIjtcbn1cbmZ1bmN0aW9uIGlzSW5wdXRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIjtcbn1cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5mdW5jdGlvbiBzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoXG4gIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJlxuICAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICA7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gXCJcIjtcbiAgfVxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb25TZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG4gIGlmIChkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gICAgLy8gVXNlIGBkZWZhdWx0U2VhcmNoUGFyYW1zLmZvckVhY2goLi4uKWAgaGVyZSBpbnN0ZWFkIG9mIGl0ZXJhdGluZyBvZlxuICAgIC8vIGBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKWAgdG8gd29yay1hcm91bmQgYSBidWcgaW4gRmlyZWZveCByZWxhdGVkIHRvXG4gICAgLy8gd2ViIGV4dGVuc2lvbnMuIFJlbGV2YW50IEJ1Z3ppbGxhIHRpY2tldHM6XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQxNDYwMlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwMjM5ODRcbiAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuLy8gT25lLXRpbWUgY2hlY2sgZm9yIHN1Ym1pdHRlciBzdXBwb3J0XG5sZXQgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBudWxsO1xuZnVuY3Rpb24gaXNGb3JtRGF0YVN1Ym1pdHRlclN1cHBvcnRlZCgpIHtcbiAgaWYgKF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID09PSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGb3JtRGF0YShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaWYgRm9ybURhdGEgc3VwcG9ydHMgdGhlIHN1Ym1pdHRlciBwYXJhbWV0ZXIsIHRoaXMgd2lsbCB0aHJvd1xuICAgICAgMCk7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyO1xufVxuY29uc3Qgc3VwcG9ydGVkRm9ybUVuY1R5cGVzID0gbmV3IFNldChbXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsIFwidGV4dC9wbGFpblwiXSk7XG5mdW5jdGlvbiBnZXRGb3JtRW5jVHlwZShlbmNUeXBlKSB7XG4gIGlmIChlbmNUeXBlICE9IG51bGwgJiYgIXN1cHBvcnRlZEZvcm1FbmNUeXBlcy5oYXMoZW5jVHlwZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJcXFwiXCIgKyBlbmNUeXBlICsgXCJcXFwiIGlzIG5vdCBhIHZhbGlkIGBlbmNUeXBlYCBmb3IgYDxGb3JtPmAvYDxmZXRjaGVyLkZvcm0+YCBcIiArIChcImFuZCB3aWxsIGRlZmF1bHQgdG8gXFxcIlwiICsgZGVmYXVsdEVuY1R5cGUgKyBcIlxcXCJcIikpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBlbmNUeXBlO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpIHtcbiAgbGV0IG1ldGhvZDtcbiAgbGV0IGFjdGlvbjtcbiAgbGV0IGVuY1R5cGU7XG4gIGxldCBmb3JtRGF0YTtcbiAgbGV0IGJvZHk7XG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTtcbiAgfSBlbHNlIGlmIChpc0J1dHRvbkVsZW1lbnQodGFyZ2V0KSB8fCBpc0lucHV0RWxlbWVudCh0YXJnZXQpICYmICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSkge1xuICAgIGxldCBmb3JtID0gdGFyZ2V0LmZvcm07XG4gICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBhIDxidXR0b24+IG9yIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiPiB3aXRob3V0IGEgPGZvcm0+XCIpO1xuICAgIH1cbiAgICAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWFjdGlvblwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtZW5jdHlwZVwiKSkgfHwgZ2V0Rm9ybUVuY1R5cGUoZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICAvLyBCdWlsZCBhIEZvcm1EYXRhIG9iamVjdCBwb3B1bGF0ZWQgZnJvbSBhIGZvcm0gYW5kIHN1Ym1pdHRlclxuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0sIHRhcmdldCk7XG4gICAgLy8gSWYgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgYEZvcm1EYXRhKGVsLCBzdWJtaXR0ZXIpYCBmb3JtYXQsXG4gICAgLy8gdGhlbiB0YWNrIG9uIHRoZSBzdWJtaXR0ZXIgdmFsdWUgYXQgdGhlIGVuZC4gIFRoaXMgaXMgYSBsaWdodHdlaWdodFxuICAgIC8vIHNvbHV0aW9uIHRoYXQgaXMgbm90IDEwMCUgc3BlYyBjb21wbGlhbnQuICBGb3IgY29tcGxldGUgc3VwcG9ydCBpbiBvbGRlclxuICAgIC8vIGJyb3dzZXJzLCBjb25zaWRlciB1c2luZyB0aGUgYGZvcm1kYXRhLXN1Ym1pdHRlci1wb2x5ZmlsbGAgcGFja2FnZVxuICAgIGlmICghaXNGb3JtRGF0YVN1Ym1pdHRlclN1cHBvcnRlZCgpKSB7XG4gICAgICBsZXQge1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSA9IHRhcmdldDtcbiAgICAgIGlmICh0eXBlID09PSBcImltYWdlXCIpIHtcbiAgICAgICAgbGV0IHByZWZpeCA9IG5hbWUgPyBuYW1lICsgXCIuXCIgOiBcIlwiO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieVwiLCBcIjBcIik7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBlbGVtZW50IHRoYXQgaXMgbm90IDxmb3JtPiwgPGJ1dHRvbj4sIG9yIFwiICsgXCI8aW5wdXQgdHlwZT1cXFwic3VibWl0fGltYWdlXFxcIj5cIik7XG4gIH0gZWxzZSB7XG4gICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBudWxsO1xuICAgIGVuY1R5cGUgPSBkZWZhdWx0RW5jVHlwZTtcbiAgICBib2R5ID0gdGFyZ2V0O1xuICB9XG4gIC8vIFNlbmQgYm9keSBmb3IgPEZvcm0gZW5jVHlwZT1cInRleHQvcGxhaW5cIiBzbyB3ZSBlbmNvZGUgaXQgaW50byB0ZXh0XG4gIGlmIChmb3JtRGF0YSAmJiBlbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgIGJvZHkgPSBmb3JtRGF0YTtcbiAgICBmb3JtRGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFjdGlvbixcbiAgICBtZXRob2Q6IG1ldGhvZC50b0xvd2VyQ2FzZSgpLFxuICAgIGVuY1R5cGUsXG4gICAgZm9ybURhdGEsXG4gICAgYm9keVxuICB9O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsYXRpdmVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCIsIFwiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJmZXRjaGVyS2V5XCIsIFwibmF2aWdhdGVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwicmVsYXRpdmVcIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiXTtcbi8vIEhFWSBZT1UhIERPTidUIFRPVUNIIFRISVMgVkFSSUFCTEUhXG4vL1xuLy8gSXQgaXMgcmVwbGFjZWQgd2l0aCB0aGUgcHJvcGVyIHZlcnNpb24gYXQgYnVpbGQgdGltZSB2aWEgYSBiYWJlbCBwbHVnaW4gaW5cbi8vIHRoZSByb2xsdXAgY29uZmlnLlxuLy9cbi8vIEV4cG9ydCBhIGdsb2JhbCBwcm9wZXJ0eSBvbnRvIHRoZSB3aW5kb3cgZm9yIFJlYWN0IFJvdXRlciBkZXRlY3Rpb24gYnkgdGhlXG4vLyBDb3JlIFdlYiBWaXRhbHMgVGVjaG5vbG9neSBSZXBvcnQuICBUaGlzIHdheSB0aGV5IGNhbiBjb25maWd1cmUgdGhlIGB3YXBwYWx5emVyYFxuLy8gdG8gZGV0ZWN0IGFuZCBwcm9wZXJseSBjbGFzc2lmeSBsaXZlIHdlYnNpdGVzIGFzIGJlaW5nIGJ1aWx0IHdpdGggUmVhY3QgUm91dGVyOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL0hUVFBBcmNoaXZlL3dhcHBhbHl6ZXIvYmxvYi9tYWluL3NyYy90ZWNobm9sb2dpZXMvci5qc29uXG5jb25zdCBSRUFDVF9ST1VURVJfVkVSU0lPTiA9IFwiNlwiO1xudHJ5IHtcbiAgd2luZG93Ll9fcmVhY3RSb3V0ZXJWZXJzaW9uID0gUkVBQ1RfUk9VVEVSX1ZFUlNJT047XG59IGNhdGNoIChlKSB7XG4gIC8vIG5vLW9wXG59XG5mdW5jdGlvbiBjcmVhdGVCcm93c2VyUm91dGVyKHJvdXRlcywgb3B0cykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyKHtcbiAgICBiYXNlbmFtZTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5iYXNlbmFtZSxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHt9LCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZ1dHVyZSwge1xuICAgICAgdjdfcHJlcGVuZEJhc2VuYW1lOiB0cnVlXG4gICAgfSksXG4gICAgaGlzdG9yeTogY3JlYXRlQnJvd3Nlckhpc3Rvcnkoe1xuICAgICAgd2luZG93OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLndpbmRvd1xuICAgIH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IChvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmh5ZHJhdGlvbkRhdGEpIHx8IHBhcnNlSHlkcmF0aW9uRGF0YSgpLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXM6IFVOU0FGRV9tYXBSb3V0ZVByb3BlcnRpZXMsXG4gICAgdW5zdGFibGVfZGF0YVN0cmF0ZWd5OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnVuc3RhYmxlX2RhdGFTdHJhdGVneSxcbiAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICB1bnN0YWJsZV9kYXRhU3RyYXRlZ3k6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMudW5zdGFibGVfZGF0YVN0cmF0ZWd5LFxuICAgIHdpbmRvdzogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy53aW5kb3dcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCkge1xuICB2YXIgX3dpbmRvdztcbiAgbGV0IHN0YXRlID0gKF93aW5kb3cgPSB3aW5kb3cpID09IG51bGwgPyB2b2lkIDAgOiBfd2luZG93Ll9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTtcbiAgaWYgKHN0YXRlICYmIHN0YXRlLmVycm9ycykge1xuICAgIHN0YXRlID0gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG4gICAgICBlcnJvcnM6IGRlc2VyaWFsaXplRXJyb3JzKHN0YXRlLmVycm9ycylcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhlcnJvcnMpIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkID0ge307XG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsKHZhbC5zdGF0dXMsIHZhbC5zdGF0dXNUZXh0LCB2YWwuZGF0YSwgdmFsLmludGVybmFsID09PSB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIkVycm9yXCIpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gcmVjb25zdHJ1Y3QgdGhlIHJpZ2h0IHR5cGUgb2YgRXJyb3IgKGkuZS4sIFJlZmVyZW5jZUVycm9yKVxuICAgICAgaWYgKHZhbC5fX3N1YlR5cGUpIHtcbiAgICAgICAgbGV0IEVycm9yQ29uc3RydWN0b3IgPSB3aW5kb3dbdmFsLl9fc3ViVHlwZV07XG4gICAgICAgIGlmICh0eXBlb2YgRXJyb3JDb25zdHJ1Y3RvciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvckNvbnN0cnVjdG9yKHZhbC5tZXNzYWdlKTtcbiAgICAgICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICAgICAgZXJyb3Iuc3RhY2sgPSBcIlwiO1xuICAgICAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gbm8tb3AgLSBmYWxsIHRocm91Z2ggYW5kIGNyZWF0ZSBhIG5vcm1hbCBFcnJvclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHNlcmlhbGl6ZWRba2V5XSA9PSBudWxsKSB7XG4gICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcih2YWwubWVzc2FnZSk7XG4gICAgICAgIC8vIFdpcGUgYXdheSB0aGUgY2xpZW50LXNpZGUgc3RhY2sgdHJhY2UuICBOb3RoaW5nIHRvIGZpbGwgaXQgaW4gd2l0aFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgICAgc2VyaWFsaXplZFtrZXldID0gZXJyb3I7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59XG5jb25zdCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dCh7XG4gIGlzVHJhbnNpdGlvbmluZzogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBWaWV3VHJhbnNpdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlZpZXdUcmFuc2l0aW9uXCI7XG59XG5jb25zdCBGZXRjaGVyc0NvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChuZXcgTWFwKCkpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGZXRjaGVyc0NvbnRleHQuZGlzcGxheU5hbWUgPSBcIkZldGNoZXJzXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29tcG9uZW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuY29uc3QgRkxVU0hfU1lOQyA9IFwiZmx1c2hTeW5jXCI7XG5jb25zdCBmbHVzaFN5bmNJbXBsID0gUmVhY3RET01bRkxVU0hfU1lOQ107XG5jb25zdCBVU0VfSUQgPSBcInVzZUlkXCI7XG5jb25zdCB1c2VJZEltcGwgPSBSZWFjdFtVU0VfSURdO1xuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uU2FmZShjYikge1xuICBpZiAoc3RhcnRUcmFuc2l0aW9uSW1wbCkge1xuICAgIHN0YXJ0VHJhbnNpdGlvbkltcGwoY2IpO1xuICB9IGVsc2Uge1xuICAgIGNiKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoU3luY1NhZmUoY2IpIHtcbiAgaWYgKGZsdXNoU3luY0ltcGwpIHtcbiAgICBmbHVzaFN5bmNJbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5jbGFzcyBEZWZlcnJlZCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhdHVzID0gXCJwZW5kaW5nXCI7XG4gICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5yZXNvbHZlID0gdmFsdWUgPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlc29sdmVkXCI7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLnJlamVjdCA9IHJlYXNvbiA9PiB7XG4gICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gXCJwZW5kaW5nXCIpIHtcbiAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVqZWN0ZWRcIjtcbiAgICAgICAgICByZWplY3QocmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhIFJlbWl4IFJvdXRlciBpbnN0YW5jZSwgcmVuZGVyIHRoZSBhcHByb3ByaWF0ZSBVSVxuICovXG5mdW5jdGlvbiBSb3V0ZXJQcm92aWRlcihfcmVmKSB7XG4gIGxldCB7XG4gICAgZmFsbGJhY2tFbGVtZW50LFxuICAgIHJvdXRlcixcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWY7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZShyb3V0ZXIuc3RhdGUpO1xuICBsZXQgW3BlbmRpbmdTdGF0ZSwgc2V0UGVuZGluZ1N0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbdnRDb250ZXh0LCBzZXRWdENvbnRleHRdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgfSk7XG4gIGxldCBbcmVuZGVyRGZkLCBzZXRSZW5kZXJEZmRdID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IFt0cmFuc2l0aW9uLCBzZXRUcmFuc2l0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbaW50ZXJydXB0aW9uLCBzZXRJbnRlcnJ1cHRpb25dID0gUmVhY3QudXNlU3RhdGUoKTtcbiAgbGV0IGZldGNoZXJEYXRhID0gUmVhY3QudXNlUmVmKG5ldyBNYXAoKSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBvcHRJblN0YXJ0VHJhbnNpdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGNiID0+IHtcbiAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uKSB7XG4gICAgICBzdGFydFRyYW5zaXRpb25TYWZlKGNiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH0sIFt2N19zdGFydFRyYW5zaXRpb25dKTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soKG5ld1N0YXRlLCBfcmVmMikgPT4ge1xuICAgIGxldCB7XG4gICAgICBkZWxldGVkRmV0Y2hlcnMsXG4gICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IGZsdXNoU3luYyxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0czogdmlld1RyYW5zaXRpb25PcHRzXG4gICAgfSA9IF9yZWYyO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBmZXRjaGVyRGF0YS5jdXJyZW50LmRlbGV0ZShrZXkpKTtcbiAgICBuZXdTdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChmZXRjaGVyLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaGVyLmRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmZXRjaGVyRGF0YS5jdXJyZW50LnNldChrZXksIGZldGNoZXIuZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgbGV0IGlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSA9IHJvdXRlci53aW5kb3cgPT0gbnVsbCB8fCByb3V0ZXIud2luZG93LmRvY3VtZW50ID09IG51bGwgfHwgdHlwZW9mIHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbiAhPT0gXCJmdW5jdGlvblwiO1xuICAgIC8vIElmIHRoaXMgaXNuJ3QgYSB2aWV3IHRyYW5zaXRpb24gb3IgaXQncyBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3NlcixcbiAgICAvLyBqdXN0IHVwZGF0ZSBhbmQgYmUgZG9uZSB3aXRoIGl0XG4gICAgaWYgKCF2aWV3VHJhbnNpdGlvbk9wdHMgfHwgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlKSB7XG4gICAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmx1c2hTeW5jICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgIC8vIEZsdXNoIHRocm91Z2ggdGhlIGNvbnRleHQgdG8gbWFyayBET00gZWxlbWVudHMgYXMgdHJhbnNpdGlvbj1pbmdcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNpdGlvbnNcbiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICByZW5kZXJEZmQgJiYgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgICAgZmx1c2hTeW5jOiB0cnVlLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgRE9NXG4gICAgICBsZXQgdCA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIENsZWFuIHVwIGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXG4gICAgICB0LmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0VHJhbnNpdGlvbih0KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHN0YXJ0VHJhbnNpdGlvbiArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgLy8gSW50ZXJydXB0aW5nIGFuIGluLXByb2dyZXNzIHRyYW5zaXRpb24sIGNhbmNlbCBhbmQgbGV0IGV2ZXJ5dGhpbmcgZmx1c2hcbiAgICAgIC8vIG91dCwgYW5kIHRoZW4ga2ljayBvZmYgYSBuZXcgdHJhbnNpdGlvbiBmcm9tIHRoZSBpbnRlcnJ1cHRpb24gc3RhdGVcbiAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHtcbiAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbXBsZXRlZCBuYXZpZ2F0aW9uIHVwZGF0ZSB3aXRoIG9wdGVkLWluIHZpZXcgdHJhbnNpdGlvbnMsIGxldCAnZXIgcmlwXG4gICAgICBzZXRQZW5kaW5nU3RhdGUobmV3U3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLndpbmRvdywgdHJhbnNpdGlvbiwgcmVuZGVyRGZkLCBmZXRjaGVyRGF0YSwgb3B0SW5TdGFydFRyYW5zaXRpb25dKTtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICAvLyBXaGVuIHdlIHN0YXJ0IGEgdmlldyB0cmFuc2l0aW9uLCBjcmVhdGUgYSBEZWZlcnJlZCB3ZSBjYW4gdXNlIGZvciB0aGVcbiAgLy8gZXZlbnR1YWwgXCJjb21wbGV0ZWRcIiByZW5kZXJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiAhdnRDb250ZXh0LmZsdXNoU3luYykge1xuICAgICAgc2V0UmVuZGVyRGZkKG5ldyBEZWZlcnJlZCgpKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHRdKTtcbiAgLy8gT25jZSB0aGUgZGVmZXJyZWQgaXMgY3JlYXRlZCwga2ljayBvZmYgc3RhcnRWaWV3VHJhbnNpdGlvbigpIHRvIHVwZGF0ZSB0aGVcbiAgLy8gRE9NIGFuZCB0aGVuIHdhaXQgb24gdGhlIERlZmVycmVkIHRvIHJlc29sdmUgKGluZGljYXRpbmcgdGhlIERPTSB1cGRhdGUgaGFzXG4gIC8vIGhhcHBlbmVkKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHJvdXRlci53aW5kb3cpIHtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IHBlbmRpbmdTdGF0ZTtcbiAgICAgIGxldCByZW5kZXJQcm9taXNlID0gcmVuZGVyRGZkLnByb21pc2U7XG4gICAgICBsZXQgdHJhbnNpdGlvbiA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgICBhd2FpdCByZW5kZXJQcm9taXNlO1xuICAgICAgfSk7XG4gICAgICB0cmFuc2l0aW9uLmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBzZXRUcmFuc2l0aW9uKHRyYW5zaXRpb24pO1xuICAgIH1cbiAgfSwgW29wdEluU3RhcnRUcmFuc2l0aW9uLCBwZW5kaW5nU3RhdGUsIHJlbmRlckRmZCwgcm91dGVyLndpbmRvd10pO1xuICAvLyBXaGVuIHRoZSBuZXcgbG9jYXRpb24gZmluYWxseSByZW5kZXJzIGFuZCBpcyBjb21taXR0ZWQgdG8gdGhlIERPTSwgdGhpc1xuICAvLyBlZmZlY3Qgd2lsbCBydW4gdG8gcmVzb2x2ZSB0aGUgdHJhbnNpdGlvblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHN0YXRlLmxvY2F0aW9uLmtleSA9PT0gcGVuZGluZ1N0YXRlLmxvY2F0aW9uLmtleSkge1xuICAgICAgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIFtyZW5kZXJEZmQsIHRyYW5zaXRpb24sIHN0YXRlLmxvY2F0aW9uLCBwZW5kaW5nU3RhdGVdKTtcbiAgLy8gSWYgd2UgZ2V0IGludGVycnVwdGVkIHdpdGggYSBuZXcgbmF2aWdhdGlvbiBkdXJpbmcgYSB0cmFuc2l0aW9uLCB3ZSBza2lwXG4gIC8vIHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgbGV0IGl0IGNsZWFudXAsIHRoZW4ga2ljayBpdCBvZmYgYWdhaW4gaGVyZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiBpbnRlcnJ1cHRpb24pIHtcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShpbnRlcnJ1cHRpb24uc3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGludGVycnVwdGlvbi5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogaW50ZXJydXB0aW9uLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24odW5kZWZpbmVkKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nLCBpbnRlcnJ1cHRpb25dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkYXRhUm91dGVyQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGZXRjaGVyc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZmV0Y2hlckRhdGEuY3VycmVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChWaWV3VHJhbnNpdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdnRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3IsXG4gICAgZnV0dXJlOiB7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgIH1cbiAgfSwgc3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlcywge1xuICAgIHJvdXRlczogcm91dGVyLnJvdXRlcyxcbiAgICBmdXR1cmU6IHJvdXRlci5mdXR1cmUsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpKSksIG51bGwpO1xufVxuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMykge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBmdXR1cmUsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYzO1xuICByZXR1cm4gVU5TQUZFX3VzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjQ7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjU7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmNikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmNjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIGA8YT5gLlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjcsIHJlZikge1xuICBsZXQge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY3LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNywgX2V4Y2x1ZGVkKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gIGxldCBhYnNvbHV0ZUhyZWY7XG4gIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgJiYgQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QodG8pKSB7XG4gICAgLy8gUmVuZGVyIHRoZSBhYnNvbHV0ZSBocmVmIHNlcnZlci0gYW5kIGNsaWVudC1zaWRlXG4gICAgYWJzb2x1dGVIcmVmID0gdG87XG4gICAgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bykgOiBuZXcgVVJMKHRvKTtcbiAgICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbi9iYXNlbmFtZSBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkbyBleHRlcm5hbCBVUkwgZGV0ZWN0aW9uIHdpdGhvdXQgYSB2YWxpZCBVUkxcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiPExpbmsgdG89XFxcIlwiICsgdG8gKyBcIlxcXCI+IGNvbnRhaW5zIGFuIGludmFsaWQgVVJMIHdoaWNoIHdpbGwgcHJvYmFibHkgYnJlYWsgXCIgKyBcIndoZW4gY2xpY2tlZCAtIHBsZWFzZSB1cGRhdGUgdG8gYSB2YWxpZCBVUkwgcGF0aC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0pO1xuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogYWJzb2x1dGVIcmVmIHx8IGhyZWYsXG4gICAgICBvbkNsaWNrOiBpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSBgPExpbms+YCB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY4LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICBjaGlsZHJlblxuICAgIH0gPSBfcmVmOCxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjgsIF9leGNsdWRlZDIpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3IsXG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGlzVHJhbnNpdGlvbmluZyA9IHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiA9PT0gdHJ1ZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBpZiAobmV4dExvY2F0aW9uUGF0aG5hbWUgJiYgYmFzZW5hbWUpIHtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uUGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb25QYXRobmFtZTtcbiAgfVxuICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gIC8vIHdlJ3JlIGxvb2tpbmcgZm9yIGEgc2xhc2ggX2FmdGVyXyB3aGF0J3MgaW4gYHRvYC4gIEZvciBleGFtcGxlOlxuICAvL1xuICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gIC8vIGJvdGggd2FudCB0byBsb29rIGZvciBhIC8gYXQgaW5kZXggNiB0byBtYXRjaCBVUkwgYC91c2Vycy9tYXR0YFxuICBjb25zdCBlbmRTbGFzaFBvc2l0aW9uID0gdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lLmxlbmd0aCAtIDEgOiB0b1BhdGhuYW1lLmxlbmd0aDtcbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdChlbmRTbGFzaFBvc2l0aW9uKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nLFxuICAgIGlzVHJhbnNpdGlvbmluZ1xuICB9O1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHJlbmRlclByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbCwgaXNUcmFuc2l0aW9uaW5nID8gXCJ0cmFuc2l0aW9uaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHJlbmRlclByb3BzKSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0byxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4ocmVuZGVyUHJvcHMpIDogY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmOSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgICBhY3Rpb24sXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjksXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOSwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjEwKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWYxMDtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgRGF0YVJvdXRlckhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0XCJdID0gXCJ1c2VTdWJtaXRcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRGZXRjaGVyXCJdID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIl0gPSBcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuLy8gSW50ZXJuYWwgaG9va3NcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8vIEV4dGVybmFsIGhvb2tzXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlLCB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbl0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxubGV0IGZldGNoZXJJZCA9IDA7XG5sZXQgZ2V0VW5pcXVlRmV0Y2hlcklkID0gKCkgPT4gXCJfX1wiICsgU3RyaW5nKCsrZmV0Y2hlcklkKSArIFwiX19cIjtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSBVTlNBRkVfdXNlUm91dGVJZCgpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuICAgIGxldCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5XG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKTtcbiAgICBpZiAob3B0aW9ucy5uYXZpZ2F0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGxldCBrZXkgPSBvcHRpb25zLmZldGNoZXJLZXkgfHwgZ2V0VW5pcXVlRmV0Y2hlcklkKCk7XG4gICAgICByb3V0ZXIuZmV0Y2goa2V5LCBjdXJyZW50Um91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxuICAgICAgICBmcm9tUm91dGVJZDogY3VycmVudFJvdXRlSWQsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiBvcHRpb25zLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBjdXJyZW50Um91dGVJZF0pO1xufVxuLy8gdjc6IEV2ZW50dWFsbHkgd2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGVudGlyZWx5IGluIGZhdm9yIG9mIHVzaW5nIHRoZVxuLy8gcm91dGVyIG1ldGhvZCBkaXJlY3RseT9cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTtcbiAgLy8gSWYgbm8gYWN0aW9uIHdhcyBzcGVjaWZpZWQsIGJyb3dzZXJzIHdpbGwgcGVyc2lzdCBjdXJyZW50IHNlYXJjaCBwYXJhbXNcbiAgLy8gd2hlbiBkZXRlcm1pbmluZyB0aGUgcGF0aCwgc28gbWF0Y2ggdGhhdCBiZWhhdmlvclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgYW55IGluY2x1ZGVkID9pbmRleCBwYXJhbVxuICAgIC8vIHNpbmNlIGl0IG1pZ2h0IG5vdCBhcHBseSB0byBvdXIgY29udGV4dHVhbCByb3V0ZS4gIFdlIGFkZCBpdCBiYWNrIGJhc2VkXG4gICAgLy8gb24gbWF0Y2gucm91dGUuaW5kZXggYmVsb3dcbiAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgaWYgKHBhcmFtcy5oYXMoXCJpbmRleFwiKSAmJiBwYXJhbXMuZ2V0KFwiaW5kZXhcIikgPT09IFwiXCIpIHtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIHVzZUZldGNoZXIgZ2VuZXJpYyBkZWZhdWx0IGZyb20gYGFueWAgdG8gYHVua25vd25gXG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVyKF90ZW1wMykge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG4gIGxldCB7XG4gICAga2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VDb250ZXh0KEZldGNoZXJzQ29udGV4dCk7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICFmZXRjaGVyRGF0YSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgRmV0Y2hlcnNDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAvLyBGZXRjaGVyIGtleSBoYW5kbGluZ1xuICAvLyBPSyB0byBjYWxsIGNvbmRpdGlvbmFsbHkgdG8gZmVhdHVyZSBkZXRlY3QgYHVzZUlkYFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgbGV0IGRlZmF1bHRLZXkgPSB1c2VJZEltcGwgPyB1c2VJZEltcGwoKSA6IFwiXCI7XG4gIGxldCBbZmV0Y2hlcktleSwgc2V0RmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZShrZXkgfHwgZGVmYXVsdEtleSk7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShrZXkpO1xuICB9IGVsc2UgaWYgKCFmZXRjaGVyS2V5KSB7XG4gICAgLy8gV2Ugd2lsbCBvbmx5IGZhbGwgdGhyb3VnaCBoZXJlIHdoZW4gYHVzZUlkYCBpcyBub3QgYXZhaWxhYmxlXG4gICAgc2V0RmV0Y2hlcktleShnZXRVbmlxdWVGZXRjaGVySWQoKSk7XG4gIH1cbiAgLy8gUmVnaXN0cmF0aW9uL2NsZWFudXBcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByb3V0ZXIuZ2V0RmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gVGVsbCB0aGUgcm91dGVyIHdlJ3ZlIHVubW91bnRlZCAtIGlmIHY3X2ZldGNoZXJQZXJzaXN0IGlzIGVuYWJsZWQgdGhpc1xuICAgICAgLy8gd2lsbCBub3QgZGVsZXRlIGltbWVkaWF0ZWx5IGJ1dCBpbnN0ZWFkIHF1ZXVlIHVwIGEgZGVsZXRlIGFmdGVyIHRoZVxuICAgICAgLy8gZmV0Y2hlciByZXR1cm5zIHRvIGFuIGBpZGxlYCBzdGF0ZVxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICAvLyBGZXRjaGVyIGFkZGl0aW9uc1xuICBsZXQgbG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChocmVmLCBvcHRzKSA9PiB7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgfSwgW2ZldGNoZXJLZXksIHJvdXRlSWQsIHJvdXRlcl0pO1xuICBsZXQgc3VibWl0SW1wbCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgc3VibWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soKHRhcmdldCwgb3B0cykgPT4ge1xuICAgIHN1Ym1pdEltcGwodGFyZ2V0LCBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgZmV0Y2hlcktleVxuICAgIH0pKTtcbiAgfSwgW2ZldGNoZXJLZXksIHN1Ym1pdEltcGxdKTtcbiAgbGV0IEZldGNoZXJGb3JtID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgICB9XG4gICAgcmV0dXJuIEZldGNoZXJGb3JtO1xuICB9LCBbZmV0Y2hlcktleV0pO1xuICAvLyBFeHBvc2VkIEZldGNoZXJXaXRoQ29tcG9uZW50c1xuICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChmZXRjaGVyS2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIGxldCBkYXRhID0gZmV0Y2hlckRhdGEuZ2V0KGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybTogRmV0Y2hlckZvcm0sXG4gICAgc3VibWl0LFxuICAgIGxvYWRcbiAgfSwgZmV0Y2hlciwge1xuICAgIGRhdGFcbiAgfSksIFtGZXRjaGVyRm9ybSwgc3VibWl0LCBsb2FkLCBmZXRjaGVyLCBkYXRhXSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBBcnJheS5mcm9tKHN0YXRlLmZldGNoZXJzLmVudHJpZXMoKSkubWFwKF9yZWYxMSA9PiB7XG4gICAgbGV0IFtrZXksIGZldGNoZXJdID0gX3JlZjExO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZmV0Y2hlciwge1xuICAgICAga2V5XG4gICAgfSk7XG4gIH0pO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wNCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlLCA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gd2lsbCBub3Qgd29yayBwcm9wZXJseSAoXCIgKyBlcnJvciArIFwiKS5cIikgOiB2b2lkIDA7XG4gICAgfVxuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpO1xuICAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG4gICAgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBnZXRLZXlXaXRob3V0QmFzZW5hbWUgPSBnZXRLZXkgJiYgYmFzZW5hbWUgIT09IFwiL1wiID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PiBnZXRLZXkoIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksIG1hdGNoZXMpIDogZ2V0S2V5O1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5V2l0aG91dEJhc2VuYW1lKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpKTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWYxMikge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjEyO1xuICBsZXQgYmxvY2tlciA9IHVzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vKipcbiAqIFJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdmlldyB0cmFuc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gaHJlZi4gIFlvdSBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcmVuZGVyIENTUyBjbGFzc2VzIG9yIHZpZXdUcmFuc2l0aW9uTmFtZVxuICogc3R5bGVzIG9udG8geW91ciBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBocmVmIFRoZSBkZXN0aW5hdGlvbiBocmVmXG4gKiBAcGFyYW0gW29wdHMucmVsYXRpdmVdIFJlbGF0aXZlIHJvdXRpbmcgdHlwZSAoXCJyb3V0ZVwiIHwgXCJwYXRoXCIpXG4gKi9cbmZ1bmN0aW9uIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUodG8sIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgdnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChWaWV3VHJhbnNpdGlvbkNvbnRleHQpO1xuICAhKHZ0Q29udGV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiYHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGVgIG11c3QgYmUgdXNlZCB3aXRoaW4gYHJlYWN0LXJvdXRlci1kb21gJ3MgYFJvdXRlclByb3ZpZGVyYC4gIFwiICsgXCJEaWQgeW91IGFjY2lkZW50YWxseSBpbXBvcnQgYFJvdXRlclByb3ZpZGVyYCBmcm9tIGByZWFjdC1yb3V0ZXJgP1wiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay51c2VWaWV3VHJhbnNpdGlvblN0YXRlKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogb3B0cy5yZWxhdGl2ZVxuICB9KTtcbiAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjdXJyZW50UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWU7XG4gIC8vIFRyYW5zaXRpb24gaXMgYWN0aXZlIGlmIHdlJ3JlIGdvaW5nIHRvIG9yIGNvbWluZyBmcm9tIHRoZSBpbmRpY2F0ZWRcbiAgLy8gZGVzdGluYXRpb24uICBUaGlzIGVuc3VyZXMgdGhhdCBvdGhlciBQVVNIIG5hdmlnYXRpb25zIHRoYXQgcmV2ZXJzZVxuICAvLyBhbiBpbmRpY2F0ZWQgdHJhbnNpdGlvbiBhcHBseS4gIEkuZS4sIG9uIHRoZSBsaXN0IHZpZXcgeW91IGhhdmU6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvZGV0YWlscy8xXCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIElmIHlvdSBjbGljayB0aGUgYnJlYWRjcnVtYiBiYWNrIHRvIHRoZSBsaXN0IHZpZXc6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvbGlzdFwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBXZSBzaG91bGQgYXBwbHkgdGhlIHRyYW5zaXRpb24gYmVjYXVzZSBpdCdzIGluZGljYXRlZCBhcyBhY3RpdmUgZ29pbmdcbiAgLy8gZnJvbSAvbGlzdCAtPiAvZGV0YWlscy8xIGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlIGFjdGl2ZSBvbiB0aGUgcmV2ZXJzZVxuICAvLyAoZXZlbiB0aG91Z2ggdGhpcyBpc24ndCBzdHJpY3RseSBhIFBPUCByZXZlcnNlKVxuICByZXR1cm4gbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIG5leHRQYXRoKSAhPSBudWxsIHx8IG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBjdXJyZW50UGF0aCkgIT0gbnVsbDtcbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBSb3V0ZXJQcm92aWRlciwgU2Nyb2xsUmVzdG9yYXRpb24sIEZldGNoZXJzQ29udGV4dCBhcyBVTlNBRkVfRmV0Y2hlcnNDb250ZXh0LCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgYXMgVU5TQUZFX1ZpZXdUcmFuc2l0aW9uQ29udGV4dCwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSBhcyB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlLCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gJ2FwaHJvZGl0ZSc7XG5cbmNsYXNzIE5hdkl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyB0bywgY2hpbGRyZW4sIGFjdGlvbiB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4oXG4gICAgICA8bGkgb25DbGljaz17KCkgPT4gYWN0aW9uKCl9PlxuICAgICAgICA8TGluayBjbGFzc05hbWU9e2NzcyhzdHlsZXMubGluayl9IHRvPXt0b30+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L0xpbms+XG4gICAgICA8L2xpPlxuICAgICk7XG4gIH1cbn1cblxuTmF2SXRlbS5wcm9wdHlwZXMgPSB7XG4gIHRvOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuZWxlbWVudCxcbiAgICBQcm9wVHlwZXMuZnVuY1xuICBdKSxcbiAgYWN0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbk5hdkl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICB0bzogJy8nLFxuICBjaGlsZHJlbjogPD48Lz4sXG4gIGFjdGlvbjogKCkgPT4ge30sXG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGxpbms6IHtcbiAgICBjb2xvcjogJ2dyYXknLFxuICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZScsXG4gICAgZmlsbDogJ3doaXRlJyxcbiAgICBzdHJva2U6ICd3aGl0ZScsXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBOYXZJdGVtOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmODIxN2E3ZjA3ZGJmMmM3N2EyYzNkYzk3YjE0ZGE5OS5wbmdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBjb25zdCBTdmdTZWFyY2ggPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD1cIjI1XCIgaGVpZ2h0PVwiMjVcIiB2aWV3Qm94PVwiMCAtMC41IDIxIDIxXCIgdmVyc2lvbj1cIjEuMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICBcbiAgICAgIDx0aXRsZT5zZWFyY2hfbGVmdCBbIzE1MDZdPC90aXRsZT5cbiAgICAgIDxnIGlkPVwiUGFnZS0xXCIgc3Ryb2tlPVwibm9uZVwiIHN0cm9rZVdpZHRoPVwiMVwiIGZpbGxSdWxlPVwiZXZlbm9kZFwiPlxuICAgICAgICAgIDxnIGlkPVwiRHJpYmJibGUtTGlnaHQtUHJldmlld1wiIHRyYW5zZm9ybT1cInRyYW5zbGF0ZSgtMjE5LjAwMDAwMCwgLTI4MC4wMDAwMDApXCIgPlxuICAgICAgICAgICAgICA8ZyBpZD1cImljb25zXCIgdHJhbnNmb3JtPVwidHJhbnNsYXRlKDU2LjAwMDAwMCwgMTYwLjAwMDAwMClcIj5cbiAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9XCJNMTg0LDEzOC41ODYgTDE4Mi41MTUzLDE0MCBMMTc2LjU3NTQ1LDEzNC4zNDMgTDE3OC4wNjAxNSwxMzIuOTI5IEwxODQsMTM4LjU4NiBaIE0xNzAuMzUsMTMyIEMxNjcuNDU1MTUsMTMyIDE2NS4xLDEyOS43NTcgMTY1LjEsMTI3IEMxNjUuMSwxMjQuMjQzIDE2Ny40NTUxNSwxMjIgMTcwLjM1LDEyMiBDMTczLjI0NDg1LDEyMiAxNzUuNiwxMjQuMjQzIDE3NS42LDEyNyBDMTc1LjYsMTI5Ljc1NyAxNzMuMjQ0ODUsMTMyIDE3MC4zNSwxMzIgTDE3MC4zNSwxMzIgWiBNMTcwLjM1LDEyMCBDMTY2LjI5MDcsMTIwIDE2MywxMjMuMTM0IDE2MywxMjcgQzE2MywxMzAuODY2IDE2Ni4yOTA3LDEzNCAxNzAuMzUsMTM0IEMxNzQuNDA5MywxMzQgMTc3LjcsMTMwLjg2NiAxNzcuNywxMjcgQzE3Ny43LDEyMy4xMzQgMTc0LjQwOTMsMTIwIDE3MC4zNSwxMjAgTDE3MC4zNSwxMjAgWlwiIGlkPVwic2VhcmNoX2xlZnQtWyMxNTA2XVwiPjwvcGF0aD5cbiAgICAgICAgICAgICAgPC9nPlxuICAgICAgICAgIDwvZz5cbiAgICAgIDwvZz5cbiAgICA8L3N2Zz5cbiAgKVxufTtcblxuZXhwb3J0IGNvbnN0IFN2Z0ZhY2Vib29rID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjI1XCIgaGVpZ2h0PVwiMjVcIj5cbiAgICAgIDx0aXRsZT5cbiAgICAgICAgRmFjZWJvb2sgaWNvblxuICAgICAgPC90aXRsZT5cbiAgICAgIDxwYXRoIGQ9XCJNMjMuOTk4IDEyYzAtNi42MjgtNS4zNzItMTItMTEuOTk5LTEyQzUuMzcyIDAgMCA1LjM3MiAwIDEyYzAgNS45ODggNC4zODggMTAuOTUyIDEwLjEyNCAxMS44NTJ2LTguMzg0SDcuMDc4di0zLjQ2OWgzLjA0NlY5LjM1NmMwLTMuMDA4IDEuNzkyLTQuNjY5IDQuNTMyLTQuNjY5IDEuMzEzIDAgMi42ODYuMjM0IDIuNjg2LjIzNHYyLjk1M0gxNS44M2MtMS40OSAwLTEuOTU1LjkyNS0xLjk1NSAxLjg3NFYxMmgzLjMyOGwtLjUzMiAzLjQ2OWgtMi43OTZ2OC4zODRjNS43MzYtLjkgMTAuMTI0LTUuODY0IDEwLjEyNC0xMS44NTN6XCIvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFN2Z0luc3RhZ3JhbSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCI+XG4gICAgICA8dGl0bGU+XG4gICAgICAgIEluc3RhZ3JhbSBpY29uXG4gICAgICA8L3RpdGxlPlxuICAgICAgPHBhdGggZD1cIk0xMiAwQzguNzQgMCA4LjMzMy4wMTUgNy4wNTMuMDcyIDUuNzc1LjEzMiA0LjkwNS4zMzMgNC4xNC42M2MtLjc4OS4zMDYtMS40NTkuNzE3LTIuMTI2IDEuMzg0Uy45MzUgMy4zNS42MyA0LjE0Qy4zMzMgNC45MDUuMTMxIDUuNzc1LjA3MiA3LjA1My4wMTIgOC4zMzMgMCA4Ljc0IDAgMTJzLjAxNSAzLjY2Ny4wNzIgNC45NDdjLjA2IDEuMjc3LjI2MSAyLjE0OC41NTggMi45MTNhNS44ODUgNS44ODUgMCAwIDAgMS4zODQgMi4xMjZBNS44NjggNS44NjggMCAwIDAgNC4xNCAyMy4zN2MuNzY2LjI5NiAxLjYzNi40OTkgMi45MTMuNTU4QzguMzMzIDIzLjk4OCA4Ljc0IDI0IDEyIDI0czMuNjY3LS4wMTUgNC45NDctLjA3MmMxLjI3Ny0uMDYgMi4xNDgtLjI2MiAyLjkxMy0uNTU4YTUuODk4IDUuODk4IDAgMCAwIDIuMTI2LTEuMzg0IDUuODYgNS44NiAwIDAgMCAxLjM4NC0yLjEyNmMuMjk2LS43NjUuNDk5LTEuNjM2LjU1OC0yLjkxMy4wNi0xLjI4LjA3Mi0xLjY4Ny4wNzItNC45NDdzLS4wMTUtMy42NjctLjA3Mi00Ljk0N2MtLjA2LTEuMjc3LS4yNjItMi4xNDktLjU1OC0yLjkxM2E1Ljg5IDUuODkgMCAwIDAtMS4zODQtMi4xMjZBNS44NDcgNS44NDcgMCAwIDAgMTkuODYuNjNjLS43NjUtLjI5Ny0xLjYzNi0uNDk5LTIuOTEzLS41NThDMTUuNjY3LjAxMiAxNS4yNiAwIDEyIDB6bTAgMi4xNmMzLjIwMyAwIDMuNTg1LjAxNiA0Ljg1LjA3MSAxLjE3LjA1NSAxLjgwNS4yNDkgMi4yMjcuNDE1LjU2Mi4yMTcuOTYuNDc3IDEuMzgyLjg5Ni40MTkuNDIuNjc5LjgxOS44OTYgMS4zODEuMTY0LjQyMi4zNiAxLjA1Ny40MTMgMi4yMjcuMDU3IDEuMjY2LjA3IDEuNjQ2LjA3IDQuODVzLS4wMTUgMy41ODUtLjA3NCA0Ljg1Yy0uMDYxIDEuMTctLjI1NiAxLjgwNS0uNDIxIDIuMjI3YTMuODEgMy44MSAwIDAgMS0uODk5IDEuMzgyIDMuNzQ0IDMuNzQ0IDAgMCAxLTEuMzguODk2Yy0uNDIuMTY0LTEuMDY1LjM2LTIuMjM1LjQxMy0xLjI3NC4wNTctMS42NDkuMDctNC44NTkuMDctMy4yMTEgMC0zLjU4Ni0uMDE1LTQuODU5LS4wNzQtMS4xNzEtLjA2MS0xLjgxNi0uMjU2LTIuMjM2LS40MjFhMy43MTYgMy43MTYgMCAwIDEtMS4zNzktLjg5OSAzLjY0NCAzLjY0NCAwIDAgMS0uOS0xLjM4Yy0uMTY1LS40Mi0uMzU5LTEuMDY1LS40Mi0yLjIzNS0uMDQ1LTEuMjYtLjA2MS0xLjY0OS0uMDYxLTQuODQ0IDAtMy4xOTYuMDE2LTMuNTg2LjA2MS00Ljg2MS4wNjEtMS4xNy4yNTUtMS44MTQuNDItMi4yMzQuMjEtLjU3LjQ3OS0uOTYuOS0xLjM4MS40MTktLjQxOS44MS0uNjg5IDEuMzc5LS44OTguNDItLjE2NiAxLjA1MS0uMzYxIDIuMjIxLS40MjEgMS4yNzUtLjA0NSAxLjY1LS4wNiA0Ljg1OS0uMDZsLjA0NS4wM3ptMCAzLjY3OGE2LjE2MiA2LjE2MiAwIDEgMCAwIDEyLjMyNCA2LjE2MiA2LjE2MiAwIDEgMCAwLTEyLjMyNHpNMTIgMTZjLTIuMjEgMC00LTEuNzktNC00czEuNzktNCA0LTQgNCAxLjc5IDQgNC0xLjc5IDQtNCA0em03Ljg0Ni0xMC40MDVhMS40NDEgMS40NDEgMCAwIDEtMi44OCAwIDEuNDQgMS40NCAwIDAgMSAyLjg4IDB6XCIvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFN2Z1R3aXR0ZXIgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiPlxuICAgICAgPHRpdGxlPlxuICAgICAgICBUd2l0dGVyIGljb25cbiAgICAgIDwvdGl0bGU+XG4gICAgICA8cGF0aCBkPVwiTTIzLjk1NCA0LjU2OWExMCAxMCAwIDAgMS0yLjgyNS43NzUgNC45NTggNC45NTggMCAwIDAgMi4xNjMtMi43MjNjLS45NTEuNTU1LTIuMDA1Ljk1OS0zLjEyNyAxLjE4NGE0LjkyIDQuOTIgMCAwIDAtOC4zODQgNC40ODJDNy42OTEgOC4wOTQgNC4wNjYgNi4xMyAxLjY0IDMuMTYxYTQuODIyIDQuODIyIDAgMCAwLS42NjYgMi40NzVjMCAxLjcxLjg3IDMuMjEzIDIuMTg4IDQuMDk2YTQuOTA0IDQuOTA0IDAgMCAxLTIuMjI4LS42MTZ2LjA2MWE0LjkyMyA0LjkyMyAwIDAgMCAzLjk0NiA0LjgyNyA0Ljk5NiA0Ljk5NiAwIDAgMS0yLjIxMi4wODUgNC45MzcgNC45MzcgMCAwIDAgNC42MDQgMy40MTcgOS44NjggOS44NjggMCAwIDEtNi4xMDIgMi4xMDVjLS4zOSAwLS43NzktLjAyMy0xLjE3LS4wNjdhMTMuOTk1IDEzLjk5NSAwIDAgMCA3LjU1NyAyLjIwOWM5LjA1NCAwIDEzLjk5OS03LjQ5NiAxMy45OTktMTMuOTg2IDAtLjIwOSAwLS40Mi0uMDE1LS42M2E5LjkzNiA5LjkzNiAwIDAgMCAyLjQ2LTIuNTQ4bC0uMDQ3LS4wMnpcIi8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU3ZnUHJvZmlsID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmcgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCA2NCA2NFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHJva2VXaWR0aD1cIjNcIiBzdHJva2U9XCIjMDAwMDAwXCI+PGNpcmNsZSBjeD1cIjMyXCIgY3k9XCIxOC4xNFwiIHI9XCIxMS4xNFwiLz5cbiAgICAgIDx0aXRsZT5cbiAgICAgICAgUHJvZmlsXG4gICAgICA8L3RpdGxlPlxuICAgICAgPHBhdGggZD1cIk01NC41NSw1Ni44NUEyMi41NSwyMi41NSwwLDAsMCwzMiwzNC4zaDBBMjIuNTUsMjIuNTUsMCwwLDAsOS40NSw1Ni44NVpcIi8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU3ZnSG9tZSA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICA8dGl0bGU+XG4gICAgICAgIEhvbWVcbiAgICAgIDwvdGl0bGU+XG4gICAgICA8cGF0aCBkPVwiTTE1LjUgMTQuNjloLTEuMjVWNy43OGEuNjIuNjIgMCAwIDAtLjI1LS40N0w4LjQgMi43YS42NS42NSAwIDAgMC0uODEgMEwyIDcuMzFhLjYyLjYyIDAgMCAwLS4yMi40N3Y2LjkxSC41VjcuNzhhMS44NyAxLjg3IDAgMCAxIC42OC0xLjQ0bDUuNjItNC42YTEuODggMS44OCAwIDAgMSAyLjM5IDBsNS42MyA0LjZhMS44NyAxLjg3IDAgMCAxIC42OCAxLjQ0elwiLz48cGF0aCBkPVwiTTExLjA1IDEyLjExSDkuOEExLjcyIDEuNzIgMCAwIDAgOCAxMC40OWExLjcyIDEuNzIgMCAwIDAtMS44IDEuNjJINWEzIDMgMCAwIDEgMy0yLjg3IDMgMyAwIDAgMSAzLjA1IDIuODd6bS02LjEgMEg2LjJ2Mi41OEg0Ljk1em00Ljg1IDBoMS4yNXYyLjU4SDkuOHpcIi8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU3ZnRmlsdGVyID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxzdmcgd2lkdGg9XCIyNVwiIGhlaWdodD1cIjI1XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICA8dGl0bGU+XG4gICAgICAgIEZpbGVyXG4gICAgICA8L3RpdGxlPlxuICAgICAgPHBhdGggZD1cIk0zLjM4NTg5IDUuNjY2ODdDMi42Mjk1NSA0LjgyMTU1IDIuMjUxMzggNC4zOTg4OSAyLjIzNzEyIDQuMDM5NjhDMi4yMjQ3MyAzLjcyNzY0IDIuMzU4ODIgMy40Mjc3MiAyLjU5OTYzIDMuMjI4ODlDMi44NzY4NCAzIDMuNDQzOTkgMyA0LjU3ODI4IDNIMTkuNDIxMkMyMC41NTU1IDMgMjEuMTIyNyAzIDIxLjM5OTkgMy4yMjg4OUMyMS42NDA3IDMuNDI3NzIgMjEuNzc0OCAzLjcyNzY0IDIxLjc2MjQgNC4wMzk2OEMyMS43NDgxIDQuMzk4ODkgMjEuMzY5OSA0LjgyMTU1IDIwLjYxMzYgNS42NjY4N0wxNC45MDc0IDEyLjA0NDRDMTQuNzU2NiAxMi4yMTI5IDE0LjY4MTIgMTIuMjk3MiAxNC42Mjc1IDEyLjM5MzFDMTQuNTc5OCAxMi40NzgxIDE0LjU0NDggMTIuNTY5NyAxNC41MjM2IDEyLjY2NDhDMTQuNDk5NyAxMi43NzIxIDE0LjQ5OTcgMTIuODg1MiAxNC40OTk3IDEzLjExMTNWMTguNDU4NEMxNC40OTk3IDE4LjY1MzkgMTQuNDk5NyAxOC43NTE3IDE0LjQ2ODIgMTguODM2M0MxNC40NDAzIDE4LjkxMSAxNC4zOTUgMTguOTc3OSAxNC4zMzYgMTkuMDMxNUMxNC4yNjkyIDE5LjA5MjIgMTQuMTc4NCAxOS4xMjg1IDEzLjk5NjkgMTkuMjAxMkwxMC41OTY5IDIwLjU2MTJDMTAuMjI5MyAyMC43MDgyIDEwLjA0NTUgMjAuNzgxNyA5Ljg5ODAyIDIwLjc1MUM5Ljc2OTAxIDIwLjcyNDIgOS42NTU4IDIwLjY0NzYgOS41ODMgMjAuNTM3N0M5LjQ5OTc1IDIwLjQxMjIgOS40OTk3NSAyMC4yMTQyIDkuNDk5NzUgMTkuODE4NFYxMy4xMTEzQzkuNDk5NzUgMTIuODg1MiA5LjQ5OTc1IDEyLjc3MjEgOS40NzU4NyAxMi42NjQ4QzkuNDU0NjkgMTIuNTY5NyA5LjQxOTcxIDEyLjQ3ODEgOS4zNzIwNCAxMi4zOTMxQzkuMzE4MjggMTIuMjk3MiA5LjI0MjkgMTIuMjEyOSA5LjA5MjEzIDEyLjA0NDRMMy4zODU4OSA1LjY2Njg3WlwiIHN0cm9rZT1cIiMwMDAwMDBcIiBzdHJva2VXaWR0aD1cIjJcIiBzdHJva2VMaW5lY2FwPVwicm91bmRcIiBzdHJva2UtTGluZWpvaW49XCJyb3VuZFwiLz5cbiAgICA8L3N2Zz5cbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdmdXaXNobGlzdCA9ICgpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8c3ZnIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgMzIgMzJcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICA8cGF0aCBkPVwiTTYuNTA5LDI4Ljg3MWExLDEsMCwwLDAsMS4wMS0uMDE2TDE2LDIzLjcxNWw4LjQ4MSw1LjE0QTEsMSwwLDAsMCwyNiwyOFY1YTEsMSwwLDAsMC0xLTFIN0ExLDEsMCwwLDAsNiw1VjI4QTEsMSwwLDAsMCw2LjUwOSwyOC44NzFaTTgsNkgyNFYyNi4yMjVMMTYuNTE5LDIxLjY5YTEsMSwwLDAsMC0xLjAzNywwTDgsMjYuMjI1Wm04LjIxLDEzLjI4YTEsMSwwLDAsMCwuNTg4LS4xOTFBMTYuODQyLDE2Ljg0MiwwLDAsMCwyMC40MiwxNS41YTQuODYzLDQuODYzLDAsMCwwLDEuMjA5LTMuOTczLDMuMzczLDMuMzczLDAsMCwwLTMuNDc1LTIuNTUxQTMuMjkxLDMuMjkxLDAsMCwwLDE2LDEwLjA2OGEzLjI5MSwzLjI5MSwwLDAsMC0yLjE1NC0xLjA4NywzLjM2MywzLjM2MywwLDAsMC0zLjQ3NSwyLjU1MSw0Ljg2NCw0Ljg2NCwwLDAsMCwxLjIwOSwzLjk3M0ExNi44NTEsMTYuODUxLDAsMCwwLDE1LjIsMTkuMDg5YTEsMSwwLDAsMCwuNTg4LjE5MVptLTMuMDI0LTQuOTY4YTMuMDg5LDMuMDg5LDAsMCwxLS44NjMtMi4zNDEsMS4zNjUsMS4zNjUsMCwwLDEsMS4yNzEtMWMuMDI4LDAsLjA1OCwwLC4wODcsMGExLjM1OCwxLjM1OCwwLDAsMSwxLjE3NSwxLjIwOCwxLDEsMCwwLDAsMSwuOTQ1aC4yOTVhMSwxLDAsMCwwLDEtLjk0NSwxLjI4MywxLjI4MywwLDAsMSwyLjUzMi0uMjExLDMuMDg4LDMuMDg4LDAsMCwxLS44NjMsMi4zNDFBMTQuODMsMTQuODMsMCwwLDEsMTYsMTcuMTg4LDE0Ljg0MSwxNC44NDEsMCwwLDEsMTMuMTg2LDE0LjMxM1pcIi8+XG4gICAgPC9zdmc+XG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgU3ZnU2FsZXMgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyB3aWR0aD1cIjI1XCIgaGVpZ2h0PVwiMjVcIiB2aWV3Qm94PVwiMCAwIDY0IDY0XCIgaWQ9XCJpY29uc1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgIDxwYXRoIGQ9XCJNNTUsN0gzMmEyLDIsMCwwLDAtMS40MS41OWwtMjYsMjZhMiwyLDAsMCwwLDAsMi44MmwyMywyM2EyLDIsMCwwLDAsMi44MiwwbDI2LTI2QTIsMiwwLDAsMCw1NywzMlY5QTIsMiwwLDAsMCw1NSw3Wk01MywzMS4xN2wtMjQsMjRMOC44MywzNWwyNC0yNEg1M1pcIi8+PGNpcmNsZSBjeD1cIjQ1LjVcIiBjeT1cIjE4LjVcIiByPVwiMy41XCIvPlxuICAgIDwvc3ZnPlxuICApO1xufTtcblxuZXhwb3J0IGNvbnN0IFN2Z0NhcnQgPSAoKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPHN2ZyBpZD1cIkNhcGFfMVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBcbiAgICAgIHdpZHRoPVwiMjVcIiBoZWlnaHQ9XCIyNVwiIHZpZXdCb3g9XCIwIDAgOTAyLjg2IDkwMi44NlwiXG4gICAgPlxuICAgIDxnPlxuICAgICAgPGc+XG4gICAgICAgIDxwYXRoIGQ9XCJNNjcxLjUwNCw1NzcuODI5bDExMC40ODUtNDMyLjYwOUg5MDIuODZ2LTY4SDcyOS4xNzRMNzAzLjEyOCwxNzkuMkwwLDE3OC42OTdsNzQuNzUzLDM5OS4xMjloNTk2Ljc1MVY1NzcuODI5elxuICAgICAgICAgIE02ODUuNzY2LDI0Ny4xODhsLTY3LjA3NywyNjIuNjRIMTMxLjE5OUw4MS45MjgsMjQ2Ljc1Nkw2ODUuNzY2LDI0Ny4xODh6XCIvPlxuICAgICAgICA8cGF0aCBkPVwiTTU3OC40MTgsODI1LjY0MWM1OS45NjEsMCwxMDguNzQzLTQ4Ljc4MywxMDguNzQzLTEwOC43NDRzLTQ4Ljc4Mi0xMDguNzQyLTEwOC43NDMtMTA4Ljc0MkgxNjguNzE3XG4gICAgICAgICAgYy01OS45NjEsMC0xMDguNzQ0LDQ4Ljc4MS0xMDguNzQ0LDEwOC43NDJzNDguNzgyLDEwOC43NDQsMTA4Ljc0NCwxMDguNzQ0YzU5Ljk2MiwwLDEwOC43NDMtNDguNzgzLDEwOC43NDMtMTA4Ljc0NFxuICAgICAgICAgIGMwLTE0LjQtMi44MjEtMjguMTUyLTcuOTI3LTQwLjc0MmgyMDguMDY5Yy01LjEwNywxMi41OS03LjkyOCwyNi4zNDItNy45MjgsNDAuNzQyXG4gICAgICAgICAgQzQ2OS42NzUsNzc2Ljg1OCw1MTguNDU3LDgyNS42NDEsNTc4LjQxOCw4MjUuNjQxeiBNMjA5LjQ2LDcxNi44OTdjMCwyMi40NjctMTguMjc3LDQwLjc0NC00MC43NDMsNDAuNzQ0XG4gICAgICAgICAgYy0yMi40NjYsMC00MC43NDQtMTguMjc3LTQwLjc0NC00MC43NDRjMC0yMi40NjUsMTguMjc3LTQwLjc0Miw0MC43NDQtNDAuNzQyQzE5MS4xODMsNjc2LjE1NSwyMDkuNDYsNjk0LjQzMiwyMDkuNDYsNzE2Ljg5N3pcbiAgICAgICAgICBNNjE5LjE2Miw3MTYuODk3YzAsMjIuNDY3LTE4LjI3Nyw0MC43NDQtNDAuNzQzLDQwLjc0NHMtNDAuNzQzLTE4LjI3Ny00MC43NDMtNDAuNzQ0YzAtMjIuNDY1LDE4LjI3Ny00MC43NDIsNDAuNzQzLTQwLjc0MlxuICAgICAgICAgIFM2MTkuMTYyLDY5NC40MzIsNjE5LjE2Miw3MTYuODk3elwiLz5cbiAgICAgIDwvZz5cbiAgICA8L2c+XG4gICAgPC9zdmc+XG4gICk7XG59OyIsImV4cG9ydCBjb25zdCBESVNQTEFZX0NBUlRfRFJBV0VSID0gJ0RJU1BMQVlfQ0FSVF9EUkFXRVInO1xuZXhwb3J0IGNvbnN0IEhJREVfQ0FSVF9EUkFXRVIgPSAnSElERV9DQVJUX0RSQVdFUic7XG5cbmV4cG9ydCBjb25zdCBMT0dJTiA9ICdMT0dJTic7XG5leHBvcnQgY29uc3QgTE9HSU5fU1VDQ0VTUyA9ICdMT0dJTl9TVUNDRVNTJztcbmV4cG9ydCBjb25zdCBMT0dJTl9GQUlMVVJFID0gJ0xPR0lOX0ZBSUxVUkUnO1xuXG5leHBvcnQgY29uc3QgU0lHTlVQID0gJ1NJR05VUCc7XG5leHBvcnQgY29uc3QgU0lHTlVQX1NVQ0NFU1MgPSAnU0lHTlVQX1NVQ0NFU1MnO1xuZXhwb3J0IGNvbnN0IFNJR05VUF9GQUlMVVJFID0gJ1NJR05VUF9GQUlMVVJFJztcblxuZXhwb3J0IGNvbnN0IExPR09VVCA9ICdMT0dPVVQnOyIsImltcG9ydCB7XG4gIExPR0lOLFxuICBMT0dPVVQsXG4gIERJU1BMQVlfQ0FSVF9EUkFXRVIsXG4gIEhJREVfQ0FSVF9EUkFXRVIsXG4gIExPR0lOX1NVQ0NFU1MsXG4gIExPR0lOX0ZBSUxVUkUsXG4gIFNJR05VUCxcbiAgU0lHTlVQX0ZBSUxVUkUsXG4gIFNJR05VUF9TVUNDRVNTXG59IGZyb20gJy4vdWlBY3Rpb25UeXBlJztcbmltcG9ydCAnbm9kZS1mZXRjaCc7XG5cbmV4cG9ydCBjb25zdCBsb2dpbiA9IChlbWFpbCwgcGFzc3dvcmQpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dJTixcbiAgICB1c2VyOiB7XG4gICAgICBlbWFpbCxcbiAgICAgIHBhc3N3b3JkXG4gICAgfVxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGxvZ2luU3VjY2VzcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBMT0dJTl9TVUNDRVNTXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgbG9naW5GYWlsdXJlID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IExPR0lOX0ZBSUxVUkVcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWduVXAgPSAodXNlcikgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IFNJR05VUCxcbiAgICB1c2VyXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2lnblVwU3VjY2VzcyA9ICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTSUdOVVBfU1VDQ0VTU1xuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNpZ25VcEZhaWx1cmUgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogU0lHTlVQX0ZBSUxVUkVcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBsb2dvdXQgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogTE9HT1VUXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgZGlzcGxheUNhcnREcmF3ZXIgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogRElTUExBWV9DQVJUX0RSQVdFUlxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGhpZGVDYXJ0RHJhd2VyID0gKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEhJREVfQ0FSVF9EUkFXRVJcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWduVXBSZXF1ZXN0ID0gKHVzZXIpID0+IHtcbiAgcmV0dXJuKGRpc3BhdGNoKSA9PiB7XG4gICAge1xuICAgICAgZGlzcGF0Y2goc2lnblVwKHVzZXIpKVxuXG4gICAgICByZXR1cm4gZmV0Y2goJycpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGpzb24pID0+IGRpc3BhdGNoKHNpZ25VcFN1Y2Nlc3MoKSkpXG4gICAgICAuY2F0Y2goKGVycikgPT4gZGlzcGF0Y2goc2lnblVwRmFpbHVyZSgpKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBsb2dpblJlcXVlc3QgPSAoZW1haWwsIHBhc3N3b3JkKSA9PiB7XG4gIHJldHVybihkaXNwYXRjaCkgPT4ge1xuICAgIHtcbiAgICAgIGRpc3BhdGNoKGxvZ2luKGVtYWlsLCBwYXNzd29yZCkpXG5cbiAgICAgIHJldHVybiBmZXRjaCgnJylcbiAgICAgIC50aGVuKChyZXMpID0+IHJlcy5qc29uKCkpXG4gICAgICAudGhlbigoanNvbikgPT4gZGlzcGF0Y2gobG9naW5TdWNjZXNzKCkpKVxuICAgICAgLmNhdGNoKChlcnIpID0+IGRpc3BhdGNoKGxvZ2luRmFpbHVyZSgpKSk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSAnYXBocm9kaXRlJztcbmltcG9ydCBOYXZJdGVtIGZyb20gJy4vTmF2SXRlbSc7XG5pbXBvcnQgbG9nbyBmcm9tICcuLi9hc3NldHMvbG9nby5wbmcnO1xuaW1wb3J0IHtcbiAgU3ZnSG9tZSxcbiAgU3ZnQ2FydCxcbiAgU3ZnUHJvZmlsLFxuICBTdmdTZWFyY2gsXG4gIFN2Z1NhbGVzXG59IGZyb20gJy4uL1NWRy9zdmcnO1xuaW1wb3J0IHsgZGlzcGxheUNhcnREcmF3ZXIgfSBmcm9tICcuLi9hY3Rpb25zL3VpQWN0aW9uQ3JlYXRvcic7XG5cbmNsYXNzIEhlYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtkaXNwbGF5Q2FydERyYXdlcn0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5oZWFkZXIpfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxpbWcgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sb2dvKX0gc3JjPXtsb2dvfSBhbHQ9J0xvZ28nIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8bmF2PlxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5uYXZCYXIpfT5cbiAgICAgICAgICAgICAgPE5hdkl0ZW0gdG89Jy8nIGNoaWxkcmVuPXs8U3ZnU2VhcmNoIC8+fS8+XG4gICAgICAgICAgICAgIDxOYXZJdGVtIHRvPScvJyBjaGlsZHJlbj17PFN2Z0hvbWUgLz59Lz5cbiAgICAgICAgICAgICAgPE5hdkl0ZW0gdG89Jy9sb2dpbicgY2hpbGRyZW49ezxTdmdQcm9maWwgLz59IC8+XG4gICAgICAgICAgICAgIDxOYXZJdGVtIHRvPScvJyBjaGlsZHJlbj17PFN2Z1NhbGVzIC8+fS8+XG4gICAgICAgICAgICAgIDxOYXZJdGVtIGFjdGlvbj17ZGlzcGxheUNhcnREcmF3ZXJ9IHRvPScnIGNoaWxkcmVuPXs8U3ZnQ2FydCAvPn0vPlxuICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICA8L25hdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgbmF2QmFyOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtZXZlbmx5JyxcbiAgICBsaXN0U3R5bGVUeXBlOiAnbm9uZScsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB3aWR0aDogJzQwMHB4JyxcbiAgICBwYWRkaW5nTGVmdDogJzBweCcsXG4gICAgZmlsbDogJ2dyZWVuJyxcbiAgfSxcbiAgaGVhZGVyOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGp1c3RpZnlDb250ZW50OiAnc3BhY2UtYmV0d2VlbicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgd2lkdGg6ICcxMDAlJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdibGFjaycsXG4gICAgaGVpZ2h0OiAnOTBweCdcbiAgfSxcbiAgbG9nbzoge1xuICAgIGhlaWdodDogJzEzMHB4JyxcbiAgfSxcbiAgc3ZnOiB7XG4gICAgZmlsbDogJ2dyZWVuJyxcbiAgfVxufSk7XG5cbmNvbnN0IG1hcERpc3BhY3RoVG9Qcm9wcyA9IHtcbiAgZGlzcGxheUNhcnREcmF3ZXIsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobnVsbCwgbWFwRGlzcGFjdGhUb1Byb3BzKShIZWFkZXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xuaW1wb3J0IE5hdkl0ZW0gZnJvbSAnLi4vSGVhZGVyL05hdkl0ZW0nO1xuaW1wb3J0IHsgU3ZnRmFjZWJvb2ssIFN2Z0luc3RhZ3JhbSwgU3ZnVHdpdHRlciwgfSBmcm9tICcuLi9TVkcvc3ZnJztcblxuY29uc3QgRm9vdGVyID0gKCkgPT4ge1xuXHRjb25zdCBkYXRlID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xuXG5cdHJldHVybiAoXG5cdFx0PGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuZm9vdGVyKX0+XG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5zYW1lTGluZSl9PlxuXHRcdFx0XHQ8dWwgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmZvb3Rlck5hdil9PlxuXHRcdFx0XHRcdDxOYXZJdGVtIHRvPScvJyBjaGlsZHJlbj0nVGVybSBvZiB1c2UnLz5cblx0XHRcdFx0XHQ8TmF2SXRlbSB0bz0nLycgY2hpbGRyZW49J1ByaXZhY3kgUG9saWN5Jy8+XG5cdFx0XHRcdFx0PE5hdkl0ZW0gdG89Jy8nIGNoaWxkcmVuPSdDb29raWUgUG9saWN5Jy8+XG5cdFx0XHRcdDwvdWw+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLnNhbWVMaW5lKX0+XG5cdFx0XHQ8dWwgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLnNvY2lhbE5hdil9PlxuICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxpSW5saW5lKX0+XG4gICAgICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgICAgIDxTdmdGYWNlYm9vayAvPlxuICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5saUlubGluZSl9PlxuICAgICAgICAgICAgICAgIDxhIGhyZWY9XCJodHRwczovL3R3aXR0ZXIuY29tL1wiIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgICAgICAgPFN2Z1R3aXR0ZXIgLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIDxsaSBjbGFzc05hbWU9e2NzcyhzdHlsZXMubGlJbmxpbmUpfT5cbiAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgICAgICAgICAgICAgIDxTdmdJbnN0YWdyYW0gLz5cbiAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuXHRcdFx0PC9kaXY+XG5cdFx0XHQ8ZGl2PlxuXHRcdFx0XHQ8cD4gQ29weXJpZ2h0IHtkYXRlfSAgLSBBbGwgUmlnaHRzIFJlc2VydmVkPC9wPlxuXHRcdFx0PC9kaXY+XG5cdFx0PC9kaXY+XG5cdCk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG5cdGZvb3Rlcjoge1xuXHRcdHRleHRBbGlnbjogJ2NlbnRlcicsXG5cdFx0Zm9udFN0eWxlOiAnaXRhbGljJyxcblx0XHRmb250U2l6ZTogJzEuMXJlbScsXG5cdFx0Ym9yZGVyVG9wOiAnc29saWQgMnB4IGdyZXknLFxuXHRcdG1hcmdpbjogJzAgNXB4Jyxcblx0XHRkaXNwbGF5OiAnYmxvY2snXG5cdH0sXG5cdGZvb3Rlck5hdjoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93Jyxcblx0XHRqdXN0aWZ5Q29udGVudDogJ2ZsZXgtc3RhcnQnLFxuICAgIGxpc3RTdHlsZVR5cGU6ICdub25lJyxcbiAgICBwYWRkaW5nTGVmdDogJzBweCcsXG5cdFx0Zm9udFN0eWxlOiAnbm9ybWFsJyxcblx0XHRmb250U2l6ZTogJzFyZW0nLFxuXHRcdHBhZGRpbmdMZWZ0OiAnMjBweCcsXG5cdFx0Z2FwOiAnMjBweCcsXG4gIH0sXG5cdHNvY2lhbE5hdjoge1xuXHRcdGxpc3RTdHlsZTogJ25vbmUnLFxuXHRcdC8vIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAvLyBmbGV4RGlyZWN0aW9uOiAncm93Jyxcblx0XHQvLyBqdXN0aWZ5Q29udGVudDogJ2ZsZXgtZW5kJyxcblx0XHRkaXNwbGF5OiAnaW5saW5lJyxcblx0XHR3aWR0aDogJzEwMCUnLFxuXHRcdGdhcDogJzEwcHgnLFxuXHR9LFxuXHRzYW1lTGluZToge1xuXHRcdGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuXHRcdHdpZHRoOiAnNTAlJyxcblx0XHRoZWlnaHQ6ICczMHB4Jyxcblx0XHRwYWRkaW5nOiAnMCA1MHB4J1xuXHR9LFxuXHRsaUlubGluZToge1xuXHRcdC8vIGRpc3BsYXk6ICdpbmxpbmUnLFxuXHRcdGZsb2F0OiAncmlnaHQnLFxuXHRcdHBhZGRpbmc6ICcwIDFlbSdcblx0fVxufSlcblxuZXhwb3J0IGRlZmF1bHQgRm9vdGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgU3R5bGVTaGVldCwgY3NzIH0gZnJvbSAnYXBocm9kaXRlJztcblxuY29uc3QgUHJvZHVjdENhcmQgPSAoeyBuYW1lLCBkZXNjcmlwdGlvbiwgcmFtIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGltZyBjbGFzc05hbWU9e2NzcyhzdHlsZXMuY2FyZEltYWdlKX0gc3JjPScnIGFsdD0nQ29tcHV0ZXInLz5cbiAgICAgIDxlbSBjbGFzc05hbWU9e2NzcyhzdHlsZXMubmFtZSl9PntuYW1lfTwvZW0+XG4gICAgICA8dWwgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLnNwZWNzKX0+XG4gICAgICAgIDxsaT5kZXNjcmlwdGlvbjoge2Rlc2NyaXB0aW9ufTwvbGk+XG4gICAgICAgIHsvKiA8bGk+U3RvcmFnZToge21lbW9yeX1HbyB7bWVtb3J5VHlwZX0gPC9saT4gKi99XG4gICAgICAgIDxsaT5SQU06IHtyYW19PC9saT5cbiAgICAgIDwvdWw+XG4gICAgPC8+XG4gICk7XG59XG5cblByb2R1Y3RDYXJkLnByb3BUeXBlcyA9IHtcbiAgbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJhbTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pXG59O1xuICBcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjYXJkSW1hZ2U6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIG1hcmdpbjogJzAgYXV0byAxMHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICBvYmplY3RGaXQ6ICdjb250YWluJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcxLjFyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgfSxcbiAgc3BlY3M6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBwYWRkaW5nTGVmdDogJzAnLFxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdENhcmQ7IiwiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuZXhwb3J0IGNvbnN0IFByb2R1Y3RJdGVtU2hhcGUgPSB7XG4gIGlkOiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWQsXG4gIGltZzogUHJvcFR5cGVzLmFueSxcbiAgdGl0bGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHByb2M6IFByb3BUeXBlcy5zdHJpbmcsXG4gIG1lbW9yeTogUHJvcFR5cGVzLm51bWJlcixcbiAgbWVtb3J5VHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgcmFtOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG4gIHByaWNlOiBQcm9wVHlwZXMubnVtYmVyLFxuICBxdWFudGl0eTogUHJvcFR5cGVzLm51bWJlcixcbiAgZGVzY3JpcHRpb246IFByb3BUeXBlcy5zdHJpbmcsXG4gIHNjcmVlbjogUHJvcFR5cGVzLnN0cmluZ1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gJ2FwaHJvZGl0ZSc7XG5pbXBvcnQgUHJvZHVjdENhcmQgZnJvbSAnLi9Qcm9kdWN0Q2FyZCc7XG5pbXBvcnQgeyBQcm9kdWN0SXRlbVNoYXBlIH0gZnJvbSAnLi9Qcm9kdWN0SXRlbVNoYXBlJztcblxuY2xhc3MgUHJvZHVjdHNQcmV2aWV3IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBsaXN0UHJvZHVjdHMgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAge2xpc3RQcm9kdWN0cy5tYXAoKHtpZCwgbmFtZSwgZGVzY3JpcHRpb24sIHJhbX0pID0+IChcbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5jYXJkKX0ga2V5PXtpZH0+XG4gICAgICAgICAgICA8UHJvZHVjdENhcmRcbiAgICAgICAgICAgIG5hbWU9e25hbWV9XG4gICAgICAgICAgICBkZXNjcmlwdGlvbj17ZGVzY3JpcHRpb259XG4gICAgICAgICAgICAvLyBtZW1vcnk9e21lbW9yeX1cbiAgICAgICAgICAgIC8vIG1lbW9yeVR5cGU9e21lbW9yeVR5cGV9XG4gICAgICAgICAgICByYW09e3JhbX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICkpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxufVxuXG4vLyBQcm9kdWN0c1ByZXZpZXcucHJvcFR5cGVzID0ge1xuLy8gICBsaXN0UHJvZHVjdHM6IFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zaGFwZShQcm9kdWN0SXRlbVNoYXBlKSlcbi8vIH1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjYXJkOiB7XG4gICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICBtYXJnaW46ICcxcmVtIDFyZW0nLFxuICAgIHBhZGRpbmc6ICcxcmVtIDFyZW0gMCcsXG4gICAgd2lkdGg6ICdjYWxjKCgxMDAlIC8gNCkgLSAycmVtICknLFxuICAgIGJvcmRlcjogJ3NvbGlkIDFweCBncmV5JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcblxuICB9LFxuICBjYXJkSW1hZ2U6IHtcbiAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgIG1hcmdpbjogJzAgYXV0byAxMHB4JyxcbiAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICBvYmplY3RGaXQ6ICdjb250YWluJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuXG4gIH0sXG4gIHRpdGxlOiB7XG4gICAgZm9udFNpemU6ICcxLjFyZW0nLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgfSxcbiAgc3BlY3M6IHtcbiAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICBwYWRkaW5nTGVmdDogJzAnLFxuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvZHVjdHNQcmV2aWV3OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jbGFzcyBMb2dpbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuaGFuZGxlTG9naW5TdWJtaXQgPSB0aGlzLmhhbmRsZUxvZ2luU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2VFbWFpbCA9IHRoaXMuaGFuZGxlQ2hhbmdlRW1haWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVBhc3N3b3JkID0gdGhpcy5oYW5kbGVDaGFuZ2VQYXNzd29yZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3VibWl0U3RhdGUgPSB0aGlzLmhhbmRsZVN1Ym1pdFN0YXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICBlbmFibGVTdWJtaXQ6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBoYW5kbGVMb2dpblN1Ym1pdChldmVudCkge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5wcm9wcy5sb2dJbih0aGlzLnN0YXRlLmVtYWlsLCB0aGlzLnN0YXRlLnBhc3N3b3JkKTtcbiAgfVxuICBcbiAgaGFuZGxlU3VibWl0U3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuc3RhdGUuZW1haWwgIT09IFwiXCIgJiYgdGhpcy5zdGF0ZS5wYXNzd29yZCAhPT0gXCJcIil7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZW5hYmxlU3VibWl0OiB0cnVlfSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVuYWJsZVN1Ym1pdDogZmFsc2V9KVxuICAgIH1cbiAgfVxuICBoYW5kbGVDaGFuZ2VFbWFpbChldmVudCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBlbWFpbDogZXZlbnQudGFyZ2V0LnZhbHVlIH0sIHRoaXMuaGFuZGxlU3VibWl0U3RhdGUpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlUGFzc3dvcmQoZXZlbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgcGFzc3dvcmQ6IGV2ZW50LnRhcmdldC52YWx1ZSB9LCB0aGlzLmhhbmRsZVN1Ym1pdFN0YXRlKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW4pfT5cbiAgICAgICAgICA8cD5Mb2dpbiB0byBhY2Nlc3MgZnVsbCBmdW5jdGlvbmFsaXR5OjwvcD5cbiAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW4pfT5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdlbWFpbCc+RW1haWw6IDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy50ZXh0Qm94KX1cbiAgICAgICAgICAgICAgdHlwZT0nZW1haWwnXG4gICAgICAgICAgICAgIG5hbWU9J2VtYWlsJ1xuICAgICAgICAgICAgICBpZD0nZW1haWwnXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZUVtYWlsfVxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5lbWFpbH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdwYXNzd29yZCc+UGFzc3dvcmQ6IDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLnRleHRCb3gpfVxuICAgICAgICAgICAgICB0eXBlPSdwYXNzd29yZCdcbiAgICAgICAgICAgICAgbmFtZT0nPXBhc3N3b3JkJ1xuICAgICAgICAgICAgICBpZD0ncGFzc3dvcmQnXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZVBhc3N3b3JkfVxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5wYXNzd29yZH1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMuc3VibWl0KX1cbiAgICAgICAgICAgICAgdHlwZT0nc3VibWl0J1xuICAgICAgICAgICAgICB2YWx1ZT0nTG9nIEluJ1xuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUxvZ2luU3VibWl0fVxuICAgICAgICAgICAgICBkaXNhYmxlZD17IXRoaXMuc3RhdGUuZW5hYmxlU3VibWl0fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBObyBBY2NvdW50IHlldD8gPExpbmsgdG89Jy9zaWdudXAnPlNpZ24gVXA8L0xpbms+XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPiBcbiAgICApO1xuICB9XG59XG5cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBsb2dpbjoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICBwYWRkaW5nOiAnNXB4IGF1dG8gMCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgZ2FwOiAnLjhyZW0nLFxuICB9LFxuICB0ZXh0Qm94OiB7XG4gICAgYm9yZGVyUmFkaXVzOiAnMTBweCcsXG4gICAgaGVpZ2h0OiAnMnJlbScsXG4gICAgd2lkdGg6ICdjYWxjKDEwMCUgKyAyZW0pJ1xuICB9LFxuICBzdWJtaXQ6IHtcbiAgICBmb250U2l6ZTogJzEuMXJlbScsXG4gICAgYm9yZGVyUmFkaXVzOiAnOHB4J1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTG9naW47XG4iLCJpbXBvcnQgUmVhY3QgLCB7IHVzZVN0YXRlIH1mcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG5jb25zdCBTaWduVXAgPSAoKSA9PiB7XG4gIGNvbnN0IFtmaXJzdE5hbWUsIHNldEZpcnN0TmFtZV0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtsYXN0TmFtZSwgc2V0TGFzdE5hbWVdID0gdXNlU3RhdGUoJycpO1xuICBjb25zdCBbZW1haWwsIHNldEVtYWlsXSA9IHVzZVN0YXRlKCcnKTtcbiAgY29uc3QgW3Bhc3N3b3JkLCBzZXRQYXNzd29yZF0gPSB1c2VTdGF0ZSgnJyk7XG4gIGNvbnN0IFtyZVBhc3N3b3JkLCBzZXRSZVBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcblxuICByZXR1cm4gKFxuICA8PlxuICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxvZ2luKX0+XG4gICAgICAgIDxwPkNyZWF0ZSB5b3VyIG5ldyBhY2NvdW50PC9wPlxuICAgICAgICA8Zm9ybSBjbGFzc05hbWU9e2NzcyhzdHlsZXMubG9naW4pfT5cbiAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZmlyc3R0IG5hbWUnPkZpcnN0IE5hbWU6IDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy50ZXh0Qm94KX1cbiAgICAgICAgICAgICAgdHlwZT0nbmFtZSdcbiAgICAgICAgICAgICAgbmFtZT0nZmlyc3ROYW1lJ1xuICAgICAgICAgICAgICBpZD0nZmlyc3ROYW1lJ1xuICAgICAgICAgICAgICBvbkNoYW5nZT0geyAoZSkgPT4gc2V0Rmlyc3ROYW1lKGUudGFyZ2V0LnZhbHVlKX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPSdsYXN0IG5hbWUnPkxhc3QgTmFtZTogPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dCBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLnRleHRCb3gpfVxuICAgICAgICAgICAgICB0eXBlPSduYW1lJ1xuICAgICAgICAgICAgICBuYW1lPSdsYXN0TmFtZSdcbiAgICAgICAgICAgICAgaWQ9J2xhc3ROYW1lJ1xuICAgICAgICAgICAgICBvbkNoYW5nZT0geyAoZSkgPT4gc2V0TGFzdE5hbWUoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZW1haWwnPkVtYWlsOiA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMudGV4dEJveCl9XG4gICAgICAgICAgICAgIHR5cGU9J2VtYWlsJ1xuICAgICAgICAgICAgICBuYW1lPSdlbWFpbCdcbiAgICAgICAgICAgICAgaWQ9J2VtYWlsJ1xuICAgICAgICAgICAgICBvbkNoYW5nZT0geyAoZSkgPT4gc2V0RW1haWwoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZW1haWwnPlBhc3N3b3JkOiA8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2NzcyhzdHlsZXMudGV4dEJveCl9XG4gICAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgICBuYW1lPSdwYXNzd29yZCdcbiAgICAgICAgICAgICAgaWQ9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgICBvbkNoYW5nZT0geyAoZSkgPT4gc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj0nZW1haWwnPkNvbmZpcm0gcGFzc3dvcmQ6IDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy50ZXh0Qm94KX1cbiAgICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXG4gICAgICAgICAgICAgIG5hbWU9J3JlcGFzc3dvcmQnXG4gICAgICAgICAgICAgIGlkPSdyZXBhc3N3b3JkJ1xuICAgICAgICAgICAgICBvbkNoYW5nZT0geyAoZSkgPT4gc2V0UGFzc3dvcmQoZS50YXJnZXQudmFsdWUpfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5zdWJtaXQpfVxuICAgICAgICAgICAgICB0eXBlPSdzdWJtaXQnXG4gICAgICAgICAgICAgIHZhbHVlPSdTaWduIFVwJ1xuICAgICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHA+XG4gICAgICAgICAgICBBbHJlYWR5IGdvdCBhbiBhY2NvdW50PyA8TGluayB0bz0nL2xvZ2luJz5Mb2cgSW48L0xpbms+XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICA8Lz5cbiAgKTtcbn1cblxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGxvZ2luOiB7XG4gICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIHBhZGRpbmc6ICc1cHggYXV0byAwJyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICBnYXA6ICcuOHJlbScsXG4gIH0sXG4gIHRleHRCb3g6IHtcbiAgICBib3JkZXJSYWRpdXM6ICcxMHB4JyxcbiAgICBoZWlnaHQ6ICcycmVtJyxcbiAgICB3aWR0aDogJ2NhbGMoMTAwJSArIDJlbSknXG4gIH0sXG4gIHN1Ym1pdDoge1xuICAgIGZvbnRTaXplOiAnMS4xcmVtJyxcbiAgICBib3JkZXJSYWRpdXM6ICc4cHgnXG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTaWduVXA7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgTGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gJ2FwaHJvZGl0ZSc7XG5pbXBvcnQgeyBoaWRlQ2FydERyYXdlciB9IGZyb20gJy4uL2FjdGlvbnMvdWlBY3Rpb25DcmVhdG9yJztcblxuY2xhc3MgQ2FydFdpbmRvdyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaGlkZUNhcnREcmF3ZXIgfSA9IHRoaXMucHJvcHNcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMudGl0bGUpfT5cbiAgICAgICAgICA8aDI+Q2FydDwvaDI+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IGhpZGVDYXJ0RHJhd2VyKCl9XG4gICAgICAgIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5idXR0b24pfVxuICAgICAgICA+XG4gICAgICAgICAgPExpbmsgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmxpbmspfXRvPScvY2FydCc+VmlldyBDYXJ0PC9MaW5rPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICB0aXRsZToge1xuICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgYm9yZGVyQm90dG9tOiAnc29saWQgMnB4IGdyZXknLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBtYXJnaW46ICc1cHgnXG4gIH0sXG4gIGJ1dHRvbjoge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIGJvdHRvbTogJzIwcHgnLFxuICAgIGJvcmRlclJhZGl1czogJzMwcHgnLFxuICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdkYXJrIGJsdWUnLFxuICAgIGZvbnRTaXplOiAnMS4ycmVtJyxcbiAgICBoZWlnaHQ6ICc0MHB4JyxcbiAgICB3aWR0aDogJzE1MHB4JyxcbiAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgIGZvbnRTdHlsZTogJ25vcm1hbCcsXG4gICAgbGVmdDogJzIwcHgnXG4gIH0sXG4gIGxpbms6IHtcbiAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnLFxuICB9LFxufSk7XG5cbmNvbnN0IG1hcERpc3BhY3RoVG9Qcm9wcyA9IHtcbiAgaGlkZUNhcnREcmF3ZXIsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobnVsbCwgbWFwRGlzcGFjdGhUb1Byb3BzKShDYXJ0V2luZG93KTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gJ2FwaHJvZGl0ZSc7XG5cbmNsYXNzIENhcnQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IH0gPSB0aGlzLnByb3BzXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGgxPkNhcnQ8L2gxPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH1cbn1cblxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FydDsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiY2Q2OTBhNjQ4ZmI0MDAwZTkwNGNhMTM5MGQ4ZjI0Y2QucG5nXCI7IiwiZXhwb3J0IGNvbnN0IEZFVENIX1BST0RVQ1RTX1NVQ0NFU1MgPSAnRkVUQ0hfUFJPRFVDVFNfU1VDQ0VTUyc7XG5cbmV4cG9ydCBjb25zdCBTRVRfTE9BRElOR19TVEFURSA9ICdTRVRfTE9BRElOR19TVEFURSc7IiwiaW1wb3J0IHsgRkVUQ0hfUFJPRFVDVFNfU1VDQ0VTUywgU0VUX0xPQURJTkdfU1RBVEUgfSBmcm9tIFwiLi9wcm9kdWN0QWN0aW9uVHlwZVwiO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCAnbm9kZS1mZXRjaCdcblxuZXhwb3J0IGNvbnN0IHNldExvYWRpbmdTdGF0ZSA9IChsb2FkaW5nU3RhdGUpID0+IHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiBTRVRfTE9BRElOR19TVEFURSxcbiAgICBsb2FkaW5nU3RhdGVcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRQcm9kdWN0cyA9IChwcm9kdWN0cykgPT4ge1xuICByZXR1cm4ge1xuICAgIHR5cGU6IEZFVENIX1BST0RVQ1RTX1NVQ0NFU1MsXG4gICAgcHJvZHVjdHNcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBmZXRjaFByb2R1Y3RzID0gKCkgPT4ge1xuXHRyZXR1cm4gKGRpc3BhdGNoKSA9PiB7XG4gICAgZGlzcGF0Y2goc2V0TG9hZGluZ1N0YXRlKHRydWUpKTtcblxuICAgIHJldHVybiBmZXRjaCgnaHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9wcm9kdWN0cycpXG4gICAgICAudGhlbigocmVzKSA9PiByZXMuanNvbigpKVxuICAgICAgLnRoZW4oKGRhdGEpID0+IGRpc3BhdGNoKHNldFByb2R1Y3RzKGRhdGEpKSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAgICAgLmZpbmFsbHkoKCkgPT4gZGlzcGF0Y2goc2V0TG9hZGluZ1N0YXRlKGZhbHNlKSkpO1xuICB9XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFJvdXRlLCBSb3V0ZXMsIExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBjc3MgfSBmcm9tICdhcGhyb2RpdGUnO1xuaW1wb3J0IEhlYWRlciBmcm9tICcuLi9IZWFkZXIvSGVhZGVyJztcbmltcG9ydCBGb290ZXIgZnJvbSAnLi4vRm9vdGVyL0Zvb3Rlcic7XG5pbXBvcnQgUHJvZHVjdHNQcmV2aWV3IGZyb20gJy4uL1Byb2R1Y3RzL1Byb2R1Y3RzUHJldmlldyc7XG5pbXBvcnQgTG9naW4gZnJvbSAnLi4vTG9naW4vTG9naW4nO1xuaW1wb3J0IFNpZ25VcCBmcm9tICcuLi9Mb2dpbi9TaWduVXAnO1xuaW1wb3J0IFByb2ZpbCBmcm9tICcuLi9Qcm9maWwvUHJvZmlsJztcbmltcG9ydCBDYXJ0V2luZG93IGZyb20gJy4uL0NhcnQvQ2FydFdpbmRvdyc7XG5pbXBvcnQgQ2FydCBmcm9tICcuLi9DYXJ0L0NhcnQnO1xuaW1wb3J0IGNhcmRJbWFnZSBmcm9tICcuLi9hc3NldHMvZmF2aWNvbi5wbmcnO1xuaW1wb3J0IHsgaGlkZUNhcnREcmF3ZXIgfSBmcm9tICcuLi9hY3Rpb25zL3VpQWN0aW9uQ3JlYXRvcic7XG5pbXBvcnQgeyBmZXRjaFByb2R1Y3RzIH0gZnJvbSAnLi4vYWN0aW9ucy9wcm9kdWN0QWN0aW9uQ3JlYXRvcic7XG5cbmNsYXNzIEFwcCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG5cbiAgICB0aGlzLmxpc3RQcm9kdWN0cyA9IFtcbiAgICAgIHtpZDogMSwgdGl0bGU6ICdBc3VzIFJvZycsIGltZzogY2FyZEltYWdlLCBwcm9jOiAnY29yZSBpNycsIG1lbW9yeTogNTEyLCBtZW1vcnlUeXBlOiAnU1NEJywgcmFtOiAzMn0sXG4gICAgICB7aWQ6IDIsIHRpdGxlOiAnQWNlcicsIGltZzogY2FyZEltYWdlLCBwcm9jOiAnY29yZSBpNycsIG1lbW9yeTogMTAyNCwgbWVtb3J5VHlwZTogJ1NTRCcsIHJhbTogOH0sXG4gICAgICB7aWQ6IDMsIHRpdGxlOiAnSHAgcGF2aWxpb24nLCBpbWc6IGNhcmRJbWFnZSwgcHJvYzogJ2NvcmUgaTcnLCBtZW1vcnk6IDEwMCwgbWVtb3J5VHlwZTogJ1NTRCcsIHJhbTogOH0sXG4gICAgICB7aWQ6IDQsIHRpdGxlOiAnTWFjQm9vaycsIGltZzogY2FyZEltYWdlLCBwcm9jOiAnY29yZSBpNycsIG1lbW9yeTogMTAwMCwgbWVtb3J5VHlwZTogJ1NTRCcsIHJhbTogOH0sXG4gICAgXTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpc0xvZ2dlZEluOiBmYWxzZSxcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmZldGNoUHJvZHVjdHMoKTtcbiAgICBjb25zb2xlLmxvZygnZmV0Y2hpbmcnKVxuICAgIGNvbnNvbGUubG9nKHRoaXMucHJvcHMuZmV0Y2hQcm9kdWN0cygpKTtcbiAgfVxuXG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZGlzcGxheURyYXdlciwgaGlkZUNhcnREcmF3ZXIsIGxpc3RQcm9kdWN0c30gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmFwcCl9PlxuICAgICAgICA8SGVhZGVyLz5cbiAgICAgICAge2Rpc3BsYXlEcmF3ZXIgJiZcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2NzcyhzdHlsZXMuY2FydCl9PlxuICAgICAgICAgIDxDYXJ0V2luZG93Lz5cbiAgICAgICAgPC9kaXY+fVxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5ib2R5KX1cbiAgICAgICAgb25DbGljaz17IGRpc3BsYXlEcmF3ZXIgPyAoKCkgPT4gaGlkZUNhcnREcmF3ZXIoKSkgOiAoKCkgPT4ge30pfT5cbiAgICAgICAgICA8Um91dGVzPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy8nIFxuICAgICAgICAgICAgZWxlbWVudD17XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmNhcmQpfT5cbiAgICAgICAgICAgICAgICA8UHJvZHVjdHNQcmV2aWV3IGxpc3RQcm9kdWN0cz17bGlzdFByb2R1Y3RzfS8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvbG9naW4nIGVsZW1lbnQ9ezxMb2dpbiAvPn0vPlxuICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9zaWdudXAnIGVsZW1lbnQ9ezxTaWduVXAgLz59Lz5cbiAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvY2FydCcgZWxlbWVudD17PENhcnQgLz59Lz5cbiAgICAgICAgICA8L1JvdXRlcz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxGb290ZXIgLz5cbiAgICAgIDwvZGl2PlxuICApO1xufVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGFwcDoge1xuICAgIGZvbnRGYW1pbHk6ICdPcGVuIFNhbnMsIEhlbHZldGljYSBOZXVlLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmJyxcbiAgICBoZWlnaHQ6ICc0MDB2aCdcbiAgfSxcbiAgY2FyZDoge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWFyb3VuZCcsXG4gICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICB3aWR0aDogJzEwMCUnLFxuICAgIHBhZGRpbmc6ICcyMHB4IDQwcHgnXG4gIH0sXG4gIGNhcnQ6IHtcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICB0b3A6ICcwcHgnLFxuICAgIGhlaWdodDogJzEwMHZoJyxcbiAgICB3aWR0aDogJzQwMHB4JyxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAnMjBweCcsXG4gICAgYm9yZGVyQm90dG9tTGVmdFJhZGl1czogJzIwcHgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICByaWdodDogJzBweCcsXG4gICAgYm9yZGVyOiAnZGFzaGVkIDFweCBncmV5J1xuICB9LFxuICBib2R5OiB7XG4gICAgcGFkZGluZzogJzAgNDBweCdcbiAgfVxufSk7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZSkgPT4ge1xuICByZXR1cm4ge1xuICAgIGRpc3BsYXlEcmF3ZXI6IHN0YXRlLnVpLmdldCgnaXNDYXJ0RHJhd2VyVmlzaWJsZScpLFxuICAgIGxpc3RQcm9kdWN0czogc3RhdGUucHJvZHVjdHMuZ2V0KCdwcm9kdWN0cycpLFxuICB9O1xufTtcblxuY29uc3QgbWFwRGlzcGFjdGhUb1Byb3BzID0ge1xuICBoaWRlQ2FydERyYXdlcixcbiAgZmV0Y2hQcm9kdWN0cyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhY3RoVG9Qcm9wcykoQXBwKTsiLCJmdW5jdGlvbiBfdHlwZW9mKG8pIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG87XG4gIH0gOiBmdW5jdGlvbiAobykge1xuICAgIHJldHVybiBvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG8uY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvO1xuICB9LCBfdHlwZW9mKG8pO1xufVxuZXhwb3J0IHsgX3R5cGVvZiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IHRvUHJvcGVydHlLZXkgZnJvbSBcIi4vdG9Qcm9wZXJ0eUtleS5qc1wiO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHtcbiAgcmV0dXJuIChyID0gdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7XG4gICAgdmFsdWU6IHQsXG4gICAgZW51bWVyYWJsZTogITAsXG4gICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICB3cml0YWJsZTogITBcbiAgfSkgOiBlW3JdID0gdCwgZTtcbn1cbmV4cG9ydCB7IF9kZWZpbmVQcm9wZXJ0eSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5pbXBvcnQgdG9QcmltaXRpdmUgZnJvbSBcIi4vdG9QcmltaXRpdmUuanNcIjtcbmZ1bmN0aW9uIHRvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IHRvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxuZXhwb3J0IHsgdG9Qcm9wZXJ0eUtleSBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IF90eXBlb2YgZnJvbSBcIi4vdHlwZW9mLmpzXCI7XG5mdW5jdGlvbiB0b1ByaW1pdGl2ZSh0LCByKSB7XG4gIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YodCkgfHwgIXQpIHJldHVybiB0O1xuICB2YXIgZSA9IHRbU3ltYm9sLnRvUHJpbWl0aXZlXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHZhciBpID0gZS5jYWxsKHQsIHIgfHwgXCJkZWZhdWx0XCIpO1xuICAgIGlmIChcIm9iamVjdFwiICE9IF90eXBlb2YoaSkpIHJldHVybiBpO1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKTtcbiAgfVxuICByZXR1cm4gKFwic3RyaW5nXCIgPT09IHIgPyBTdHJpbmcgOiBOdW1iZXIpKHQpO1xufVxuZXhwb3J0IHsgdG9QcmltaXRpdmUgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tIFwiLi9kZWZpbmVQcm9wZXJ0eS5qc1wiO1xuZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7XG4gIHZhciB0ID0gT2JqZWN0LmtleXMoZSk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpO1xuICAgIHIgJiYgKG8gPSBvLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTtcbiAgICB9KSksIHQucHVzaC5hcHBseSh0LCBvKTtcbiAgfVxuICByZXR1cm4gdDtcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKGUpIHtcbiAgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHtcbiAgICB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307XG4gICAgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pO1xuICAgIH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0KSkgOiBvd25LZXlzKE9iamVjdCh0KSkuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBlO1xufVxuZXhwb3J0IHsgX29iamVjdFNwcmVhZDIgYXMgZGVmYXVsdCB9OyIsImltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDInO1xuXG4vKipcbiAqIEFkYXB0ZWQgZnJvbSBSZWFjdDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvbWFzdGVyL3BhY2thZ2VzL3NoYXJlZC9mb3JtYXRQcm9kRXJyb3JNZXNzYWdlLmpzXG4gKlxuICogRG8gbm90IHJlcXVpcmUgdGhpcyBtb2R1bGUgZGlyZWN0bHkhIFVzZSBub3JtYWwgdGhyb3cgZXJyb3IgY2FsbHMuIFRoZXNlIG1lc3NhZ2VzIHdpbGwgYmUgcmVwbGFjZWQgd2l0aCBlcnJvciBjb2Rlc1xuICogZHVyaW5nIGJ1aWxkLlxuICogQHBhcmFtIHtudW1iZXJ9IGNvZGVcbiAqL1xuZnVuY3Rpb24gZm9ybWF0UHJvZEVycm9yTWVzc2FnZShjb2RlKSB7XG4gIHJldHVybiBcIk1pbmlmaWVkIFJlZHV4IGVycm9yICNcIiArIGNvZGUgKyBcIjsgdmlzaXQgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvRXJyb3JzP2NvZGU9XCIgKyBjb2RlICsgXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgXCIgKyAndXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycy4gJztcbn1cblxuLy8gSW5saW5lZCB2ZXJzaW9uIG9mIHRoZSBgc3ltYm9sLW9ic2VydmFibGVgIHBvbHlmaWxsXG52YXIgJCRvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLm9ic2VydmFibGUgfHwgJ0BAb2JzZXJ2YWJsZSc7XG59KSgpO1xuXG4vKipcbiAqIFRoZXNlIGFyZSBwcml2YXRlIGFjdGlvbiB0eXBlcyByZXNlcnZlZCBieSBSZWR1eC5cbiAqIEZvciBhbnkgdW5rbm93biBhY3Rpb25zLCB5b3UgbXVzdCByZXR1cm4gdGhlIGN1cnJlbnQgc3RhdGUuXG4gKiBJZiB0aGUgY3VycmVudCBzdGF0ZSBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS5cbiAqIERvIG5vdCByZWZlcmVuY2UgdGhlc2UgYWN0aW9uIHR5cGVzIGRpcmVjdGx5IGluIHlvdXIgY29kZS5cbiAqL1xudmFyIHJhbmRvbVN0cmluZyA9IGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZyg3KS5zcGxpdCgnJykuam9pbignLicpO1xufTtcblxudmFyIEFjdGlvblR5cGVzID0ge1xuICBJTklUOiBcIkBAcmVkdXgvSU5JVFwiICsgcmFuZG9tU3RyaW5nKCksXG4gIFJFUExBQ0U6IFwiQEByZWR1eC9SRVBMQUNFXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUFJPQkVfVU5LTk9XTl9BQ1RJT046IGZ1bmN0aW9uIFBST0JFX1VOS05PV05fQUNUSU9OKCkge1xuICAgIHJldHVybiBcIkBAcmVkdXgvUFJPQkVfVU5LTk9XTl9BQ1RJT05cIiArIHJhbmRvbVN0cmluZygpO1xuICB9XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7YW55fSBvYmogVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGFyZ3VtZW50IGFwcGVhcnMgdG8gYmUgYSBwbGFpbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgdmFyIHByb3RvID0gb2JqO1xuXG4gIHdoaWxlIChPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pICE9PSBudWxsKSB7XG4gICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBwcm90bztcbn1cblxuLy8gSW5saW5lZCAvIHNob3J0ZW5lZCB2ZXJzaW9uIG9mIGBraW5kT2ZgIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2pvbnNjaGxpbmtlcnQva2luZC1vZlxuZnVuY3Rpb24gbWluaUtpbmRPZih2YWwpIHtcbiAgaWYgKHZhbCA9PT0gdm9pZCAwKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gIGlmICh2YWwgPT09IG51bGwpIHJldHVybiAnbnVsbCc7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkgcmV0dXJuICdhcnJheSc7XG4gIGlmIChpc0RhdGUodmFsKSkgcmV0dXJuICdkYXRlJztcbiAgaWYgKGlzRXJyb3IodmFsKSkgcmV0dXJuICdlcnJvcic7XG4gIHZhciBjb25zdHJ1Y3Rvck5hbWUgPSBjdG9yTmFtZSh2YWwpO1xuXG4gIHN3aXRjaCAoY29uc3RydWN0b3JOYW1lKSB7XG4gICAgY2FzZSAnU3ltYm9sJzpcbiAgICBjYXNlICdQcm9taXNlJzpcbiAgICBjYXNlICdXZWFrTWFwJzpcbiAgICBjYXNlICdXZWFrU2V0JzpcbiAgICBjYXNlICdNYXAnOlxuICAgIGNhc2UgJ1NldCc6XG4gICAgICByZXR1cm4gY29uc3RydWN0b3JOYW1lO1xuICB9IC8vIG90aGVyXG5cblxuICByZXR1cm4gdHlwZS5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgJycpO1xufVxuXG5mdW5jdGlvbiBjdG9yTmFtZSh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicgPyB2YWwuY29uc3RydWN0b3IubmFtZSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IodmFsKSB7XG4gIHJldHVybiB2YWwgaW5zdGFuY2VvZiBFcnJvciB8fCB0eXBlb2YgdmFsLm1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIHZhbC5jb25zdHJ1Y3RvciAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gJ251bWJlcic7XG59XG5cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIERhdGUpIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIHZhbC50b0RhdGVTdHJpbmcgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbC5nZXREYXRlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWwuc2V0RGF0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24ga2luZE9mKHZhbCkge1xuICB2YXIgdHlwZU9mVmFsID0gdHlwZW9mIHZhbDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHR5cGVPZlZhbCA9IG1pbmlLaW5kT2YodmFsKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlT2ZWYWw7XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqXG4gKiAqKldlIHJlY29tbWVuZCB1c2luZyB0aGUgYGNvbmZpZ3VyZVN0b3JlYCBtZXRob2RcbiAqIG9mIHRoZSBgQHJlZHV4anMvdG9vbGtpdGAgcGFja2FnZSoqLCB3aGljaCByZXBsYWNlcyBgY3JlYXRlU3RvcmVgLlxuICpcbiAqIFJlZHV4IFRvb2xraXQgaXMgb3VyIHJlY29tbWVuZGVkIGFwcHJvYWNoIGZvciB3cml0aW5nIFJlZHV4IGxvZ2ljIHRvZGF5LFxuICogaW5jbHVkaW5nIHN0b3JlIHNldHVwLCByZWR1Y2VycywgZGF0YSBmZXRjaGluZywgYW5kIG1vcmUuXG4gKlxuICogKipGb3IgbW9yZSBkZXRhaWxzLCBwbGVhc2UgcmVhZCB0aGlzIFJlZHV4IGRvY3MgcGFnZToqKlxuICogKipodHRwczovL3JlZHV4LmpzLm9yZy9pbnRyb2R1Y3Rpb24vd2h5LXJ0ay1pcy1yZWR1eC10b2RheSoqXG4gKlxuICogYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIFJlZHV4IFRvb2xraXQgaXMgYW4gaW1wcm92ZWQgdmVyc2lvbiBvZiBgY3JlYXRlU3RvcmVgIHRoYXRcbiAqIHNpbXBsaWZpZXMgc2V0dXAgYW5kIGhlbHBzIGF2b2lkIGNvbW1vbiBidWdzLlxuICpcbiAqIFlvdSBzaG91bGQgbm90IGJlIHVzaW5nIHRoZSBgcmVkdXhgIGNvcmUgcGFja2FnZSBieSBpdHNlbGYgdG9kYXksIGV4Y2VwdCBmb3IgbGVhcm5pbmcgcHVycG9zZXMuXG4gKiBUaGUgYGNyZWF0ZVN0b3JlYCBtZXRob2QgZnJvbSB0aGUgY29yZSBgcmVkdXhgIHBhY2thZ2Ugd2lsbCBub3QgYmUgcmVtb3ZlZCwgYnV0IHdlIGVuY291cmFnZVxuICogYWxsIHVzZXJzIHRvIG1pZ3JhdGUgdG8gdXNpbmcgUmVkdXggVG9vbGtpdCBmb3IgYWxsIFJlZHV4IGNvZGUuXG4gKlxuICogSWYgeW91IHdhbnQgdG8gdXNlIGBjcmVhdGVTdG9yZWAgd2l0aG91dCB0aGlzIHZpc3VhbCBkZXByZWNhdGlvbiB3YXJuaW5nLCB1c2VcbiAqIHRoZSBgbGVnYWN5X2NyZWF0ZVN0b3JlYCBpbXBvcnQgaW5zdGVhZDpcbiAqXG4gKiBgaW1wb3J0IHsgbGVnYWN5X2NyZWF0ZVN0b3JlIGFzIGNyZWF0ZVN0b3JlfSBmcm9tICdyZWR1eCdgXG4gKlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgwKSA6ICdJdCBsb29rcyBsaWtlIHlvdSBhcmUgcGFzc2luZyBzZXZlcmFsIHN0b3JlIGVuaGFuY2VycyB0byAnICsgJ2NyZWF0ZVN0b3JlKCkuIFRoaXMgaXMgbm90IHN1cHBvcnRlZC4gSW5zdGVhZCwgY29tcG9zZSB0aGVtICcgKyAndG9nZXRoZXIgdG8gYSBzaW5nbGUgZnVuY3Rpb24uIFNlZSBodHRwczovL3JlZHV4LmpzLm9yZy90dXRvcmlhbHMvZnVuZGFtZW50YWxzL3BhcnQtNC1zdG9yZSNjcmVhdGluZy1hLXN0b3JlLXdpdGgtZW5oYW5jZXJzIGZvciBhbiBleGFtcGxlLicpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZW5oYW5jZXIgPSBwcmVsb2FkZWRTdGF0ZTtcbiAgICBwcmVsb2FkZWRTdGF0ZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKHR5cGVvZiBlbmhhbmNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMSkgOiBcIkV4cGVjdGVkIHRoZSBlbmhhbmNlciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGVuaGFuY2VyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW5oYW5jZXIoY3JlYXRlU3RvcmUpKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDIpIDogXCJFeHBlY3RlZCB0aGUgcm9vdCByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2YocmVkdWNlcikgKyBcIidcIik7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDMpIDogJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuZ2V0U3RhdGUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnVGhlIHJlZHVjZXIgaGFzIGFscmVhZHkgcmVjZWl2ZWQgdGhlIHN0YXRlIGFzIGFuIGFyZ3VtZW50LiAnICsgJ1Bhc3MgaXQgZG93biBmcm9tIHRoZSB0b3AgcmVkdWNlciBpbnN0ZWFkIG9mIHJlYWRpbmcgaXQgZnJvbSB0aGUgc3RvcmUuJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRTdGF0ZTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIGNoYW5nZSBsaXN0ZW5lci4gSXQgd2lsbCBiZSBjYWxsZWQgYW55IHRpbWUgYW4gYWN0aW9uIGlzIGRpc3BhdGNoZWQsXG4gICAqIGFuZCBzb21lIHBhcnQgb2YgdGhlIHN0YXRlIHRyZWUgbWF5IHBvdGVudGlhbGx5IGhhdmUgY2hhbmdlZC4gWW91IG1heSB0aGVuXG4gICAqIGNhbGwgYGdldFN0YXRlKClgIHRvIHJlYWQgdGhlIGN1cnJlbnQgc3RhdGUgdHJlZSBpbnNpZGUgdGhlIGNhbGxiYWNrLlxuICAgKlxuICAgKiBZb3UgbWF5IGNhbGwgYGRpc3BhdGNoKClgIGZyb20gYSBjaGFuZ2UgbGlzdGVuZXIsIHdpdGggdGhlIGZvbGxvd2luZ1xuICAgKiBjYXZlYXRzOlxuICAgKlxuICAgKiAxLiBUaGUgc3Vic2NyaXB0aW9ucyBhcmUgc25hcHNob3R0ZWQganVzdCBiZWZvcmUgZXZlcnkgYGRpc3BhdGNoKClgIGNhbGwuXG4gICAqIElmIHlvdSBzdWJzY3JpYmUgb3IgdW5zdWJzY3JpYmUgd2hpbGUgdGhlIGxpc3RlbmVycyBhcmUgYmVpbmcgaW52b2tlZCwgdGhpc1xuICAgKiB3aWxsIG5vdCBoYXZlIGFueSBlZmZlY3Qgb24gdGhlIGBkaXNwYXRjaCgpYCB0aGF0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzcy5cbiAgICogSG93ZXZlciwgdGhlIG5leHQgYGRpc3BhdGNoKClgIGNhbGwsIHdoZXRoZXIgbmVzdGVkIG9yIG5vdCwgd2lsbCB1c2UgYSBtb3JlXG4gICAqIHJlY2VudCBzbmFwc2hvdCBvZiB0aGUgc3Vic2NyaXB0aW9uIGxpc3QuXG4gICAqXG4gICAqIDIuIFRoZSBsaXN0ZW5lciBzaG91bGQgbm90IGV4cGVjdCB0byBzZWUgYWxsIHN0YXRlIGNoYW5nZXMsIGFzIHRoZSBzdGF0ZVxuICAgKiBtaWdodCBoYXZlIGJlZW4gdXBkYXRlZCBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgYSBuZXN0ZWQgYGRpc3BhdGNoKClgIGJlZm9yZVxuICAgKiB0aGUgbGlzdGVuZXIgaXMgY2FsbGVkLiBJdCBpcywgaG93ZXZlciwgZ3VhcmFudGVlZCB0aGF0IGFsbCBzdWJzY3JpYmVyc1xuICAgKiByZWdpc3RlcmVkIGJlZm9yZSB0aGUgYGRpc3BhdGNoKClgIHN0YXJ0ZWQgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGUgbGF0ZXN0XG4gICAqIHN0YXRlIGJ5IHRoZSB0aW1lIGl0IGV4aXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBBIGNhbGxiYWNrIHRvIGJlIGludm9rZWQgb24gZXZlcnkgZGlzcGF0Y2guXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiB0byByZW1vdmUgdGhpcyBjaGFuZ2UgbGlzdGVuZXIuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNCkgOiBcIkV4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLiBJbnN0ZWFkLCByZWNlaXZlZDogJ1wiICsga2luZE9mKGxpc3RlbmVyKSArIFwiJ1wiKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoNSkgOiAnWW91IG1heSBub3QgY2FsbCBzdG9yZS5zdWJzY3JpYmUoKSB3aGlsZSB0aGUgcmVkdWNlciBpcyBleGVjdXRpbmcuICcgKyAnSWYgeW91IHdvdWxkIGxpa2UgdG8gYmUgbm90aWZpZWQgYWZ0ZXIgdGhlIHN0b3JlIGhhcyBiZWVuIHVwZGF0ZWQsIHN1YnNjcmliZSBmcm9tIGEgJyArICdjb21wb25lbnQgYW5kIGludm9rZSBzdG9yZS5nZXRTdGF0ZSgpIGluIHRoZSBjYWxsYmFjayB0byBhY2Nlc3MgdGhlIGxhdGVzdCBzdGF0ZS4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpL3N0b3JlI3N1YnNjcmliZWxpc3RlbmVyIGZvciBtb3JlIGRldGFpbHMuJyk7XG4gICAgfVxuXG4gICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpO1xuICAgIG5leHRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgaWYgKCFpc1N1YnNjcmliZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEaXNwYXRjaGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg2KSA6ICdZb3UgbWF5IG5vdCB1bnN1YnNjcmliZSBmcm9tIGEgc3RvcmUgbGlzdGVuZXIgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ1NlZSBodHRwczovL3JlZHV4LmpzLm9yZy9hcGkvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICAgIH1cblxuICAgICAgaXNTdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgICB2YXIgaW5kZXggPSBuZXh0TGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgbmV4dExpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgY3VycmVudExpc3RlbmVycyA9IG51bGw7XG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlzcGF0Y2hlcyBhbiBhY3Rpb24uIEl0IGlzIHRoZSBvbmx5IHdheSB0byB0cmlnZ2VyIGEgc3RhdGUgY2hhbmdlLlxuICAgKlxuICAgKiBUaGUgYHJlZHVjZXJgIGZ1bmN0aW9uLCB1c2VkIHRvIGNyZWF0ZSB0aGUgc3RvcmUsIHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlXG4gICAqIGN1cnJlbnQgc3RhdGUgdHJlZSBhbmQgdGhlIGdpdmVuIGBhY3Rpb25gLiBJdHMgcmV0dXJuIHZhbHVlIHdpbGxcbiAgICogYmUgY29uc2lkZXJlZCB0aGUgKipuZXh0Kiogc3RhdGUgb2YgdGhlIHRyZWUsIGFuZCB0aGUgY2hhbmdlIGxpc3RlbmVyc1xuICAgKiB3aWxsIGJlIG5vdGlmaWVkLlxuICAgKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvbmx5IHN1cHBvcnRzIHBsYWluIG9iamVjdCBhY3Rpb25zLiBJZiB5b3Ugd2FudCB0b1xuICAgKiBkaXNwYXRjaCBhIFByb21pc2UsIGFuIE9ic2VydmFibGUsIGEgdGh1bmssIG9yIHNvbWV0aGluZyBlbHNlLCB5b3UgbmVlZCB0b1xuICAgKiB3cmFwIHlvdXIgc3RvcmUgY3JlYXRpbmcgZnVuY3Rpb24gaW50byB0aGUgY29ycmVzcG9uZGluZyBtaWRkbGV3YXJlLiBGb3JcbiAgICogZXhhbXBsZSwgc2VlIHRoZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgYHJlZHV4LXRodW5rYCBwYWNrYWdlLiBFdmVuIHRoZVxuICAgKiBtaWRkbGV3YXJlIHdpbGwgZXZlbnR1YWxseSBkaXNwYXRjaCBwbGFpbiBvYmplY3QgYWN0aW9ucyB1c2luZyB0aGlzIG1ldGhvZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGFjdGlvbiBBIHBsYWluIG9iamVjdCByZXByZXNlbnRpbmcg4oCcd2hhdCBjaGFuZ2Vk4oCdLiBJdCBpc1xuICAgKiBhIGdvb2QgaWRlYSB0byBrZWVwIGFjdGlvbnMgc2VyaWFsaXphYmxlIHNvIHlvdSBjYW4gcmVjb3JkIGFuZCByZXBsYXkgdXNlclxuICAgKiBzZXNzaW9ucywgb3IgdXNlIHRoZSB0aW1lIHRyYXZlbGxpbmcgYHJlZHV4LWRldnRvb2xzYC4gQW4gYWN0aW9uIG11c3QgaGF2ZVxuICAgKiBhIGB0eXBlYCBwcm9wZXJ0eSB3aGljaCBtYXkgbm90IGJlIGB1bmRlZmluZWRgLiBJdCBpcyBhIGdvb2QgaWRlYSB0byB1c2VcbiAgICogc3RyaW5nIGNvbnN0YW50cyBmb3IgYWN0aW9uIHR5cGVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBGb3IgY29udmVuaWVuY2UsIHRoZSBzYW1lIGFjdGlvbiBvYmplY3QgeW91IGRpc3BhdGNoZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCwgaWYgeW91IHVzZSBhIGN1c3RvbSBtaWRkbGV3YXJlLCBpdCBtYXkgd3JhcCBgZGlzcGF0Y2goKWAgdG9cbiAgICogcmV0dXJuIHNvbWV0aGluZyBlbHNlIChmb3IgZXhhbXBsZSwgYSBQcm9taXNlIHlvdSBjYW4gYXdhaXQpLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGRpc3BhdGNoKGFjdGlvbikge1xuICAgIGlmICghaXNQbGFpbk9iamVjdChhY3Rpb24pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg3KSA6IFwiQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuIEluc3RlYWQsIHRoZSBhY3R1YWwgdHlwZSB3YXM6ICdcIiArIGtpbmRPZihhY3Rpb24pICsgXCInLiBZb3UgbWF5IG5lZWQgdG8gYWRkIG1pZGRsZXdhcmUgdG8geW91ciBzdG9yZSBzZXR1cCB0byBoYW5kbGUgZGlzcGF0Y2hpbmcgb3RoZXIgdmFsdWVzLCBzdWNoIGFzICdyZWR1eC10aHVuaycgdG8gaGFuZGxlIGRpc3BhdGNoaW5nIGZ1bmN0aW9ucy4gU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI21pZGRsZXdhcmUgYW5kIGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC02LWFzeW5jLWxvZ2ljI3VzaW5nLXRoZS1yZWR1eC10aHVuay1taWRkbGV3YXJlIGZvciBleGFtcGxlcy5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb24udHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDgpIDogJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gWW91IG1heSBoYXZlIG1pc3NwZWxsZWQgYW4gYWN0aW9uIHR5cGUgc3RyaW5nIGNvbnN0YW50LicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSg5KSA6ICdSZWR1Y2VycyBtYXkgbm90IGRpc3BhdGNoIGFjdGlvbnMuJyk7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGlzRGlzcGF0Y2hpbmcgPSB0cnVlO1xuICAgICAgY3VycmVudFN0YXRlID0gY3VycmVudFJlZHVjZXIoY3VycmVudFN0YXRlLCBhY3Rpb24pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGxpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMgPSBuZXh0TGlzdGVuZXJzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxpc3RlbmVyc1tpXTtcbiAgICAgIGxpc3RlbmVyKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfVxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIHJlZHVjZXIgY3VycmVudGx5IHVzZWQgYnkgdGhlIHN0b3JlIHRvIGNhbGN1bGF0ZSB0aGUgc3RhdGUuXG4gICAqXG4gICAqIFlvdSBtaWdodCBuZWVkIHRoaXMgaWYgeW91ciBhcHAgaW1wbGVtZW50cyBjb2RlIHNwbGl0dGluZyBhbmQgeW91IHdhbnQgdG9cbiAgICogbG9hZCBzb21lIG9mIHRoZSByZWR1Y2VycyBkeW5hbWljYWxseS4gWW91IG1pZ2h0IGFsc28gbmVlZCB0aGlzIGlmIHlvdVxuICAgKiBpbXBsZW1lbnQgYSBob3QgcmVsb2FkaW5nIG1lY2hhbmlzbSBmb3IgUmVkdXguXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IG5leHRSZWR1Y2VyIFRoZSByZWR1Y2VyIGZvciB0aGUgc3RvcmUgdG8gdXNlIGluc3RlYWQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VSZWR1Y2VyKG5leHRSZWR1Y2VyKSB7XG4gICAgaWYgKHR5cGVvZiBuZXh0UmVkdWNlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTApIDogXCJFeHBlY3RlZCB0aGUgbmV4dFJlZHVjZXIgdG8gYmUgYSBmdW5jdGlvbi4gSW5zdGVhZCwgcmVjZWl2ZWQ6ICdcIiArIGtpbmRPZihuZXh0UmVkdWNlcikpO1xuICAgIH1cblxuICAgIGN1cnJlbnRSZWR1Y2VyID0gbmV4dFJlZHVjZXI7IC8vIFRoaXMgYWN0aW9uIGhhcyBhIHNpbWlsaWFyIGVmZmVjdCB0byBBY3Rpb25UeXBlcy5JTklULlxuICAgIC8vIEFueSByZWR1Y2VycyB0aGF0IGV4aXN0ZWQgaW4gYm90aCB0aGUgbmV3IGFuZCBvbGQgcm9vdFJlZHVjZXJcbiAgICAvLyB3aWxsIHJlY2VpdmUgdGhlIHByZXZpb3VzIHN0YXRlLiBUaGlzIGVmZmVjdGl2ZWx5IHBvcHVsYXRlc1xuICAgIC8vIHRoZSBuZXcgc3RhdGUgdHJlZSB3aXRoIGFueSByZWxldmFudCBkYXRhIGZyb20gdGhlIG9sZCBvbmUuXG5cbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5SRVBMQUNFXG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIEludGVyb3BlcmFiaWxpdHkgcG9pbnQgZm9yIG9ic2VydmFibGUvcmVhY3RpdmUgbGlicmFyaWVzLlxuICAgKiBAcmV0dXJucyB7b2JzZXJ2YWJsZX0gQSBtaW5pbWFsIG9ic2VydmFibGUgb2Ygc3RhdGUgY2hhbmdlcy5cbiAgICogRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZSB0aGUgb2JzZXJ2YWJsZSBwcm9wb3NhbDpcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JzZXJ2YWJsZVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIG9ic2VydmFibGUoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgb3V0ZXJTdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgcmV0dXJuIF9yZWYgPSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBtaW5pbWFsIG9ic2VydmFibGUgc3Vic2NyaXB0aW9uIG1ldGhvZC5cbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYnNlcnZlciBBbnkgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgYXMgYW4gb2JzZXJ2ZXIuXG4gICAgICAgKiBUaGUgb2JzZXJ2ZXIgb2JqZWN0IHNob3VsZCBoYXZlIGEgYG5leHRgIG1ldGhvZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdWJzY3JpcHRpb259IEFuIG9iamVjdCB3aXRoIGFuIGB1bnN1YnNjcmliZWAgbWV0aG9kIHRoYXQgY2FuXG4gICAgICAgKiBiZSB1c2VkIHRvIHVuc3Vic2NyaWJlIHRoZSBvYnNlcnZhYmxlIGZyb20gdGhlIHN0b3JlLCBhbmQgcHJldmVudCBmdXJ0aGVyXG4gICAgICAgKiBlbWlzc2lvbiBvZiB2YWx1ZXMgZnJvbSB0aGUgb2JzZXJ2YWJsZS5cbiAgICAgICAqL1xuICAgICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxMSkgOiBcIkV4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuIEluc3RlYWQsIHJlY2VpdmVkOiAnXCIgKyBraW5kT2Yob2JzZXJ2ZXIpICsgXCInXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb2JzZXJ2ZVN0YXRlKCkge1xuICAgICAgICAgIGlmIChvYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGdldFN0YXRlKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9ic2VydmVTdGF0ZSgpO1xuICAgICAgICB2YXIgdW5zdWJzY3JpYmUgPSBvdXRlclN1YnNjcmliZShvYnNlcnZlU3RhdGUpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHVuc3Vic2NyaWJlOiB1bnN1YnNjcmliZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sIF9yZWZbJCRvYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sIF9yZWY7XG4gIH0gLy8gV2hlbiBhIHN0b3JlIGlzIGNyZWF0ZWQsIGFuIFwiSU5JVFwiIGFjdGlvbiBpcyBkaXNwYXRjaGVkIHNvIHRoYXQgZXZlcnlcbiAgLy8gcmVkdWNlciByZXR1cm5zIHRoZWlyIGluaXRpYWwgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gIC8vIHRoZSBpbml0aWFsIHN0YXRlIHRyZWUuXG5cblxuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICB9KTtcbiAgcmV0dXJuIF9yZWYyID0ge1xuICAgIGRpc3BhdGNoOiBkaXNwYXRjaCxcbiAgICBzdWJzY3JpYmU6IHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZTogZ2V0U3RhdGUsXG4gICAgcmVwbGFjZVJlZHVjZXI6IHJlcGxhY2VSZWR1Y2VyXG4gIH0sIF9yZWYyWyQkb2JzZXJ2YWJsZV0gPSBvYnNlcnZhYmxlLCBfcmVmMjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFJlZHV4IHN0b3JlIHRoYXQgaG9sZHMgdGhlIHN0YXRlIHRyZWUuXG4gKlxuICogKipXZSByZWNvbW1lbmQgdXNpbmcgYGNvbmZpZ3VyZVN0b3JlYCBmcm9tIHRoZVxuICogYEByZWR1eGpzL3Rvb2xraXRgIHBhY2thZ2UqKiwgd2hpY2ggcmVwbGFjZXMgYGNyZWF0ZVN0b3JlYDpcbiAqICoqaHR0cHM6Ly9yZWR1eC5qcy5vcmcvaW50cm9kdWN0aW9uL3doeS1ydGstaXMtcmVkdXgtdG9kYXkqKlxuICpcbiAqIFRoZSBvbmx5IHdheSB0byBjaGFuZ2UgdGhlIGRhdGEgaW4gdGhlIHN0b3JlIGlzIHRvIGNhbGwgYGRpc3BhdGNoKClgIG9uIGl0LlxuICpcbiAqIFRoZXJlIHNob3VsZCBvbmx5IGJlIGEgc2luZ2xlIHN0b3JlIGluIHlvdXIgYXBwLiBUbyBzcGVjaWZ5IGhvdyBkaWZmZXJlbnRcbiAqIHBhcnRzIG9mIHRoZSBzdGF0ZSB0cmVlIHJlc3BvbmQgdG8gYWN0aW9ucywgeW91IG1heSBjb21iaW5lIHNldmVyYWwgcmVkdWNlcnNcbiAqIGludG8gYSBzaW5nbGUgcmVkdWNlciBmdW5jdGlvbiBieSB1c2luZyBgY29tYmluZVJlZHVjZXJzYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWR1Y2VyIEEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBuZXh0IHN0YXRlIHRyZWUsIGdpdmVuXG4gKiB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgYWN0aW9uIHRvIGhhbmRsZS5cbiAqXG4gKiBAcGFyYW0ge2FueX0gW3ByZWxvYWRlZFN0YXRlXSBUaGUgaW5pdGlhbCBzdGF0ZS4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGh5ZHJhdGUgdGhlIHN0YXRlIGZyb20gdGhlIHNlcnZlciBpbiB1bml2ZXJzYWwgYXBwcywgb3IgdG8gcmVzdG9yZSBhXG4gKiBwcmV2aW91c2x5IHNlcmlhbGl6ZWQgdXNlciBzZXNzaW9uLlxuICogSWYgeW91IHVzZSBgY29tYmluZVJlZHVjZXJzYCB0byBwcm9kdWNlIHRoZSByb290IHJlZHVjZXIgZnVuY3Rpb24sIHRoaXMgbXVzdCBiZVxuICogYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUgYXMgYGNvbWJpbmVSZWR1Y2Vyc2Aga2V5cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbZW5oYW5jZXJdIFRoZSBzdG9yZSBlbmhhbmNlci4gWW91IG1heSBvcHRpb25hbGx5IHNwZWNpZnkgaXRcbiAqIHRvIGVuaGFuY2UgdGhlIHN0b3JlIHdpdGggdGhpcmQtcGFydHkgY2FwYWJpbGl0aWVzIHN1Y2ggYXMgbWlkZGxld2FyZSxcbiAqIHRpbWUgdHJhdmVsLCBwZXJzaXN0ZW5jZSwgZXRjLiBUaGUgb25seSBzdG9yZSBlbmhhbmNlciB0aGF0IHNoaXBzIHdpdGggUmVkdXhcbiAqIGlzIGBhcHBseU1pZGRsZXdhcmUoKWAuXG4gKlxuICogQHJldHVybnMge1N0b3JlfSBBIFJlZHV4IHN0b3JlIHRoYXQgbGV0cyB5b3UgcmVhZCB0aGUgc3RhdGUsIGRpc3BhdGNoIGFjdGlvbnNcbiAqIGFuZCBzdWJzY3JpYmUgdG8gY2hhbmdlcy5cbiAqL1xuXG52YXIgbGVnYWN5X2NyZWF0ZVN0b3JlID0gY3JlYXRlU3RvcmU7XG5cbi8qKlxuICogUHJpbnRzIGEgd2FybmluZyBpbiB0aGUgY29uc29sZSBpZiBpdCBleGlzdHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1lc3NhZ2UgVGhlIHdhcm5pbmcgbWVzc2FnZS5cbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiB3YXJuaW5nKG1lc3NhZ2UpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBjb25zb2xlLmVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBlcnJvciB3YXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28gdGhhdCBpZiB5b3UgZW5hYmxlXG4gICAgLy8gXCJicmVhayBvbiBhbGwgZXhjZXB0aW9uc1wiIGluIHlvdXIgY29uc29sZSxcbiAgICAvLyBpdCB3b3VsZCBwYXVzZSB0aGUgZXhlY3V0aW9uIGF0IHRoaXMgbGluZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH0gY2F0Y2ggKGUpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcblxufVxuXG5mdW5jdGlvbiBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKGlucHV0U3RhdGUsIHJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSkge1xuICB2YXIgcmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhyZWR1Y2Vycyk7XG4gIHZhciBhcmd1bWVudE5hbWUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLklOSVQgPyAncHJlbG9hZGVkU3RhdGUgYXJndW1lbnQgcGFzc2VkIHRvIGNyZWF0ZVN0b3JlJyA6ICdwcmV2aW91cyBzdGF0ZSByZWNlaXZlZCBieSB0aGUgcmVkdWNlcic7XG5cbiAgaWYgKHJlZHVjZXJLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnU3RvcmUgZG9lcyBub3QgaGF2ZSBhIHZhbGlkIHJlZHVjZXIuIE1ha2Ugc3VyZSB0aGUgYXJndW1lbnQgcGFzc2VkICcgKyAndG8gY29tYmluZVJlZHVjZXJzIGlzIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIHJlZHVjZXJzLic7XG4gIH1cblxuICBpZiAoIWlzUGxhaW5PYmplY3QoaW5wdXRTdGF0ZSkpIHtcbiAgICByZXR1cm4gXCJUaGUgXCIgKyBhcmd1bWVudE5hbWUgKyBcIiBoYXMgdW5leHBlY3RlZCB0eXBlIG9mIFxcXCJcIiArIGtpbmRPZihpbnB1dFN0YXRlKSArIFwiXFxcIi4gRXhwZWN0ZWQgYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBcIiArIChcImtleXM6IFxcXCJcIiArIHJlZHVjZXJLZXlzLmpvaW4oJ1wiLCBcIicpICsgXCJcXFwiXCIpO1xuICB9XG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlzID0gT2JqZWN0LmtleXMoaW5wdXRTdGF0ZSkuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gIXJlZHVjZXJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIXVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldO1xuICB9KTtcbiAgdW5leHBlY3RlZEtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdW5leHBlY3RlZEtleUNhY2hlW2tleV0gPSB0cnVlO1xuICB9KTtcbiAgaWYgKGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuUkVQTEFDRSkgcmV0dXJuO1xuXG4gIGlmICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIFwiVW5leHBlY3RlZCBcIiArICh1bmV4cGVjdGVkS2V5cy5sZW5ndGggPiAxID8gJ2tleXMnIDogJ2tleScpICsgXCIgXCIgKyAoXCJcXFwiXCIgKyB1bmV4cGVjdGVkS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIiBmb3VuZCBpbiBcIiArIGFyZ3VtZW50TmFtZSArIFwiLiBcIikgKyBcIkV4cGVjdGVkIHRvIGZpbmQgb25lIG9mIHRoZSBrbm93biByZWR1Y2VyIGtleXMgaW5zdGVhZDogXCIgKyAoXCJcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIi4gVW5leHBlY3RlZCBrZXlzIHdpbGwgYmUgaWdub3JlZC5cIik7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0UmVkdWNlclNoYXBlKHJlZHVjZXJzKSB7XG4gIE9iamVjdC5rZXlzKHJlZHVjZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVkdWNlciA9IHJlZHVjZXJzW2tleV07XG4gICAgdmFyIGluaXRpYWxTdGF0ZSA9IHJlZHVjZXIodW5kZWZpbmVkLCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxTdGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEyKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIGR1cmluZyBpbml0aWFsaXphdGlvbi4gXCIgKyBcIklmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlIHJlZHVjZXIgaXMgdW5kZWZpbmVkLCB5b3UgbXVzdCBcIiArIFwiZXhwbGljaXRseSByZXR1cm4gdGhlIGluaXRpYWwgc3RhdGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBcIiArIFwibm90IGJlIHVuZGVmaW5lZC4gSWYgeW91IGRvbid0IHdhbnQgdG8gc2V0IGEgdmFsdWUgZm9yIHRoaXMgcmVkdWNlciwgXCIgKyBcInlvdSBjYW4gdXNlIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcmVkdWNlcih1bmRlZmluZWQsIHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlBST0JFX1VOS05PV05fQUNUSU9OKClcbiAgICB9KSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDEzKSA6IFwiVGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlICdcIiArIEFjdGlvblR5cGVzLklOSVQgKyBcIicgb3Igb3RoZXIgYWN0aW9ucyBpbiBcXFwicmVkdXgvKlxcXCIgXCIpICsgXCJuYW1lc3BhY2UuIFRoZXkgYXJlIGNvbnNpZGVyZWQgcHJpdmF0ZS4gSW5zdGVhZCwgeW91IG11c3QgcmV0dXJuIHRoZSBcIiArIFwiY3VycmVudCBzdGF0ZSBmb3IgYW55IHVua25vd24gYWN0aW9ucywgdW5sZXNzIGl0IGlzIHVuZGVmaW5lZCwgXCIgKyBcImluIHdoaWNoIGNhc2UgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLCByZWdhcmRsZXNzIG9mIHRoZSBcIiArIFwiYWN0aW9uIHR5cGUuIFRoZSBpbml0aWFsIHN0YXRlIG1heSBub3QgYmUgdW5kZWZpbmVkLCBidXQgY2FuIGJlIG51bGwuXCIpO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGRpZmZlcmVudCByZWR1Y2VyIGZ1bmN0aW9ucywgaW50byBhIHNpbmdsZVxuICogcmVkdWNlciBmdW5jdGlvbi4gSXQgd2lsbCBjYWxsIGV2ZXJ5IGNoaWxkIHJlZHVjZXIsIGFuZCBnYXRoZXIgdGhlaXIgcmVzdWx0c1xuICogaW50byBhIHNpbmdsZSBzdGF0ZSBvYmplY3QsIHdob3NlIGtleXMgY29ycmVzcG9uZCB0byB0aGUga2V5cyBvZiB0aGUgcGFzc2VkXG4gKiByZWR1Y2VyIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcmVkdWNlcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBjb3JyZXNwb25kIHRvIGRpZmZlcmVudFxuICogcmVkdWNlciBmdW5jdGlvbnMgdGhhdCBuZWVkIHRvIGJlIGNvbWJpbmVkIGludG8gb25lLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpblxuICogaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXMgcmVkdWNlcnNgIHN5bnRheC4gVGhlIHJlZHVjZXJzIG1heSBuZXZlciByZXR1cm5cbiAqIHVuZGVmaW5lZCBmb3IgYW55IGFjdGlvbi4gSW5zdGVhZCwgdGhleSBzaG91bGQgcmV0dXJuIHRoZWlyIGluaXRpYWwgc3RhdGVcbiAqIGlmIHRoZSBzdGF0ZSBwYXNzZWQgdG8gdGhlbSB3YXMgdW5kZWZpbmVkLCBhbmQgdGhlIGN1cnJlbnQgc3RhdGUgZm9yIGFueVxuICogdW5yZWNvZ25pemVkIGFjdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgcmVkdWNlciBmdW5jdGlvbiB0aGF0IGludm9rZXMgZXZlcnkgcmVkdWNlciBpbnNpZGUgdGhlXG4gKiBwYXNzZWQgb2JqZWN0LCBhbmQgYnVpbGRzIGEgc3RhdGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgc2hhcGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21iaW5lUmVkdWNlcnMocmVkdWNlcnMpIHtcbiAgdmFyIHJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMocmVkdWNlcnMpO1xuICB2YXIgZmluYWxSZWR1Y2VycyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVkdWNlcktleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gcmVkdWNlcktleXNbaV07XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB3YXJuaW5nKFwiTm8gcmVkdWNlciBwcm92aWRlZCBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlZHVjZXJzW2tleV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGZpbmFsUmVkdWNlcnNba2V5XSA9IHJlZHVjZXJzW2tleV07XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpbmFsUmVkdWNlcktleXMgPSBPYmplY3Qua2V5cyhmaW5hbFJlZHVjZXJzKTsgLy8gVGhpcyBpcyB1c2VkIHRvIG1ha2Ugc3VyZSB3ZSBkb24ndCB3YXJuIGFib3V0IHRoZSBzYW1lXG4gIC8vIGtleXMgbXVsdGlwbGUgdGltZXMuXG5cbiAgdmFyIHVuZXhwZWN0ZWRLZXlDYWNoZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZSA9IHt9O1xuICB9XG5cbiAgdmFyIHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG5cbiAgdHJ5IHtcbiAgICBhc3NlcnRSZWR1Y2VyU2hhcGUoZmluYWxSZWR1Y2Vycyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzaGFwZUFzc2VydGlvbkVycm9yID0gZTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBjb21iaW5hdGlvbihzdGF0ZSwgYWN0aW9uKSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0ge307XG4gICAgfVxuXG4gICAgaWYgKHNoYXBlQXNzZXJ0aW9uRXJyb3IpIHtcbiAgICAgIHRocm93IHNoYXBlQXNzZXJ0aW9uRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciB3YXJuaW5nTWVzc2FnZSA9IGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2Uoc3RhdGUsIGZpbmFsUmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKTtcblxuICAgICAgaWYgKHdhcm5pbmdNZXNzYWdlKSB7XG4gICAgICAgIHdhcm5pbmcod2FybmluZ01lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHt9O1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2tleSA9IGZpbmFsUmVkdWNlcktleXNbX2ldO1xuICAgICAgdmFyIHJlZHVjZXIgPSBmaW5hbFJlZHVjZXJzW19rZXldO1xuICAgICAgdmFyIHByZXZpb3VzU3RhdGVGb3JLZXkgPSBzdGF0ZVtfa2V5XTtcbiAgICAgIHZhciBuZXh0U3RhdGVGb3JLZXkgPSByZWR1Y2VyKHByZXZpb3VzU3RhdGVGb3JLZXksIGFjdGlvbik7XG5cbiAgICAgIGlmICh0eXBlb2YgbmV4dFN0YXRlRm9yS2V5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YXIgYWN0aW9uVHlwZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIiA/IGZvcm1hdFByb2RFcnJvck1lc3NhZ2UoMTQpIDogXCJXaGVuIGNhbGxlZCB3aXRoIGFuIGFjdGlvbiBvZiB0eXBlIFwiICsgKGFjdGlvblR5cGUgPyBcIlxcXCJcIiArIFN0cmluZyhhY3Rpb25UeXBlKSArIFwiXFxcIlwiIDogJyh1bmtub3duIHR5cGUpJykgKyBcIiwgdGhlIHNsaWNlIHJlZHVjZXIgZm9yIGtleSBcXFwiXCIgKyBfa2V5ICsgXCJcXFwiIHJldHVybmVkIHVuZGVmaW5lZC4gXCIgKyBcIlRvIGlnbm9yZSBhbiBhY3Rpb24sIHlvdSBtdXN0IGV4cGxpY2l0bHkgcmV0dXJuIHRoZSBwcmV2aW91cyBzdGF0ZS4gXCIgKyBcIklmIHlvdSB3YW50IHRoaXMgcmVkdWNlciB0byBob2xkIG5vIHZhbHVlLCB5b3UgY2FuIHJldHVybiBudWxsIGluc3RlYWQgb2YgdW5kZWZpbmVkLlwiKTtcbiAgICAgIH1cblxuICAgICAgbmV4dFN0YXRlW19rZXldID0gbmV4dFN0YXRlRm9yS2V5O1xuICAgICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgbmV4dFN0YXRlRm9yS2V5ICE9PSBwcmV2aW91c1N0YXRlRm9yS2V5O1xuICAgIH1cblxuICAgIGhhc0NoYW5nZWQgPSBoYXNDaGFuZ2VkIHx8IGZpbmFsUmVkdWNlcktleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhzdGF0ZSkubGVuZ3RoO1xuICAgIHJldHVybiBoYXNDaGFuZ2VkID8gbmV4dFN0YXRlIDogc3RhdGU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3IsIGRpc3BhdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoKGFjdGlvbkNyZWF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG4vKipcbiAqIFR1cm5zIGFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgYXJlIGFjdGlvbiBjcmVhdG9ycywgaW50byBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUga2V5cywgYnV0IHdpdGggZXZlcnkgZnVuY3Rpb24gd3JhcHBlZCBpbnRvIGEgYGRpc3BhdGNoYCBjYWxsIHNvIHRoZXlcbiAqIG1heSBiZSBpbnZva2VkIGRpcmVjdGx5LiBUaGlzIGlzIGp1c3QgYSBjb252ZW5pZW5jZSBtZXRob2QsIGFzIHlvdSBjYW4gY2FsbFxuICogYHN0b3JlLmRpc3BhdGNoKE15QWN0aW9uQ3JlYXRvcnMuZG9Tb21ldGhpbmcoKSlgIHlvdXJzZWxmIGp1c3QgZmluZS5cbiAqXG4gKiBGb3IgY29udmVuaWVuY2UsIHlvdSBjYW4gYWxzbyBwYXNzIGFuIGFjdGlvbiBjcmVhdG9yIGFzIHRoZSBmaXJzdCBhcmd1bWVudCxcbiAqIGFuZCBnZXQgYSBkaXNwYXRjaCB3cmFwcGVkIGZ1bmN0aW9uIGluIHJldHVybi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufE9iamVjdH0gYWN0aW9uQ3JlYXRvcnMgQW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uXG4gKiBjcmVhdG9yIGZ1bmN0aW9ucy4gT25lIGhhbmR5IHdheSB0byBvYnRhaW4gaXQgaXMgdG8gdXNlIEVTNiBgaW1wb3J0ICogYXNgXG4gKiBzeW50YXguIFlvdSBtYXkgYWxzbyBwYXNzIGEgc2luZ2xlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIFRoZSBgZGlzcGF0Y2hgIGZ1bmN0aW9uIGF2YWlsYWJsZSBvbiB5b3VyIFJlZHV4XG4gKiBzdG9yZS5cbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBUaGUgb2JqZWN0IG1pbWlja2luZyB0aGUgb3JpZ2luYWwgb2JqZWN0LCBidXQgd2l0aFxuICogZXZlcnkgYWN0aW9uIGNyZWF0b3Igd3JhcHBlZCBpbnRvIHRoZSBgZGlzcGF0Y2hgIGNhbGwuIElmIHlvdSBwYXNzZWQgYVxuICogZnVuY3Rpb24gYXMgYGFjdGlvbkNyZWF0b3JzYCwgdGhlIHJldHVybiB2YWx1ZSB3aWxsIGFsc28gYmUgYSBzaW5nbGVcbiAqIGZ1bmN0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3JzKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCkge1xuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGJpbmRBY3Rpb25DcmVhdG9yKGFjdGlvbkNyZWF0b3JzLCBkaXNwYXRjaCk7XG4gIH1cblxuICBpZiAodHlwZW9mIGFjdGlvbkNyZWF0b3JzICE9PSAnb2JqZWN0JyB8fCBhY3Rpb25DcmVhdG9ycyA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gXCJwcm9kdWN0aW9uXCIgPyBmb3JtYXRQcm9kRXJyb3JNZXNzYWdlKDE2KSA6IFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBidXQgaW5zdGVhZCByZWNlaXZlZDogJ1wiICsga2luZE9mKGFjdGlvbkNyZWF0b3JzKSArIFwiJy4gXCIgKyBcIkRpZCB5b3Ugd3JpdGUgXFxcImltcG9ydCBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIiBpbnN0ZWFkIG9mIFxcXCJpbXBvcnQgKiBhcyBBY3Rpb25DcmVhdG9ycyBmcm9tXFxcIj9cIik7XG4gIH1cblxuICB2YXIgYm91bmRBY3Rpb25DcmVhdG9ycyA9IHt9O1xuXG4gIGZvciAodmFyIGtleSBpbiBhY3Rpb25DcmVhdG9ycykge1xuICAgIHZhciBhY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvcnNba2V5XTtcblxuICAgIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYm91bmRBY3Rpb25DcmVhdG9yc1trZXldID0gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBib3VuZEFjdGlvbkNyZWF0b3JzO1xufVxuXG4vKipcbiAqIENvbXBvc2VzIHNpbmdsZS1hcmd1bWVudCBmdW5jdGlvbnMgZnJvbSByaWdodCB0byBsZWZ0LiBUaGUgcmlnaHRtb3N0XG4gKiBmdW5jdGlvbiBjYW4gdGFrZSBtdWx0aXBsZSBhcmd1bWVudHMgYXMgaXQgcHJvdmlkZXMgdGhlIHNpZ25hdHVyZSBmb3JcbiAqIHRoZSByZXN1bHRpbmcgY29tcG9zaXRlIGZ1bmN0aW9uLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IGZ1bmNzIFRoZSBmdW5jdGlvbnMgdG8gY29tcG9zZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBmdW5jdGlvbiBvYnRhaW5lZCBieSBjb21wb3NpbmcgdGhlIGFyZ3VtZW50IGZ1bmN0aW9uc1xuICogZnJvbSByaWdodCB0byBsZWZ0LiBGb3IgZXhhbXBsZSwgY29tcG9zZShmLCBnLCBoKSBpcyBpZGVudGljYWwgdG8gZG9pbmdcbiAqICguLi5hcmdzKSA9PiBmKGcoaCguLi5hcmdzKSkpLlxuICovXG5mdW5jdGlvbiBjb21wb3NlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmc7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChmdW5jcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZnVuY3NbMF07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhKGIuYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpKTtcbiAgICB9O1xuICB9KTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RvcmUgZW5oYW5jZXIgdGhhdCBhcHBsaWVzIG1pZGRsZXdhcmUgdG8gdGhlIGRpc3BhdGNoIG1ldGhvZFxuICogb2YgdGhlIFJlZHV4IHN0b3JlLiBUaGlzIGlzIGhhbmR5IGZvciBhIHZhcmlldHkgb2YgdGFza3MsIHN1Y2ggYXMgZXhwcmVzc2luZ1xuICogYXN5bmNocm9ub3VzIGFjdGlvbnMgaW4gYSBjb25jaXNlIG1hbm5lciwgb3IgbG9nZ2luZyBldmVyeSBhY3Rpb24gcGF5bG9hZC5cbiAqXG4gKiBTZWUgYHJlZHV4LXRodW5rYCBwYWNrYWdlIGFzIGFuIGV4YW1wbGUgb2YgdGhlIFJlZHV4IG1pZGRsZXdhcmUuXG4gKlxuICogQmVjYXVzZSBtaWRkbGV3YXJlIGlzIHBvdGVudGlhbGx5IGFzeW5jaHJvbm91cywgdGhpcyBzaG91bGQgYmUgdGhlIGZpcnN0XG4gKiBzdG9yZSBlbmhhbmNlciBpbiB0aGUgY29tcG9zaXRpb24gY2hhaW4uXG4gKlxuICogTm90ZSB0aGF0IGVhY2ggbWlkZGxld2FyZSB3aWxsIGJlIGdpdmVuIHRoZSBgZGlzcGF0Y2hgIGFuZCBgZ2V0U3RhdGVgIGZ1bmN0aW9uc1xuICogYXMgbmFtZWQgYXJndW1lbnRzLlxuICpcbiAqIEBwYXJhbSB7Li4uRnVuY3Rpb259IG1pZGRsZXdhcmVzIFRoZSBtaWRkbGV3YXJlIGNoYWluIHRvIGJlIGFwcGxpZWQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgc3RvcmUgZW5oYW5jZXIgYXBwbHlpbmcgdGhlIG1pZGRsZXdhcmUuXG4gKi9cblxuZnVuY3Rpb24gYXBwbHlNaWRkbGV3YXJlKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgbWlkZGxld2FyZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgbWlkZGxld2FyZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGNyZWF0ZVN0b3JlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZSA9IGNyZWF0ZVN0b3JlLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcblxuICAgICAgdmFyIF9kaXNwYXRjaCA9IGZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09IFwicHJvZHVjdGlvblwiID8gZm9ybWF0UHJvZEVycm9yTWVzc2FnZSgxNSkgOiAnRGlzcGF0Y2hpbmcgd2hpbGUgY29uc3RydWN0aW5nIHlvdXIgbWlkZGxld2FyZSBpcyBub3QgYWxsb3dlZC4gJyArICdPdGhlciBtaWRkbGV3YXJlIHdvdWxkIG5vdCBiZSBhcHBsaWVkIHRvIHRoaXMgZGlzcGF0Y2guJyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgbWlkZGxld2FyZUFQSSA9IHtcbiAgICAgICAgZ2V0U3RhdGU6IHN0b3JlLmdldFN0YXRlLFxuICAgICAgICBkaXNwYXRjaDogZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gICAgICAgICAgcmV0dXJuIF9kaXNwYXRjaC5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgY2hhaW4gPSBtaWRkbGV3YXJlcy5tYXAoZnVuY3Rpb24gKG1pZGRsZXdhcmUpIHtcbiAgICAgICAgcmV0dXJuIG1pZGRsZXdhcmUobWlkZGxld2FyZUFQSSk7XG4gICAgICB9KTtcbiAgICAgIF9kaXNwYXRjaCA9IGNvbXBvc2UuYXBwbHkodm9pZCAwLCBjaGFpbikoc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RvcmUpLCB7fSwge1xuICAgICAgICBkaXNwYXRjaDogX2Rpc3BhdGNoXG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgeyBBY3Rpb25UeXBlcyBhcyBfX0RPX05PVF9VU0VfX0FjdGlvblR5cGVzLCBhcHBseU1pZGRsZXdhcmUsIGJpbmRBY3Rpb25DcmVhdG9ycywgY29tYmluZVJlZHVjZXJzLCBjb21wb3NlLCBjcmVhdGVTdG9yZSwgbGVnYWN5X2NyZWF0ZVN0b3JlIH07XG4iLCIvKiogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBwb3RlbnRpYWwgXCJleHRyYSBhcmd1bWVudFwiIHZhbHVlIHRvIGJlIGluamVjdGVkIGxhdGVyLFxyXG4gKiBhbmQgcmV0dXJucyBhbiBpbnN0YW5jZSBvZiB0aGUgdGh1bmsgbWlkZGxld2FyZSB0aGF0IHVzZXMgdGhhdCB2YWx1ZVxyXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIC8vIFN0YW5kYXJkIFJlZHV4IG1pZGRsZXdhcmUgZGVmaW5pdGlvbiBwYXR0ZXJuOlxuICAvLyBTZWU6IGh0dHBzOi8vcmVkdXguanMub3JnL3R1dG9yaWFscy9mdW5kYW1lbnRhbHMvcGFydC00LXN0b3JlI3dyaXRpbmctY3VzdG9tLW1pZGRsZXdhcmVcbiAgdmFyIG1pZGRsZXdhcmUgPSBmdW5jdGlvbiBtaWRkbGV3YXJlKF9yZWYpIHtcbiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuICAgICAgICBnZXRTdGF0ZSA9IF9yZWYuZ2V0U3RhdGU7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAvLyBUaGUgdGh1bmsgbWlkZGxld2FyZSBsb29rcyBmb3IgYW55IGZ1bmN0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIGBzdG9yZS5kaXNwYXRjaGAuXG4gICAgICAgIC8vIElmIHRoaXMgXCJhY3Rpb25cIiBpcyByZWFsbHkgYSBmdW5jdGlvbiwgY2FsbCBpdCBhbmQgcmV0dXJuIHRoZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gSW5qZWN0IHRoZSBzdG9yZSdzIGBkaXNwYXRjaGAgYW5kIGBnZXRTdGF0ZWAgbWV0aG9kcywgYXMgd2VsbCBhcyBhbnkgXCJleHRyYSBhcmdcIlxuICAgICAgICAgIHJldHVybiBhY3Rpb24oZGlzcGF0Y2gsIGdldFN0YXRlLCBleHRyYUFyZ3VtZW50KTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHBhc3MgdGhlIGFjdGlvbiBkb3duIHRoZSBtaWRkbGV3YXJlIGNoYWluIGFzIHVzdWFsXG5cblxuICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgfTtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBtaWRkbGV3YXJlO1xufVxuXG52YXIgdGh1bmsgPSBjcmVhdGVUaHVua01pZGRsZXdhcmUoKTsgLy8gQXR0YWNoIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHNvIHVzZXJzIGNhbiBjcmVhdGUgYSBjdXN0b21pemVkIHZlcnNpb25cbi8vIHdpdGggd2hhdGV2ZXIgXCJleHRyYSBhcmdcIiB0aGV5IHdhbnQgdG8gaW5qZWN0IGludG8gdGhlaXIgdGh1bmtzXG5cbnRodW5rLndpdGhFeHRyYUFyZ3VtZW50ID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlO1xuZXhwb3J0IGRlZmF1bHQgdGh1bms7IiwiLyoqXG4gKiBNSVQgTGljZW5zZVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgTGVlIEJ5cm9uIGFuZCBvdGhlciBjb250cmlidXRvcnMuXG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsXG4gKiBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIERFTEVURSA9ICdkZWxldGUnO1xuXG4vLyBDb25zdGFudHMgZGVzY3JpYmluZyB0aGUgc2l6ZSBvZiB0cmllIG5vZGVzLlxudmFyIFNISUZUID0gNTsgLy8gUmVzdWx0ZWQgaW4gYmVzdCBwZXJmb3JtYW5jZSBhZnRlciBfX19fX18/XG52YXIgU0laRSA9IDEgPDwgU0hJRlQ7XG52YXIgTUFTSyA9IFNJWkUgLSAxO1xuXG4vLyBBIGNvbnNpc3RlbnQgc2hhcmVkIHZhbHVlIHJlcHJlc2VudGluZyBcIm5vdCBzZXRcIiB3aGljaCBlcXVhbHMgbm90aGluZyBvdGhlclxuLy8gdGhhbiBpdHNlbGYsIGFuZCBub3RoaW5nIHRoYXQgY291bGQgYmUgcHJvdmlkZWQgZXh0ZXJuYWxseS5cbnZhciBOT1RfU0VUID0ge307XG5cbi8vIEJvb2xlYW4gcmVmZXJlbmNlcywgUm91Z2ggZXF1aXZhbGVudCBvZiBgYm9vbCAmYC5cbmZ1bmN0aW9uIE1ha2VSZWYoKSB7XG4gIHJldHVybiB7IHZhbHVlOiBmYWxzZSB9O1xufVxuXG5mdW5jdGlvbiBTZXRSZWYocmVmKSB7XG4gIGlmIChyZWYpIHtcbiAgICByZWYudmFsdWUgPSB0cnVlO1xuICB9XG59XG5cbi8vIEEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhIHZhbHVlIHJlcHJlc2VudGluZyBhbiBcIm93bmVyXCIgZm9yIHRyYW5zaWVudCB3cml0ZXNcbi8vIHRvIHRyaWVzLiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgb25seSBldmVyIGVxdWFsIGl0c2VsZiwgYW5kIHdpbGwgbm90IGVxdWFsXG4vLyB0aGUgcmV0dXJuIG9mIGFueSBzdWJzZXF1ZW50IGNhbGwgb2YgdGhpcyBmdW5jdGlvbi5cbmZ1bmN0aW9uIE93bmVySUQoKSB7fVxuXG5mdW5jdGlvbiBlbnN1cmVTaXplKGl0ZXIpIHtcbiAgaWYgKGl0ZXIuc2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaXRlci5zaXplID0gaXRlci5fX2l0ZXJhdGUocmV0dXJuVHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIGl0ZXIuc2l6ZTtcbn1cblxuZnVuY3Rpb24gd3JhcEluZGV4KGl0ZXIsIGluZGV4KSB7XG4gIC8vIFRoaXMgaW1wbGVtZW50cyBcImlzIGFycmF5IGluZGV4XCIgd2hpY2ggdGhlIEVDTUFTdHJpbmcgc3BlYyBkZWZpbmVzIGFzOlxuICAvL1xuICAvLyAgICAgQSBTdHJpbmcgcHJvcGVydHkgbmFtZSBQIGlzIGFuIGFycmF5IGluZGV4IGlmIGFuZCBvbmx5IGlmXG4gIC8vICAgICBUb1N0cmluZyhUb1VpbnQzMihQKSkgaXMgZXF1YWwgdG8gUCBhbmQgVG9VaW50MzIoUCkgaXMgbm90IGVxdWFsXG4gIC8vICAgICB0byAyXjMy4oiSMS5cbiAgLy9cbiAgLy8gaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWFycmF5LWV4b3RpYy1vYmplY3RzXG4gIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInKSB7XG4gICAgdmFyIHVpbnQzMkluZGV4ID0gaW5kZXggPj4+IDA7IC8vIE4gPj4+IDAgaXMgc2hvcnRoYW5kIGZvciBUb1VpbnQzMlxuICAgIGlmICgnJyArIHVpbnQzMkluZGV4ICE9PSBpbmRleCB8fCB1aW50MzJJbmRleCA9PT0gNDI5NDk2NzI5NSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgaW5kZXggPSB1aW50MzJJbmRleDtcbiAgfVxuICByZXR1cm4gaW5kZXggPCAwID8gZW5zdXJlU2l6ZShpdGVyKSArIGluZGV4IDogaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiB3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpIHtcbiAgcmV0dXJuIChcbiAgICAoKGJlZ2luID09PSAwICYmICFpc05lZyhiZWdpbikpIHx8XG4gICAgICAoc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGJlZ2luIDw9IC1zaXplKSkgJiZcbiAgICAoZW5kID09PSB1bmRlZmluZWQgfHwgKHNpemUgIT09IHVuZGVmaW5lZCAmJiBlbmQgPj0gc2l6ZSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSkge1xuICByZXR1cm4gcmVzb2x2ZUluZGV4KGJlZ2luLCBzaXplLCAwKTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUVuZChlbmQsIHNpemUpIHtcbiAgcmV0dXJuIHJlc29sdmVJbmRleChlbmQsIHNpemUsIHNpemUpO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5kZXgoaW5kZXgsIHNpemUsIGRlZmF1bHRJbmRleCkge1xuICAvLyBTYW5pdGl6ZSBpbmRpY2VzIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICByZXR1cm4gaW5kZXggPT09IHVuZGVmaW5lZFxuICAgID8gZGVmYXVsdEluZGV4XG4gICAgOiBpc05lZyhpbmRleClcbiAgICA/IHNpemUgPT09IEluZmluaXR5XG4gICAgICA/IHNpemVcbiAgICAgIDogTWF0aC5tYXgoMCwgc2l6ZSArIGluZGV4KSB8IDBcbiAgICA6IHNpemUgPT09IHVuZGVmaW5lZCB8fCBzaXplID09PSBpbmRleFxuICAgID8gaW5kZXhcbiAgICA6IE1hdGgubWluKHNpemUsIGluZGV4KSB8IDA7XG59XG5cbmZ1bmN0aW9uIGlzTmVnKHZhbHVlKSB7XG4gIC8vIEFjY291bnQgZm9yIC0wIHdoaWNoIGlzIG5lZ2F0aXZlLCBidXQgbm90IGxlc3MgdGhhbiAwLlxuICByZXR1cm4gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPT09IC1JbmZpbml0eSk7XG59XG5cbnZhciBJU19DT0xMRUNUSU9OX1NZTUJPTCA9ICdAQF9fSU1NVVRBQkxFX0lURVJBQkxFX19AQCc7XG5cbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihtYXliZUNvbGxlY3Rpb24pIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVDb2xsZWN0aW9uICYmIG1heWJlQ29sbGVjdGlvbltJU19DT0xMRUNUSU9OX1NZTUJPTF0pO1xufVxuXG52YXIgSVNfS0VZRURfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfS0VZRURfX0BAJztcblxuZnVuY3Rpb24gaXNLZXllZChtYXliZUtleWVkKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlS2V5ZWQgJiYgbWF5YmVLZXllZFtJU19LRVlFRF9TWU1CT0xdKTtcbn1cblxudmFyIElTX0lOREVYRURfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfSU5ERVhFRF9fQEAnO1xuXG5mdW5jdGlvbiBpc0luZGV4ZWQobWF5YmVJbmRleGVkKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlSW5kZXhlZCAmJiBtYXliZUluZGV4ZWRbSVNfSU5ERVhFRF9TWU1CT0xdKTtcbn1cblxuZnVuY3Rpb24gaXNBc3NvY2lhdGl2ZShtYXliZUFzc29jaWF0aXZlKSB7XG4gIHJldHVybiBpc0tleWVkKG1heWJlQXNzb2NpYXRpdmUpIHx8IGlzSW5kZXhlZChtYXliZUFzc29jaWF0aXZlKTtcbn1cblxudmFyIENvbGxlY3Rpb24gPSBmdW5jdGlvbiBDb2xsZWN0aW9uKHZhbHVlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgcmV0dXJuIGlzQ29sbGVjdGlvbih2YWx1ZSkgPyB2YWx1ZSA6IFNlcSh2YWx1ZSk7XG59O1xuXG52YXIgS2V5ZWRDb2xsZWN0aW9uID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoQ29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBLZXllZENvbGxlY3Rpb24odmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIGlzS2V5ZWQodmFsdWUpID8gdmFsdWUgOiBLZXllZFNlcSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIENvbGxlY3Rpb24gKSBLZXllZENvbGxlY3Rpb24uX19wcm90b19fID0gQ29sbGVjdGlvbjtcbiAgS2V5ZWRDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgS2V5ZWRDb2xsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEtleWVkQ29sbGVjdGlvbjtcblxuICByZXR1cm4gS2V5ZWRDb2xsZWN0aW9uO1xufShDb2xsZWN0aW9uKSk7XG5cbnZhciBJbmRleGVkQ29sbGVjdGlvbiA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKENvbGxlY3Rpb24pIHtcbiAgZnVuY3Rpb24gSW5kZXhlZENvbGxlY3Rpb24odmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIGlzSW5kZXhlZCh2YWx1ZSkgPyB2YWx1ZSA6IEluZGV4ZWRTZXEodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBDb2xsZWN0aW9uICkgSW5kZXhlZENvbGxlY3Rpb24uX19wcm90b19fID0gQ29sbGVjdGlvbjtcbiAgSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZSApO1xuICBJbmRleGVkQ29sbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBJbmRleGVkQ29sbGVjdGlvbjtcblxuICByZXR1cm4gSW5kZXhlZENvbGxlY3Rpb247XG59KENvbGxlY3Rpb24pKTtcblxudmFyIFNldENvbGxlY3Rpb24gPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChDb2xsZWN0aW9uKSB7XG4gIGZ1bmN0aW9uIFNldENvbGxlY3Rpb24odmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIGlzQ29sbGVjdGlvbih2YWx1ZSkgJiYgIWlzQXNzb2NpYXRpdmUodmFsdWUpID8gdmFsdWUgOiBTZXRTZXEodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBDb2xsZWN0aW9uICkgU2V0Q29sbGVjdGlvbi5fX3Byb3RvX18gPSBDb2xsZWN0aW9uO1xuICBTZXRDb2xsZWN0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXRDb2xsZWN0aW9uO1xuXG4gIHJldHVybiBTZXRDb2xsZWN0aW9uO1xufShDb2xsZWN0aW9uKSk7XG5cbkNvbGxlY3Rpb24uS2V5ZWQgPSBLZXllZENvbGxlY3Rpb247XG5Db2xsZWN0aW9uLkluZGV4ZWQgPSBJbmRleGVkQ29sbGVjdGlvbjtcbkNvbGxlY3Rpb24uU2V0ID0gU2V0Q29sbGVjdGlvbjtcblxudmFyIElTX1NFUV9TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9TRVFfX0BAJztcblxuZnVuY3Rpb24gaXNTZXEobWF5YmVTZXEpIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVTZXEgJiYgbWF5YmVTZXFbSVNfU0VRX1NZTUJPTF0pO1xufVxuXG52YXIgSVNfUkVDT1JEX1NZTUJPTCA9ICdAQF9fSU1NVVRBQkxFX1JFQ09SRF9fQEAnO1xuXG5mdW5jdGlvbiBpc1JlY29yZChtYXliZVJlY29yZCkge1xuICByZXR1cm4gQm9vbGVhbihtYXliZVJlY29yZCAmJiBtYXliZVJlY29yZFtJU19SRUNPUkRfU1lNQk9MXSk7XG59XG5cbmZ1bmN0aW9uIGlzSW1tdXRhYmxlKG1heWJlSW1tdXRhYmxlKSB7XG4gIHJldHVybiBpc0NvbGxlY3Rpb24obWF5YmVJbW11dGFibGUpIHx8IGlzUmVjb3JkKG1heWJlSW1tdXRhYmxlKTtcbn1cblxudmFyIElTX09SREVSRURfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfT1JERVJFRF9fQEAnO1xuXG5mdW5jdGlvbiBpc09yZGVyZWQobWF5YmVPcmRlcmVkKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlT3JkZXJlZCAmJiBtYXliZU9yZGVyZWRbSVNfT1JERVJFRF9TWU1CT0xdKTtcbn1cblxudmFyIElURVJBVEVfS0VZUyA9IDA7XG52YXIgSVRFUkFURV9WQUxVRVMgPSAxO1xudmFyIElURVJBVEVfRU5UUklFUyA9IDI7XG5cbnZhciBSRUFMX0lURVJBVE9SX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuXG52YXIgSVRFUkFUT1JfU1lNQk9MID0gUkVBTF9JVEVSQVRPUl9TWU1CT0wgfHwgRkFVWF9JVEVSQVRPUl9TWU1CT0w7XG5cbnZhciBJdGVyYXRvciA9IGZ1bmN0aW9uIEl0ZXJhdG9yKG5leHQpIHtcbiAgdGhpcy5uZXh0ID0gbmV4dDtcbn07XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuICdbSXRlcmF0b3JdJztcbn07XG5cbkl0ZXJhdG9yLktFWVMgPSBJVEVSQVRFX0tFWVM7XG5JdGVyYXRvci5WQUxVRVMgPSBJVEVSQVRFX1ZBTFVFUztcbkl0ZXJhdG9yLkVOVFJJRVMgPSBJVEVSQVRFX0VOVFJJRVM7XG5cbkl0ZXJhdG9yLnByb3RvdHlwZS5pbnNwZWN0ID0gSXRlcmF0b3IucHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xufTtcbkl0ZXJhdG9yLnByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgaXRlcmF0b3JSZXN1bHQpIHtcbiAgdmFyIHZhbHVlID0gdHlwZSA9PT0gMCA/IGsgOiB0eXBlID09PSAxID8gdiA6IFtrLCB2XTtcbiAgaXRlcmF0b3JSZXN1bHRcbiAgICA/IChpdGVyYXRvclJlc3VsdC52YWx1ZSA9IHZhbHVlKVxuICAgIDogKGl0ZXJhdG9yUmVzdWx0ID0ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgfSk7XG4gIHJldHVybiBpdGVyYXRvclJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXRlcmF0b3JEb25lKCkge1xuICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG59XG5cbmZ1bmN0aW9uIGhhc0l0ZXJhdG9yKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkobWF5YmVJdGVyYWJsZSkpIHtcbiAgICAvLyBJRTExIHRyaWNrIGFzIGl0IGRvZXMgbm90IHN1cHBvcnQgYFN5bWJvbC5pdGVyYXRvcmBcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAhIWdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG59XG5cbmZ1bmN0aW9uIGlzSXRlcmF0b3IobWF5YmVJdGVyYXRvcikge1xuICByZXR1cm4gbWF5YmVJdGVyYXRvciAmJiB0eXBlb2YgbWF5YmVJdGVyYXRvci5uZXh0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBnZXRJdGVyYXRvcihpdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4oaXRlcmFibGUpO1xuICByZXR1cm4gaXRlcmF0b3JGbiAmJiBpdGVyYXRvckZuLmNhbGwoaXRlcmFibGUpO1xufVxuXG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKGl0ZXJhYmxlKSB7XG4gIHZhciBpdGVyYXRvckZuID1cbiAgICBpdGVyYWJsZSAmJlxuICAgICgoUkVBTF9JVEVSQVRPUl9TWU1CT0wgJiYgaXRlcmFibGVbUkVBTF9JVEVSQVRPUl9TWU1CT0xdKSB8fFxuICAgICAgaXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdKTtcbiAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm47XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFbnRyaWVzSXRlcmFibGUobWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG4gIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4gPT09IG1heWJlSXRlcmFibGUuZW50cmllcztcbn1cblxuZnVuY3Rpb24gaXNLZXlzSXRlcmFibGUobWF5YmVJdGVyYWJsZSkge1xuICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSk7XG4gIHJldHVybiBpdGVyYXRvckZuICYmIGl0ZXJhdG9yRm4gPT09IG1heWJlSXRlcmFibGUua2V5cztcbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgdmFsdWUgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZS5sZW5ndGgpICYmXG4gICAgdmFsdWUubGVuZ3RoID49IDAgJiZcbiAgICAodmFsdWUubGVuZ3RoID09PSAwXG4gICAgICA/IC8vIE9ubHkge2xlbmd0aDogMH0gaXMgY29uc2lkZXJlZCBBcnJheS1saWtlLlxuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAxXG4gICAgICA6IC8vIEFuIG9iamVjdCBpcyBvbmx5IEFycmF5LWxpa2UgaWYgaXQgaGFzIGEgcHJvcGVydHkgd2hlcmUgdGhlIGxhc3QgdmFsdWVcbiAgICAgICAgLy8gaW4gdGhlIGFycmF5LWxpa2UgbWF5IGJlIGZvdW5kICh3aGljaCBjb3VsZCBiZSB1bmRlZmluZWQpLlxuICAgICAgICB2YWx1ZS5oYXNPd25Qcm9wZXJ0eSh2YWx1ZS5sZW5ndGggLSAxKSlcbiAgKTtcbn1cblxudmFyIFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKENvbGxlY3Rpb24pIHtcbiAgZnVuY3Rpb24gU2VxKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsXG4gICAgICA/IGVtcHR5U2VxdWVuY2UoKVxuICAgICAgOiBpc0ltbXV0YWJsZSh2YWx1ZSlcbiAgICAgID8gdmFsdWUudG9TZXEoKVxuICAgICAgOiBzZXFGcm9tVmFsdWUodmFsdWUpO1xuICB9XG5cbiAgaWYgKCBDb2xsZWN0aW9uICkgU2VxLl9fcHJvdG9fXyA9IENvbGxlY3Rpb247XG4gIFNlcS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlICk7XG4gIFNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXE7XG5cbiAgU2VxLnByb3RvdHlwZS50b1NlcSA9IGZ1bmN0aW9uIHRvU2VxICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBTZXEucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ1NlcSB7JywgJ30nKTtcbiAgfTtcblxuICBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0ID0gZnVuY3Rpb24gY2FjaGVSZXN1bHQgKCkge1xuICAgIGlmICghdGhpcy5fY2FjaGUgJiYgdGhpcy5fX2l0ZXJhdGVVbmNhY2hlZCkge1xuICAgICAgdGhpcy5fY2FjaGUgPSB0aGlzLmVudHJ5U2VxKCkudG9BcnJheSgpO1xuICAgICAgdGhpcy5zaXplID0gdGhpcy5fY2FjaGUubGVuZ3RoO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBhYnN0cmFjdCBfX2l0ZXJhdGVVbmNhY2hlZChmbiwgcmV2ZXJzZSlcblxuICBTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgY2FjaGUgPSB0aGlzLl9jYWNoZTtcbiAgICBpZiAoY2FjaGUpIHtcbiAgICAgIHZhciBzaXplID0gY2FjaGUubGVuZ3RoO1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgd2hpbGUgKGkgIT09IHNpemUpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gY2FjaGVbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgICBpZiAoZm4oZW50cnlbMV0sIGVudHJ5WzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9faXRlcmF0ZVVuY2FjaGVkKGZuLCByZXZlcnNlKTtcbiAgfTtcblxuICAvLyBhYnN0cmFjdCBfX2l0ZXJhdG9yVW5jYWNoZWQodHlwZSwgcmV2ZXJzZSlcblxuICBTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGNhY2hlID0gdGhpcy5fY2FjaGU7XG4gICAgaWYgKGNhY2hlKSB7XG4gICAgICB2YXIgc2l6ZSA9IGNhY2hlLmxlbmd0aDtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaSA9PT0gc2l6ZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBjYWNoZVtyZXZlcnNlID8gc2l6ZSAtICsraSA6IGkrK107XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvclVuY2FjaGVkKHR5cGUsIHJldmVyc2UpO1xuICB9O1xuXG4gIHJldHVybiBTZXE7XG59KENvbGxlY3Rpb24pKTtcblxudmFyIEtleWVkU2VxID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU2VxKSB7XG4gIGZ1bmN0aW9uIEtleWVkU2VxKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsXG4gICAgICA/IGVtcHR5U2VxdWVuY2UoKS50b0tleWVkU2VxKClcbiAgICAgIDogaXNDb2xsZWN0aW9uKHZhbHVlKVxuICAgICAgPyBpc0tleWVkKHZhbHVlKVxuICAgICAgICA/IHZhbHVlLnRvU2VxKClcbiAgICAgICAgOiB2YWx1ZS5mcm9tRW50cnlTZXEoKVxuICAgICAgOiBpc1JlY29yZCh2YWx1ZSlcbiAgICAgID8gdmFsdWUudG9TZXEoKVxuICAgICAgOiBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIFNlcSApIEtleWVkU2VxLl9fcHJvdG9fXyA9IFNlcTtcbiAgS2V5ZWRTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU2VxICYmIFNlcS5wcm90b3R5cGUgKTtcbiAgS2V5ZWRTZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gS2V5ZWRTZXE7XG5cbiAgS2V5ZWRTZXEucHJvdG90eXBlLnRvS2V5ZWRTZXEgPSBmdW5jdGlvbiB0b0tleWVkU2VxICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gS2V5ZWRTZXE7XG59KFNlcSkpO1xuXG52YXIgSW5kZXhlZFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNlcSkge1xuICBmdW5jdGlvbiBJbmRleGVkU2VxKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsXG4gICAgICA/IGVtcHR5U2VxdWVuY2UoKVxuICAgICAgOiBpc0NvbGxlY3Rpb24odmFsdWUpXG4gICAgICA/IGlzS2V5ZWQodmFsdWUpXG4gICAgICAgID8gdmFsdWUuZW50cnlTZXEoKVxuICAgICAgICA6IHZhbHVlLnRvSW5kZXhlZFNlcSgpXG4gICAgICA6IGlzUmVjb3JkKHZhbHVlKVxuICAgICAgPyB2YWx1ZS50b1NlcSgpLmVudHJ5U2VxKClcbiAgICAgIDogaW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIH1cblxuICBpZiAoIFNlcSApIEluZGV4ZWRTZXEuX19wcm90b19fID0gU2VxO1xuICBJbmRleGVkU2VxLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNlcSAmJiBTZXEucHJvdG90eXBlICk7XG4gIEluZGV4ZWRTZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSW5kZXhlZFNlcTtcblxuICBJbmRleGVkU2VxLm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gSW5kZXhlZFNlcShhcmd1bWVudHMpO1xuICB9O1xuXG4gIEluZGV4ZWRTZXEucHJvdG90eXBlLnRvSW5kZXhlZFNlcSA9IGZ1bmN0aW9uIHRvSW5kZXhlZFNlcSAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgSW5kZXhlZFNlcS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnU2VxIFsnLCAnXScpO1xuICB9O1xuXG4gIHJldHVybiBJbmRleGVkU2VxO1xufShTZXEpKTtcblxudmFyIFNldFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNlcSkge1xuICBmdW5jdGlvbiBTZXRTZXEodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIChcbiAgICAgIGlzQ29sbGVjdGlvbih2YWx1ZSkgJiYgIWlzQXNzb2NpYXRpdmUodmFsdWUpID8gdmFsdWUgOiBJbmRleGVkU2VxKHZhbHVlKVxuICAgICkudG9TZXRTZXEoKTtcbiAgfVxuXG4gIGlmICggU2VxICkgU2V0U2VxLl9fcHJvdG9fXyA9IFNlcTtcbiAgU2V0U2VxLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNlcSAmJiBTZXEucHJvdG90eXBlICk7XG4gIFNldFNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTZXRTZXE7XG5cbiAgU2V0U2VxLm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gU2V0U2VxKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgU2V0U2VxLnByb3RvdHlwZS50b1NldFNlcSA9IGZ1bmN0aW9uIHRvU2V0U2VxICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gU2V0U2VxO1xufShTZXEpKTtcblxuU2VxLmlzU2VxID0gaXNTZXE7XG5TZXEuS2V5ZWQgPSBLZXllZFNlcTtcblNlcS5TZXQgPSBTZXRTZXE7XG5TZXEuSW5kZXhlZCA9IEluZGV4ZWRTZXE7XG5cblNlcS5wcm90b3R5cGVbSVNfU0VRX1NZTUJPTF0gPSB0cnVlO1xuXG4vLyAjcHJhZ21hIFJvb3QgU2VxdWVuY2VzXG5cbnZhciBBcnJheVNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEluZGV4ZWRTZXEpIHtcbiAgZnVuY3Rpb24gQXJyYXlTZXEoYXJyYXkpIHtcbiAgICB0aGlzLl9hcnJheSA9IGFycmF5O1xuICAgIHRoaXMuc2l6ZSA9IGFycmF5Lmxlbmd0aDtcbiAgfVxuXG4gIGlmICggSW5kZXhlZFNlcSApIEFycmF5U2VxLl9fcHJvdG9fXyA9IEluZGV4ZWRTZXE7XG4gIEFycmF5U2VxLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEluZGV4ZWRTZXEgJiYgSW5kZXhlZFNlcS5wcm90b3R5cGUgKTtcbiAgQXJyYXlTZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQXJyYXlTZXE7XG5cbiAgQXJyYXlTZXEucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKGluZGV4KSA/IHRoaXMuX2FycmF5W3dyYXBJbmRleCh0aGlzLCBpbmRleCldIDogbm90U2V0VmFsdWU7XG4gIH07XG5cbiAgQXJyYXlTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgYXJyYXkgPSB0aGlzLl9hcnJheTtcbiAgICB2YXIgc2l6ZSA9IGFycmF5Lmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgIT09IHNpemUpIHtcbiAgICAgIHZhciBpaSA9IHJldmVyc2UgPyBzaXplIC0gKytpIDogaSsrO1xuICAgICAgaWYgKGZuKGFycmF5W2lpXSwgaWksIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH07XG5cbiAgQXJyYXlTZXEucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGFycmF5ID0gdGhpcy5fYXJyYXk7XG4gICAgdmFyIHNpemUgPSBhcnJheS5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPT09IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGlpID0gcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKys7XG4gICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpaSwgYXJyYXlbaWldKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQXJyYXlTZXE7XG59KEluZGV4ZWRTZXEpKTtcblxudmFyIE9iamVjdFNlcSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEtleWVkU2VxKSB7XG4gIGZ1bmN0aW9uIE9iamVjdFNlcShvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCkuY29uY2F0KFxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSA6IFtdXG4gICAgKTtcbiAgICB0aGlzLl9vYmplY3QgPSBvYmplY3Q7XG4gICAgdGhpcy5fa2V5cyA9IGtleXM7XG4gICAgdGhpcy5zaXplID0ga2V5cy5sZW5ndGg7XG4gIH1cblxuICBpZiAoIEtleWVkU2VxICkgT2JqZWN0U2VxLl9fcHJvdG9fXyA9IEtleWVkU2VxO1xuICBPYmplY3RTZXEucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggS2V5ZWRTZXEgJiYgS2V5ZWRTZXEucHJvdG90eXBlICk7XG4gIE9iamVjdFNlcS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPYmplY3RTZXE7XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGtleSwgbm90U2V0VmFsdWUpIHtcbiAgICBpZiAobm90U2V0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fb2JqZWN0W2tleV07XG4gIH07XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMuX29iamVjdCwga2V5KTtcbiAgfTtcblxuICBPYmplY3RTZXEucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgb2JqZWN0ID0gdGhpcy5fb2JqZWN0O1xuICAgIHZhciBrZXlzID0gdGhpcy5fa2V5cztcbiAgICB2YXIgc2l6ZSA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSAhPT0gc2l6ZSkge1xuICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgaWYgKGZuKG9iamVjdFtrZXldLCBrZXksIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH07XG5cbiAgT2JqZWN0U2VxLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBvYmplY3QgPSB0aGlzLl9vYmplY3Q7XG4gICAgdmFyIGtleXMgPSB0aGlzLl9rZXlzO1xuICAgIHZhciBzaXplID0ga2V5cy5sZW5ndGg7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGkgPT09IHNpemUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IGtleXNbcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKytdO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwga2V5LCBvYmplY3Rba2V5XSk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE9iamVjdFNlcTtcbn0oS2V5ZWRTZXEpKTtcbk9iamVjdFNlcS5wcm90b3R5cGVbSVNfT1JERVJFRF9TWU1CT0xdID0gdHJ1ZTtcblxudmFyIENvbGxlY3Rpb25TZXEgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkU2VxKSB7XG4gIGZ1bmN0aW9uIENvbGxlY3Rpb25TZXEoY29sbGVjdGlvbikge1xuICAgIHRoaXMuX2NvbGxlY3Rpb24gPSBjb2xsZWN0aW9uO1xuICAgIHRoaXMuc2l6ZSA9IGNvbGxlY3Rpb24ubGVuZ3RoIHx8IGNvbGxlY3Rpb24uc2l6ZTtcbiAgfVxuXG4gIGlmICggSW5kZXhlZFNlcSApIENvbGxlY3Rpb25TZXEuX19wcm90b19fID0gSW5kZXhlZFNlcTtcbiAgQ29sbGVjdGlvblNlcS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkU2VxICYmIEluZGV4ZWRTZXEucHJvdG90eXBlICk7XG4gIENvbGxlY3Rpb25TZXEucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29sbGVjdGlvblNlcTtcblxuICBDb2xsZWN0aW9uU2VxLnByb3RvdHlwZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIF9faXRlcmF0ZVVuY2FjaGVkIChmbiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBjb2xsZWN0aW9uID0gdGhpcy5fY29sbGVjdGlvbjtcbiAgICB2YXIgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihjb2xsZWN0aW9uKTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgaWYgKGlzSXRlcmF0b3IoaXRlcmF0b3IpKSB7XG4gICAgICB2YXIgc3RlcDtcbiAgICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgaWYgKGZuKHN0ZXAudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgQ29sbGVjdGlvblNlcS5wcm90b3R5cGUuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gX19pdGVyYXRvclVuY2FjaGVkICh0eXBlLCByZXZlcnNlKSB7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzLl9jb2xsZWN0aW9uO1xuICAgIHZhciBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGNvbGxlY3Rpb24pO1xuICAgIGlmICghaXNJdGVyYXRvcihpdGVyYXRvcikpIHtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoaXRlcmF0b3JEb25lKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICByZXR1cm4gc3RlcC5kb25lID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQ29sbGVjdGlvblNlcTtcbn0oSW5kZXhlZFNlcSkpO1xuXG4vLyAjIHByYWdtYSBIZWxwZXIgZnVuY3Rpb25zXG5cbnZhciBFTVBUWV9TRVE7XG5cbmZ1bmN0aW9uIGVtcHR5U2VxdWVuY2UoKSB7XG4gIHJldHVybiBFTVBUWV9TRVEgfHwgKEVNUFRZX1NFUSA9IG5ldyBBcnJheVNlcShbXSkpO1xufVxuXG5mdW5jdGlvbiBrZXllZFNlcUZyb21WYWx1ZSh2YWx1ZSkge1xuICB2YXIgc2VxID0gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKTtcbiAgaWYgKHNlcSkge1xuICAgIHJldHVybiBzZXEuZnJvbUVudHJ5U2VxKCk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbmV3IE9iamVjdFNlcSh2YWx1ZSk7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAnRXhwZWN0ZWQgQXJyYXkgb3IgY29sbGVjdGlvbiBvYmplY3Qgb2YgW2ssIHZdIGVudHJpZXMsIG9yIGtleWVkIG9iamVjdDogJyArXG4gICAgICB2YWx1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBpbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gIHZhciBzZXEgPSBtYXliZUluZGV4ZWRTZXFGcm9tVmFsdWUodmFsdWUpO1xuICBpZiAoc2VxKSB7XG4gICAgcmV0dXJuIHNlcTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICdFeHBlY3RlZCBBcnJheSBvciBjb2xsZWN0aW9uIG9iamVjdCBvZiB2YWx1ZXM6ICcgKyB2YWx1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBzZXFGcm9tVmFsdWUodmFsdWUpIHtcbiAgdmFyIHNlcSA9IG1heWJlSW5kZXhlZFNlcUZyb21WYWx1ZSh2YWx1ZSk7XG4gIGlmIChzZXEpIHtcbiAgICByZXR1cm4gaXNFbnRyaWVzSXRlcmFibGUodmFsdWUpXG4gICAgICA/IHNlcS5mcm9tRW50cnlTZXEoKVxuICAgICAgOiBpc0tleXNJdGVyYWJsZSh2YWx1ZSlcbiAgICAgID8gc2VxLnRvU2V0U2VxKClcbiAgICAgIDogc2VxO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG5ldyBPYmplY3RTZXEodmFsdWUpO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ0V4cGVjdGVkIEFycmF5IG9yIGNvbGxlY3Rpb24gb2JqZWN0IG9mIHZhbHVlcywgb3Iga2V5ZWQgb2JqZWN0OiAnICsgdmFsdWVcbiAgKTtcbn1cblxuZnVuY3Rpb24gbWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlKHZhbHVlKSB7XG4gIHJldHVybiBpc0FycmF5TGlrZSh2YWx1ZSlcbiAgICA/IG5ldyBBcnJheVNlcSh2YWx1ZSlcbiAgICA6IGhhc0l0ZXJhdG9yKHZhbHVlKVxuICAgID8gbmV3IENvbGxlY3Rpb25TZXEodmFsdWUpXG4gICAgOiB1bmRlZmluZWQ7XG59XG5cbnZhciBJU19NQVBfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfTUFQX19AQCc7XG5cbmZ1bmN0aW9uIGlzTWFwKG1heWJlTWFwKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlTWFwICYmIG1heWJlTWFwW0lTX01BUF9TWU1CT0xdKTtcbn1cblxuZnVuY3Rpb24gaXNPcmRlcmVkTWFwKG1heWJlT3JkZXJlZE1hcCkge1xuICByZXR1cm4gaXNNYXAobWF5YmVPcmRlcmVkTWFwKSAmJiBpc09yZGVyZWQobWF5YmVPcmRlcmVkTWFwKTtcbn1cblxuZnVuY3Rpb24gaXNWYWx1ZU9iamVjdChtYXliZVZhbHVlKSB7XG4gIHJldHVybiBCb29sZWFuKFxuICAgIG1heWJlVmFsdWUgJiZcbiAgICAgIHR5cGVvZiBtYXliZVZhbHVlLmVxdWFscyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgdHlwZW9mIG1heWJlVmFsdWUuaGFzaENvZGUgPT09ICdmdW5jdGlvbidcbiAgKTtcbn1cblxuLyoqXG4gKiBBbiBleHRlbnNpb24gb2YgdGhlIFwic2FtZS12YWx1ZVwiIGFsZ29yaXRobSBhcyBbZGVzY3JpYmVkIGZvciB1c2UgYnkgRVM2IE1hcFxuICogYW5kIFNldF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvTWFwI0tleV9lcXVhbGl0eSlcbiAqXG4gKiBOYU4gaXMgY29uc2lkZXJlZCB0aGUgc2FtZSBhcyBOYU4sIGhvd2V2ZXIgLTAgYW5kIDAgYXJlIGNvbnNpZGVyZWQgdGhlIHNhbWVcbiAqIHZhbHVlLCB3aGljaCBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgYWxnb3JpdGhtIGRlc2NyaWJlZCBieVxuICogW2BPYmplY3QuaXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXMpLlxuICpcbiAqIFRoaXMgaXMgZXh0ZW5kZWQgZnVydGhlciB0byBhbGxvdyBPYmplY3RzIHRvIGRlc2NyaWJlIHRoZSB2YWx1ZXMgdGhleVxuICogcmVwcmVzZW50LCBieSB3YXkgb2YgYHZhbHVlT2ZgIG9yIGBlcXVhbHNgIChhbmQgYGhhc2hDb2RlYCkuXG4gKlxuICogTm90ZTogYmVjYXVzZSBvZiB0aGlzIGV4dGVuc2lvbiwgdGhlIGtleSBlcXVhbGl0eSBvZiBJbW11dGFibGUuTWFwIGFuZCB0aGVcbiAqIHZhbHVlIGVxdWFsaXR5IG9mIEltbXV0YWJsZS5TZXQgd2lsbCBkaWZmZXIgZnJvbSBFUzYgTWFwIGFuZCBTZXQuXG4gKlxuICogIyMjIERlZmluaW5nIGN1c3RvbSB2YWx1ZXNcbiAqXG4gKiBUaGUgZWFzaWVzdCB3YXkgdG8gZGVzY3JpYmUgdGhlIHZhbHVlIGFuIG9iamVjdCByZXByZXNlbnRzIGlzIGJ5IGltcGxlbWVudGluZ1xuICogYHZhbHVlT2ZgLiBGb3IgZXhhbXBsZSwgYERhdGVgIHJlcHJlc2VudHMgYSB2YWx1ZSBieSByZXR1cm5pbmcgYSB1bml4XG4gKiB0aW1lc3RhbXAgZm9yIGB2YWx1ZU9mYDpcbiAqXG4gKiAgICAgdmFyIGRhdGUxID0gbmV3IERhdGUoMTIzNDU2Nzg5MDAwMCk7IC8vIEZyaSBGZWIgMTMgMjAwOSAuLi5cbiAqICAgICB2YXIgZGF0ZTIgPSBuZXcgRGF0ZSgxMjM0NTY3ODkwMDAwKTtcbiAqICAgICBkYXRlMS52YWx1ZU9mKCk7IC8vIDEyMzQ1Njc4OTAwMDBcbiAqICAgICBhc3NlcnQoIGRhdGUxICE9PSBkYXRlMiApO1xuICogICAgIGFzc2VydCggSW1tdXRhYmxlLmlzKCBkYXRlMSwgZGF0ZTIgKSApO1xuICpcbiAqIE5vdGU6IG92ZXJyaWRpbmcgYHZhbHVlT2ZgIG1heSBoYXZlIG90aGVyIGltcGxpY2F0aW9ucyBpZiB5b3UgdXNlIHRoaXMgb2JqZWN0XG4gKiB3aGVyZSBKYXZhU2NyaXB0IGV4cGVjdHMgYSBwcmltaXRpdmUsIHN1Y2ggYXMgaW1wbGljaXQgc3RyaW5nIGNvZXJjaW9uLlxuICpcbiAqIEZvciBtb3JlIGNvbXBsZXggdHlwZXMsIGVzcGVjaWFsbHkgY29sbGVjdGlvbnMsIGltcGxlbWVudGluZyBgdmFsdWVPZmAgbWF5XG4gKiBub3QgYmUgcGVyZm9ybWFudC4gQW4gYWx0ZXJuYXRpdmUgaXMgdG8gaW1wbGVtZW50IGBlcXVhbHNgIGFuZCBgaGFzaENvZGVgLlxuICpcbiAqIGBlcXVhbHNgIHRha2VzIGFub3RoZXIgb2JqZWN0LCBwcmVzdW1hYmx5IG9mIHNpbWlsYXIgdHlwZSwgYW5kIHJldHVybnMgdHJ1ZVxuICogaWYgaXQgaXMgZXF1YWwuIEVxdWFsaXR5IGlzIHN5bW1ldHJpY2FsLCBzbyB0aGUgc2FtZSByZXN1bHQgc2hvdWxkIGJlXG4gKiByZXR1cm5lZCBpZiB0aGlzIGFuZCB0aGUgYXJndW1lbnQgYXJlIGZsaXBwZWQuXG4gKlxuICogICAgIGFzc2VydCggYS5lcXVhbHMoYikgPT09IGIuZXF1YWxzKGEpICk7XG4gKlxuICogYGhhc2hDb2RlYCByZXR1cm5zIGEgMzJiaXQgaW50ZWdlciBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvYmplY3Qgd2hpY2ggd2lsbFxuICogYmUgdXNlZCB0byBkZXRlcm1pbmUgaG93IHRvIHN0b3JlIHRoZSB2YWx1ZSBvYmplY3QgaW4gYSBNYXAgb3IgU2V0LiBZb3UgbXVzdFxuICogcHJvdmlkZSBib3RoIG9yIG5laXRoZXIgbWV0aG9kcywgb25lIG11c3Qgbm90IGV4aXN0IHdpdGhvdXQgdGhlIG90aGVyLlxuICpcbiAqIEFsc28sIGFuIGltcG9ydGFudCByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGVzZSBtZXRob2RzIG11c3QgYmUgdXBoZWxkOiBpZiB0d29cbiAqIHZhbHVlcyBhcmUgZXF1YWwsIHRoZXkgKm11c3QqIHJldHVybiB0aGUgc2FtZSBoYXNoQ29kZS4gSWYgdGhlIHZhbHVlcyBhcmUgbm90XG4gKiBlcXVhbCwgdGhleSBtaWdodCBoYXZlIHRoZSBzYW1lIGhhc2hDb2RlOyB0aGlzIGlzIGNhbGxlZCBhIGhhc2ggY29sbGlzaW9uLFxuICogYW5kIHdoaWxlIHVuZGVzaXJhYmxlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBpdCBpcyBhY2NlcHRhYmxlLlxuICpcbiAqICAgICBpZiAoYS5lcXVhbHMoYikpIHtcbiAqICAgICAgIGFzc2VydCggYS5oYXNoQ29kZSgpID09PSBiLmhhc2hDb2RlKCkgKTtcbiAqICAgICB9XG4gKlxuICogQWxsIEltbXV0YWJsZSBjb2xsZWN0aW9ucyBhcmUgVmFsdWUgT2JqZWN0czogdGhleSBpbXBsZW1lbnQgYGVxdWFscygpYFxuICogYW5kIGBoYXNoQ29kZSgpYC5cbiAqL1xuZnVuY3Rpb24gaXModmFsdWVBLCB2YWx1ZUIpIHtcbiAgaWYgKHZhbHVlQSA9PT0gdmFsdWVCIHx8ICh2YWx1ZUEgIT09IHZhbHVlQSAmJiB2YWx1ZUIgIT09IHZhbHVlQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIXZhbHVlQSB8fCAhdmFsdWVCKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWVBLnZhbHVlT2YgPT09ICdmdW5jdGlvbicgJiZcbiAgICB0eXBlb2YgdmFsdWVCLnZhbHVlT2YgPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgdmFsdWVBID0gdmFsdWVBLnZhbHVlT2YoKTtcbiAgICB2YWx1ZUIgPSB2YWx1ZUIudmFsdWVPZigpO1xuICAgIGlmICh2YWx1ZUEgPT09IHZhbHVlQiB8fCAodmFsdWVBICE9PSB2YWx1ZUEgJiYgdmFsdWVCICE9PSB2YWx1ZUIpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZUEgfHwgIXZhbHVlQikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gISEoXG4gICAgaXNWYWx1ZU9iamVjdCh2YWx1ZUEpICYmXG4gICAgaXNWYWx1ZU9iamVjdCh2YWx1ZUIpICYmXG4gICAgdmFsdWVBLmVxdWFscyh2YWx1ZUIpXG4gICk7XG59XG5cbnZhciBpbXVsID1cbiAgdHlwZW9mIE1hdGguaW11bCA9PT0gJ2Z1bmN0aW9uJyAmJiBNYXRoLmltdWwoMHhmZmZmZmZmZiwgMikgPT09IC0yXG4gICAgPyBNYXRoLmltdWxcbiAgICA6IGZ1bmN0aW9uIGltdWwoYSwgYikge1xuICAgICAgICBhIHw9IDA7IC8vIGludFxuICAgICAgICBiIHw9IDA7IC8vIGludFxuICAgICAgICB2YXIgYyA9IGEgJiAweGZmZmY7XG4gICAgICAgIHZhciBkID0gYiAmIDB4ZmZmZjtcbiAgICAgICAgLy8gU2hpZnQgYnkgMCBmaXhlcyB0aGUgc2lnbiBvbiB0aGUgaGlnaCBwYXJ0LlxuICAgICAgICByZXR1cm4gKGMgKiBkICsgKCgoKGEgPj4+IDE2KSAqIGQgKyBjICogKGIgPj4+IDE2KSkgPDwgMTYpID4+PiAwKSkgfCAwOyAvLyBpbnRcbiAgICAgIH07XG5cbi8vIHY4IGhhcyBhbiBvcHRpbWl6YXRpb24gZm9yIHN0b3JpbmcgMzEtYml0IHNpZ25lZCBudW1iZXJzLlxuLy8gVmFsdWVzIHdoaWNoIGhhdmUgZWl0aGVyIDAwIG9yIDExIGFzIHRoZSBoaWdoIG9yZGVyIGJpdHMgcXVhbGlmeS5cbi8vIFRoaXMgZnVuY3Rpb24gZHJvcHMgdGhlIGhpZ2hlc3Qgb3JkZXIgYml0IGluIGEgc2lnbmVkIG51bWJlciwgbWFpbnRhaW5pbmdcbi8vIHRoZSBzaWduIGJpdC5cbmZ1bmN0aW9uIHNtaShpMzIpIHtcbiAgcmV0dXJuICgoaTMyID4+PiAxKSAmIDB4NDAwMDAwMDApIHwgKGkzMiAmIDB4YmZmZmZmZmYpO1xufVxuXG52YXIgZGVmYXVsdFZhbHVlT2YgPSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2Y7XG5cbmZ1bmN0aW9uIGhhc2gobykge1xuICBpZiAobyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGhhc2hOdWxsaXNoKG8pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvLmhhc2hDb2RlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gRHJvcCBhbnkgaGlnaCBiaXRzIGZyb20gYWNjaWRlbnRhbGx5IGxvbmcgaGFzaCBjb2Rlcy5cbiAgICByZXR1cm4gc21pKG8uaGFzaENvZGUobykpO1xuICB9XG5cbiAgdmFyIHYgPSB2YWx1ZU9mKG8pO1xuXG4gIGlmICh2ID09IG51bGwpIHtcbiAgICByZXR1cm4gaGFzaE51bGxpc2godik7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAvLyBUaGUgaGFzaCB2YWx1ZXMgZm9yIGJ1aWx0LWluIGNvbnN0YW50cyBhcmUgYSAxIHZhbHVlIGZvciBlYWNoIDUtYnl0ZVxuICAgICAgLy8gc2hpZnQgcmVnaW9uIGV4cGVjdCBmb3IgdGhlIGZpcnN0LCB3aGljaCBlbmNvZGVzIHRoZSB2YWx1ZS4gVGhpc1xuICAgICAgLy8gcmVkdWNlcyB0aGUgb2RkcyBvZiBhIGhhc2ggY29sbGlzaW9uIGZvciB0aGVzZSBjb21tb24gdmFsdWVzLlxuICAgICAgcmV0dXJuIHYgPyAweDQyMTA4NDIxIDogMHg0MjEwODQyMDtcbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGhhc2hOdW1iZXIodik7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2Lmxlbmd0aCA+IFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU5cbiAgICAgICAgPyBjYWNoZWRIYXNoU3RyaW5nKHYpXG4gICAgICAgIDogaGFzaFN0cmluZyh2KTtcbiAgICBjYXNlICdvYmplY3QnOlxuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBoYXNoSlNPYmoodik7XG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIHJldHVybiBoYXNoU3ltYm9sKHYpO1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAodHlwZW9mIHYudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGhhc2hTdHJpbmcodi50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgdHlwZSAnICsgdHlwZW9mIHYgKyAnIGNhbm5vdCBiZSBoYXNoZWQuJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzaE51bGxpc2gobnVsbGlzaCkge1xuICByZXR1cm4gbnVsbGlzaCA9PT0gbnVsbCA/IDB4NDIxMDg0MjIgOiAvKiB1bmRlZmluZWQgKi8gMHg0MjEwODQyMztcbn1cblxuLy8gQ29tcHJlc3MgYXJiaXRyYXJpbHkgbGFyZ2UgbnVtYmVycyBpbnRvIHNtaSBoYXNoZXMuXG5mdW5jdGlvbiBoYXNoTnVtYmVyKG4pIHtcbiAgaWYgKG4gIT09IG4gfHwgbiA9PT0gSW5maW5pdHkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICB2YXIgaGFzaCA9IG4gfCAwO1xuICBpZiAoaGFzaCAhPT0gbikge1xuICAgIGhhc2ggXj0gbiAqIDB4ZmZmZmZmZmY7XG4gIH1cbiAgd2hpbGUgKG4gPiAweGZmZmZmZmZmKSB7XG4gICAgbiAvPSAweGZmZmZmZmZmO1xuICAgIGhhc2ggXj0gbjtcbiAgfVxuICByZXR1cm4gc21pKGhhc2gpO1xufVxuXG5mdW5jdGlvbiBjYWNoZWRIYXNoU3RyaW5nKHN0cmluZykge1xuICB2YXIgaGFzaGVkID0gc3RyaW5nSGFzaENhY2hlW3N0cmluZ107XG4gIGlmIChoYXNoZWQgPT09IHVuZGVmaW5lZCkge1xuICAgIGhhc2hlZCA9IGhhc2hTdHJpbmcoc3RyaW5nKTtcbiAgICBpZiAoU1RSSU5HX0hBU0hfQ0FDSEVfU0laRSA9PT0gU1RSSU5HX0hBU0hfQ0FDSEVfTUFYX1NJWkUpIHtcbiAgICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUgPSAwO1xuICAgICAgc3RyaW5nSGFzaENhY2hlID0ge307XG4gICAgfVxuICAgIFNUUklOR19IQVNIX0NBQ0hFX1NJWkUrKztcbiAgICBzdHJpbmdIYXNoQ2FjaGVbc3RyaW5nXSA9IGhhc2hlZDtcbiAgfVxuICByZXR1cm4gaGFzaGVkO1xufVxuXG4vLyBodHRwOi8vanNwZXJmLmNvbS9oYXNoaW5nLXN0cmluZ3NcbmZ1bmN0aW9uIGhhc2hTdHJpbmcoc3RyaW5nKSB7XG4gIC8vIFRoaXMgaXMgdGhlIGhhc2ggZnJvbSBKVk1cbiAgLy8gVGhlIGhhc2ggY29kZSBmb3IgYSBzdHJpbmcgaXMgY29tcHV0ZWQgYXNcbiAgLy8gc1swXSAqIDMxIF4gKG4gLSAxKSArIHNbMV0gKiAzMSBeIChuIC0gMikgKyAuLi4gKyBzW24gLSAxXSxcbiAgLy8gd2hlcmUgc1tpXSBpcyB0aGUgaXRoIGNoYXJhY3RlciBvZiB0aGUgc3RyaW5nIGFuZCBuIGlzIHRoZSBsZW5ndGggb2ZcbiAgLy8gdGhlIHN0cmluZy4gV2UgXCJtb2RcIiB0aGUgcmVzdWx0IHRvIG1ha2UgaXQgYmV0d2VlbiAwIChpbmNsdXNpdmUpIGFuZCAyXjMxXG4gIC8vIChleGNsdXNpdmUpIGJ5IGRyb3BwaW5nIGhpZ2ggYml0cy5cbiAgdmFyIGhhc2hlZCA9IDA7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBzdHJpbmcubGVuZ3RoOyBpaSsrKSB7XG4gICAgaGFzaGVkID0gKDMxICogaGFzaGVkICsgc3RyaW5nLmNoYXJDb2RlQXQoaWkpKSB8IDA7XG4gIH1cbiAgcmV0dXJuIHNtaShoYXNoZWQpO1xufVxuXG5mdW5jdGlvbiBoYXNoU3ltYm9sKHN5bSkge1xuICB2YXIgaGFzaGVkID0gc3ltYm9sTWFwW3N5bV07XG4gIGlmIChoYXNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBoYXNoZWQ7XG4gIH1cblxuICBoYXNoZWQgPSBuZXh0SGFzaCgpO1xuXG4gIHN5bWJvbE1hcFtzeW1dID0gaGFzaGVkO1xuXG4gIHJldHVybiBoYXNoZWQ7XG59XG5cbmZ1bmN0aW9uIGhhc2hKU09iaihvYmopIHtcbiAgdmFyIGhhc2hlZDtcbiAgaWYgKHVzaW5nV2Vha01hcCkge1xuICAgIGhhc2hlZCA9IHdlYWtNYXAuZ2V0KG9iaik7XG4gICAgaWYgKGhhc2hlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gaGFzaGVkO1xuICAgIH1cbiAgfVxuXG4gIGhhc2hlZCA9IG9ialtVSURfSEFTSF9LRVldO1xuICBpZiAoaGFzaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzaGVkO1xuICB9XG5cbiAgaWYgKCFjYW5EZWZpbmVQcm9wZXJ0eSkge1xuICAgIGhhc2hlZCA9IG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAmJiBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXTtcbiAgICBpZiAoaGFzaGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBoYXNoZWQ7XG4gICAgfVxuXG4gICAgaGFzaGVkID0gZ2V0SUVOb2RlSGFzaChvYmopO1xuICAgIGlmIChoYXNoZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGhhc2hlZDtcbiAgICB9XG4gIH1cblxuICBoYXNoZWQgPSBuZXh0SGFzaCgpO1xuXG4gIGlmICh1c2luZ1dlYWtNYXApIHtcbiAgICB3ZWFrTWFwLnNldChvYmosIGhhc2hlZCk7XG4gIH0gZWxzZSBpZiAoaXNFeHRlbnNpYmxlICE9PSB1bmRlZmluZWQgJiYgaXNFeHRlbnNpYmxlKG9iaikgPT09IGZhbHNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZXh0ZW5zaWJsZSBvYmplY3RzIGFyZSBub3QgYWxsb3dlZCBhcyBrZXlzLicpO1xuICB9IGVsc2UgaWYgKGNhbkRlZmluZVByb3BlcnR5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgVUlEX0hBU0hfS0VZLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogaGFzaGVkLFxuICAgIH0pO1xuICB9IGVsc2UgaWYgKFxuICAgIG9iai5wcm9wZXJ0eUlzRW51bWVyYWJsZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID09PSBvYmouY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlXG4gICkge1xuICAgIC8vIFNpbmNlIHdlIGNhbid0IGRlZmluZSBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5IG9uIHRoZSBvYmplY3RcbiAgICAvLyB3ZSdsbCBoaWphY2sgb25lIG9mIHRoZSBsZXNzLXVzZWQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyB0b1xuICAgIC8vIHNhdmUgb3VyIGhhc2ggb24gaXQuIFNpbmNlIHRoaXMgaXMgYSBmdW5jdGlvbiBpdCB3aWxsIG5vdCBzaG93IHVwIGluXG4gICAgLy8gYEpTT04uc3RyaW5naWZ5YCB3aGljaCBpcyB3aGF0IHdlIHdhbnQuXG4gICAgb2JqLnByb3BlcnR5SXNFbnVtZXJhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmFwcGx5KFxuICAgICAgICB0aGlzLFxuICAgICAgICBhcmd1bWVudHNcbiAgICAgICk7XG4gICAgfTtcbiAgICBvYmoucHJvcGVydHlJc0VudW1lcmFibGVbVUlEX0hBU0hfS0VZXSA9IGhhc2hlZDtcbiAgfSBlbHNlIGlmIChvYmoubm9kZVR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgY291bGRuJ3QgZ2V0IHRoZSBJRSBgdW5pcXVlSURgIHRvIHVzZSBhcyBhIGhhc2hcbiAgICAvLyBhbmQgd2UgY291bGRuJ3QgdXNlIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgdG8gZXhwbG9pdCB0aGVcbiAgICAvLyBkb250RW51bSBidWcgc28gd2Ugc2ltcGx5IGFkZCB0aGUgYFVJRF9IQVNIX0tFWWAgb24gdGhlIG5vZGVcbiAgICAvLyBpdHNlbGYuXG4gICAgb2JqW1VJRF9IQVNIX0tFWV0gPSBoYXNoZWQ7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gc2V0IGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHkgb24gb2JqZWN0LicpO1xuICB9XG5cbiAgcmV0dXJuIGhhc2hlZDtcbn1cblxuLy8gR2V0IHJlZmVyZW5jZXMgdG8gRVM1IG9iamVjdCBtZXRob2RzLlxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XG5cbi8vIFRydWUgaWYgT2JqZWN0LmRlZmluZVByb3BlcnR5IHdvcmtzIGFzIGV4cGVjdGVkLiBJRTggZmFpbHMgdGhpcyB0ZXN0LlxudmFyIGNhbkRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdAJywge30pO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59KSgpO1xuXG4vLyBJRSBoYXMgYSBgdW5pcXVlSURgIHByb3BlcnR5IG9uIERPTSBub2Rlcy4gV2UgY2FuIGNvbnN0cnVjdCB0aGUgaGFzaCBmcm9tIGl0XG4vLyBhbmQgYXZvaWQgbWVtb3J5IGxlYWtzIGZyb20gdGhlIElFIGNsb25lTm9kZSBidWcuXG5mdW5jdGlvbiBnZXRJRU5vZGVIYXNoKG5vZGUpIHtcbiAgaWYgKG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA+IDApIHtcbiAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgIGNhc2UgMTogLy8gRWxlbWVudFxuICAgICAgICByZXR1cm4gbm9kZS51bmlxdWVJRDtcbiAgICAgIGNhc2UgOTogLy8gRG9jdW1lbnRcbiAgICAgICAgcmV0dXJuIG5vZGUuZG9jdW1lbnRFbGVtZW50ICYmIG5vZGUuZG9jdW1lbnRFbGVtZW50LnVuaXF1ZUlEO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWx1ZU9mKG9iaikge1xuICByZXR1cm4gb2JqLnZhbHVlT2YgIT09IGRlZmF1bHRWYWx1ZU9mICYmIHR5cGVvZiBvYmoudmFsdWVPZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gb2JqLnZhbHVlT2Yob2JqKVxuICAgIDogb2JqO1xufVxuXG5mdW5jdGlvbiBuZXh0SGFzaCgpIHtcbiAgdmFyIG5leHRIYXNoID0gKytfb2JqSGFzaFVJRDtcbiAgaWYgKF9vYmpIYXNoVUlEICYgMHg0MDAwMDAwMCkge1xuICAgIF9vYmpIYXNoVUlEID0gMDtcbiAgfVxuICByZXR1cm4gbmV4dEhhc2g7XG59XG5cbi8vIElmIHBvc3NpYmxlLCB1c2UgYSBXZWFrTWFwLlxudmFyIHVzaW5nV2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nO1xudmFyIHdlYWtNYXA7XG5pZiAodXNpbmdXZWFrTWFwKSB7XG4gIHdlYWtNYXAgPSBuZXcgV2Vha01hcCgpO1xufVxuXG52YXIgc3ltYm9sTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxudmFyIF9vYmpIYXNoVUlEID0gMDtcblxudmFyIFVJRF9IQVNIX0tFWSA9ICdfX2ltbXV0YWJsZWhhc2hfXyc7XG5pZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJykge1xuICBVSURfSEFTSF9LRVkgPSBTeW1ib2woVUlEX0hBU0hfS0VZKTtcbn1cblxudmFyIFNUUklOR19IQVNIX0NBQ0hFX01JTl9TVFJMRU4gPSAxNjtcbnZhciBTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSA9IDI1NTtcbnZhciBTVFJJTkdfSEFTSF9DQUNIRV9TSVpFID0gMDtcbnZhciBzdHJpbmdIYXNoQ2FjaGUgPSB7fTtcblxudmFyIFRvS2V5ZWRTZXF1ZW5jZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEtleWVkU2VxKSB7XG4gIGZ1bmN0aW9uIFRvS2V5ZWRTZXF1ZW5jZShpbmRleGVkLCB1c2VLZXlzKSB7XG4gICAgdGhpcy5faXRlciA9IGluZGV4ZWQ7XG4gICAgdGhpcy5fdXNlS2V5cyA9IHVzZUtleXM7XG4gICAgdGhpcy5zaXplID0gaW5kZXhlZC5zaXplO1xuICB9XG5cbiAgaWYgKCBLZXllZFNlcSApIFRvS2V5ZWRTZXF1ZW5jZS5fX3Byb3RvX18gPSBLZXllZFNlcTtcbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEtleWVkU2VxICYmIEtleWVkU2VxLnByb3RvdHlwZSApO1xuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9LZXllZFNlcXVlbmNlO1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChrZXksIG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIuZ2V0KGtleSwgbm90U2V0VmFsdWUpO1xuICB9O1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICByZXR1cm4gdGhpcy5faXRlci5oYXMoa2V5KTtcbiAgfTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLnZhbHVlU2VxID0gZnVuY3Rpb24gdmFsdWVTZXEgKCkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLnZhbHVlU2VxKCk7XG4gIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gcmV2ZXJzZSAoKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHZhciByZXZlcnNlZFNlcXVlbmNlID0gcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSk7XG4gICAgaWYgKCF0aGlzLl91c2VLZXlzKSB7XG4gICAgICByZXZlcnNlZFNlcXVlbmNlLnZhbHVlU2VxID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxJDEuX2l0ZXIudG9TZXEoKS5yZXZlcnNlKCk7IH07XG4gICAgfVxuICAgIHJldHVybiByZXZlcnNlZFNlcXVlbmNlO1xuICB9O1xuXG4gIFRvS2V5ZWRTZXF1ZW5jZS5wcm90b3R5cGUubWFwID0gZnVuY3Rpb24gbWFwIChtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gICAgdmFyIG1hcHBlZFNlcXVlbmNlID0gbWFwRmFjdG9yeSh0aGlzLCBtYXBwZXIsIGNvbnRleHQpO1xuICAgIGlmICghdGhpcy5fdXNlS2V5cykge1xuICAgICAgbWFwcGVkU2VxdWVuY2UudmFsdWVTZXEgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzJDEkMS5faXRlci50b1NlcSgpLm1hcChtYXBwZXIsIGNvbnRleHQpOyB9O1xuICAgIH1cbiAgICByZXR1cm4gbWFwcGVkU2VxdWVuY2U7XG4gIH07XG5cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gZm4odiwgaywgdGhpcyQxJDEpOyB9LCByZXZlcnNlKTtcbiAgfTtcblxuICBUb0tleWVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgfTtcblxuICByZXR1cm4gVG9LZXllZFNlcXVlbmNlO1xufShLZXllZFNlcSkpO1xuVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuXG52YXIgVG9JbmRleGVkU2VxdWVuY2UgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJbmRleGVkU2VxKSB7XG4gIGZ1bmN0aW9uIFRvSW5kZXhlZFNlcXVlbmNlKGl0ZXIpIHtcbiAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gIH1cblxuICBpZiAoIEluZGV4ZWRTZXEgKSBUb0luZGV4ZWRTZXF1ZW5jZS5fX3Byb3RvX18gPSBJbmRleGVkU2VxO1xuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkU2VxICYmIEluZGV4ZWRTZXEucHJvdG90eXBlICk7XG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFRvSW5kZXhlZFNlcXVlbmNlO1xuXG4gIFRvSW5kZXhlZFNlcXVlbmNlLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKHZhbHVlKTtcbiAgfTtcblxuICBUb0luZGV4ZWRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgcmV2ZXJzZSAmJiBlbnN1cmVTaXplKHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShcbiAgICAgIGZ1bmN0aW9uICh2KSB7IHJldHVybiBmbih2LCByZXZlcnNlID8gdGhpcyQxJDEuc2l6ZSAtICsraSA6IGkrKywgdGhpcyQxJDEpOyB9LFxuICAgICAgcmV2ZXJzZVxuICAgICk7XG4gIH07XG5cbiAgVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHZhciBpdGVyYXRvciA9IHRoaXMuX2l0ZXIuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUywgcmV2ZXJzZSk7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldmVyc2UgJiYgZW5zdXJlU2l6ZSh0aGlzKTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgcmV0dXJuIHN0ZXAuZG9uZVxuICAgICAgICA/IHN0ZXBcbiAgICAgICAgOiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIHJldmVyc2UgPyB0aGlzJDEkMS5zaXplIC0gKytpIDogaSsrLFxuICAgICAgICAgICAgc3RlcC52YWx1ZSxcbiAgICAgICAgICAgIHN0ZXBcbiAgICAgICAgICApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBUb0luZGV4ZWRTZXF1ZW5jZTtcbn0oSW5kZXhlZFNlcSkpO1xuXG52YXIgVG9TZXRTZXF1ZW5jZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNldFNlcSkge1xuICBmdW5jdGlvbiBUb1NldFNlcXVlbmNlKGl0ZXIpIHtcbiAgICB0aGlzLl9pdGVyID0gaXRlcjtcbiAgICB0aGlzLnNpemUgPSBpdGVyLnNpemU7XG4gIH1cblxuICBpZiAoIFNldFNlcSApIFRvU2V0U2VxdWVuY2UuX19wcm90b19fID0gU2V0U2VxO1xuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNldFNlcSAmJiBTZXRTZXEucHJvdG90eXBlICk7XG4gIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9TZXRTZXF1ZW5jZTtcblxuICBUb1NldFNlcXVlbmNlLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgIHJldHVybiB0aGlzLl9pdGVyLmluY2x1ZGVzKGtleSk7XG4gIH07XG5cbiAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5faXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGZuKHYsIHYsIHRoaXMkMSQxKTsgfSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgVG9TZXRTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICByZXR1cm4gc3RlcC5kb25lXG4gICAgICAgID8gc3RlcFxuICAgICAgICA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgc3RlcC52YWx1ZSwgc3RlcC52YWx1ZSwgc3RlcCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFRvU2V0U2VxdWVuY2U7XG59KFNldFNlcSkpO1xuXG52YXIgRnJvbUVudHJpZXNTZXF1ZW5jZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEtleWVkU2VxKSB7XG4gIGZ1bmN0aW9uIEZyb21FbnRyaWVzU2VxdWVuY2UoZW50cmllcykge1xuICAgIHRoaXMuX2l0ZXIgPSBlbnRyaWVzO1xuICAgIHRoaXMuc2l6ZSA9IGVudHJpZXMuc2l6ZTtcbiAgfVxuXG4gIGlmICggS2V5ZWRTZXEgKSBGcm9tRW50cmllc1NlcXVlbmNlLl9fcHJvdG9fXyA9IEtleWVkU2VxO1xuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEtleWVkU2VxICYmIEtleWVkU2VxLnByb3RvdHlwZSApO1xuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEZyb21FbnRyaWVzU2VxdWVuY2U7XG5cbiAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuZW50cnlTZXEgPSBmdW5jdGlvbiBlbnRyeVNlcSAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZXIudG9TZXEoKTtcbiAgfTtcblxuICBGcm9tRW50cmllc1NlcXVlbmNlLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9pdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgIC8vIENoZWNrIGlmIGVudHJ5IGV4aXN0cyBmaXJzdCBzbyBhcnJheSBhY2Nlc3MgZG9lc24ndCB0aHJvdyBmb3IgaG9sZXNcbiAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgIHZhbGlkYXRlRW50cnkoZW50cnkpO1xuICAgICAgICB2YXIgaW5kZXhlZENvbGxlY3Rpb24gPSBpc0NvbGxlY3Rpb24oZW50cnkpO1xuICAgICAgICByZXR1cm4gZm4oXG4gICAgICAgICAgaW5kZXhlZENvbGxlY3Rpb24gPyBlbnRyeS5nZXQoMSkgOiBlbnRyeVsxXSxcbiAgICAgICAgICBpbmRleGVkQ29sbGVjdGlvbiA/IGVudHJ5LmdldCgwKSA6IGVudHJ5WzBdLFxuICAgICAgICAgIHRoaXMkMSQxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9pdGVyLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgICAvLyBDaGVjayBpZiBlbnRyeSBleGlzdHMgZmlyc3Qgc28gYXJyYXkgYWNjZXNzIGRvZXNuJ3QgdGhyb3cgZm9yIGhvbGVzXG4gICAgICAgIC8vIGluIHRoZSBwYXJlbnQgaXRlcmF0aW9uLlxuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YWxpZGF0ZUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB2YXIgaW5kZXhlZENvbGxlY3Rpb24gPSBpc0NvbGxlY3Rpb24oZW50cnkpO1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGluZGV4ZWRDb2xsZWN0aW9uID8gZW50cnkuZ2V0KDApIDogZW50cnlbMF0sXG4gICAgICAgICAgICBpbmRleGVkQ29sbGVjdGlvbiA/IGVudHJ5LmdldCgxKSA6IGVudHJ5WzFdLFxuICAgICAgICAgICAgc3RlcFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRnJvbUVudHJpZXNTZXF1ZW5jZTtcbn0oS2V5ZWRTZXEpKTtcblxuVG9JbmRleGVkU2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgVG9LZXllZFNlcXVlbmNlLnByb3RvdHlwZS5jYWNoZVJlc3VsdCA9XG4gIFRvU2V0U2VxdWVuY2UucHJvdG90eXBlLmNhY2hlUmVzdWx0ID1cbiAgRnJvbUVudHJpZXNTZXF1ZW5jZS5wcm90b3R5cGUuY2FjaGVSZXN1bHQgPVxuICAgIGNhY2hlUmVzdWx0VGhyb3VnaDtcblxuZnVuY3Rpb24gZmxpcEZhY3RvcnkoY29sbGVjdGlvbikge1xuICB2YXIgZmxpcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGNvbGxlY3Rpb24pO1xuICBmbGlwU2VxdWVuY2UuX2l0ZXIgPSBjb2xsZWN0aW9uO1xuICBmbGlwU2VxdWVuY2Uuc2l6ZSA9IGNvbGxlY3Rpb24uc2l6ZTtcbiAgZmxpcFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2xsZWN0aW9uOyB9O1xuICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV2ZXJzZWRTZXF1ZW5jZSA9IGNvbGxlY3Rpb24ucmV2ZXJzZS5hcHBseSh0aGlzKTsgLy8gc3VwZXIucmV2ZXJzZSgpXG4gICAgcmV2ZXJzZWRTZXF1ZW5jZS5mbGlwID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbi5yZXZlcnNlKCk7IH07XG4gICAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG4gIH07XG4gIGZsaXBTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBjb2xsZWN0aW9uLmluY2x1ZGVzKGtleSk7IH07XG4gIGZsaXBTZXF1ZW5jZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGNvbGxlY3Rpb24uaGFzKGtleSk7IH07XG4gIGZsaXBTZXF1ZW5jZS5jYWNoZVJlc3VsdCA9IGNhY2hlUmVzdWx0VGhyb3VnaDtcbiAgZmxpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHJldHVybiBjb2xsZWN0aW9uLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gZm4oaywgdiwgdGhpcyQxJDEpICE9PSBmYWxzZTsgfSwgcmV2ZXJzZSk7XG4gIH07XG4gIGZsaXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcbiAgICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKCFzdGVwLmRvbmUpIHtcbiAgICAgICAgICB2YXIgayA9IHN0ZXAudmFsdWVbMF07XG4gICAgICAgICAgc3RlcC52YWx1ZVswXSA9IHN0ZXAudmFsdWVbMV07XG4gICAgICAgICAgc3RlcC52YWx1ZVsxXSA9IGs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24uX19pdGVyYXRvcihcbiAgICAgIHR5cGUgPT09IElURVJBVEVfVkFMVUVTID8gSVRFUkFURV9LRVlTIDogSVRFUkFURV9WQUxVRVMsXG4gICAgICByZXZlcnNlXG4gICAgKTtcbiAgfTtcbiAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcbn1cblxuZnVuY3Rpb24gbWFwRmFjdG9yeShjb2xsZWN0aW9uLCBtYXBwZXIsIGNvbnRleHQpIHtcbiAgdmFyIG1hcHBlZFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGNvbGxlY3Rpb24pO1xuICBtYXBwZWRTZXF1ZW5jZS5zaXplID0gY29sbGVjdGlvbi5zaXplO1xuICBtYXBwZWRTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBjb2xsZWN0aW9uLmhhcyhrZXkpOyB9O1xuICBtYXBwZWRTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbiAoa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgIHZhciB2ID0gY29sbGVjdGlvbi5nZXQoa2V5LCBOT1RfU0VUKTtcbiAgICByZXR1cm4gdiA9PT0gTk9UX1NFVFxuICAgICAgPyBub3RTZXRWYWx1ZVxuICAgICAgOiBtYXBwZXIuY2FsbChjb250ZXh0LCB2LCBrZXksIGNvbGxlY3Rpb24pO1xuICB9O1xuICBtYXBwZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4gY29sbGVjdGlvbi5fX2l0ZXJhdGUoXG4gICAgICBmdW5jdGlvbiAodiwgaywgYykgeyByZXR1cm4gZm4obWFwcGVyLmNhbGwoY29udGV4dCwgdiwgaywgYyksIGssIHRoaXMkMSQxKSAhPT0gZmFsc2U7IH0sXG4gICAgICByZXZlcnNlXG4gICAgKTtcbiAgfTtcbiAgbWFwcGVkU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICByZXR1cm4gc3RlcDtcbiAgICAgIH1cbiAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICB2YXIga2V5ID0gZW50cnlbMF07XG4gICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZShcbiAgICAgICAgdHlwZSxcbiAgICAgICAga2V5LFxuICAgICAgICBtYXBwZXIuY2FsbChjb250ZXh0LCBlbnRyeVsxXSwga2V5LCBjb2xsZWN0aW9uKSxcbiAgICAgICAgc3RlcFxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIG1hcHBlZFNlcXVlbmNlO1xufVxuXG5mdW5jdGlvbiByZXZlcnNlRmFjdG9yeShjb2xsZWN0aW9uLCB1c2VLZXlzKSB7XG4gIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgdmFyIHJldmVyc2VkU2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIHJldmVyc2VkU2VxdWVuY2UuX2l0ZXIgPSBjb2xsZWN0aW9uO1xuICByZXZlcnNlZFNlcXVlbmNlLnNpemUgPSBjb2xsZWN0aW9uLnNpemU7XG4gIHJldmVyc2VkU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbGxlY3Rpb247IH07XG4gIGlmIChjb2xsZWN0aW9uLmZsaXApIHtcbiAgICByZXZlcnNlZFNlcXVlbmNlLmZsaXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgZmxpcFNlcXVlbmNlID0gZmxpcEZhY3RvcnkoY29sbGVjdGlvbik7XG4gICAgICBmbGlwU2VxdWVuY2UucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbGxlY3Rpb24uZmxpcCgpOyB9O1xuICAgICAgcmV0dXJuIGZsaXBTZXF1ZW5jZTtcbiAgICB9O1xuICB9XG4gIHJldmVyc2VkU2VxdWVuY2UuZ2V0ID0gZnVuY3Rpb24gKGtleSwgbm90U2V0VmFsdWUpIHsgcmV0dXJuIGNvbGxlY3Rpb24uZ2V0KHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSwgbm90U2V0VmFsdWUpOyB9O1xuICByZXZlcnNlZFNlcXVlbmNlLmhhcyA9IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGNvbGxlY3Rpb24uaGFzKHVzZUtleXMgPyBrZXkgOiAtMSAtIGtleSk7IH07XG4gIHJldmVyc2VkU2VxdWVuY2UuaW5jbHVkZXMgPSBmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGNvbGxlY3Rpb24uaW5jbHVkZXModmFsdWUpOyB9O1xuICByZXZlcnNlZFNlcXVlbmNlLmNhY2hlUmVzdWx0ID0gY2FjaGVSZXN1bHRUaHJvdWdoO1xuICByZXZlcnNlZFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgcmV2ZXJzZSAmJiBlbnN1cmVTaXplKGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiBjb2xsZWN0aW9uLl9faXRlcmF0ZShcbiAgICAgIGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBmbih2LCB1c2VLZXlzID8gayA6IHJldmVyc2UgPyB0aGlzJDEkMS5zaXplIC0gKytpIDogaSsrLCB0aGlzJDEkMSk7IH0sXG4gICAgICAhcmV2ZXJzZVxuICAgICk7XG4gIH07XG4gIHJldmVyc2VkU2VxdWVuY2UuX19pdGVyYXRvciA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHJldmVyc2UgJiYgZW5zdXJlU2l6ZShjb2xsZWN0aW9uKTtcbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCAhcmV2ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIGlmIChzdGVwLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICB9XG4gICAgICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUoXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHVzZUtleXMgPyBlbnRyeVswXSA6IHJldmVyc2UgPyB0aGlzJDEkMS5zaXplIC0gKytpIDogaSsrLFxuICAgICAgICBlbnRyeVsxXSxcbiAgICAgICAgc3RlcFxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHJldmVyc2VkU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIGZpbHRlckZhY3RvcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBjb250ZXh0LCB1c2VLZXlzKSB7XG4gIHZhciBmaWx0ZXJTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgaWYgKHVzZUtleXMpIHtcbiAgICBmaWx0ZXJTZXF1ZW5jZS5oYXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdiA9IGNvbGxlY3Rpb24uZ2V0KGtleSwgTk9UX1NFVCk7XG4gICAgICByZXR1cm4gdiAhPT0gTk9UX1NFVCAmJiAhIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGtleSwgY29sbGVjdGlvbik7XG4gICAgfTtcbiAgICBmaWx0ZXJTZXF1ZW5jZS5nZXQgPSBmdW5jdGlvbiAoa2V5LCBub3RTZXRWYWx1ZSkge1xuICAgICAgdmFyIHYgPSBjb2xsZWN0aW9uLmdldChrZXksIE5PVF9TRVQpO1xuICAgICAgcmV0dXJuIHYgIT09IE5PVF9TRVQgJiYgcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwga2V5LCBjb2xsZWN0aW9uKVxuICAgICAgICA/IHZcbiAgICAgICAgOiBub3RTZXRWYWx1ZTtcbiAgICB9O1xuICB9XG4gIGZpbHRlclNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICBjb2xsZWN0aW9uLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaywgYykge1xuICAgICAgaWYgKHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIGMpKSB7XG4gICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMSQxKTtcbiAgICAgIH1cbiAgICB9LCByZXZlcnNlKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgZmlsdGVyU2VxdWVuY2UuX19pdGVyYXRvclVuY2FjaGVkID0gZnVuY3Rpb24gKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IoSVRFUkFURV9FTlRSSUVTLCByZXZlcnNlKTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlbnRyeSA9IHN0ZXAudmFsdWU7XG4gICAgICAgIHZhciBrZXkgPSBlbnRyeVswXTtcbiAgICAgICAgdmFyIHZhbHVlID0gZW50cnlbMV07XG4gICAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIHVzZUtleXMgPyBrZXkgOiBpdGVyYXRpb25zKyssIHZhbHVlLCBzdGVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gZmlsdGVyU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIGNvdW50QnlGYWN0b3J5KGNvbGxlY3Rpb24sIGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgdmFyIGdyb3VwcyA9IE1hcCgpLmFzTXV0YWJsZSgpO1xuICBjb2xsZWN0aW9uLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgIGdyb3Vwcy51cGRhdGUoZ3JvdXBlci5jYWxsKGNvbnRleHQsIHYsIGssIGNvbGxlY3Rpb24pLCAwLCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSArIDE7IH0pO1xuICB9KTtcbiAgcmV0dXJuIGdyb3Vwcy5hc0ltbXV0YWJsZSgpO1xufVxuXG5mdW5jdGlvbiBncm91cEJ5RmFjdG9yeShjb2xsZWN0aW9uLCBncm91cGVyLCBjb250ZXh0KSB7XG4gIHZhciBpc0tleWVkSXRlciA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBncm91cHMgPSAoaXNPcmRlcmVkKGNvbGxlY3Rpb24pID8gT3JkZXJlZE1hcCgpIDogTWFwKCkpLmFzTXV0YWJsZSgpO1xuICBjb2xsZWN0aW9uLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgIGdyb3Vwcy51cGRhdGUoXG4gICAgICBncm91cGVyLmNhbGwoY29udGV4dCwgdiwgaywgY29sbGVjdGlvbiksXG4gICAgICBmdW5jdGlvbiAoYSkgeyByZXR1cm4gKChhID0gYSB8fCBbXSksIGEucHVzaChpc0tleWVkSXRlciA/IFtrLCB2XSA6IHYpLCBhKTsgfVxuICAgICk7XG4gIH0pO1xuICB2YXIgY29lcmNlID0gY29sbGVjdGlvbkNsYXNzKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gZ3JvdXBzLm1hcChmdW5jdGlvbiAoYXJyKSB7IHJldHVybiByZWlmeShjb2xsZWN0aW9uLCBjb2VyY2UoYXJyKSk7IH0pLmFzSW1tdXRhYmxlKCk7XG59XG5cbmZ1bmN0aW9uIHBhcnRpdGlvbkZhY3RvcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gIHZhciBpc0tleWVkSXRlciA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBncm91cHMgPSBbW10sIFtdXTtcbiAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICBncm91cHNbcHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgY29sbGVjdGlvbikgPyAxIDogMF0ucHVzaChcbiAgICAgIGlzS2V5ZWRJdGVyID8gW2ssIHZdIDogdlxuICAgICk7XG4gIH0pO1xuICB2YXIgY29lcmNlID0gY29sbGVjdGlvbkNsYXNzKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gZ3JvdXBzLm1hcChmdW5jdGlvbiAoYXJyKSB7IHJldHVybiByZWlmeShjb2xsZWN0aW9uLCBjb2VyY2UoYXJyKSk7IH0pO1xufVxuXG5mdW5jdGlvbiBzbGljZUZhY3RvcnkoY29sbGVjdGlvbiwgYmVnaW4sIGVuZCwgdXNlS2V5cykge1xuICB2YXIgb3JpZ2luYWxTaXplID0gY29sbGVjdGlvbi5zaXplO1xuXG4gIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIG9yaWdpbmFsU2l6ZSkpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuXG4gIHZhciByZXNvbHZlZEJlZ2luID0gcmVzb2x2ZUJlZ2luKGJlZ2luLCBvcmlnaW5hbFNpemUpO1xuICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgb3JpZ2luYWxTaXplKTtcblxuICAvLyBiZWdpbiBvciBlbmQgd2lsbCBiZSBOYU4gaWYgdGhleSB3ZXJlIHByb3ZpZGVkIGFzIG5lZ2F0aXZlIG51bWJlcnMgYW5kXG4gIC8vIHRoaXMgY29sbGVjdGlvbidzIHNpemUgaXMgdW5rbm93bi4gSW4gdGhhdCBjYXNlLCBjYWNoZSBmaXJzdCBzbyB0aGVyZSBpc1xuICAvLyBhIGtub3duIHNpemUgYW5kIHRoZXNlIGRvIG5vdCByZXNvbHZlIHRvIE5hTi5cbiAgaWYgKHJlc29sdmVkQmVnaW4gIT09IHJlc29sdmVkQmVnaW4gfHwgcmVzb2x2ZWRFbmQgIT09IHJlc29sdmVkRW5kKSB7XG4gICAgcmV0dXJuIHNsaWNlRmFjdG9yeShjb2xsZWN0aW9uLnRvU2VxKCkuY2FjaGVSZXN1bHQoKSwgYmVnaW4sIGVuZCwgdXNlS2V5cyk7XG4gIH1cblxuICAvLyBOb3RlOiByZXNvbHZlZEVuZCBpcyB1bmRlZmluZWQgd2hlbiB0aGUgb3JpZ2luYWwgc2VxdWVuY2UncyBsZW5ndGggaXNcbiAgLy8gdW5rbm93biBhbmQgdGhpcyBzbGljZSBkaWQgbm90IHN1cHBseSBhbiBlbmQgYW5kIHNob3VsZCBjb250YWluIGFsbFxuICAvLyBlbGVtZW50cyBhZnRlciByZXNvbHZlZEJlZ2luLlxuICAvLyBJbiB0aGF0IGNhc2UsIHJlc29sdmVkU2l6ZSB3aWxsIGJlIE5hTiBhbmQgc2xpY2VTaXplIHdpbGwgcmVtYWluIHVuZGVmaW5lZC5cbiAgdmFyIHJlc29sdmVkU2l6ZSA9IHJlc29sdmVkRW5kIC0gcmVzb2x2ZWRCZWdpbjtcbiAgdmFyIHNsaWNlU2l6ZTtcbiAgaWYgKHJlc29sdmVkU2l6ZSA9PT0gcmVzb2x2ZWRTaXplKSB7XG4gICAgc2xpY2VTaXplID0gcmVzb2x2ZWRTaXplIDwgMCA/IDAgOiByZXNvbHZlZFNpemU7XG4gIH1cblxuICB2YXIgc2xpY2VTZXEgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG5cbiAgLy8gSWYgY29sbGVjdGlvbi5zaXplIGlzIHVuZGVmaW5lZCwgdGhlIHNpemUgb2YgdGhlIHJlYWxpemVkIHNsaWNlU2VxIGlzXG4gIC8vIHVua25vd24gYXQgdGhpcyBwb2ludCB1bmxlc3MgdGhlIG51bWJlciBvZiBpdGVtcyB0byBzbGljZSBpcyAwXG4gIHNsaWNlU2VxLnNpemUgPVxuICAgIHNsaWNlU2l6ZSA9PT0gMCA/IHNsaWNlU2l6ZSA6IChjb2xsZWN0aW9uLnNpemUgJiYgc2xpY2VTaXplKSB8fCB1bmRlZmluZWQ7XG5cbiAgaWYgKCF1c2VLZXlzICYmIGlzU2VxKGNvbGxlY3Rpb24pICYmIHNsaWNlU2l6ZSA+PSAwKSB7XG4gICAgc2xpY2VTZXEuZ2V0ID0gZnVuY3Rpb24gKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPCBzbGljZVNpemVcbiAgICAgICAgPyBjb2xsZWN0aW9uLmdldChpbmRleCArIHJlc29sdmVkQmVnaW4sIG5vdFNldFZhbHVlKVxuICAgICAgICA6IG5vdFNldFZhbHVlO1xuICAgIH07XG4gIH1cblxuICBzbGljZVNlcS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICBpZiAoc2xpY2VTaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhY2hlUmVzdWx0KCkuX19pdGVyYXRlKGZuLCByZXZlcnNlKTtcbiAgICB9XG4gICAgdmFyIHNraXBwZWQgPSAwO1xuICAgIHZhciBpc1NraXBwaW5nID0gdHJ1ZTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSkpIHtcbiAgICAgICAgaXRlcmF0aW9ucysrO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMSQxKSAhPT0gZmFsc2UgJiZcbiAgICAgICAgICBpdGVyYXRpb25zICE9PSBzbGljZVNpemVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcblxuICBzbGljZVNlcS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgIGlmIChzbGljZVNpemUgIT09IDAgJiYgcmV2ZXJzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FjaGVSZXN1bHQoKS5fX2l0ZXJhdG9yKHR5cGUsIHJldmVyc2UpO1xuICAgIH1cbiAgICAvLyBEb24ndCBib3RoZXIgaW5zdGFudGlhdGluZyBwYXJlbnQgaXRlcmF0b3IgaWYgdGFraW5nIDAuXG4gICAgaWYgKHNsaWNlU2l6ZSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBJdGVyYXRvcihpdGVyYXRvckRvbmUpO1xuICAgIH1cbiAgICB2YXIgaXRlcmF0b3IgPSBjb2xsZWN0aW9uLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgdmFyIHNraXBwZWQgPSAwO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdoaWxlIChza2lwcGVkKysgPCByZXNvbHZlZEJlZ2luKSB7XG4gICAgICAgIGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICAgIGlmICgrK2l0ZXJhdGlvbnMgPiBzbGljZVNpemUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAodXNlS2V5cyB8fCB0eXBlID09PSBJVEVSQVRFX1ZBTFVFUyB8fCBzdGVwLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIHN0ZXA7XG4gICAgICB9XG4gICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9LRVlTKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMgLSAxLCB1bmRlZmluZWQsIHN0ZXApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucyAtIDEsIHN0ZXAudmFsdWVbMV0sIHN0ZXApO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBzbGljZVNlcTtcbn1cblxuZnVuY3Rpb24gdGFrZVdoaWxlRmFjdG9yeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgdmFyIHRha2VTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgdGFrZVNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICBjb2xsZWN0aW9uLl9faXRlcmF0ZShcbiAgICAgIGZ1bmN0aW9uICh2LCBrLCBjKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSAmJiArK2l0ZXJhdGlvbnMgJiYgZm4odiwgaywgdGhpcyQxJDEpOyB9XG4gICAgKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgdGFrZVNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgIHZhciBpdGVyYXRpbmcgPSB0cnVlO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFpdGVyYXRpbmcpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yRG9uZSgpO1xuICAgICAgfVxuICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgfVxuICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgIHZhciBrID0gZW50cnlbMF07XG4gICAgICB2YXIgdiA9IGVudHJ5WzFdO1xuICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCB0aGlzJDEkMSkpIHtcbiAgICAgICAgaXRlcmF0aW5nID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMgPyBzdGVwIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBrLCB2LCBzdGVwKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHRha2VTZXF1ZW5jZTtcbn1cblxuZnVuY3Rpb24gc2tpcFdoaWxlRmFjdG9yeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGNvbnRleHQsIHVzZUtleXMpIHtcbiAgdmFyIHNraXBTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgc2tpcFNlcXVlbmNlLl9faXRlcmF0ZVVuY2FjaGVkID0gZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpc1NraXBwaW5nID0gdHJ1ZTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICAgIGlmICghKGlzU2tpcHBpbmcgJiYgKGlzU2tpcHBpbmcgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkpKSB7XG4gICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgcmV0dXJuIGZuKHYsIHVzZUtleXMgPyBrIDogaXRlcmF0aW9ucyAtIDEsIHRoaXMkMSQxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgc2tpcFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMsIHJldmVyc2UpO1xuICAgIHZhciBza2lwcGluZyA9IHRydWU7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiBuZXcgSXRlcmF0b3IoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaztcbiAgICAgIHZhciB2O1xuICAgICAgZG8ge1xuICAgICAgICBzdGVwID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoc3RlcC5kb25lKSB7XG4gICAgICAgICAgaWYgKHVzZUtleXMgfHwgdHlwZSA9PT0gSVRFUkFURV9WQUxVRVMpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZSA9PT0gSVRFUkFURV9LRVlTKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHVuZGVmaW5lZCwgc3RlcCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc3RlcC52YWx1ZVsxXSwgc3RlcCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVudHJ5ID0gc3RlcC52YWx1ZTtcbiAgICAgICAgayA9IGVudHJ5WzBdO1xuICAgICAgICB2ID0gZW50cnlbMV07XG4gICAgICAgIHNraXBwaW5nICYmIChza2lwcGluZyA9IHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHYsIGssIHRoaXMkMSQxKSk7XG4gICAgICB9IHdoaWxlIChza2lwcGluZyk7XG4gICAgICByZXR1cm4gdHlwZSA9PT0gSVRFUkFURV9FTlRSSUVTID8gc3RlcCA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaywgdiwgc3RlcCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBza2lwU2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEZhY3RvcnkoY29sbGVjdGlvbiwgdmFsdWVzKSB7XG4gIHZhciBpc0tleWVkQ29sbGVjdGlvbiA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBpdGVycyA9IFtjb2xsZWN0aW9uXVxuICAgIC5jb25jYXQodmFsdWVzKVxuICAgIC5tYXAoZnVuY3Rpb24gKHYpIHtcbiAgICAgIGlmICghaXNDb2xsZWN0aW9uKHYpKSB7XG4gICAgICAgIHYgPSBpc0tleWVkQ29sbGVjdGlvblxuICAgICAgICAgID8ga2V5ZWRTZXFGcm9tVmFsdWUodilcbiAgICAgICAgICA6IGluZGV4ZWRTZXFGcm9tVmFsdWUoQXJyYXkuaXNBcnJheSh2KSA/IHYgOiBbdl0pO1xuICAgICAgfSBlbHNlIGlmIChpc0tleWVkQ29sbGVjdGlvbikge1xuICAgICAgICB2ID0gS2V5ZWRDb2xsZWN0aW9uKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHY7XG4gICAgfSlcbiAgICAuZmlsdGVyKGZ1bmN0aW9uICh2KSB7IHJldHVybiB2LnNpemUgIT09IDA7IH0pO1xuXG4gIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuXG4gIGlmIChpdGVycy5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgc2luZ2xldG9uID0gaXRlcnNbMF07XG4gICAgaWYgKFxuICAgICAgc2luZ2xldG9uID09PSBjb2xsZWN0aW9uIHx8XG4gICAgICAoaXNLZXllZENvbGxlY3Rpb24gJiYgaXNLZXllZChzaW5nbGV0b24pKSB8fFxuICAgICAgKGlzSW5kZXhlZChjb2xsZWN0aW9uKSAmJiBpc0luZGV4ZWQoc2luZ2xldG9uKSlcbiAgICApIHtcbiAgICAgIHJldHVybiBzaW5nbGV0b247XG4gICAgfVxuICB9XG5cbiAgdmFyIGNvbmNhdFNlcSA9IG5ldyBBcnJheVNlcShpdGVycyk7XG4gIGlmIChpc0tleWVkQ29sbGVjdGlvbikge1xuICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b0tleWVkU2VxKCk7XG4gIH0gZWxzZSBpZiAoIWlzSW5kZXhlZChjb2xsZWN0aW9uKSkge1xuICAgIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS50b1NldFNlcSgpO1xuICB9XG4gIGNvbmNhdFNlcSA9IGNvbmNhdFNlcS5mbGF0dGVuKHRydWUpO1xuICBjb25jYXRTZXEuc2l6ZSA9IGl0ZXJzLnJlZHVjZShmdW5jdGlvbiAoc3VtLCBzZXEpIHtcbiAgICBpZiAoc3VtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBzaXplID0gc2VxLnNpemU7XG4gICAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzdW0gKyBzaXplO1xuICAgICAgfVxuICAgIH1cbiAgfSwgMCk7XG4gIHJldHVybiBjb25jYXRTZXE7XG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW5GYWN0b3J5KGNvbGxlY3Rpb24sIGRlcHRoLCB1c2VLZXlzKSB7XG4gIHZhciBmbGF0U2VxdWVuY2UgPSBtYWtlU2VxdWVuY2UoY29sbGVjdGlvbik7XG4gIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0ZShmbiwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB2YXIgc3RvcHBlZCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIGZsYXREZWVwKGl0ZXIsIGN1cnJlbnREZXB0aCkge1xuICAgICAgaXRlci5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgaWYgKCghZGVwdGggfHwgY3VycmVudERlcHRoIDwgZGVwdGgpICYmIGlzQ29sbGVjdGlvbih2KSkge1xuICAgICAgICAgIGZsYXREZWVwKHYsIGN1cnJlbnREZXB0aCArIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgICBpZiAoZm4odiwgdXNlS2V5cyA/IGsgOiBpdGVyYXRpb25zIC0gMSwgZmxhdFNlcXVlbmNlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gIXN0b3BwZWQ7XG4gICAgICB9LCByZXZlcnNlKTtcbiAgICB9XG4gICAgZmxhdERlZXAoY29sbGVjdGlvbiwgMCk7XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG4gIGZsYXRTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWNoZVJlc3VsdCgpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRvciA9IGNvbGxlY3Rpb24uX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB3aGlsZSAoaXRlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChzdGVwLmRvbmUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgaXRlcmF0b3IgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdiA9IHN0ZXAudmFsdWU7XG4gICAgICAgIGlmICh0eXBlID09PSBJVEVSQVRFX0VOVFJJRVMpIHtcbiAgICAgICAgICB2ID0gdlsxXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoKCFkZXB0aCB8fCBzdGFjay5sZW5ndGggPCBkZXB0aCkgJiYgaXNDb2xsZWN0aW9uKHYpKSB7XG4gICAgICAgICAgc3RhY2sucHVzaChpdGVyYXRvcik7XG4gICAgICAgICAgaXRlcmF0b3IgPSB2Ll9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHVzZUtleXMgPyBzdGVwIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHYsIHN0ZXApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0b3JEb25lKCk7XG4gICAgfSk7XG4gIH07XG4gIHJldHVybiBmbGF0U2VxdWVuY2U7XG59XG5cbmZ1bmN0aW9uIGZsYXRNYXBGYWN0b3J5KGNvbGxlY3Rpb24sIG1hcHBlciwgY29udGV4dCkge1xuICB2YXIgY29lcmNlID0gY29sbGVjdGlvbkNsYXNzKGNvbGxlY3Rpb24pO1xuICByZXR1cm4gY29sbGVjdGlvblxuICAgIC50b1NlcSgpXG4gICAgLm1hcChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gY29lcmNlKG1hcHBlci5jYWxsKGNvbnRleHQsIHYsIGssIGNvbGxlY3Rpb24pKTsgfSlcbiAgICAuZmxhdHRlbih0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW50ZXJwb3NlRmFjdG9yeShjb2xsZWN0aW9uLCBzZXBhcmF0b3IpIHtcbiAgdmFyIGludGVycG9zZWRTZXF1ZW5jZSA9IG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKTtcbiAgaW50ZXJwb3NlZFNlcXVlbmNlLnNpemUgPSBjb2xsZWN0aW9uLnNpemUgJiYgY29sbGVjdGlvbi5zaXplICogMiAtIDE7XG4gIGludGVycG9zZWRTZXF1ZW5jZS5fX2l0ZXJhdGVVbmNhY2hlZCA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoXG4gICAgICBmdW5jdGlvbiAodikgeyByZXR1cm4gKCFpdGVyYXRpb25zIHx8IGZuKHNlcGFyYXRvciwgaXRlcmF0aW9ucysrLCB0aGlzJDEkMSkgIT09IGZhbHNlKSAmJlxuICAgICAgICBmbih2LCBpdGVyYXRpb25zKyssIHRoaXMkMSQxKSAhPT0gZmFsc2U7IH0sXG4gICAgICByZXZlcnNlXG4gICAgKTtcbiAgICByZXR1cm4gaXRlcmF0aW9ucztcbiAgfTtcbiAgaW50ZXJwb3NlZFNlcXVlbmNlLl9faXRlcmF0b3JVbmNhY2hlZCA9IGZ1bmN0aW9uICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIGl0ZXJhdG9yID0gY29sbGVjdGlvbi5fX2l0ZXJhdG9yKElURVJBVEVfVkFMVUVTLCByZXZlcnNlKTtcbiAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgdmFyIHN0ZXA7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXN0ZXAgfHwgaXRlcmF0aW9ucyAlIDIpIHtcbiAgICAgICAgc3RlcCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgICAgIHJldHVybiBzdGVwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gaXRlcmF0aW9ucyAlIDJcbiAgICAgICAgPyBpdGVyYXRvclZhbHVlKHR5cGUsIGl0ZXJhdGlvbnMrKywgc2VwYXJhdG9yKVxuICAgICAgICA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgaXRlcmF0aW9ucysrLCBzdGVwLnZhbHVlLCBzdGVwKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIGludGVycG9zZWRTZXF1ZW5jZTtcbn1cblxuZnVuY3Rpb24gc29ydEZhY3RvcnkoY29sbGVjdGlvbiwgY29tcGFyYXRvciwgbWFwcGVyKSB7XG4gIGlmICghY29tcGFyYXRvcikge1xuICAgIGNvbXBhcmF0b3IgPSBkZWZhdWx0Q29tcGFyYXRvcjtcbiAgfVxuICB2YXIgaXNLZXllZENvbGxlY3Rpb24gPSBpc0tleWVkKGNvbGxlY3Rpb24pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgZW50cmllcyA9IGNvbGxlY3Rpb25cbiAgICAudG9TZXEoKVxuICAgIC5tYXAoZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIFtrLCB2LCBpbmRleCsrLCBtYXBwZXIgPyBtYXBwZXIodiwgaywgY29sbGVjdGlvbikgOiB2XTsgfSlcbiAgICAudmFsdWVTZXEoKVxuICAgIC50b0FycmF5KCk7XG4gIGVudHJpZXNcbiAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gY29tcGFyYXRvcihhWzNdLCBiWzNdKSB8fCBhWzJdIC0gYlsyXTsgfSlcbiAgICAuZm9yRWFjaChcbiAgICAgIGlzS2V5ZWRDb2xsZWN0aW9uXG4gICAgICAgID8gZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIGVudHJpZXNbaV0ubGVuZ3RoID0gMjtcbiAgICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24gKHYsIGkpIHtcbiAgICAgICAgICAgIGVudHJpZXNbaV0gPSB2WzFdO1xuICAgICAgICAgIH1cbiAgICApO1xuICByZXR1cm4gaXNLZXllZENvbGxlY3Rpb25cbiAgICA/IEtleWVkU2VxKGVudHJpZXMpXG4gICAgOiBpc0luZGV4ZWQoY29sbGVjdGlvbilcbiAgICA/IEluZGV4ZWRTZXEoZW50cmllcylcbiAgICA6IFNldFNlcShlbnRyaWVzKTtcbn1cblxuZnVuY3Rpb24gbWF4RmFjdG9yeShjb2xsZWN0aW9uLCBjb21wYXJhdG9yLCBtYXBwZXIpIHtcbiAgaWYgKCFjb21wYXJhdG9yKSB7XG4gICAgY29tcGFyYXRvciA9IGRlZmF1bHRDb21wYXJhdG9yO1xuICB9XG4gIGlmIChtYXBwZXIpIHtcbiAgICB2YXIgZW50cnkgPSBjb2xsZWN0aW9uXG4gICAgICAudG9TZXEoKVxuICAgICAgLm1hcChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gW3YsIG1hcHBlcih2LCBrLCBjb2xsZWN0aW9uKV07IH0pXG4gICAgICAucmVkdWNlKGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiAobWF4Q29tcGFyZShjb21wYXJhdG9yLCBhWzFdLCBiWzFdKSA/IGIgOiBhKTsgfSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzBdO1xuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gKG1heENvbXBhcmUoY29tcGFyYXRvciwgYSwgYikgPyBiIDogYSk7IH0pO1xufVxuXG5mdW5jdGlvbiBtYXhDb21wYXJlKGNvbXBhcmF0b3IsIGEsIGIpIHtcbiAgdmFyIGNvbXAgPSBjb21wYXJhdG9yKGIsIGEpO1xuICAvLyBiIGlzIGNvbnNpZGVyZWQgdGhlIG5ldyBtYXggaWYgdGhlIGNvbXBhcmF0b3IgZGVjbGFyZXMgdGhlbSBlcXVhbCwgYnV0XG4gIC8vIHRoZXkgYXJlIG5vdCBlcXVhbCBhbmQgYiBpcyBpbiBmYWN0IGEgbnVsbGlzaCB2YWx1ZS5cbiAgcmV0dXJuIChcbiAgICAoY29tcCA9PT0gMCAmJiBiICE9PSBhICYmIChiID09PSB1bmRlZmluZWQgfHwgYiA9PT0gbnVsbCB8fCBiICE9PSBiKSkgfHxcbiAgICBjb21wID4gMFxuICApO1xufVxuXG5mdW5jdGlvbiB6aXBXaXRoRmFjdG9yeShrZXlJdGVyLCB6aXBwZXIsIGl0ZXJzLCB6aXBBbGwpIHtcbiAgdmFyIHppcFNlcXVlbmNlID0gbWFrZVNlcXVlbmNlKGtleUl0ZXIpO1xuICB2YXIgc2l6ZXMgPSBuZXcgQXJyYXlTZXEoaXRlcnMpLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5zaXplOyB9KTtcbiAgemlwU2VxdWVuY2Uuc2l6ZSA9IHppcEFsbCA/IHNpemVzLm1heCgpIDogc2l6ZXMubWluKCk7XG4gIC8vIE5vdGU6IHRoaXMgYSBnZW5lcmljIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgX19pdGVyYXRlIGluIHRlcm1zIG9mXG4gIC8vIF9faXRlcmF0b3Igd2hpY2ggbWF5IGJlIG1vcmUgZ2VuZXJpY2FsbHkgdXNlZnVsIGluIHRoZSBmdXR1cmUuXG4gIHppcFNlcXVlbmNlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICAgIC8qIGdlbmVyaWM6XG4gICAgdmFyIGl0ZXJhdG9yID0gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUywgcmV2ZXJzZSk7XG4gICAgdmFyIHN0ZXA7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHdoaWxlICghKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgIGlmIChmbihzdGVwLnZhbHVlWzFdLCBzdGVwLnZhbHVlWzBdLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRpb25zO1xuICAgICovXG4gICAgLy8gaW5kZXhlZDpcbiAgICB2YXIgaXRlcmF0b3IgPSB0aGlzLl9faXRlcmF0b3IoSVRFUkFURV9WQUxVRVMsIHJldmVyc2UpO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICBpZiAoZm4oc3RlcC52YWx1ZSwgaXRlcmF0aW9ucysrLCB0aGlzKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRpb25zO1xuICB9O1xuICB6aXBTZXF1ZW5jZS5fX2l0ZXJhdG9yVW5jYWNoZWQgPSBmdW5jdGlvbiAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBpdGVyYXRvcnMgPSBpdGVycy5tYXAoXG4gICAgICBmdW5jdGlvbiAoaSkgeyByZXR1cm4gKChpID0gQ29sbGVjdGlvbihpKSksIGdldEl0ZXJhdG9yKHJldmVyc2UgPyBpLnJldmVyc2UoKSA6IGkpKTsgfVxuICAgICk7XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHZhciBpc0RvbmUgPSBmYWxzZTtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwcztcbiAgICAgIGlmICghaXNEb25lKSB7XG4gICAgICAgIHN0ZXBzID0gaXRlcmF0b3JzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5uZXh0KCk7IH0pO1xuICAgICAgICBpc0RvbmUgPSB6aXBBbGwgPyBzdGVwcy5ldmVyeShmdW5jdGlvbiAocykgeyByZXR1cm4gcy5kb25lOyB9KSA6IHN0ZXBzLnNvbWUoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZG9uZTsgfSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb25lKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvclZhbHVlKFxuICAgICAgICB0eXBlLFxuICAgICAgICBpdGVyYXRpb25zKyssXG4gICAgICAgIHppcHBlci5hcHBseShcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIHN0ZXBzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy52YWx1ZTsgfSlcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIHppcFNlcXVlbmNlO1xufVxuXG4vLyAjcHJhZ21hIEhlbHBlciBGdW5jdGlvbnNcblxuZnVuY3Rpb24gcmVpZnkoaXRlciwgc2VxKSB7XG4gIHJldHVybiBpdGVyID09PSBzZXEgPyBpdGVyIDogaXNTZXEoaXRlcikgPyBzZXEgOiBpdGVyLmNvbnN0cnVjdG9yKHNlcSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRW50cnkoZW50cnkpIHtcbiAgaWYgKGVudHJ5ICE9PSBPYmplY3QoZW50cnkpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgW0ssIFZdIHR1cGxlOiAnICsgZW50cnkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3Rpb25DbGFzcyhjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBpc0tleWVkKGNvbGxlY3Rpb24pXG4gICAgPyBLZXllZENvbGxlY3Rpb25cbiAgICA6IGlzSW5kZXhlZChjb2xsZWN0aW9uKVxuICAgID8gSW5kZXhlZENvbGxlY3Rpb25cbiAgICA6IFNldENvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIG1ha2VTZXF1ZW5jZShjb2xsZWN0aW9uKSB7XG4gIHJldHVybiBPYmplY3QuY3JlYXRlKFxuICAgIChpc0tleWVkKGNvbGxlY3Rpb24pXG4gICAgICA/IEtleWVkU2VxXG4gICAgICA6IGlzSW5kZXhlZChjb2xsZWN0aW9uKVxuICAgICAgPyBJbmRleGVkU2VxXG4gICAgICA6IFNldFNlcVxuICAgICkucHJvdG90eXBlXG4gICk7XG59XG5cbmZ1bmN0aW9uIGNhY2hlUmVzdWx0VGhyb3VnaCgpIHtcbiAgaWYgKHRoaXMuX2l0ZXIuY2FjaGVSZXN1bHQpIHtcbiAgICB0aGlzLl9pdGVyLmNhY2hlUmVzdWx0KCk7XG4gICAgdGhpcy5zaXplID0gdGhpcy5faXRlci5zaXplO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHJldHVybiBTZXEucHJvdG90eXBlLmNhY2hlUmVzdWx0LmNhbGwodGhpcyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJhdG9yKGEsIGIpIHtcbiAgaWYgKGEgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIGlmIChhID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGlmIChiID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICByZXR1cm4gYSA+IGIgPyAxIDogYSA8IGIgPyAtMSA6IDA7XG59XG5cbmZ1bmN0aW9uIGFyckNvcHkoYXJyLCBvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBsZW4gPSBNYXRoLm1heCgwLCBhcnIubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgdmFyIG5ld0FyciA9IG5ldyBBcnJheShsZW4pO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgbmV3QXJyW2lpXSA9IGFycltpaSArIG9mZnNldF07XG4gIH1cbiAgcmV0dXJuIG5ld0Fycjtcbn1cblxuZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgZXJyb3IpIHtcbiAgaWYgKCFjb25kaXRpb24pIHsgdGhyb3cgbmV3IEVycm9yKGVycm9yKTsgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnROb3RJbmZpbml0ZShzaXplKSB7XG4gIGludmFyaWFudChcbiAgICBzaXplICE9PSBJbmZpbml0eSxcbiAgICAnQ2Fubm90IHBlcmZvcm0gdGhpcyBhY3Rpb24gd2l0aCBhbiBpbmZpbml0ZSBzaXplLidcbiAgKTtcbn1cblxuZnVuY3Rpb24gY29lcmNlS2V5UGF0aChrZXlQYXRoKSB7XG4gIGlmIChpc0FycmF5TGlrZShrZXlQYXRoKSAmJiB0eXBlb2Yga2V5UGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4ga2V5UGF0aDtcbiAgfVxuICBpZiAoaXNPcmRlcmVkKGtleVBhdGgpKSB7XG4gICAgcmV0dXJuIGtleVBhdGgudG9BcnJheSgpO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ0ludmFsaWQga2V5UGF0aDogZXhwZWN0ZWQgT3JkZXJlZCBDb2xsZWN0aW9uIG9yIEFycmF5OiAnICsga2V5UGF0aFxuICApO1xufVxuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIC8vIFRoZSBiYXNlIHByb3RvdHlwZSdzIHRvU3RyaW5nIGRlYWxzIHdpdGggQXJndW1lbnQgb2JqZWN0cyBhbmQgbmF0aXZlIG5hbWVzcGFjZXMgbGlrZSBNYXRoXG4gIGlmIChcbiAgICAhdmFsdWUgfHxcbiAgICB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IE9iamVjdF0nXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gSXRlcmF0aXZlbHkgZ29pbmcgdXAgdGhlIHByb3RvdHlwZSBjaGFpbiBpcyBuZWVkZWQgZm9yIGNyb3NzLXJlYWxtIGVudmlyb25tZW50cyAoZGlmZmVyaW5nIGNvbnRleHRzLCBpZnJhbWVzLCBldGMpXG4gIHZhciBwYXJlbnRQcm90byA9IHByb3RvO1xuICB2YXIgbmV4dFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvKTtcbiAgd2hpbGUgKG5leHRQcm90byAhPT0gbnVsbCkge1xuICAgIHBhcmVudFByb3RvID0gbmV4dFByb3RvO1xuICAgIG5leHRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwYXJlbnRQcm90byk7XG4gIH1cbiAgcmV0dXJuIHBhcmVudFByb3RvID09PSBwcm90bztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGlzIGEgcG90ZW50aWFsbHktcGVyc2lzdGVudCBkYXRhIHN0cnVjdHVyZSwgZWl0aGVyXG4gKiBwcm92aWRlZCBieSBJbW11dGFibGUuanMgb3IgYSBwbGFpbiBBcnJheSBvciBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGlzRGF0YVN0cnVjdHVyZSh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcbiAgICAoaXNJbW11dGFibGUodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKVxuICApO1xufVxuXG5mdW5jdGlvbiBxdW90ZVN0cmluZyh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogU3RyaW5nKHZhbHVlKTtcbiAgfSBjYXRjaCAoX2lnbm9yZUVycm9yKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXMoY29sbGVjdGlvbiwga2V5KSB7XG4gIHJldHVybiBpc0ltbXV0YWJsZShjb2xsZWN0aW9uKVxuICAgID8gY29sbGVjdGlvbi5oYXMoa2V5KVxuICAgIDogaXNEYXRhU3RydWN0dXJlKGNvbGxlY3Rpb24pICYmIGhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwga2V5KTtcbn1cblxuZnVuY3Rpb24gZ2V0KGNvbGxlY3Rpb24sIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgcmV0dXJuIGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pXG4gICAgPyBjb2xsZWN0aW9uLmdldChrZXksIG5vdFNldFZhbHVlKVxuICAgIDogIWhhcyhjb2xsZWN0aW9uLCBrZXkpXG4gICAgPyBub3RTZXRWYWx1ZVxuICAgIDogdHlwZW9mIGNvbGxlY3Rpb24uZ2V0ID09PSAnZnVuY3Rpb24nXG4gICAgPyBjb2xsZWN0aW9uLmdldChrZXkpXG4gICAgOiBjb2xsZWN0aW9uW2tleV07XG59XG5cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KGZyb20pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZnJvbSkpIHtcbiAgICByZXR1cm4gYXJyQ29weShmcm9tKTtcbiAgfVxuICB2YXIgdG8gPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG4gICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5cbmZ1bmN0aW9uIHJlbW92ZShjb2xsZWN0aW9uLCBrZXkpIHtcbiAgaWYgKCFpc0RhdGFTdHJ1Y3R1cmUoY29sbGVjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0Nhbm5vdCB1cGRhdGUgbm9uLWRhdGEtc3RydWN0dXJlIHZhbHVlOiAnICsgY29sbGVjdGlvblxuICAgICk7XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uLnJlbW92ZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCB1cGRhdGUgaW1tdXRhYmxlIHZhbHVlIHdpdGhvdXQgLnJlbW92ZSgpIG1ldGhvZDogJyArIGNvbGxlY3Rpb25cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLnJlbW92ZShrZXkpO1xuICB9XG4gIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChjb2xsZWN0aW9uLCBrZXkpKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH1cbiAgdmFyIGNvbGxlY3Rpb25Db3B5ID0gc2hhbGxvd0NvcHkoY29sbGVjdGlvbik7XG4gIGlmIChBcnJheS5pc0FycmF5KGNvbGxlY3Rpb25Db3B5KSkge1xuICAgIGNvbGxlY3Rpb25Db3B5LnNwbGljZShrZXksIDEpO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBjb2xsZWN0aW9uQ29weVtrZXldO1xuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uQ29weTtcbn1cblxuZnVuY3Rpb24gc2V0KGNvbGxlY3Rpb24sIGtleSwgdmFsdWUpIHtcbiAgaWYgKCFpc0RhdGFTdHJ1Y3R1cmUoY29sbGVjdGlvbikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0Nhbm5vdCB1cGRhdGUgbm9uLWRhdGEtc3RydWN0dXJlIHZhbHVlOiAnICsgY29sbGVjdGlvblxuICAgICk7XG4gIH1cbiAgaWYgKGlzSW1tdXRhYmxlKGNvbGxlY3Rpb24pKSB7XG4gICAgaWYgKCFjb2xsZWN0aW9uLnNldCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgJ0Nhbm5vdCB1cGRhdGUgaW1tdXRhYmxlIHZhbHVlIHdpdGhvdXQgLnNldCgpIG1ldGhvZDogJyArIGNvbGxlY3Rpb25cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBjb2xsZWN0aW9uLnNldChrZXksIHZhbHVlKTtcbiAgfVxuICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb2xsZWN0aW9uLCBrZXkpICYmIHZhbHVlID09PSBjb2xsZWN0aW9uW2tleV0pIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfVxuICB2YXIgY29sbGVjdGlvbkNvcHkgPSBzaGFsbG93Q29weShjb2xsZWN0aW9uKTtcbiAgY29sbGVjdGlvbkNvcHlba2V5XSA9IHZhbHVlO1xuICByZXR1cm4gY29sbGVjdGlvbkNvcHk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluJDEoY29sbGVjdGlvbiwga2V5UGF0aCwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgaWYgKCF1cGRhdGVyKSB7XG4gICAgdXBkYXRlciA9IG5vdFNldFZhbHVlO1xuICAgIG5vdFNldFZhbHVlID0gdW5kZWZpbmVkO1xuICB9XG4gIHZhciB1cGRhdGVkVmFsdWUgPSB1cGRhdGVJbkRlZXBseShcbiAgICBpc0ltbXV0YWJsZShjb2xsZWN0aW9uKSxcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvZXJjZUtleVBhdGgoa2V5UGF0aCksXG4gICAgMCxcbiAgICBub3RTZXRWYWx1ZSxcbiAgICB1cGRhdGVyXG4gICk7XG4gIHJldHVybiB1cGRhdGVkVmFsdWUgPT09IE5PVF9TRVQgPyBub3RTZXRWYWx1ZSA6IHVwZGF0ZWRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW5EZWVwbHkoXG4gIGluSW1tdXRhYmxlLFxuICBleGlzdGluZyxcbiAga2V5UGF0aCxcbiAgaSxcbiAgbm90U2V0VmFsdWUsXG4gIHVwZGF0ZXJcbikge1xuICB2YXIgd2FzTm90U2V0ID0gZXhpc3RpbmcgPT09IE5PVF9TRVQ7XG4gIGlmIChpID09PSBrZXlQYXRoLmxlbmd0aCkge1xuICAgIHZhciBleGlzdGluZ1ZhbHVlID0gd2FzTm90U2V0ID8gbm90U2V0VmFsdWUgOiBleGlzdGluZztcbiAgICB2YXIgbmV3VmFsdWUgPSB1cGRhdGVyKGV4aXN0aW5nVmFsdWUpO1xuICAgIHJldHVybiBuZXdWYWx1ZSA9PT0gZXhpc3RpbmdWYWx1ZSA/IGV4aXN0aW5nIDogbmV3VmFsdWU7XG4gIH1cbiAgaWYgKCF3YXNOb3RTZXQgJiYgIWlzRGF0YVN0cnVjdHVyZShleGlzdGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ0Nhbm5vdCB1cGRhdGUgd2l0aGluIG5vbi1kYXRhLXN0cnVjdHVyZSB2YWx1ZSBpbiBwYXRoIFsnICtcbiAgICAgICAga2V5UGF0aC5zbGljZSgwLCBpKS5tYXAocXVvdGVTdHJpbmcpICtcbiAgICAgICAgJ106ICcgK1xuICAgICAgICBleGlzdGluZ1xuICAgICk7XG4gIH1cbiAgdmFyIGtleSA9IGtleVBhdGhbaV07XG4gIHZhciBuZXh0RXhpc3RpbmcgPSB3YXNOb3RTZXQgPyBOT1RfU0VUIDogZ2V0KGV4aXN0aW5nLCBrZXksIE5PVF9TRVQpO1xuICB2YXIgbmV4dFVwZGF0ZWQgPSB1cGRhdGVJbkRlZXBseShcbiAgICBuZXh0RXhpc3RpbmcgPT09IE5PVF9TRVQgPyBpbkltbXV0YWJsZSA6IGlzSW1tdXRhYmxlKG5leHRFeGlzdGluZyksXG4gICAgbmV4dEV4aXN0aW5nLFxuICAgIGtleVBhdGgsXG4gICAgaSArIDEsXG4gICAgbm90U2V0VmFsdWUsXG4gICAgdXBkYXRlclxuICApO1xuICByZXR1cm4gbmV4dFVwZGF0ZWQgPT09IG5leHRFeGlzdGluZ1xuICAgID8gZXhpc3RpbmdcbiAgICA6IG5leHRVcGRhdGVkID09PSBOT1RfU0VUXG4gICAgPyByZW1vdmUoZXhpc3RpbmcsIGtleSlcbiAgICA6IHNldChcbiAgICAgICAgd2FzTm90U2V0ID8gKGluSW1tdXRhYmxlID8gZW1wdHlNYXAoKSA6IHt9KSA6IGV4aXN0aW5nLFxuICAgICAgICBrZXksXG4gICAgICAgIG5leHRVcGRhdGVkXG4gICAgICApO1xufVxuXG5mdW5jdGlvbiBzZXRJbiQxKGNvbGxlY3Rpb24sIGtleVBhdGgsIHZhbHVlKSB7XG4gIHJldHVybiB1cGRhdGVJbiQxKGNvbGxlY3Rpb24sIGtleVBhdGgsIE5PVF9TRVQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbHVlOyB9KTtcbn1cblxuZnVuY3Rpb24gc2V0SW4oa2V5UGF0aCwgdikge1xuICByZXR1cm4gc2V0SW4kMSh0aGlzLCBrZXlQYXRoLCB2KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlSW4oY29sbGVjdGlvbiwga2V5UGF0aCkge1xuICByZXR1cm4gdXBkYXRlSW4kMShjb2xsZWN0aW9uLCBrZXlQYXRoLCBmdW5jdGlvbiAoKSB7IHJldHVybiBOT1RfU0VUOyB9KTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlSW4oa2V5UGF0aCkge1xuICByZXR1cm4gcmVtb3ZlSW4odGhpcywga2V5UGF0aCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZSQxKGNvbGxlY3Rpb24sIGtleSwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgcmV0dXJuIHVwZGF0ZUluJDEoY29sbGVjdGlvbiwgW2tleV0sIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlKGtleSwgbm90U2V0VmFsdWUsIHVwZGF0ZXIpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDFcbiAgICA/IGtleSh0aGlzKVxuICAgIDogdXBkYXRlJDEodGhpcywga2V5LCBub3RTZXRWYWx1ZSwgdXBkYXRlcik7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluKGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKSB7XG4gIHJldHVybiB1cGRhdGVJbiQxKHRoaXMsIGtleVBhdGgsIG5vdFNldFZhbHVlLCB1cGRhdGVyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UkMSgpIHtcbiAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBpdGVyc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBtZXJnZUludG9LZXllZFdpdGgodGhpcywgaXRlcnMpO1xufVxuXG5mdW5jdGlvbiBtZXJnZVdpdGgkMShtZXJnZXIpIHtcbiAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICB3aGlsZSAoIGxlbi0tID4gMCApIGl0ZXJzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIGlmICh0eXBlb2YgbWVyZ2VyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBtZXJnZXIgZnVuY3Rpb246ICcgKyBtZXJnZXIpO1xuICB9XG4gIHJldHVybiBtZXJnZUludG9LZXllZFdpdGgodGhpcywgaXRlcnMsIG1lcmdlcik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlSW50b0tleWVkV2l0aChjb2xsZWN0aW9uLCBjb2xsZWN0aW9ucywgbWVyZ2VyKSB7XG4gIHZhciBpdGVycyA9IFtdO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpaSsrKSB7XG4gICAgdmFyIGNvbGxlY3Rpb24kMSA9IEtleWVkQ29sbGVjdGlvbihjb2xsZWN0aW9uc1tpaV0pO1xuICAgIGlmIChjb2xsZWN0aW9uJDEuc2l6ZSAhPT0gMCkge1xuICAgICAgaXRlcnMucHVzaChjb2xsZWN0aW9uJDEpO1xuICAgIH1cbiAgfVxuICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb247XG4gIH1cbiAgaWYgKFxuICAgIGNvbGxlY3Rpb24udG9TZXEoKS5zaXplID09PSAwICYmXG4gICAgIWNvbGxlY3Rpb24uX19vd25lcklEICYmXG4gICAgaXRlcnMubGVuZ3RoID09PSAxXG4gICkge1xuICAgIHJldHVybiBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yKGl0ZXJzWzBdKTtcbiAgfVxuICByZXR1cm4gY29sbGVjdGlvbi53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChjb2xsZWN0aW9uKSB7XG4gICAgdmFyIG1lcmdlSW50b0NvbGxlY3Rpb24gPSBtZXJnZXJcbiAgICAgID8gZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICB1cGRhdGUkMShjb2xsZWN0aW9uLCBrZXksIE5PVF9TRVQsIGZ1bmN0aW9uIChvbGRWYWwpIHsgcmV0dXJuIG9sZFZhbCA9PT0gTk9UX1NFVCA/IHZhbHVlIDogbWVyZ2VyKG9sZFZhbCwgdmFsdWUsIGtleSk7IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgY29sbGVjdGlvbi5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgaXRlcnNbaWldLmZvckVhY2gobWVyZ2VJbnRvQ29sbGVjdGlvbik7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gbWVyZ2UoY29sbGVjdGlvbikge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHJldHVybiBtZXJnZVdpdGhTb3VyY2VzKGNvbGxlY3Rpb24sIHNvdXJjZXMpO1xufVxuXG5mdW5jdGlvbiBtZXJnZVdpdGgobWVyZ2VyLCBjb2xsZWN0aW9uKSB7XG4gIHZhciBzb3VyY2VzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuICB3aGlsZSAoIGxlbi0tID4gMCApIHNvdXJjZXNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAyIF07XG5cbiAgcmV0dXJuIG1lcmdlV2l0aFNvdXJjZXMoY29sbGVjdGlvbiwgc291cmNlcywgbWVyZ2VyKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwJDEoY29sbGVjdGlvbikge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIHJldHVybiBtZXJnZURlZXBXaXRoU291cmNlcyhjb2xsZWN0aW9uLCBzb3VyY2VzKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwV2l0aCQxKG1lcmdlciwgY29sbGVjdGlvbikge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMiBdO1xuXG4gIHJldHVybiBtZXJnZURlZXBXaXRoU291cmNlcyhjb2xsZWN0aW9uLCBzb3VyY2VzLCBtZXJnZXIpO1xufVxuXG5mdW5jdGlvbiBtZXJnZURlZXBXaXRoU291cmNlcyhjb2xsZWN0aW9uLCBzb3VyY2VzLCBtZXJnZXIpIHtcbiAgcmV0dXJuIG1lcmdlV2l0aFNvdXJjZXMoY29sbGVjdGlvbiwgc291cmNlcywgZGVlcE1lcmdlcldpdGgobWVyZ2VyKSk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlV2l0aFNvdXJjZXMoY29sbGVjdGlvbiwgc291cmNlcywgbWVyZ2VyKSB7XG4gIGlmICghaXNEYXRhU3RydWN0dXJlKGNvbGxlY3Rpb24pKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdDYW5ub3QgbWVyZ2UgaW50byBub24tZGF0YS1zdHJ1Y3R1cmUgdmFsdWU6ICcgKyBjb2xsZWN0aW9uXG4gICAgKTtcbiAgfVxuICBpZiAoaXNJbW11dGFibGUoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gdHlwZW9mIG1lcmdlciA9PT0gJ2Z1bmN0aW9uJyAmJiBjb2xsZWN0aW9uLm1lcmdlV2l0aFxuICAgICAgPyBjb2xsZWN0aW9uLm1lcmdlV2l0aC5hcHBseShjb2xsZWN0aW9uLCBbIG1lcmdlciBdLmNvbmNhdCggc291cmNlcyApKVxuICAgICAgOiBjb2xsZWN0aW9uLm1lcmdlXG4gICAgICA/IGNvbGxlY3Rpb24ubWVyZ2UuYXBwbHkoY29sbGVjdGlvbiwgc291cmNlcylcbiAgICAgIDogY29sbGVjdGlvbi5jb25jYXQuYXBwbHkoY29sbGVjdGlvbiwgc291cmNlcyk7XG4gIH1cbiAgdmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pO1xuICB2YXIgbWVyZ2VkID0gY29sbGVjdGlvbjtcbiAgdmFyIENvbGxlY3Rpb24gPSBpc0FycmF5ID8gSW5kZXhlZENvbGxlY3Rpb24gOiBLZXllZENvbGxlY3Rpb247XG4gIHZhciBtZXJnZUl0ZW0gPSBpc0FycmF5XG4gICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gQ29weSBvbiB3cml0ZVxuICAgICAgICBpZiAobWVyZ2VkID09PSBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgbWVyZ2VkID0gc2hhbGxvd0NvcHkobWVyZ2VkKTtcbiAgICAgICAgfVxuICAgICAgICBtZXJnZWQucHVzaCh2YWx1ZSk7XG4gICAgICB9XG4gICAgOiBmdW5jdGlvbiAodmFsdWUsIGtleSkge1xuICAgICAgICB2YXIgaGFzVmFsID0gaGFzT3duUHJvcGVydHkuY2FsbChtZXJnZWQsIGtleSk7XG4gICAgICAgIHZhciBuZXh0VmFsID1cbiAgICAgICAgICBoYXNWYWwgJiYgbWVyZ2VyID8gbWVyZ2VyKG1lcmdlZFtrZXldLCB2YWx1ZSwga2V5KSA6IHZhbHVlO1xuICAgICAgICBpZiAoIWhhc1ZhbCB8fCBuZXh0VmFsICE9PSBtZXJnZWRba2V5XSkge1xuICAgICAgICAgIC8vIENvcHkgb24gd3JpdGVcbiAgICAgICAgICBpZiAobWVyZ2VkID09PSBjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICBtZXJnZWQgPSBzaGFsbG93Q29weShtZXJnZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtZXJnZWRba2V5XSA9IG5leHRWYWw7XG4gICAgICAgIH1cbiAgICAgIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgIENvbGxlY3Rpb24oc291cmNlc1tpXSkuZm9yRWFjaChtZXJnZUl0ZW0pO1xuICB9XG4gIHJldHVybiBtZXJnZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZXBNZXJnZXJXaXRoKG1lcmdlcikge1xuICBmdW5jdGlvbiBkZWVwTWVyZ2VyKG9sZFZhbHVlLCBuZXdWYWx1ZSwga2V5KSB7XG4gICAgcmV0dXJuIGlzRGF0YVN0cnVjdHVyZShvbGRWYWx1ZSkgJiZcbiAgICAgIGlzRGF0YVN0cnVjdHVyZShuZXdWYWx1ZSkgJiZcbiAgICAgIGFyZU1lcmdlYWJsZShvbGRWYWx1ZSwgbmV3VmFsdWUpXG4gICAgICA/IG1lcmdlV2l0aFNvdXJjZXMob2xkVmFsdWUsIFtuZXdWYWx1ZV0sIGRlZXBNZXJnZXIpXG4gICAgICA6IG1lcmdlclxuICAgICAgPyBtZXJnZXIob2xkVmFsdWUsIG5ld1ZhbHVlLCBrZXkpXG4gICAgICA6IG5ld1ZhbHVlO1xuICB9XG4gIHJldHVybiBkZWVwTWVyZ2VyO1xufVxuXG4vKipcbiAqIEl0J3MgdW5jbGVhciB3aGF0IHRoZSBkZXNpcmVkIGJlaGF2aW9yIGlzIGZvciBtZXJnaW5nIHR3byBjb2xsZWN0aW9ucyB0aGF0XG4gKiBmYWxsIGludG8gc2VwYXJhdGUgY2F0ZWdvcmllcyBiZXR3ZWVuIGtleWVkLCBpbmRleGVkLCBvciBzZXQtbGlrZSwgc28gd2Ugb25seVxuICogY29uc2lkZXIgdGhlbSBtZXJnZWFibGUgaWYgdGhleSBmYWxsIGludG8gdGhlIHNhbWUgY2F0ZWdvcnkuXG4gKi9cbmZ1bmN0aW9uIGFyZU1lcmdlYWJsZShvbGREYXRhU3RydWN0dXJlLCBuZXdEYXRhU3RydWN0dXJlKSB7XG4gIHZhciBvbGRTZXEgPSBTZXEob2xkRGF0YVN0cnVjdHVyZSk7XG4gIHZhciBuZXdTZXEgPSBTZXEobmV3RGF0YVN0cnVjdHVyZSk7XG4gIC8vIFRoaXMgbG9naWMgYXNzdW1lcyB0aGF0IGEgc2VxdWVuY2UgY2FuIG9ubHkgZmFsbCBpbnRvIG9uZSBvZiB0aGUgdGhyZWVcbiAgLy8gY2F0ZWdvcmllcyBtZW50aW9uZWQgYWJvdmUgKHNpbmNlIHRoZXJlJ3Mgbm8gYGlzU2V0TGlrZSgpYCBtZXRob2QpLlxuICByZXR1cm4gKFxuICAgIGlzSW5kZXhlZChvbGRTZXEpID09PSBpc0luZGV4ZWQobmV3U2VxKSAmJlxuICAgIGlzS2V5ZWQob2xkU2VxKSA9PT0gaXNLZXllZChuZXdTZXEpXG4gICk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVlcCgpIHtcbiAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBpdGVyc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBtZXJnZURlZXBXaXRoU291cmNlcyh0aGlzLCBpdGVycyk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlRGVlcFdpdGgobWVyZ2VyKSB7XG4gIHZhciBpdGVycyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBpdGVyc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICByZXR1cm4gbWVyZ2VEZWVwV2l0aFNvdXJjZXModGhpcywgaXRlcnMsIG1lcmdlcik7XG59XG5cbmZ1bmN0aW9uIG1lcmdlSW4oa2V5UGF0aCkge1xuICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgcmV0dXJuIHVwZGF0ZUluJDEodGhpcywga2V5UGF0aCwgZW1wdHlNYXAoKSwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1lcmdlV2l0aFNvdXJjZXMobSwgaXRlcnMpOyB9KTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VEZWVwSW4oa2V5UGF0aCkge1xuICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgcmV0dXJuIHVwZGF0ZUluJDEodGhpcywga2V5UGF0aCwgZW1wdHlNYXAoKSwgZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1lcmdlRGVlcFdpdGhTb3VyY2VzKG0sIGl0ZXJzKTsgfVxuICApO1xufVxuXG5mdW5jdGlvbiB3aXRoTXV0YXRpb25zKGZuKSB7XG4gIHZhciBtdXRhYmxlID0gdGhpcy5hc011dGFibGUoKTtcbiAgZm4obXV0YWJsZSk7XG4gIHJldHVybiBtdXRhYmxlLndhc0FsdGVyZWQoKSA/IG11dGFibGUuX19lbnN1cmVPd25lcih0aGlzLl9fb3duZXJJRCkgOiB0aGlzO1xufVxuXG5mdW5jdGlvbiBhc011dGFibGUoKSB7XG4gIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiB0aGlzLl9fZW5zdXJlT3duZXIobmV3IE93bmVySUQoKSk7XG59XG5cbmZ1bmN0aW9uIGFzSW1tdXRhYmxlKCkge1xuICByZXR1cm4gdGhpcy5fX2Vuc3VyZU93bmVyKCk7XG59XG5cbmZ1bmN0aW9uIHdhc0FsdGVyZWQoKSB7XG4gIHJldHVybiB0aGlzLl9fYWx0ZXJlZDtcbn1cblxudmFyIE1hcCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEtleWVkQ29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBNYXAodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGxcbiAgICAgID8gZW1wdHlNYXAoKVxuICAgICAgOiBpc01hcCh2YWx1ZSkgJiYgIWlzT3JkZXJlZCh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogZW1wdHlNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkQ29sbGVjdGlvbih2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIG1hcC5zZXQoaywgdik7IH0pO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGlmICggS2V5ZWRDb2xsZWN0aW9uICkgTWFwLl9fcHJvdG9fXyA9IEtleWVkQ29sbGVjdGlvbjtcbiAgTWFwLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEtleWVkQ29sbGVjdGlvbiAmJiBLZXllZENvbGxlY3Rpb24ucHJvdG90eXBlICk7XG4gIE1hcC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNYXA7XG5cbiAgTWFwLm9mID0gZnVuY3Rpb24gb2YgKCkge1xuICAgIHZhciBrZXlWYWx1ZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkga2V5VmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gZW1wdHlNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIGlmIChpICsgMSA+PSBrZXlWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHZhbHVlIGZvciBrZXk6ICcgKyBrZXlWYWx1ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIG1hcC5zZXQoa2V5VmFsdWVzW2ldLCBrZXlWYWx1ZXNbaSArIDFdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIHJldHVybiB0aGlzLl9fdG9TdHJpbmcoJ01hcCB7JywgJ30nKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gIE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChrLCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLl9yb290XG4gICAgICA/IHRoaXMuX3Jvb3QuZ2V0KDAsIHVuZGVmaW5lZCwgaywgbm90U2V0VmFsdWUpXG4gICAgICA6IG5vdFNldFZhbHVlO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKGssIHYpIHtcbiAgICByZXR1cm4gdXBkYXRlTWFwKHRoaXMsIGssIHYpO1xuICB9O1xuXG4gIE1hcC5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlIChrKSB7XG4gICAgcmV0dXJuIHVwZGF0ZU1hcCh0aGlzLCBrLCBOT1RfU0VUKTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLmRlbGV0ZUFsbCA9IGZ1bmN0aW9uIGRlbGV0ZUFsbCAoa2V5cykge1xuICAgIHZhciBjb2xsZWN0aW9uID0gQ29sbGVjdGlvbihrZXlzKTtcblxuICAgIGlmIChjb2xsZWN0aW9uLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKG1hcCkge1xuICAgICAgY29sbGVjdGlvbi5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIG1hcC5yZW1vdmUoa2V5KTsgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fcm9vdCA9IG51bGw7XG4gICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gZW1wdHlNYXAoKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cbiAgTWFwLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gc29ydCAoY29tcGFyYXRvcikge1xuICAgIC8vIExhdGUgYmluZGluZ1xuICAgIHJldHVybiBPcmRlcmVkTWFwKHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgfTtcblxuICBNYXAucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uIHNvcnRCeSAobWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgcmV0dXJuIE9yZGVyZWRNYXAoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgIG1hcC5zZXQoa2V5LCBtYXBwZXIuY2FsbChjb250ZXh0LCB2YWx1ZSwga2V5LCB0aGlzJDEkMSkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBNdXRhYmlsaXR5XG5cbiAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHJldHVybiBuZXcgTWFwSXRlcmF0b3IodGhpcywgdHlwZSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB0aGlzLl9yb290ICYmXG4gICAgICB0aGlzLl9yb290Lml0ZXJhdGUoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgIGl0ZXJhdGlvbnMrKztcbiAgICAgICAgcmV0dXJuIGZuKGVudHJ5WzFdLCBlbnRyeVswXSwgdGhpcyQxJDEpO1xuICAgICAgfSwgcmV2ZXJzZSk7XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghb3duZXJJRCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlNYXAoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG1ha2VNYXAodGhpcy5zaXplLCB0aGlzLl9yb290LCBvd25lcklELCB0aGlzLl9faGFzaCk7XG4gIH07XG5cbiAgcmV0dXJuIE1hcDtcbn0oS2V5ZWRDb2xsZWN0aW9uKSk7XG5cbk1hcC5pc01hcCA9IGlzTWFwO1xuXG52YXIgTWFwUHJvdG90eXBlID0gTWFwLnByb3RvdHlwZTtcbk1hcFByb3RvdHlwZVtJU19NQVBfU1lNQk9MXSA9IHRydWU7XG5NYXBQcm90b3R5cGVbREVMRVRFXSA9IE1hcFByb3RvdHlwZS5yZW1vdmU7XG5NYXBQcm90b3R5cGUucmVtb3ZlQWxsID0gTWFwUHJvdG90eXBlLmRlbGV0ZUFsbDtcbk1hcFByb3RvdHlwZS5zZXRJbiA9IHNldEluO1xuTWFwUHJvdG90eXBlLnJlbW92ZUluID0gTWFwUHJvdG90eXBlLmRlbGV0ZUluID0gZGVsZXRlSW47XG5NYXBQcm90b3R5cGUudXBkYXRlID0gdXBkYXRlO1xuTWFwUHJvdG90eXBlLnVwZGF0ZUluID0gdXBkYXRlSW47XG5NYXBQcm90b3R5cGUubWVyZ2UgPSBNYXBQcm90b3R5cGUuY29uY2F0ID0gbWVyZ2UkMTtcbk1hcFByb3RvdHlwZS5tZXJnZVdpdGggPSBtZXJnZVdpdGgkMTtcbk1hcFByb3RvdHlwZS5tZXJnZURlZXAgPSBtZXJnZURlZXA7XG5NYXBQcm90b3R5cGUubWVyZ2VEZWVwV2l0aCA9IG1lcmdlRGVlcFdpdGg7XG5NYXBQcm90b3R5cGUubWVyZ2VJbiA9IG1lcmdlSW47XG5NYXBQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBtZXJnZURlZXBJbjtcbk1hcFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gd2l0aE11dGF0aW9ucztcbk1hcFByb3RvdHlwZS53YXNBbHRlcmVkID0gd2FzQWx0ZXJlZDtcbk1hcFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGFzSW1tdXRhYmxlO1xuTWFwUHJvdG90eXBlWydAQHRyYW5zZHVjZXIvaW5pdCddID0gTWFwUHJvdG90eXBlLmFzTXV0YWJsZSA9IGFzTXV0YWJsZTtcbk1hcFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uIChyZXN1bHQsIGFycikge1xuICByZXR1cm4gcmVzdWx0LnNldChhcnJbMF0sIGFyclsxXSk7XG59O1xuTWFwUHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmouYXNJbW11dGFibGUoKTtcbn07XG5cbi8vICNwcmFnbWEgVHJpZSBOb2Rlc1xuXG52YXIgQXJyYXlNYXBOb2RlID0gZnVuY3Rpb24gQXJyYXlNYXBOb2RlKG93bmVySUQsIGVudHJpZXMpIHtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbn07XG5cbkFycmF5TWFwTm9kZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChzaGlmdCwga2V5SGFzaCwga2V5LCBub3RTZXRWYWx1ZSkge1xuICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllcztcbiAgZm9yICh2YXIgaWkgPSAwLCBsZW4gPSBlbnRyaWVzLmxlbmd0aDsgaWkgPCBsZW47IGlpKyspIHtcbiAgICBpZiAoaXMoa2V5LCBlbnRyaWVzW2lpXVswXSkpIHtcbiAgICAgIHJldHVybiBlbnRyaWVzW2lpXVsxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vdFNldFZhbHVlO1xufTtcblxuQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXG4gIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICB2YXIgaWR4ID0gMDtcbiAgdmFyIGxlbiA9IGVudHJpZXMubGVuZ3RoO1xuICBmb3IgKDsgaWR4IDwgbGVuOyBpZHgrKykge1xuICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWR4XVswXSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgZXhpc3RzID0gaWR4IDwgbGVuO1xuXG4gIGlmIChleGlzdHMgPyBlbnRyaWVzW2lkeF1bMV0gPT09IHZhbHVlIDogcmVtb3ZlZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgKHJlbW92ZWQgfHwgIWV4aXN0cykgJiYgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuXG4gIGlmIChyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgfVxuXG4gIGlmICghZXhpc3RzICYmICFyZW1vdmVkICYmIGVudHJpZXMubGVuZ3RoID49IE1BWF9BUlJBWV9NQVBfU0laRSkge1xuICAgIHJldHVybiBjcmVhdGVOb2Rlcyhvd25lcklELCBlbnRyaWVzLCBrZXksIHZhbHVlKTtcbiAgfVxuXG4gIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gIHZhciBuZXdFbnRyaWVzID0gaXNFZGl0YWJsZSA/IGVudHJpZXMgOiBhcnJDb3B5KGVudHJpZXMpO1xuXG4gIGlmIChleGlzdHMpIHtcbiAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgaWR4ID09PSBsZW4gLSAxXG4gICAgICAgID8gbmV3RW50cmllcy5wb3AoKVxuICAgICAgICA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBuZXcgQXJyYXlNYXBOb2RlKG93bmVySUQsIG5ld0VudHJpZXMpO1xufTtcblxudmFyIEJpdG1hcEluZGV4ZWROb2RlID0gZnVuY3Rpb24gQml0bWFwSW5kZXhlZE5vZGUob3duZXJJRCwgYml0bWFwLCBub2Rlcykge1xuICB0aGlzLm93bmVySUQgPSBvd25lcklEO1xuICB0aGlzLmJpdG1hcCA9IGJpdG1hcDtcbiAgdGhpcy5ub2RlcyA9IG5vZGVzO1xufTtcblxuQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoc2hpZnQsIGtleUhhc2gsIGtleSwgbm90U2V0VmFsdWUpIHtcbiAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gIH1cbiAgdmFyIGJpdCA9IDEgPDwgKChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLKTtcbiAgdmFyIGJpdG1hcCA9IHRoaXMuYml0bWFwO1xuICByZXR1cm4gKGJpdG1hcCAmIGJpdCkgPT09IDBcbiAgICA/IG5vdFNldFZhbHVlXG4gICAgOiB0aGlzLm5vZGVzW3BvcENvdW50KGJpdG1hcCAmIChiaXQgLSAxKSldLmdldChcbiAgICAgICAgc2hpZnQgKyBTSElGVCxcbiAgICAgICAga2V5SGFzaCxcbiAgICAgICAga2V5LFxuICAgICAgICBub3RTZXRWYWx1ZVxuICAgICAgKTtcbn07XG5cbkJpdG1hcEluZGV4ZWROb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgfVxuICB2YXIga2V5SGFzaEZyYWcgPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgdmFyIGJpdCA9IDEgPDwga2V5SGFzaEZyYWc7XG4gIHZhciBiaXRtYXAgPSB0aGlzLmJpdG1hcDtcbiAgdmFyIGV4aXN0cyA9IChiaXRtYXAgJiBiaXQpICE9PSAwO1xuXG4gIGlmICghZXhpc3RzICYmIHZhbHVlID09PSBOT1RfU0VUKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB2YXIgaWR4ID0gcG9wQ291bnQoYml0bWFwICYgKGJpdCAtIDEpKTtcbiAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgdmFyIG5vZGUgPSBleGlzdHMgPyBub2Rlc1tpZHhdIDogdW5kZWZpbmVkO1xuICB2YXIgbmV3Tm9kZSA9IHVwZGF0ZU5vZGUoXG4gICAgbm9kZSxcbiAgICBvd25lcklELFxuICAgIHNoaWZ0ICsgU0hJRlQsXG4gICAga2V5SGFzaCxcbiAgICBrZXksXG4gICAgdmFsdWUsXG4gICAgZGlkQ2hhbmdlU2l6ZSxcbiAgICBkaWRBbHRlclxuICApO1xuXG4gIGlmIChuZXdOb2RlID09PSBub2RlKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBpZiAoIWV4aXN0cyAmJiBuZXdOb2RlICYmIG5vZGVzLmxlbmd0aCA+PSBNQVhfQklUTUFQX0lOREVYRURfU0laRSkge1xuICAgIHJldHVybiBleHBhbmROb2Rlcyhvd25lcklELCBub2RlcywgYml0bWFwLCBrZXlIYXNoRnJhZywgbmV3Tm9kZSk7XG4gIH1cblxuICBpZiAoXG4gICAgZXhpc3RzICYmXG4gICAgIW5ld05vZGUgJiZcbiAgICBub2Rlcy5sZW5ndGggPT09IDIgJiZcbiAgICBpc0xlYWZOb2RlKG5vZGVzW2lkeCBeIDFdKVxuICApIHtcbiAgICByZXR1cm4gbm9kZXNbaWR4IF4gMV07XG4gIH1cblxuICBpZiAoZXhpc3RzICYmIG5ld05vZGUgJiYgbm9kZXMubGVuZ3RoID09PSAxICYmIGlzTGVhZk5vZGUobmV3Tm9kZSkpIHtcbiAgICByZXR1cm4gbmV3Tm9kZTtcbiAgfVxuXG4gIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gIHZhciBuZXdCaXRtYXAgPSBleGlzdHMgPyAobmV3Tm9kZSA/IGJpdG1hcCA6IGJpdG1hcCBeIGJpdCkgOiBiaXRtYXAgfCBiaXQ7XG4gIHZhciBuZXdOb2RlcyA9IGV4aXN0c1xuICAgID8gbmV3Tm9kZVxuICAgICAgPyBzZXRBdChub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKVxuICAgICAgOiBzcGxpY2VPdXQobm9kZXMsIGlkeCwgaXNFZGl0YWJsZSlcbiAgICA6IHNwbGljZUluKG5vZGVzLCBpZHgsIG5ld05vZGUsIGlzRWRpdGFibGUpO1xuXG4gIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgdGhpcy5iaXRtYXAgPSBuZXdCaXRtYXA7XG4gICAgdGhpcy5ub2RlcyA9IG5ld05vZGVzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBCaXRtYXBJbmRleGVkTm9kZShvd25lcklELCBuZXdCaXRtYXAsIG5ld05vZGVzKTtcbn07XG5cbnZhciBIYXNoQXJyYXlNYXBOb2RlID0gZnVuY3Rpb24gSGFzaEFycmF5TWFwTm9kZShvd25lcklELCBjb3VudCwgbm9kZXMpIHtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgdGhpcy5jb3VudCA9IGNvdW50O1xuICB0aGlzLm5vZGVzID0gbm9kZXM7XG59O1xuXG5IYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gIGlmIChrZXlIYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICBrZXlIYXNoID0gaGFzaChrZXkpO1xuICB9XG4gIHZhciBpZHggPSAoc2hpZnQgPT09IDAgPyBrZXlIYXNoIDoga2V5SGFzaCA+Pj4gc2hpZnQpICYgTUFTSztcbiAgdmFyIG5vZGUgPSB0aGlzLm5vZGVzW2lkeF07XG4gIHJldHVybiBub2RlXG4gICAgPyBub2RlLmdldChzaGlmdCArIFNISUZULCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKVxuICAgIDogbm90U2V0VmFsdWU7XG59O1xuXG5IYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICBpZiAoa2V5SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAga2V5SGFzaCA9IGhhc2goa2V5KTtcbiAgfVxuICB2YXIgaWR4ID0gKHNoaWZ0ID09PSAwID8ga2V5SGFzaCA6IGtleUhhc2ggPj4+IHNoaWZ0KSAmIE1BU0s7XG4gIHZhciByZW1vdmVkID0gdmFsdWUgPT09IE5PVF9TRVQ7XG4gIHZhciBub2RlcyA9IHRoaXMubm9kZXM7XG4gIHZhciBub2RlID0gbm9kZXNbaWR4XTtcblxuICBpZiAocmVtb3ZlZCAmJiAhbm9kZSkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIG5ld05vZGUgPSB1cGRhdGVOb2RlKFxuICAgIG5vZGUsXG4gICAgb3duZXJJRCxcbiAgICBzaGlmdCArIFNISUZULFxuICAgIGtleUhhc2gsXG4gICAga2V5LFxuICAgIHZhbHVlLFxuICAgIGRpZENoYW5nZVNpemUsXG4gICAgZGlkQWx0ZXJcbiAgKTtcbiAgaWYgKG5ld05vZGUgPT09IG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHZhciBuZXdDb3VudCA9IHRoaXMuY291bnQ7XG4gIGlmICghbm9kZSkge1xuICAgIG5ld0NvdW50Kys7XG4gIH0gZWxzZSBpZiAoIW5ld05vZGUpIHtcbiAgICBuZXdDb3VudC0tO1xuICAgIGlmIChuZXdDb3VudCA8IE1JTl9IQVNIX0FSUkFZX01BUF9TSVpFKSB7XG4gICAgICByZXR1cm4gcGFja05vZGVzKG93bmVySUQsIG5vZGVzLCBuZXdDb3VudCwgaWR4KTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNFZGl0YWJsZSA9IG93bmVySUQgJiYgb3duZXJJRCA9PT0gdGhpcy5vd25lcklEO1xuICB2YXIgbmV3Tm9kZXMgPSBzZXRBdChub2RlcywgaWR4LCBuZXdOb2RlLCBpc0VkaXRhYmxlKTtcblxuICBpZiAoaXNFZGl0YWJsZSkge1xuICAgIHRoaXMuY291bnQgPSBuZXdDb3VudDtcbiAgICB0aGlzLm5vZGVzID0gbmV3Tm9kZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICByZXR1cm4gbmV3IEhhc2hBcnJheU1hcE5vZGUob3duZXJJRCwgbmV3Q291bnQsIG5ld05vZGVzKTtcbn07XG5cbnZhciBIYXNoQ29sbGlzaW9uTm9kZSA9IGZ1bmN0aW9uIEhhc2hDb2xsaXNpb25Ob2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJpZXMpIHtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgdGhpcy5lbnRyaWVzID0gZW50cmllcztcbn07XG5cbkhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gIHZhciBlbnRyaWVzID0gdGhpcy5lbnRyaWVzO1xuICBmb3IgKHZhciBpaSA9IDAsIGxlbiA9IGVudHJpZXMubGVuZ3RoOyBpaSA8IGxlbjsgaWkrKykge1xuICAgIGlmIChpcyhrZXksIGVudHJpZXNbaWldWzBdKSkge1xuICAgICAgcmV0dXJuIGVudHJpZXNbaWldWzFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm90U2V0VmFsdWU7XG59O1xuXG5IYXNoQ29sbGlzaW9uTm9kZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChvd25lcklELCBzaGlmdCwga2V5SGFzaCwga2V5LCB2YWx1ZSwgZGlkQ2hhbmdlU2l6ZSwgZGlkQWx0ZXIpIHtcbiAgaWYgKGtleUhhc2ggPT09IHVuZGVmaW5lZCkge1xuICAgIGtleUhhc2ggPSBoYXNoKGtleSk7XG4gIH1cblxuICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuXG4gIGlmIChrZXlIYXNoICE9PSB0aGlzLmtleUhhc2gpIHtcbiAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIFNldFJlZihkaWRBbHRlcik7XG4gICAgU2V0UmVmKGRpZENoYW5nZVNpemUpO1xuICAgIHJldHVybiBtZXJnZUludG9Ob2RlKHRoaXMsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBba2V5LCB2YWx1ZV0pO1xuICB9XG5cbiAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gIHZhciBpZHggPSAwO1xuICB2YXIgbGVuID0gZW50cmllcy5sZW5ndGg7XG4gIGZvciAoOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgaWYgKGlzKGtleSwgZW50cmllc1tpZHhdWzBdKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHZhciBleGlzdHMgPSBpZHggPCBsZW47XG5cbiAgaWYgKGV4aXN0cyA/IGVudHJpZXNbaWR4XVsxXSA9PT0gdmFsdWUgOiByZW1vdmVkKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBTZXRSZWYoZGlkQWx0ZXIpO1xuICAocmVtb3ZlZCB8fCAhZXhpc3RzKSAmJiBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG5cbiAgaWYgKHJlbW92ZWQgJiYgbGVuID09PSAyKSB7XG4gICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBlbnRyaWVzW2lkeCBeIDFdKTtcbiAgfVxuXG4gIHZhciBpc0VkaXRhYmxlID0gb3duZXJJRCAmJiBvd25lcklEID09PSB0aGlzLm93bmVySUQ7XG4gIHZhciBuZXdFbnRyaWVzID0gaXNFZGl0YWJsZSA/IGVudHJpZXMgOiBhcnJDb3B5KGVudHJpZXMpO1xuXG4gIGlmIChleGlzdHMpIHtcbiAgICBpZiAocmVtb3ZlZCkge1xuICAgICAgaWR4ID09PSBsZW4gLSAxXG4gICAgICAgID8gbmV3RW50cmllcy5wb3AoKVxuICAgICAgICA6IChuZXdFbnRyaWVzW2lkeF0gPSBuZXdFbnRyaWVzLnBvcCgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RW50cmllc1tpZHhdID0gW2tleSwgdmFsdWVdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuZXdFbnRyaWVzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfVxuXG4gIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgdGhpcy5lbnRyaWVzID0gbmV3RW50cmllcztcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHJldHVybiBuZXcgSGFzaENvbGxpc2lvbk5vZGUob3duZXJJRCwgdGhpcy5rZXlIYXNoLCBuZXdFbnRyaWVzKTtcbn07XG5cbnZhciBWYWx1ZU5vZGUgPSBmdW5jdGlvbiBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgZW50cnkpIHtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbiAgdGhpcy5rZXlIYXNoID0ga2V5SGFzaDtcbiAgdGhpcy5lbnRyeSA9IGVudHJ5O1xufTtcblxuVmFsdWVOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKHNoaWZ0LCBrZXlIYXNoLCBrZXksIG5vdFNldFZhbHVlKSB7XG4gIHJldHVybiBpcyhrZXksIHRoaXMuZW50cnlbMF0pID8gdGhpcy5lbnRyeVsxXSA6IG5vdFNldFZhbHVlO1xufTtcblxuVmFsdWVOb2RlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBrZXksIHZhbHVlLCBkaWRDaGFuZ2VTaXplLCBkaWRBbHRlcikge1xuICB2YXIgcmVtb3ZlZCA9IHZhbHVlID09PSBOT1RfU0VUO1xuICB2YXIga2V5TWF0Y2ggPSBpcyhrZXksIHRoaXMuZW50cnlbMF0pO1xuICBpZiAoa2V5TWF0Y2ggPyB2YWx1ZSA9PT0gdGhpcy5lbnRyeVsxXSA6IHJlbW92ZWQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIFNldFJlZihkaWRBbHRlcik7XG5cbiAgaWYgKHJlbW92ZWQpIHtcbiAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgcmV0dXJuOyAvLyB1bmRlZmluZWRcbiAgfVxuXG4gIGlmIChrZXlNYXRjaCkge1xuICAgIGlmIChvd25lcklEICYmIG93bmVySUQgPT09IHRoaXMub3duZXJJRCkge1xuICAgICAgdGhpcy5lbnRyeVsxXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVmFsdWVOb2RlKG93bmVySUQsIHRoaXMua2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgfVxuXG4gIFNldFJlZihkaWRDaGFuZ2VTaXplKTtcbiAgcmV0dXJuIG1lcmdlSW50b05vZGUodGhpcywgb3duZXJJRCwgc2hpZnQsIGhhc2goa2V5KSwgW2tleSwgdmFsdWVdKTtcbn07XG5cbi8vICNwcmFnbWEgSXRlcmF0b3JzXG5cbkFycmF5TWFwTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IEhhc2hDb2xsaXNpb25Ob2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgZm9yICh2YXIgaWkgPSAwLCBtYXhJbmRleCA9IGVudHJpZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIGlmIChmbihlbnRyaWVzW3JldmVyc2UgPyBtYXhJbmRleCAtIGlpIDogaWldKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuQml0bWFwSW5kZXhlZE5vZGUucHJvdG90eXBlLml0ZXJhdGUgPSBIYXNoQXJyYXlNYXBOb2RlLnByb3RvdHlwZS5pdGVyYXRlID1cbiAgZnVuY3Rpb24gKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub2RlcztcbiAgICBmb3IgKHZhciBpaSA9IDAsIG1heEluZGV4ID0gbm9kZXMubGVuZ3RoIC0gMTsgaWkgPD0gbWF4SW5kZXg7IGlpKyspIHtcbiAgICAgIHZhciBub2RlID0gbm9kZXNbcmV2ZXJzZSA/IG1heEluZGV4IC0gaWkgOiBpaV07XG4gICAgICBpZiAobm9kZSAmJiBub2RlLml0ZXJhdGUoZm4sIHJldmVyc2UpID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcblZhbHVlTm9kZS5wcm90b3R5cGUuaXRlcmF0ZSA9IGZ1bmN0aW9uIChmbiwgcmV2ZXJzZSkge1xuICByZXR1cm4gZm4odGhpcy5lbnRyeSk7XG59O1xuXG52YXIgTWFwSXRlcmF0b3IgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChJdGVyYXRvcikge1xuICBmdW5jdGlvbiBNYXBJdGVyYXRvcihtYXAsIHR5cGUsIHJldmVyc2UpIHtcbiAgICB0aGlzLl90eXBlID0gdHlwZTtcbiAgICB0aGlzLl9yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICB0aGlzLl9zdGFjayA9IG1hcC5fcm9vdCAmJiBtYXBJdGVyYXRvckZyYW1lKG1hcC5fcm9vdCk7XG4gIH1cblxuICBpZiAoIEl0ZXJhdG9yICkgTWFwSXRlcmF0b3IuX19wcm90b19fID0gSXRlcmF0b3I7XG4gIE1hcEl0ZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEl0ZXJhdG9yICYmIEl0ZXJhdG9yLnByb3RvdHlwZSApO1xuICBNYXBJdGVyYXRvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBNYXBJdGVyYXRvcjtcblxuICBNYXBJdGVyYXRvci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uIG5leHQgKCkge1xuICAgIHZhciB0eXBlID0gdGhpcy5fdHlwZTtcbiAgICB2YXIgc3RhY2sgPSB0aGlzLl9zdGFjaztcbiAgICB3aGlsZSAoc3RhY2spIHtcbiAgICAgIHZhciBub2RlID0gc3RhY2subm9kZTtcbiAgICAgIHZhciBpbmRleCA9IHN0YWNrLmluZGV4Kys7XG4gICAgICB2YXIgbWF4SW5kZXggPSAodm9pZCAwKTtcbiAgICAgIGlmIChub2RlLmVudHJ5KSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBtYXBJdGVyYXRvclZhbHVlKHR5cGUsIG5vZGUuZW50cnkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUuZW50cmllcykge1xuICAgICAgICBtYXhJbmRleCA9IG5vZGUuZW50cmllcy5sZW5ndGggLSAxO1xuICAgICAgICBpZiAoaW5kZXggPD0gbWF4SW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZShcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBub2RlLmVudHJpZXNbdGhpcy5fcmV2ZXJzZSA/IG1heEluZGV4IC0gaW5kZXggOiBpbmRleF1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXhJbmRleCA9IG5vZGUubm9kZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGluZGV4IDw9IG1heEluZGV4KSB7XG4gICAgICAgICAgdmFyIHN1Yk5vZGUgPSBub2RlLm5vZGVzW3RoaXMuX3JldmVyc2UgPyBtYXhJbmRleCAtIGluZGV4IDogaW5kZXhdO1xuICAgICAgICAgIGlmIChzdWJOb2RlKSB7XG4gICAgICAgICAgICBpZiAoc3ViTm9kZS5lbnRyeSkge1xuICAgICAgICAgICAgICByZXR1cm4gbWFwSXRlcmF0b3JWYWx1ZSh0eXBlLCBzdWJOb2RlLmVudHJ5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YWNrID0gdGhpcy5fc3RhY2sgPSBtYXBJdGVyYXRvckZyYW1lKHN1Yk5vZGUsIHN0YWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHN0YWNrID0gdGhpcy5fc3RhY2sgPSB0aGlzLl9zdGFjay5fX3ByZXY7XG4gICAgfVxuICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgfTtcblxuICByZXR1cm4gTWFwSXRlcmF0b3I7XG59KEl0ZXJhdG9yKSk7XG5cbmZ1bmN0aW9uIG1hcEl0ZXJhdG9yVmFsdWUodHlwZSwgZW50cnkpIHtcbiAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgZW50cnlbMF0sIGVudHJ5WzFdKTtcbn1cblxuZnVuY3Rpb24gbWFwSXRlcmF0b3JGcmFtZShub2RlLCBwcmV2KSB7XG4gIHJldHVybiB7XG4gICAgbm9kZTogbm9kZSxcbiAgICBpbmRleDogMCxcbiAgICBfX3ByZXY6IHByZXYsXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1ha2VNYXAoc2l6ZSwgcm9vdCwgb3duZXJJRCwgaGFzaCkge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShNYXBQcm90b3R5cGUpO1xuICBtYXAuc2l6ZSA9IHNpemU7XG4gIG1hcC5fcm9vdCA9IHJvb3Q7XG4gIG1hcC5fX293bmVySUQgPSBvd25lcklEO1xuICBtYXAuX19oYXNoID0gaGFzaDtcbiAgbWFwLl9fYWx0ZXJlZCA9IGZhbHNlO1xuICByZXR1cm4gbWFwO1xufVxuXG52YXIgRU1QVFlfTUFQO1xuZnVuY3Rpb24gZW1wdHlNYXAoKSB7XG4gIHJldHVybiBFTVBUWV9NQVAgfHwgKEVNUFRZX01BUCA9IG1ha2VNYXAoMCkpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVNYXAobWFwLCBrLCB2KSB7XG4gIHZhciBuZXdSb290O1xuICB2YXIgbmV3U2l6ZTtcbiAgaWYgKCFtYXAuX3Jvb3QpIHtcbiAgICBpZiAodiA9PT0gTk9UX1NFVCkge1xuICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgbmV3U2l6ZSA9IDE7XG4gICAgbmV3Um9vdCA9IG5ldyBBcnJheU1hcE5vZGUobWFwLl9fb3duZXJJRCwgW1trLCB2XV0pO1xuICB9IGVsc2Uge1xuICAgIHZhciBkaWRDaGFuZ2VTaXplID0gTWFrZVJlZigpO1xuICAgIHZhciBkaWRBbHRlciA9IE1ha2VSZWYoKTtcbiAgICBuZXdSb290ID0gdXBkYXRlTm9kZShcbiAgICAgIG1hcC5fcm9vdCxcbiAgICAgIG1hcC5fX293bmVySUQsXG4gICAgICAwLFxuICAgICAgdW5kZWZpbmVkLFxuICAgICAgayxcbiAgICAgIHYsXG4gICAgICBkaWRDaGFuZ2VTaXplLFxuICAgICAgZGlkQWx0ZXJcbiAgICApO1xuICAgIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICAgIHJldHVybiBtYXA7XG4gICAgfVxuICAgIG5ld1NpemUgPSBtYXAuc2l6ZSArIChkaWRDaGFuZ2VTaXplLnZhbHVlID8gKHYgPT09IE5PVF9TRVQgPyAtMSA6IDEpIDogMCk7XG4gIH1cbiAgaWYgKG1hcC5fX293bmVySUQpIHtcbiAgICBtYXAuc2l6ZSA9IG5ld1NpemU7XG4gICAgbWFwLl9yb290ID0gbmV3Um9vdDtcbiAgICBtYXAuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgIG1hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgIHJldHVybiBtYXA7XG4gIH1cbiAgcmV0dXJuIG5ld1Jvb3QgPyBtYWtlTWFwKG5ld1NpemUsIG5ld1Jvb3QpIDogZW1wdHlNYXAoKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTm9kZShcbiAgbm9kZSxcbiAgb3duZXJJRCxcbiAgc2hpZnQsXG4gIGtleUhhc2gsXG4gIGtleSxcbiAgdmFsdWUsXG4gIGRpZENoYW5nZVNpemUsXG4gIGRpZEFsdGVyXG4pIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgaWYgKHZhbHVlID09PSBOT1RfU0VUKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgU2V0UmVmKGRpZEFsdGVyKTtcbiAgICBTZXRSZWYoZGlkQ2hhbmdlU2l6ZSk7XG4gICAgcmV0dXJuIG5ldyBWYWx1ZU5vZGUob3duZXJJRCwga2V5SGFzaCwgW2tleSwgdmFsdWVdKTtcbiAgfVxuICByZXR1cm4gbm9kZS51cGRhdGUoXG4gICAgb3duZXJJRCxcbiAgICBzaGlmdCxcbiAgICBrZXlIYXNoLFxuICAgIGtleSxcbiAgICB2YWx1ZSxcbiAgICBkaWRDaGFuZ2VTaXplLFxuICAgIGRpZEFsdGVyXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzTGVhZk5vZGUobm9kZSkge1xuICByZXR1cm4gKFxuICAgIG5vZGUuY29uc3RydWN0b3IgPT09IFZhbHVlTm9kZSB8fCBub2RlLmNvbnN0cnVjdG9yID09PSBIYXNoQ29sbGlzaW9uTm9kZVxuICApO1xufVxuXG5mdW5jdGlvbiBtZXJnZUludG9Ob2RlKG5vZGUsIG93bmVySUQsIHNoaWZ0LCBrZXlIYXNoLCBlbnRyeSkge1xuICBpZiAobm9kZS5rZXlIYXNoID09PSBrZXlIYXNoKSB7XG4gICAgcmV0dXJuIG5ldyBIYXNoQ29sbGlzaW9uTm9kZShvd25lcklELCBrZXlIYXNoLCBbbm9kZS5lbnRyeSwgZW50cnldKTtcbiAgfVxuXG4gIHZhciBpZHgxID0gKHNoaWZ0ID09PSAwID8gbm9kZS5rZXlIYXNoIDogbm9kZS5rZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuICB2YXIgaWR4MiA9IChzaGlmdCA9PT0gMCA/IGtleUhhc2ggOiBrZXlIYXNoID4+PiBzaGlmdCkgJiBNQVNLO1xuXG4gIHZhciBuZXdOb2RlO1xuICB2YXIgbm9kZXMgPVxuICAgIGlkeDEgPT09IGlkeDJcbiAgICAgID8gW21lcmdlSW50b05vZGUobm9kZSwgb3duZXJJRCwgc2hpZnQgKyBTSElGVCwga2V5SGFzaCwgZW50cnkpXVxuICAgICAgOiAoKG5ld05vZGUgPSBuZXcgVmFsdWVOb2RlKG93bmVySUQsIGtleUhhc2gsIGVudHJ5KSksXG4gICAgICAgIGlkeDEgPCBpZHgyID8gW25vZGUsIG5ld05vZGVdIDogW25ld05vZGUsIG5vZGVdKTtcblxuICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsICgxIDw8IGlkeDEpIHwgKDEgPDwgaWR4MiksIG5vZGVzKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTm9kZXMob3duZXJJRCwgZW50cmllcywga2V5LCB2YWx1ZSkge1xuICBpZiAoIW93bmVySUQpIHtcbiAgICBvd25lcklEID0gbmV3IE93bmVySUQoKTtcbiAgfVxuICB2YXIgbm9kZSA9IG5ldyBWYWx1ZU5vZGUob3duZXJJRCwgaGFzaChrZXkpLCBba2V5LCB2YWx1ZV0pO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZW50cmllcy5sZW5ndGg7IGlpKyspIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2lpXTtcbiAgICBub2RlID0gbm9kZS51cGRhdGUob3duZXJJRCwgMCwgdW5kZWZpbmVkLCBlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBwYWNrTm9kZXMob3duZXJJRCwgbm9kZXMsIGNvdW50LCBleGNsdWRpbmcpIHtcbiAgdmFyIGJpdG1hcCA9IDA7XG4gIHZhciBwYWNrZWRJSSA9IDA7XG4gIHZhciBwYWNrZWROb2RlcyA9IG5ldyBBcnJheShjb3VudCk7XG4gIGZvciAodmFyIGlpID0gMCwgYml0ID0gMSwgbGVuID0gbm9kZXMubGVuZ3RoOyBpaSA8IGxlbjsgaWkrKywgYml0IDw8PSAxKSB7XG4gICAgdmFyIG5vZGUgPSBub2Rlc1tpaV07XG4gICAgaWYgKG5vZGUgIT09IHVuZGVmaW5lZCAmJiBpaSAhPT0gZXhjbHVkaW5nKSB7XG4gICAgICBiaXRtYXAgfD0gYml0O1xuICAgICAgcGFja2VkTm9kZXNbcGFja2VkSUkrK10gPSBub2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IEJpdG1hcEluZGV4ZWROb2RlKG93bmVySUQsIGJpdG1hcCwgcGFja2VkTm9kZXMpO1xufVxuXG5mdW5jdGlvbiBleHBhbmROb2Rlcyhvd25lcklELCBub2RlcywgYml0bWFwLCBpbmNsdWRpbmcsIG5vZGUpIHtcbiAgdmFyIGNvdW50ID0gMDtcbiAgdmFyIGV4cGFuZGVkTm9kZXMgPSBuZXcgQXJyYXkoU0laRSk7XG4gIGZvciAodmFyIGlpID0gMDsgYml0bWFwICE9PSAwOyBpaSsrLCBiaXRtYXAgPj4+PSAxKSB7XG4gICAgZXhwYW5kZWROb2Rlc1tpaV0gPSBiaXRtYXAgJiAxID8gbm9kZXNbY291bnQrK10gOiB1bmRlZmluZWQ7XG4gIH1cbiAgZXhwYW5kZWROb2Rlc1tpbmNsdWRpbmddID0gbm9kZTtcbiAgcmV0dXJuIG5ldyBIYXNoQXJyYXlNYXBOb2RlKG93bmVySUQsIGNvdW50ICsgMSwgZXhwYW5kZWROb2Rlcyk7XG59XG5cbmZ1bmN0aW9uIHBvcENvdW50KHgpIHtcbiAgeCAtPSAoeCA+PiAxKSAmIDB4NTU1NTU1NTU7XG4gIHggPSAoeCAmIDB4MzMzMzMzMzMpICsgKCh4ID4+IDIpICYgMHgzMzMzMzMzMyk7XG4gIHggPSAoeCArICh4ID4+IDQpKSAmIDB4MGYwZjBmMGY7XG4gIHggKz0geCA+PiA4O1xuICB4ICs9IHggPj4gMTY7XG4gIHJldHVybiB4ICYgMHg3Zjtcbn1cblxuZnVuY3Rpb24gc2V0QXQoYXJyYXksIGlkeCwgdmFsLCBjYW5FZGl0KSB7XG4gIHZhciBuZXdBcnJheSA9IGNhbkVkaXQgPyBhcnJheSA6IGFyckNvcHkoYXJyYXkpO1xuICBuZXdBcnJheVtpZHhdID0gdmFsO1xuICByZXR1cm4gbmV3QXJyYXk7XG59XG5cbmZ1bmN0aW9uIHNwbGljZUluKGFycmF5LCBpZHgsIHZhbCwgY2FuRWRpdCkge1xuICB2YXIgbmV3TGVuID0gYXJyYXkubGVuZ3RoICsgMTtcbiAgaWYgKGNhbkVkaXQgJiYgaWR4ICsgMSA9PT0gbmV3TGVuKSB7XG4gICAgYXJyYXlbaWR4XSA9IHZhbDtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cbiAgdmFyIG5ld0FycmF5ID0gbmV3IEFycmF5KG5ld0xlbik7XG4gIHZhciBhZnRlciA9IDA7XG4gIGZvciAodmFyIGlpID0gMDsgaWkgPCBuZXdMZW47IGlpKyspIHtcbiAgICBpZiAoaWkgPT09IGlkeCkge1xuICAgICAgbmV3QXJyYXlbaWldID0gdmFsO1xuICAgICAgYWZ0ZXIgPSAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdBcnJheTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT3V0KGFycmF5LCBpZHgsIGNhbkVkaXQpIHtcbiAgdmFyIG5ld0xlbiA9IGFycmF5Lmxlbmd0aCAtIDE7XG4gIGlmIChjYW5FZGl0ICYmIGlkeCA9PT0gbmV3TGVuKSB7XG4gICAgYXJyYXkucG9wKCk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG4gIHZhciBuZXdBcnJheSA9IG5ldyBBcnJheShuZXdMZW4pO1xuICB2YXIgYWZ0ZXIgPSAwO1xuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgbmV3TGVuOyBpaSsrKSB7XG4gICAgaWYgKGlpID09PSBpZHgpIHtcbiAgICAgIGFmdGVyID0gMTtcbiAgICB9XG4gICAgbmV3QXJyYXlbaWldID0gYXJyYXlbaWkgKyBhZnRlcl07XG4gIH1cbiAgcmV0dXJuIG5ld0FycmF5O1xufVxuXG52YXIgTUFYX0FSUkFZX01BUF9TSVpFID0gU0laRSAvIDQ7XG52YXIgTUFYX0JJVE1BUF9JTkRFWEVEX1NJWkUgPSBTSVpFIC8gMjtcbnZhciBNSU5fSEFTSF9BUlJBWV9NQVBfU0laRSA9IFNJWkUgLyA0O1xuXG52YXIgSVNfTElTVF9TWU1CT0wgPSAnQEBfX0lNTVVUQUJMRV9MSVNUX19AQCc7XG5cbmZ1bmN0aW9uIGlzTGlzdChtYXliZUxpc3QpIHtcbiAgcmV0dXJuIEJvb2xlYW4obWF5YmVMaXN0ICYmIG1heWJlTGlzdFtJU19MSVNUX1NZTUJPTF0pO1xufVxuXG52YXIgTGlzdCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEluZGV4ZWRDb2xsZWN0aW9uKSB7XG4gIGZ1bmN0aW9uIExpc3QodmFsdWUpIHtcbiAgICB2YXIgZW1wdHkgPSBlbXB0eUxpc3QoKTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH1cbiAgICBpZiAoaXNMaXN0KHZhbHVlKSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB2YXIgaXRlciA9IEluZGV4ZWRDb2xsZWN0aW9uKHZhbHVlKTtcbiAgICB2YXIgc2l6ZSA9IGl0ZXIuc2l6ZTtcbiAgICBpZiAoc2l6ZSA9PT0gMCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH1cbiAgICBhc3NlcnROb3RJbmZpbml0ZShzaXplKTtcbiAgICBpZiAoc2l6ZSA+IDAgJiYgc2l6ZSA8IFNJWkUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBtYWtlTGlzdCgwLCBzaXplLCBTSElGVCwgbnVsbCwgbmV3IFZOb2RlKGl0ZXIudG9BcnJheSgpKSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gZW1wdHkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgbGlzdC5zZXRTaXplKHNpemUpO1xuICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uICh2LCBpKSB7IHJldHVybiBsaXN0LnNldChpLCB2KTsgfSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIEluZGV4ZWRDb2xsZWN0aW9uICkgTGlzdC5fX3Byb3RvX18gPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgTGlzdC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBJbmRleGVkQ29sbGVjdGlvbiAmJiBJbmRleGVkQ29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgTGlzdC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMaXN0O1xuXG4gIExpc3Qub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnTGlzdCBbJywgJ10nKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gIExpc3QucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaW5kZXgsIG5vdFNldFZhbHVlKSB7XG4gICAgaW5kZXggPSB3cmFwSW5kZXgodGhpcywgaW5kZXgpO1xuICAgIGlmIChpbmRleCA+PSAwICYmIGluZGV4IDwgdGhpcy5zaXplKSB7XG4gICAgICBpbmRleCArPSB0aGlzLl9vcmlnaW47XG4gICAgICB2YXIgbm9kZSA9IGxpc3ROb2RlRm9yKHRoaXMsIGluZGV4KTtcbiAgICAgIHJldHVybiBub2RlICYmIG5vZGUuYXJyYXlbaW5kZXggJiBNQVNLXTtcbiAgICB9XG4gICAgcmV0dXJuIG5vdFNldFZhbHVlO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgTGlzdC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gc2V0IChpbmRleCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlTGlzdCh0aGlzLCBpbmRleCwgdmFsdWUpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaW5kZXgpIHtcbiAgICByZXR1cm4gIXRoaXMuaGFzKGluZGV4KVxuICAgICAgPyB0aGlzXG4gICAgICA6IGluZGV4ID09PSAwXG4gICAgICA/IHRoaXMuc2hpZnQoKVxuICAgICAgOiBpbmRleCA9PT0gdGhpcy5zaXplIC0gMVxuICAgICAgPyB0aGlzLnBvcCgpXG4gICAgICA6IHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5pbnNlcnQgPSBmdW5jdGlvbiBpbnNlcnQgKGluZGV4LCB2YWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuX29yaWdpbiA9IHRoaXMuX2NhcGFjaXR5ID0gMDtcbiAgICAgIHRoaXMuX2xldmVsID0gU0hJRlQ7XG4gICAgICB0aGlzLl9yb290ID0gdGhpcy5fdGFpbCA9IHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBlbXB0eUxpc3QoKTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAoLyouLi52YWx1ZXMqLykge1xuICAgIHZhciB2YWx1ZXMgPSBhcmd1bWVudHM7XG4gICAgdmFyIG9sZFNpemUgPSB0aGlzLnNpemU7XG4gICAgcmV0dXJuIHRoaXMud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgc2V0TGlzdEJvdW5kcyhsaXN0LCAwLCBvbGRTaXplICsgdmFsdWVzLmxlbmd0aCk7XG4gICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgdmFsdWVzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBsaXN0LnNldChvbGRTaXplICsgaWksIHZhbHVlc1tpaV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uIHBvcCAoKSB7XG4gICAgcmV0dXJuIHNldExpc3RCb3VuZHModGhpcywgMCwgLTEpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiB1bnNoaWZ0ICgvKi4uLnZhbHVlcyovKSB7XG4gICAgdmFyIHZhbHVlcyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICBzZXRMaXN0Qm91bmRzKGxpc3QsIC12YWx1ZXMubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCB2YWx1ZXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIGxpc3Quc2V0KGlpLCB2YWx1ZXNbaWldKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uIHNoaWZ0ICgpIHtcbiAgICByZXR1cm4gc2V0TGlzdEJvdW5kcyh0aGlzLCAxKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cbiAgTGlzdC5wcm90b3R5cGUuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0ICgvKi4uLmNvbGxlY3Rpb25zKi8pIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgc2VxcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXJndW1lbnQgPSBhcmd1bWVudHMkMVtpXTtcbiAgICAgIHZhciBzZXEgPSBJbmRleGVkQ29sbGVjdGlvbihcbiAgICAgICAgdHlwZW9mIGFyZ3VtZW50ICE9PSAnc3RyaW5nJyAmJiBoYXNJdGVyYXRvcihhcmd1bWVudClcbiAgICAgICAgICA/IGFyZ3VtZW50XG4gICAgICAgICAgOiBbYXJndW1lbnRdXG4gICAgICApO1xuICAgICAgaWYgKHNlcS5zaXplICE9PSAwKSB7XG4gICAgICAgIHNlcXMucHVzaChzZXEpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2Vxcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaXplID09PSAwICYmICF0aGlzLl9fb3duZXJJRCAmJiBzZXFzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3Ioc2Vxc1swXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgIHNlcXMuZm9yRWFjaChmdW5jdGlvbiAoc2VxKSB7IHJldHVybiBzZXEuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGxpc3QucHVzaCh2YWx1ZSk7IH0pOyB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24gc2V0U2l6ZSAoc2l6ZSkge1xuICAgIHJldHVybiBzZXRMaXN0Qm91bmRzKHRoaXMsIDAsIHNpemUpO1xuICB9O1xuXG4gIExpc3QucHJvdG90eXBlLm1hcCA9IGZ1bmN0aW9uIG1hcCAobWFwcGVyLCBjb250ZXh0KSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKGxpc3QpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcyQxJDEuc2l6ZTsgaSsrKSB7XG4gICAgICAgIGxpc3Quc2V0KGksIG1hcHBlci5jYWxsKGNvbnRleHQsIGxpc3QuZ2V0KGkpLCBpLCB0aGlzJDEkMSkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cbiAgTGlzdC5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHNpemUpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHNldExpc3RCb3VuZHMoXG4gICAgICB0aGlzLFxuICAgICAgcmVzb2x2ZUJlZ2luKGJlZ2luLCBzaXplKSxcbiAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKVxuICAgICk7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICB2YXIgaW5kZXggPSByZXZlcnNlID8gdGhpcy5zaXplIDogMDtcbiAgICB2YXIgdmFsdWVzID0gaXRlcmF0ZUxpc3QodGhpcywgcmV2ZXJzZSk7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gRE9ORVxuICAgICAgICA/IGl0ZXJhdG9yRG9uZSgpXG4gICAgICAgIDogaXRlcmF0b3JWYWx1ZSh0eXBlLCByZXZlcnNlID8gLS1pbmRleCA6IGluZGV4KyssIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICBMaXN0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIGluZGV4ID0gcmV2ZXJzZSA/IHRoaXMuc2l6ZSA6IDA7XG4gICAgdmFyIHZhbHVlcyA9IGl0ZXJhdGVMaXN0KHRoaXMsIHJldmVyc2UpO1xuICAgIHZhciB2YWx1ZTtcbiAgICB3aGlsZSAoKHZhbHVlID0gdmFsdWVzKCkpICE9PSBET05FKSB7XG4gICAgICBpZiAoZm4odmFsdWUsIHJldmVyc2UgPyAtLWluZGV4IDogaW5kZXgrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH07XG5cbiAgTGlzdC5wcm90b3R5cGUuX19lbnN1cmVPd25lciA9IGZ1bmN0aW9uIF9fZW5zdXJlT3duZXIgKG93bmVySUQpIHtcbiAgICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5TGlzdCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZUxpc3QoXG4gICAgICB0aGlzLl9vcmlnaW4sXG4gICAgICB0aGlzLl9jYXBhY2l0eSxcbiAgICAgIHRoaXMuX2xldmVsLFxuICAgICAgdGhpcy5fcm9vdCxcbiAgICAgIHRoaXMuX3RhaWwsXG4gICAgICBvd25lcklELFxuICAgICAgdGhpcy5fX2hhc2hcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBMaXN0O1xufShJbmRleGVkQ29sbGVjdGlvbikpO1xuXG5MaXN0LmlzTGlzdCA9IGlzTGlzdDtcblxudmFyIExpc3RQcm90b3R5cGUgPSBMaXN0LnByb3RvdHlwZTtcbkxpc3RQcm90b3R5cGVbSVNfTElTVF9TWU1CT0xdID0gdHJ1ZTtcbkxpc3RQcm90b3R5cGVbREVMRVRFXSA9IExpc3RQcm90b3R5cGUucmVtb3ZlO1xuTGlzdFByb3RvdHlwZS5tZXJnZSA9IExpc3RQcm90b3R5cGUuY29uY2F0O1xuTGlzdFByb3RvdHlwZS5zZXRJbiA9IHNldEluO1xuTGlzdFByb3RvdHlwZS5kZWxldGVJbiA9IExpc3RQcm90b3R5cGUucmVtb3ZlSW4gPSBkZWxldGVJbjtcbkxpc3RQcm90b3R5cGUudXBkYXRlID0gdXBkYXRlO1xuTGlzdFByb3RvdHlwZS51cGRhdGVJbiA9IHVwZGF0ZUluO1xuTGlzdFByb3RvdHlwZS5tZXJnZUluID0gbWVyZ2VJbjtcbkxpc3RQcm90b3R5cGUubWVyZ2VEZWVwSW4gPSBtZXJnZURlZXBJbjtcbkxpc3RQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IHdpdGhNdXRhdGlvbnM7XG5MaXN0UHJvdG90eXBlLndhc0FsdGVyZWQgPSB3YXNBbHRlcmVkO1xuTGlzdFByb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGFzSW1tdXRhYmxlO1xuTGlzdFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL2luaXQnXSA9IExpc3RQcm90b3R5cGUuYXNNdXRhYmxlID0gYXNNdXRhYmxlO1xuTGlzdFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uIChyZXN1bHQsIGFycikge1xuICByZXR1cm4gcmVzdWx0LnB1c2goYXJyKTtcbn07XG5MaXN0UHJvdG90eXBlWydAQHRyYW5zZHVjZXIvcmVzdWx0J10gPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmouYXNJbW11dGFibGUoKTtcbn07XG5cbnZhciBWTm9kZSA9IGZ1bmN0aW9uIFZOb2RlKGFycmF5LCBvd25lcklEKSB7XG4gIHRoaXMuYXJyYXkgPSBhcnJheTtcbiAgdGhpcy5vd25lcklEID0gb3duZXJJRDtcbn07XG5cbi8vIFRPRE86IHNlZW1zIGxpa2UgdGhlc2UgbWV0aG9kcyBhcmUgdmVyeSBzaW1pbGFyXG5cblZOb2RlLnByb3RvdHlwZS5yZW1vdmVCZWZvcmUgPSBmdW5jdGlvbiByZW1vdmVCZWZvcmUgKG93bmVySUQsIGxldmVsLCBpbmRleCkge1xuICBpZiAoaW5kZXggPT09IGxldmVsID8gMSA8PCBsZXZlbCA6IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIG9yaWdpbkluZGV4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICBpZiAob3JpZ2luSW5kZXggPj0gdGhpcy5hcnJheS5sZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKFtdLCBvd25lcklEKTtcbiAgfVxuICB2YXIgcmVtb3ZpbmdGaXJzdCA9IG9yaWdpbkluZGV4ID09PSAwO1xuICB2YXIgbmV3Q2hpbGQ7XG4gIGlmIChsZXZlbCA+IDApIHtcbiAgICB2YXIgb2xkQ2hpbGQgPSB0aGlzLmFycmF5W29yaWdpbkluZGV4XTtcbiAgICBuZXdDaGlsZCA9XG4gICAgICBvbGRDaGlsZCAmJiBvbGRDaGlsZC5yZW1vdmVCZWZvcmUob3duZXJJRCwgbGV2ZWwgLSBTSElGVCwgaW5kZXgpO1xuICAgIGlmIChuZXdDaGlsZCA9PT0gb2xkQ2hpbGQgJiYgcmVtb3ZpbmdGaXJzdCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIGlmIChyZW1vdmluZ0ZpcnN0ICYmICFuZXdDaGlsZCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHZhciBlZGl0YWJsZSA9IGVkaXRhYmxlVk5vZGUodGhpcywgb3duZXJJRCk7XG4gIGlmICghcmVtb3ZpbmdGaXJzdCkge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBvcmlnaW5JbmRleDsgaWkrKykge1xuICAgICAgZWRpdGFibGUuYXJyYXlbaWldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBpZiAobmV3Q2hpbGQpIHtcbiAgICBlZGl0YWJsZS5hcnJheVtvcmlnaW5JbmRleF0gPSBuZXdDaGlsZDtcbiAgfVxuICByZXR1cm4gZWRpdGFibGU7XG59O1xuXG5WTm9kZS5wcm90b3R5cGUucmVtb3ZlQWZ0ZXIgPSBmdW5jdGlvbiByZW1vdmVBZnRlciAob3duZXJJRCwgbGV2ZWwsIGluZGV4KSB7XG4gIGlmIChpbmRleCA9PT0gKGxldmVsID8gMSA8PCBsZXZlbCA6IDApIHx8IHRoaXMuYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFyIHNpemVJbmRleCA9ICgoaW5kZXggLSAxKSA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgaWYgKHNpemVJbmRleCA+PSB0aGlzLmFycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFyIG5ld0NoaWxkO1xuICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgdmFyIG9sZENoaWxkID0gdGhpcy5hcnJheVtzaXplSW5kZXhdO1xuICAgIG5ld0NoaWxkID1cbiAgICAgIG9sZENoaWxkICYmIG9sZENoaWxkLnJlbW92ZUFmdGVyKG93bmVySUQsIGxldmVsIC0gU0hJRlQsIGluZGV4KTtcbiAgICBpZiAobmV3Q2hpbGQgPT09IG9sZENoaWxkICYmIHNpemVJbmRleCA9PT0gdGhpcy5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgZWRpdGFibGUgPSBlZGl0YWJsZVZOb2RlKHRoaXMsIG93bmVySUQpO1xuICBlZGl0YWJsZS5hcnJheS5zcGxpY2Uoc2l6ZUluZGV4ICsgMSk7XG4gIGlmIChuZXdDaGlsZCkge1xuICAgIGVkaXRhYmxlLmFycmF5W3NpemVJbmRleF0gPSBuZXdDaGlsZDtcbiAgfVxuICByZXR1cm4gZWRpdGFibGU7XG59O1xuXG52YXIgRE9ORSA9IHt9O1xuXG5mdW5jdGlvbiBpdGVyYXRlTGlzdChsaXN0LCByZXZlcnNlKSB7XG4gIHZhciBsZWZ0ID0gbGlzdC5fb3JpZ2luO1xuICB2YXIgcmlnaHQgPSBsaXN0Ll9jYXBhY2l0eTtcbiAgdmFyIHRhaWxQb3MgPSBnZXRUYWlsT2Zmc2V0KHJpZ2h0KTtcbiAgdmFyIHRhaWwgPSBsaXN0Ll90YWlsO1xuXG4gIHJldHVybiBpdGVyYXRlTm9kZU9yTGVhZihsaXN0Ll9yb290LCBsaXN0Ll9sZXZlbCwgMCk7XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZU5vZGVPckxlYWYobm9kZSwgbGV2ZWwsIG9mZnNldCkge1xuICAgIHJldHVybiBsZXZlbCA9PT0gMFxuICAgICAgPyBpdGVyYXRlTGVhZihub2RlLCBvZmZzZXQpXG4gICAgICA6IGl0ZXJhdGVOb2RlKG5vZGUsIGxldmVsLCBvZmZzZXQpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXRlcmF0ZUxlYWYobm9kZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFycmF5ID0gb2Zmc2V0ID09PSB0YWlsUG9zID8gdGFpbCAmJiB0YWlsLmFycmF5IDogbm9kZSAmJiBub2RlLmFycmF5O1xuICAgIHZhciBmcm9tID0gb2Zmc2V0ID4gbGVmdCA/IDAgOiBsZWZ0IC0gb2Zmc2V0O1xuICAgIHZhciB0byA9IHJpZ2h0IC0gb2Zmc2V0O1xuICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgIHRvID0gU0laRTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgIH1cbiAgICAgIHZhciBpZHggPSByZXZlcnNlID8gLS10byA6IGZyb20rKztcbiAgICAgIHJldHVybiBhcnJheSAmJiBhcnJheVtpZHhdO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpdGVyYXRlTm9kZShub2RlLCBsZXZlbCwgb2Zmc2V0KSB7XG4gICAgdmFyIHZhbHVlcztcbiAgICB2YXIgYXJyYXkgPSBub2RlICYmIG5vZGUuYXJyYXk7XG4gICAgdmFyIGZyb20gPSBvZmZzZXQgPiBsZWZ0ID8gMCA6IChsZWZ0IC0gb2Zmc2V0KSA+PiBsZXZlbDtcbiAgICB2YXIgdG8gPSAoKHJpZ2h0IC0gb2Zmc2V0KSA+PiBsZXZlbCkgKyAxO1xuICAgIGlmICh0byA+IFNJWkUpIHtcbiAgICAgIHRvID0gU0laRTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmICh2YWx1ZXMpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZXMoKTtcbiAgICAgICAgICBpZiAodmFsdWUgIT09IERPTkUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsdWVzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgICAgICByZXR1cm4gRE9ORTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaWR4ID0gcmV2ZXJzZSA/IC0tdG8gOiBmcm9tKys7XG4gICAgICAgIHZhbHVlcyA9IGl0ZXJhdGVOb2RlT3JMZWFmKFxuICAgICAgICAgIGFycmF5ICYmIGFycmF5W2lkeF0sXG4gICAgICAgICAgbGV2ZWwgLSBTSElGVCxcbiAgICAgICAgICBvZmZzZXQgKyAoaWR4IDw8IGxldmVsKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUxpc3Qob3JpZ2luLCBjYXBhY2l0eSwgbGV2ZWwsIHJvb3QsIHRhaWwsIG93bmVySUQsIGhhc2gpIHtcbiAgdmFyIGxpc3QgPSBPYmplY3QuY3JlYXRlKExpc3RQcm90b3R5cGUpO1xuICBsaXN0LnNpemUgPSBjYXBhY2l0eSAtIG9yaWdpbjtcbiAgbGlzdC5fb3JpZ2luID0gb3JpZ2luO1xuICBsaXN0Ll9jYXBhY2l0eSA9IGNhcGFjaXR5O1xuICBsaXN0Ll9sZXZlbCA9IGxldmVsO1xuICBsaXN0Ll9yb290ID0gcm9vdDtcbiAgbGlzdC5fdGFpbCA9IHRhaWw7XG4gIGxpc3QuX19vd25lcklEID0gb3duZXJJRDtcbiAgbGlzdC5fX2hhc2ggPSBoYXNoO1xuICBsaXN0Ll9fYWx0ZXJlZCA9IGZhbHNlO1xuICByZXR1cm4gbGlzdDtcbn1cblxudmFyIEVNUFRZX0xJU1Q7XG5mdW5jdGlvbiBlbXB0eUxpc3QoKSB7XG4gIHJldHVybiBFTVBUWV9MSVNUIHx8IChFTVBUWV9MSVNUID0gbWFrZUxpc3QoMCwgMCwgU0hJRlQpKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGlzdChsaXN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaW5kZXggPSB3cmFwSW5kZXgobGlzdCwgaW5kZXgpO1xuXG4gIGlmIChpbmRleCAhPT0gaW5kZXgpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGlmIChpbmRleCA+PSBsaXN0LnNpemUgfHwgaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGxpc3Qud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAobGlzdCkge1xuICAgICAgaW5kZXggPCAwXG4gICAgICAgID8gc2V0TGlzdEJvdW5kcyhsaXN0LCBpbmRleCkuc2V0KDAsIHZhbHVlKVxuICAgICAgICA6IHNldExpc3RCb3VuZHMobGlzdCwgMCwgaW5kZXggKyAxKS5zZXQoaW5kZXgsIHZhbHVlKTtcbiAgICB9KTtcbiAgfVxuXG4gIGluZGV4ICs9IGxpc3QuX29yaWdpbjtcblxuICB2YXIgbmV3VGFpbCA9IGxpc3QuX3RhaWw7XG4gIHZhciBuZXdSb290ID0gbGlzdC5fcm9vdDtcbiAgdmFyIGRpZEFsdGVyID0gTWFrZVJlZigpO1xuICBpZiAoaW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICBuZXdUYWlsID0gdXBkYXRlVk5vZGUobmV3VGFpbCwgbGlzdC5fX293bmVySUQsIDAsIGluZGV4LCB2YWx1ZSwgZGlkQWx0ZXIpO1xuICB9IGVsc2Uge1xuICAgIG5ld1Jvb3QgPSB1cGRhdGVWTm9kZShcbiAgICAgIG5ld1Jvb3QsXG4gICAgICBsaXN0Ll9fb3duZXJJRCxcbiAgICAgIGxpc3QuX2xldmVsLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRpZEFsdGVyXG4gICAgKTtcbiAgfVxuXG4gIGlmICghZGlkQWx0ZXIudmFsdWUpIHtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuXG4gIGlmIChsaXN0Ll9fb3duZXJJRCkge1xuICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICByZXR1cm4gbWFrZUxpc3QobGlzdC5fb3JpZ2luLCBsaXN0Ll9jYXBhY2l0eSwgbGlzdC5fbGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVWTm9kZShub2RlLCBvd25lcklELCBsZXZlbCwgaW5kZXgsIHZhbHVlLCBkaWRBbHRlcikge1xuICB2YXIgaWR4ID0gKGluZGV4ID4+PiBsZXZlbCkgJiBNQVNLO1xuICB2YXIgbm9kZUhhcyA9IG5vZGUgJiYgaWR4IDwgbm9kZS5hcnJheS5sZW5ndGg7XG4gIGlmICghbm9kZUhhcyAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgbmV3Tm9kZTtcblxuICBpZiAobGV2ZWwgPiAwKSB7XG4gICAgdmFyIGxvd2VyTm9kZSA9IG5vZGUgJiYgbm9kZS5hcnJheVtpZHhdO1xuICAgIHZhciBuZXdMb3dlck5vZGUgPSB1cGRhdGVWTm9kZShcbiAgICAgIGxvd2VyTm9kZSxcbiAgICAgIG93bmVySUQsXG4gICAgICBsZXZlbCAtIFNISUZULFxuICAgICAgaW5kZXgsXG4gICAgICB2YWx1ZSxcbiAgICAgIGRpZEFsdGVyXG4gICAgKTtcbiAgICBpZiAobmV3TG93ZXJOb2RlID09PSBsb3dlck5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBuZXdOb2RlID0gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKTtcbiAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSBuZXdMb3dlck5vZGU7XG4gICAgcmV0dXJuIG5ld05vZGU7XG4gIH1cblxuICBpZiAobm9kZUhhcyAmJiBub2RlLmFycmF5W2lkeF0gPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBpZiAoZGlkQWx0ZXIpIHtcbiAgICBTZXRSZWYoZGlkQWx0ZXIpO1xuICB9XG5cbiAgbmV3Tm9kZSA9IGVkaXRhYmxlVk5vZGUobm9kZSwgb3duZXJJRCk7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGlkeCA9PT0gbmV3Tm9kZS5hcnJheS5sZW5ndGggLSAxKSB7XG4gICAgbmV3Tm9kZS5hcnJheS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBuZXdOb2RlLmFycmF5W2lkeF0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gbmV3Tm9kZTtcbn1cblxuZnVuY3Rpb24gZWRpdGFibGVWTm9kZShub2RlLCBvd25lcklEKSB7XG4gIGlmIChvd25lcklEICYmIG5vZGUgJiYgb3duZXJJRCA9PT0gbm9kZS5vd25lcklEKSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBWTm9kZShub2RlID8gbm9kZS5hcnJheS5zbGljZSgpIDogW10sIG93bmVySUQpO1xufVxuXG5mdW5jdGlvbiBsaXN0Tm9kZUZvcihsaXN0LCByYXdJbmRleCkge1xuICBpZiAocmF3SW5kZXggPj0gZ2V0VGFpbE9mZnNldChsaXN0Ll9jYXBhY2l0eSkpIHtcbiAgICByZXR1cm4gbGlzdC5fdGFpbDtcbiAgfVxuICBpZiAocmF3SW5kZXggPCAxIDw8IChsaXN0Ll9sZXZlbCArIFNISUZUKSkge1xuICAgIHZhciBub2RlID0gbGlzdC5fcm9vdDtcbiAgICB2YXIgbGV2ZWwgPSBsaXN0Ll9sZXZlbDtcbiAgICB3aGlsZSAobm9kZSAmJiBsZXZlbCA+IDApIHtcbiAgICAgIG5vZGUgPSBub2RlLmFycmF5WyhyYXdJbmRleCA+Pj4gbGV2ZWwpICYgTUFTS107XG4gICAgICBsZXZlbCAtPSBTSElGVDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0TGlzdEJvdW5kcyhsaXN0LCBiZWdpbiwgZW5kKSB7XG4gIC8vIFNhbml0aXplIGJlZ2luICYgZW5kIHVzaW5nIHRoaXMgc2hvcnRoYW5kIGZvciBUb0ludDMyKGFyZ3VtZW50KVxuICAvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9pbnQzMlxuICBpZiAoYmVnaW4gIT09IHVuZGVmaW5lZCkge1xuICAgIGJlZ2luIHw9IDA7XG4gIH1cbiAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kIHw9IDA7XG4gIH1cbiAgdmFyIG93bmVyID0gbGlzdC5fX293bmVySUQgfHwgbmV3IE93bmVySUQoKTtcbiAgdmFyIG9sZE9yaWdpbiA9IGxpc3QuX29yaWdpbjtcbiAgdmFyIG9sZENhcGFjaXR5ID0gbGlzdC5fY2FwYWNpdHk7XG4gIHZhciBuZXdPcmlnaW4gPSBvbGRPcmlnaW4gKyBiZWdpbjtcbiAgdmFyIG5ld0NhcGFjaXR5ID1cbiAgICBlbmQgPT09IHVuZGVmaW5lZFxuICAgICAgPyBvbGRDYXBhY2l0eVxuICAgICAgOiBlbmQgPCAwXG4gICAgICA/IG9sZENhcGFjaXR5ICsgZW5kXG4gICAgICA6IG9sZE9yaWdpbiArIGVuZDtcbiAgaWYgKG5ld09yaWdpbiA9PT0gb2xkT3JpZ2luICYmIG5ld0NhcGFjaXR5ID09PSBvbGRDYXBhY2l0eSkge1xuICAgIHJldHVybiBsaXN0O1xuICB9XG5cbiAgLy8gSWYgaXQncyBnb2luZyB0byBlbmQgYWZ0ZXIgaXQgc3RhcnRzLCBpdCdzIGVtcHR5LlxuICBpZiAobmV3T3JpZ2luID49IG5ld0NhcGFjaXR5KSB7XG4gICAgcmV0dXJuIGxpc3QuY2xlYXIoKTtcbiAgfVxuXG4gIHZhciBuZXdMZXZlbCA9IGxpc3QuX2xldmVsO1xuICB2YXIgbmV3Um9vdCA9IGxpc3QuX3Jvb3Q7XG5cbiAgLy8gTmV3IG9yaWdpbiBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gIHZhciBvZmZzZXRTaGlmdCA9IDA7XG4gIHdoaWxlIChuZXdPcmlnaW4gKyBvZmZzZXRTaGlmdCA8IDApIHtcbiAgICBuZXdSb290ID0gbmV3IFZOb2RlKFxuICAgICAgbmV3Um9vdCAmJiBuZXdSb290LmFycmF5Lmxlbmd0aCA/IFt1bmRlZmluZWQsIG5ld1Jvb3RdIDogW10sXG4gICAgICBvd25lclxuICAgICk7XG4gICAgbmV3TGV2ZWwgKz0gU0hJRlQ7XG4gICAgb2Zmc2V0U2hpZnQgKz0gMSA8PCBuZXdMZXZlbDtcbiAgfVxuICBpZiAob2Zmc2V0U2hpZnQpIHtcbiAgICBuZXdPcmlnaW4gKz0gb2Zmc2V0U2hpZnQ7XG4gICAgb2xkT3JpZ2luICs9IG9mZnNldFNoaWZ0O1xuICAgIG5ld0NhcGFjaXR5ICs9IG9mZnNldFNoaWZ0O1xuICAgIG9sZENhcGFjaXR5ICs9IG9mZnNldFNoaWZ0O1xuICB9XG5cbiAgdmFyIG9sZFRhaWxPZmZzZXQgPSBnZXRUYWlsT2Zmc2V0KG9sZENhcGFjaXR5KTtcbiAgdmFyIG5ld1RhaWxPZmZzZXQgPSBnZXRUYWlsT2Zmc2V0KG5ld0NhcGFjaXR5KTtcblxuICAvLyBOZXcgc2l6ZSBtaWdodCBuZWVkIGNyZWF0aW5nIGEgaGlnaGVyIHJvb3QuXG4gIHdoaWxlIChuZXdUYWlsT2Zmc2V0ID49IDEgPDwgKG5ld0xldmVsICsgU0hJRlQpKSB7XG4gICAgbmV3Um9vdCA9IG5ldyBWTm9kZShcbiAgICAgIG5ld1Jvb3QgJiYgbmV3Um9vdC5hcnJheS5sZW5ndGggPyBbbmV3Um9vdF0gOiBbXSxcbiAgICAgIG93bmVyXG4gICAgKTtcbiAgICBuZXdMZXZlbCArPSBTSElGVDtcbiAgfVxuXG4gIC8vIExvY2F0ZSBvciBjcmVhdGUgdGhlIG5ldyB0YWlsLlxuICB2YXIgb2xkVGFpbCA9IGxpc3QuX3RhaWw7XG4gIHZhciBuZXdUYWlsID1cbiAgICBuZXdUYWlsT2Zmc2V0IDwgb2xkVGFpbE9mZnNldFxuICAgICAgPyBsaXN0Tm9kZUZvcihsaXN0LCBuZXdDYXBhY2l0eSAtIDEpXG4gICAgICA6IG5ld1RhaWxPZmZzZXQgPiBvbGRUYWlsT2Zmc2V0XG4gICAgICA/IG5ldyBWTm9kZShbXSwgb3duZXIpXG4gICAgICA6IG9sZFRhaWw7XG5cbiAgLy8gTWVyZ2UgVGFpbCBpbnRvIHRyZWUuXG4gIGlmIChcbiAgICBvbGRUYWlsICYmXG4gICAgbmV3VGFpbE9mZnNldCA+IG9sZFRhaWxPZmZzZXQgJiZcbiAgICBuZXdPcmlnaW4gPCBvbGRDYXBhY2l0eSAmJlxuICAgIG9sZFRhaWwuYXJyYXkubGVuZ3RoXG4gICkge1xuICAgIG5ld1Jvb3QgPSBlZGl0YWJsZVZOb2RlKG5ld1Jvb3QsIG93bmVyKTtcbiAgICB2YXIgbm9kZSA9IG5ld1Jvb3Q7XG4gICAgZm9yICh2YXIgbGV2ZWwgPSBuZXdMZXZlbDsgbGV2ZWwgPiBTSElGVDsgbGV2ZWwgLT0gU0hJRlQpIHtcbiAgICAgIHZhciBpZHggPSAob2xkVGFpbE9mZnNldCA+Pj4gbGV2ZWwpICYgTUFTSztcbiAgICAgIG5vZGUgPSBub2RlLmFycmF5W2lkeF0gPSBlZGl0YWJsZVZOb2RlKG5vZGUuYXJyYXlbaWR4XSwgb3duZXIpO1xuICAgIH1cbiAgICBub2RlLmFycmF5WyhvbGRUYWlsT2Zmc2V0ID4+PiBTSElGVCkgJiBNQVNLXSA9IG9sZFRhaWw7XG4gIH1cblxuICAvLyBJZiB0aGUgc2l6ZSBoYXMgYmVlbiByZWR1Y2VkLCB0aGVyZSdzIGEgY2hhbmNlIHRoZSB0YWlsIG5lZWRzIHRvIGJlIHRyaW1tZWQuXG4gIGlmIChuZXdDYXBhY2l0eSA8IG9sZENhcGFjaXR5KSB7XG4gICAgbmV3VGFpbCA9IG5ld1RhaWwgJiYgbmV3VGFpbC5yZW1vdmVBZnRlcihvd25lciwgMCwgbmV3Q2FwYWNpdHkpO1xuICB9XG5cbiAgLy8gSWYgdGhlIG5ldyBvcmlnaW4gaXMgd2l0aGluIHRoZSB0YWlsLCB0aGVuIHdlIGRvIG5vdCBuZWVkIGEgcm9vdC5cbiAgaWYgKG5ld09yaWdpbiA+PSBuZXdUYWlsT2Zmc2V0KSB7XG4gICAgbmV3T3JpZ2luIC09IG5ld1RhaWxPZmZzZXQ7XG4gICAgbmV3Q2FwYWNpdHkgLT0gbmV3VGFpbE9mZnNldDtcbiAgICBuZXdMZXZlbCA9IFNISUZUO1xuICAgIG5ld1Jvb3QgPSBudWxsO1xuICAgIG5ld1RhaWwgPSBuZXdUYWlsICYmIG5ld1RhaWwucmVtb3ZlQmVmb3JlKG93bmVyLCAwLCBuZXdPcmlnaW4pO1xuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgcm9vdCBoYXMgYmVlbiB0cmltbWVkLCBnYXJiYWdlIGNvbGxlY3QuXG4gIH0gZWxzZSBpZiAobmV3T3JpZ2luID4gb2xkT3JpZ2luIHx8IG5ld1RhaWxPZmZzZXQgPCBvbGRUYWlsT2Zmc2V0KSB7XG4gICAgb2Zmc2V0U2hpZnQgPSAwO1xuXG4gICAgLy8gSWRlbnRpZnkgdGhlIG5ldyB0b3Agcm9vdCBub2RlIG9mIHRoZSBzdWJ0cmVlIG9mIHRoZSBvbGQgcm9vdC5cbiAgICB3aGlsZSAobmV3Um9vdCkge1xuICAgICAgdmFyIGJlZ2luSW5kZXggPSAobmV3T3JpZ2luID4+PiBuZXdMZXZlbCkgJiBNQVNLO1xuICAgICAgaWYgKChiZWdpbkluZGV4ICE9PSBuZXdUYWlsT2Zmc2V0ID4+PiBuZXdMZXZlbCkgJiBNQVNLKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKGJlZ2luSW5kZXgpIHtcbiAgICAgICAgb2Zmc2V0U2hpZnQgKz0gKDEgPDwgbmV3TGV2ZWwpICogYmVnaW5JbmRleDtcbiAgICAgIH1cbiAgICAgIG5ld0xldmVsIC09IFNISUZUO1xuICAgICAgbmV3Um9vdCA9IG5ld1Jvb3QuYXJyYXlbYmVnaW5JbmRleF07XG4gICAgfVxuXG4gICAgLy8gVHJpbSB0aGUgbmV3IHNpZGVzIG9mIHRoZSBuZXcgcm9vdC5cbiAgICBpZiAobmV3Um9vdCAmJiBuZXdPcmlnaW4gPiBvbGRPcmlnaW4pIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXdSb290LnJlbW92ZUJlZm9yZShvd25lciwgbmV3TGV2ZWwsIG5ld09yaWdpbiAtIG9mZnNldFNoaWZ0KTtcbiAgICB9XG4gICAgaWYgKG5ld1Jvb3QgJiYgbmV3VGFpbE9mZnNldCA8IG9sZFRhaWxPZmZzZXQpIHtcbiAgICAgIG5ld1Jvb3QgPSBuZXdSb290LnJlbW92ZUFmdGVyKFxuICAgICAgICBvd25lcixcbiAgICAgICAgbmV3TGV2ZWwsXG4gICAgICAgIG5ld1RhaWxPZmZzZXQgLSBvZmZzZXRTaGlmdFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKG9mZnNldFNoaWZ0KSB7XG4gICAgICBuZXdPcmlnaW4gLT0gb2Zmc2V0U2hpZnQ7XG4gICAgICBuZXdDYXBhY2l0eSAtPSBvZmZzZXRTaGlmdDtcbiAgICB9XG4gIH1cblxuICBpZiAobGlzdC5fX293bmVySUQpIHtcbiAgICBsaXN0LnNpemUgPSBuZXdDYXBhY2l0eSAtIG5ld09yaWdpbjtcbiAgICBsaXN0Ll9vcmlnaW4gPSBuZXdPcmlnaW47XG4gICAgbGlzdC5fY2FwYWNpdHkgPSBuZXdDYXBhY2l0eTtcbiAgICBsaXN0Ll9sZXZlbCA9IG5ld0xldmVsO1xuICAgIGxpc3QuX3Jvb3QgPSBuZXdSb290O1xuICAgIGxpc3QuX3RhaWwgPSBuZXdUYWlsO1xuICAgIGxpc3QuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgIGxpc3QuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbGlzdDtcbiAgfVxuICByZXR1cm4gbWFrZUxpc3QobmV3T3JpZ2luLCBuZXdDYXBhY2l0eSwgbmV3TGV2ZWwsIG5ld1Jvb3QsIG5ld1RhaWwpO1xufVxuXG5mdW5jdGlvbiBnZXRUYWlsT2Zmc2V0KHNpemUpIHtcbiAgcmV0dXJuIHNpemUgPCBTSVpFID8gMCA6ICgoc2l6ZSAtIDEpID4+PiBTSElGVCkgPDwgU0hJRlQ7XG59XG5cbnZhciBPcmRlcmVkTWFwID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoTWFwKSB7XG4gIGZ1bmN0aW9uIE9yZGVyZWRNYXAodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGxcbiAgICAgID8gZW1wdHlPcmRlcmVkTWFwKClcbiAgICAgIDogaXNPcmRlcmVkTWFwKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiBlbXB0eU9yZGVyZWRNYXAoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICB2YXIgaXRlciA9IEtleWVkQ29sbGVjdGlvbih2YWx1ZSk7XG4gICAgICAgICAgYXNzZXJ0Tm90SW5maW5pdGUoaXRlci5zaXplKTtcbiAgICAgICAgICBpdGVyLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIG1hcC5zZXQoaywgdik7IH0pO1xuICAgICAgICB9KTtcbiAgfVxuXG4gIGlmICggTWFwICkgT3JkZXJlZE1hcC5fX3Byb3RvX18gPSBNYXA7XG4gIE9yZGVyZWRNYXAucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggTWFwICYmIE1hcC5wcm90b3R5cGUgKTtcbiAgT3JkZXJlZE1hcC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPcmRlcmVkTWFwO1xuXG4gIE9yZGVyZWRNYXAub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgT3JkZXJlZE1hcC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZE1hcCB7JywgJ30nKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIGdldCAoaywgbm90U2V0VmFsdWUpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLl9tYXAuZ2V0KGspO1xuICAgIHJldHVybiBpbmRleCAhPT0gdW5kZWZpbmVkID8gdGhpcy5fbGlzdC5nZXQoaW5kZXgpWzFdIDogbm90U2V0VmFsdWU7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgICAgdGhpcy5fbWFwLmNsZWFyKCk7XG4gICAgICB0aGlzLl9saXN0LmNsZWFyKCk7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGVtcHR5T3JkZXJlZE1hcCgpO1xuICB9O1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uIHNldCAoaywgdikge1xuICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIHYpO1xuICB9O1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZSAoaykge1xuICAgIHJldHVybiB1cGRhdGVPcmRlcmVkTWFwKHRoaXMsIGssIE5PVF9TRVQpO1xuICB9O1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuX2xpc3QuX19pdGVyYXRlKFxuICAgICAgZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeSAmJiBmbihlbnRyeVsxXSwgZW50cnlbMF0sIHRoaXMkMSQxKTsgfSxcbiAgICAgIHJldmVyc2VcbiAgICApO1xuICB9O1xuXG4gIE9yZGVyZWRNYXAucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xpc3QuZnJvbUVudHJ5U2VxKCkuX19pdGVyYXRvcih0eXBlLCByZXZlcnNlKTtcbiAgfTtcblxuICBPcmRlcmVkTWFwLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICB2YXIgbmV3TGlzdCA9IHRoaXMuX2xpc3QuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVtcHR5T3JkZXJlZE1hcCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX21hcCA9IG5ld01hcDtcbiAgICAgIHRoaXMuX2xpc3QgPSBuZXdMaXN0O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QsIG93bmVySUQsIHRoaXMuX19oYXNoKTtcbiAgfTtcblxuICByZXR1cm4gT3JkZXJlZE1hcDtcbn0oTWFwKSk7XG5cbk9yZGVyZWRNYXAuaXNPcmRlcmVkTWFwID0gaXNPcmRlcmVkTWFwO1xuXG5PcmRlcmVkTWFwLnByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuT3JkZXJlZE1hcC5wcm90b3R5cGVbREVMRVRFXSA9IE9yZGVyZWRNYXAucHJvdG90eXBlLnJlbW92ZTtcblxuZnVuY3Rpb24gbWFrZU9yZGVyZWRNYXAobWFwLCBsaXN0LCBvd25lcklELCBoYXNoKSB7XG4gIHZhciBvbWFwID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkTWFwLnByb3RvdHlwZSk7XG4gIG9tYXAuc2l6ZSA9IG1hcCA/IG1hcC5zaXplIDogMDtcbiAgb21hcC5fbWFwID0gbWFwO1xuICBvbWFwLl9saXN0ID0gbGlzdDtcbiAgb21hcC5fX293bmVySUQgPSBvd25lcklEO1xuICBvbWFwLl9faGFzaCA9IGhhc2g7XG4gIG9tYXAuX19hbHRlcmVkID0gZmFsc2U7XG4gIHJldHVybiBvbWFwO1xufVxuXG52YXIgRU1QVFlfT1JERVJFRF9NQVA7XG5mdW5jdGlvbiBlbXB0eU9yZGVyZWRNYXAoKSB7XG4gIHJldHVybiAoXG4gICAgRU1QVFlfT1JERVJFRF9NQVAgfHxcbiAgICAoRU1QVFlfT1JERVJFRF9NQVAgPSBtYWtlT3JkZXJlZE1hcChlbXB0eU1hcCgpLCBlbXB0eUxpc3QoKSkpXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU9yZGVyZWRNYXAob21hcCwgaywgdikge1xuICB2YXIgbWFwID0gb21hcC5fbWFwO1xuICB2YXIgbGlzdCA9IG9tYXAuX2xpc3Q7XG4gIHZhciBpID0gbWFwLmdldChrKTtcbiAgdmFyIGhhcyA9IGkgIT09IHVuZGVmaW5lZDtcbiAgdmFyIG5ld01hcDtcbiAgdmFyIG5ld0xpc3Q7XG4gIGlmICh2ID09PSBOT1RfU0VUKSB7XG4gICAgLy8gcmVtb3ZlZFxuICAgIGlmICghaGFzKSB7XG4gICAgICByZXR1cm4gb21hcDtcbiAgICB9XG4gICAgaWYgKGxpc3Quc2l6ZSA+PSBTSVpFICYmIGxpc3Quc2l6ZSA+PSBtYXAuc2l6ZSAqIDIpIHtcbiAgICAgIG5ld0xpc3QgPSBsaXN0LmZpbHRlcihmdW5jdGlvbiAoZW50cnksIGlkeCkgeyByZXR1cm4gZW50cnkgIT09IHVuZGVmaW5lZCAmJiBpICE9PSBpZHg7IH0pO1xuICAgICAgbmV3TWFwID0gbmV3TGlzdFxuICAgICAgICAudG9LZXllZFNlcSgpXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7IHJldHVybiBlbnRyeVswXTsgfSlcbiAgICAgICAgLmZsaXAoKVxuICAgICAgICAudG9NYXAoKTtcbiAgICAgIGlmIChvbWFwLl9fb3duZXJJRCkge1xuICAgICAgICBuZXdNYXAuX19vd25lcklEID0gbmV3TGlzdC5fX293bmVySUQgPSBvbWFwLl9fb3duZXJJRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmV3TWFwID0gbWFwLnJlbW92ZShrKTtcbiAgICAgIG5ld0xpc3QgPSBpID09PSBsaXN0LnNpemUgLSAxID8gbGlzdC5wb3AoKSA6IGxpc3Quc2V0KGksIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGhhcykge1xuICAgIGlmICh2ID09PSBsaXN0LmdldChpKVsxXSkge1xuICAgICAgcmV0dXJuIG9tYXA7XG4gICAgfVxuICAgIG5ld01hcCA9IG1hcDtcbiAgICBuZXdMaXN0ID0gbGlzdC5zZXQoaSwgW2ssIHZdKTtcbiAgfSBlbHNlIHtcbiAgICBuZXdNYXAgPSBtYXAuc2V0KGssIGxpc3Quc2l6ZSk7XG4gICAgbmV3TGlzdCA9IGxpc3Quc2V0KGxpc3Quc2l6ZSwgW2ssIHZdKTtcbiAgfVxuICBpZiAob21hcC5fX293bmVySUQpIHtcbiAgICBvbWFwLnNpemUgPSBuZXdNYXAuc2l6ZTtcbiAgICBvbWFwLl9tYXAgPSBuZXdNYXA7XG4gICAgb21hcC5fbGlzdCA9IG5ld0xpc3Q7XG4gICAgb21hcC5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgb21hcC5fX2FsdGVyZWQgPSB0cnVlO1xuICAgIHJldHVybiBvbWFwO1xuICB9XG4gIHJldHVybiBtYWtlT3JkZXJlZE1hcChuZXdNYXAsIG5ld0xpc3QpO1xufVxuXG52YXIgSVNfU1RBQ0tfU1lNQk9MID0gJ0BAX19JTU1VVEFCTEVfU1RBQ0tfX0BAJztcblxuZnVuY3Rpb24gaXNTdGFjayhtYXliZVN0YWNrKSB7XG4gIHJldHVybiBCb29sZWFuKG1heWJlU3RhY2sgJiYgbWF5YmVTdGFja1tJU19TVEFDS19TWU1CT0xdKTtcbn1cblxudmFyIFN0YWNrID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSW5kZXhlZENvbGxlY3Rpb24pIHtcbiAgZnVuY3Rpb24gU3RhY2sodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGxcbiAgICAgID8gZW1wdHlTdGFjaygpXG4gICAgICA6IGlzU3RhY2sodmFsdWUpXG4gICAgICA/IHZhbHVlXG4gICAgICA6IGVtcHR5U3RhY2soKS5wdXNoQWxsKHZhbHVlKTtcbiAgfVxuXG4gIGlmICggSW5kZXhlZENvbGxlY3Rpb24gKSBTdGFjay5fX3Byb3RvX18gPSBJbmRleGVkQ29sbGVjdGlvbjtcbiAgU3RhY2sucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSW5kZXhlZENvbGxlY3Rpb24gJiYgSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlICk7XG4gIFN0YWNrLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN0YWNrO1xuXG4gIFN0YWNrLm9mID0gZnVuY3Rpb24gb2YgKC8qLi4udmFsdWVzKi8pIHtcbiAgICByZXR1cm4gdGhpcyhhcmd1bWVudHMpO1xuICB9O1xuXG4gIFN0YWNrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTdGFjayBbJywgJ10nKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIEFjY2Vzc1xuXG4gIFN0YWNrLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgd2hpbGUgKGhlYWQgJiYgaW5kZXgtLSkge1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGhlYWQgPyBoZWFkLnZhbHVlIDogbm90U2V0VmFsdWU7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbiBwZWVrICgpIHtcbiAgICByZXR1cm4gdGhpcy5faGVhZCAmJiB0aGlzLl9oZWFkLnZhbHVlO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTW9kaWZpY2F0aW9uXG5cbiAgU3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoICgvKi4uLnZhbHVlcyovKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgbmV3U2l6ZSA9IHRoaXMuc2l6ZSArIGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIGhlYWQgPSB0aGlzLl9oZWFkO1xuICAgIGZvciAodmFyIGlpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGlpID49IDA7IGlpLS0pIHtcbiAgICAgIGhlYWQgPSB7XG4gICAgICAgIHZhbHVlOiBhcmd1bWVudHMkMVtpaV0sXG4gICAgICAgIG5leHQ6IGhlYWQsXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLnB1c2hBbGwgPSBmdW5jdGlvbiBwdXNoQWxsIChpdGVyKSB7XG4gICAgaXRlciA9IEluZGV4ZWRDb2xsZWN0aW9uKGl0ZXIpO1xuICAgIGlmIChpdGVyLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5zaXplID09PSAwICYmIGlzU3RhY2soaXRlcikpIHtcbiAgICAgIHJldHVybiBpdGVyO1xuICAgIH1cbiAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplO1xuICAgIHZhciBoZWFkID0gdGhpcy5faGVhZDtcbiAgICBpdGVyLl9faXRlcmF0ZShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIG5ld1NpemUrKztcbiAgICAgIGhlYWQgPSB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgbmV4dDogaGVhZCxcbiAgICAgIH07XG4gICAgfSwgLyogcmV2ZXJzZSAqLyB0cnVlKTtcbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IG5ld1NpemU7XG4gICAgICB0aGlzLl9oZWFkID0gaGVhZDtcbiAgICAgIHRoaXMuX19oYXNoID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBtYWtlU3RhY2sobmV3U2l6ZSwgaGVhZCk7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uIHBvcCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpY2UoMSk7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpZiAodGhpcy5fX293bmVySUQpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9oZWFkID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fX2hhc2ggPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9fYWx0ZXJlZCA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGVtcHR5U3RhY2soKTtcbiAgfTtcblxuICBTdGFjay5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoYmVnaW4sIGVuZCkge1xuICAgIGlmICh3aG9sZVNsaWNlKGJlZ2luLCBlbmQsIHRoaXMuc2l6ZSkpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICB2YXIgcmVzb2x2ZWRCZWdpbiA9IHJlc29sdmVCZWdpbihiZWdpbiwgdGhpcy5zaXplKTtcbiAgICB2YXIgcmVzb2x2ZWRFbmQgPSByZXNvbHZlRW5kKGVuZCwgdGhpcy5zaXplKTtcbiAgICBpZiAocmVzb2x2ZWRFbmQgIT09IHRoaXMuc2l6ZSkge1xuICAgICAgLy8gc3VwZXIuc2xpY2UoYmVnaW4sIGVuZCk7XG4gICAgICByZXR1cm4gSW5kZXhlZENvbGxlY3Rpb24ucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XG4gICAgfVxuICAgIHZhciBuZXdTaXplID0gdGhpcy5zaXplIC0gcmVzb2x2ZWRCZWdpbjtcbiAgICB2YXIgaGVhZCA9IHRoaXMuX2hlYWQ7XG4gICAgd2hpbGUgKHJlc29sdmVkQmVnaW4tLSkge1xuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcbiAgICB9XG4gICAgaWYgKHRoaXMuX19vd25lcklEKSB7XG4gICAgICB0aGlzLnNpemUgPSBuZXdTaXplO1xuICAgICAgdGhpcy5faGVhZCA9IGhlYWQ7XG4gICAgICB0aGlzLl9faGFzaCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX19hbHRlcmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZVN0YWNrKG5ld1NpemUsIGhlYWQpO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgTXV0YWJpbGl0eVxuXG4gIFN0YWNrLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGlmICghb3duZXJJRCkge1xuICAgICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZW1wdHlTdGFjaygpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5fX2FsdGVyZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gbWFrZVN0YWNrKHRoaXMuc2l6ZSwgdGhpcy5faGVhZCwgb3duZXJJRCwgdGhpcy5fX2hhc2gpO1xuICB9O1xuXG4gIC8vIEBwcmFnbWEgSXRlcmF0aW9uXG5cbiAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEodGhpcy50b0FycmF5KCkpLl9faXRlcmF0ZShcbiAgICAgICAgZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIGZuKHYsIGssIHRoaXMkMSQxKTsgfSxcbiAgICAgICAgcmV2ZXJzZVxuICAgICAgKTtcbiAgICB9XG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHZhciBub2RlID0gdGhpcy5faGVhZDtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKGZuKG5vZGUudmFsdWUsIGl0ZXJhdGlvbnMrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUubmV4dDtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZXJhdGlvbnM7XG4gIH07XG5cbiAgU3RhY2sucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgaWYgKHJldmVyc2UpIHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXlTZXEodGhpcy50b0FycmF5KCkpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gICAgfVxuICAgIHZhciBpdGVyYXRpb25zID0gMDtcbiAgICB2YXIgbm9kZSA9IHRoaXMuX2hlYWQ7XG4gICAgcmV0dXJuIG5ldyBJdGVyYXRvcihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAobm9kZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBub2RlLnZhbHVlO1xuICAgICAgICBub2RlID0gbm9kZS5uZXh0O1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JWYWx1ZSh0eXBlLCBpdGVyYXRpb25zKyssIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gU3RhY2s7XG59KEluZGV4ZWRDb2xsZWN0aW9uKSk7XG5cblN0YWNrLmlzU3RhY2sgPSBpc1N0YWNrO1xuXG52YXIgU3RhY2tQcm90b3R5cGUgPSBTdGFjay5wcm90b3R5cGU7XG5TdGFja1Byb3RvdHlwZVtJU19TVEFDS19TWU1CT0xdID0gdHJ1ZTtcblN0YWNrUHJvdG90eXBlLnNoaWZ0ID0gU3RhY2tQcm90b3R5cGUucG9wO1xuU3RhY2tQcm90b3R5cGUudW5zaGlmdCA9IFN0YWNrUHJvdG90eXBlLnB1c2g7XG5TdGFja1Byb3RvdHlwZS51bnNoaWZ0QWxsID0gU3RhY2tQcm90b3R5cGUucHVzaEFsbDtcblN0YWNrUHJvdG90eXBlLndpdGhNdXRhdGlvbnMgPSB3aXRoTXV0YXRpb25zO1xuU3RhY2tQcm90b3R5cGUud2FzQWx0ZXJlZCA9IHdhc0FsdGVyZWQ7XG5TdGFja1Byb3RvdHlwZS5hc0ltbXV0YWJsZSA9IGFzSW1tdXRhYmxlO1xuU3RhY2tQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9pbml0J10gPSBTdGFja1Byb3RvdHlwZS5hc011dGFibGUgPSBhc011dGFibGU7XG5TdGFja1Byb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3N0ZXAnXSA9IGZ1bmN0aW9uIChyZXN1bHQsIGFycikge1xuICByZXR1cm4gcmVzdWx0LnVuc2hpZnQoYXJyKTtcbn07XG5TdGFja1Byb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL3Jlc3VsdCddID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqLmFzSW1tdXRhYmxlKCk7XG59O1xuXG5mdW5jdGlvbiBtYWtlU3RhY2soc2l6ZSwgaGVhZCwgb3duZXJJRCwgaGFzaCkge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShTdGFja1Byb3RvdHlwZSk7XG4gIG1hcC5zaXplID0gc2l6ZTtcbiAgbWFwLl9oZWFkID0gaGVhZDtcbiAgbWFwLl9fb3duZXJJRCA9IG93bmVySUQ7XG4gIG1hcC5fX2hhc2ggPSBoYXNoO1xuICBtYXAuX19hbHRlcmVkID0gZmFsc2U7XG4gIHJldHVybiBtYXA7XG59XG5cbnZhciBFTVBUWV9TVEFDSztcbmZ1bmN0aW9uIGVtcHR5U3RhY2soKSB7XG4gIHJldHVybiBFTVBUWV9TVEFDSyB8fCAoRU1QVFlfU1RBQ0sgPSBtYWtlU3RhY2soMCkpO1xufVxuXG52YXIgSVNfU0VUX1NZTUJPTCA9ICdAQF9fSU1NVVRBQkxFX1NFVF9fQEAnO1xuXG5mdW5jdGlvbiBpc1NldChtYXliZVNldCkge1xuICByZXR1cm4gQm9vbGVhbihtYXliZVNldCAmJiBtYXliZVNldFtJU19TRVRfU1lNQk9MXSk7XG59XG5cbmZ1bmN0aW9uIGlzT3JkZXJlZFNldChtYXliZU9yZGVyZWRTZXQpIHtcbiAgcmV0dXJuIGlzU2V0KG1heWJlT3JkZXJlZFNldCkgJiYgaXNPcmRlcmVkKG1heWJlT3JkZXJlZFNldCk7XG59XG5cbmZ1bmN0aW9uIGRlZXBFcXVhbChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoXG4gICAgIWlzQ29sbGVjdGlvbihiKSB8fFxuICAgIChhLnNpemUgIT09IHVuZGVmaW5lZCAmJiBiLnNpemUgIT09IHVuZGVmaW5lZCAmJiBhLnNpemUgIT09IGIuc2l6ZSkgfHxcbiAgICAoYS5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgYi5fX2hhc2ggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgYS5fX2hhc2ggIT09IGIuX19oYXNoKSB8fFxuICAgIGlzS2V5ZWQoYSkgIT09IGlzS2V5ZWQoYikgfHxcbiAgICBpc0luZGV4ZWQoYSkgIT09IGlzSW5kZXhlZChiKSB8fFxuICAgIGlzT3JkZXJlZChhKSAhPT0gaXNPcmRlcmVkKGIpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChhLnNpemUgPT09IDAgJiYgYi5zaXplID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB2YXIgbm90QXNzb2NpYXRpdmUgPSAhaXNBc3NvY2lhdGl2ZShhKTtcblxuICBpZiAoaXNPcmRlcmVkKGEpKSB7XG4gICAgdmFyIGVudHJpZXMgPSBhLmVudHJpZXMoKTtcbiAgICByZXR1cm4gKFxuICAgICAgYi5ldmVyeShmdW5jdGlvbiAodiwgaykge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzLm5leHQoKS52YWx1ZTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGlzKGVudHJ5WzFdLCB2KSAmJiAobm90QXNzb2NpYXRpdmUgfHwgaXMoZW50cnlbMF0sIGspKTtcbiAgICAgIH0pICYmIGVudHJpZXMubmV4dCgpLmRvbmVcbiAgICApO1xuICB9XG5cbiAgdmFyIGZsaXBwZWQgPSBmYWxzZTtcblxuICBpZiAoYS5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoYi5zaXplID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgYS5jYWNoZVJlc3VsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBhLmNhY2hlUmVzdWx0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsaXBwZWQgPSB0cnVlO1xuICAgICAgdmFyIF8gPSBhO1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gXztcbiAgICB9XG4gIH1cblxuICB2YXIgYWxsRXF1YWwgPSB0cnVlO1xuICB2YXIgYlNpemUgPSBiLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgIGlmIChcbiAgICAgIG5vdEFzc29jaWF0aXZlXG4gICAgICAgID8gIWEuaGFzKHYpXG4gICAgICAgIDogZmxpcHBlZFxuICAgICAgICA/ICFpcyh2LCBhLmdldChrLCBOT1RfU0VUKSlcbiAgICAgICAgOiAhaXMoYS5nZXQoaywgTk9UX1NFVCksIHYpXG4gICAgKSB7XG4gICAgICBhbGxFcXVhbCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFsbEVxdWFsICYmIGEuc2l6ZSA9PT0gYlNpemU7XG59XG5cbmZ1bmN0aW9uIG1peGluKGN0b3IsIG1ldGhvZHMpIHtcbiAgdmFyIGtleUNvcGllciA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjdG9yLnByb3RvdHlwZVtrZXldID0gbWV0aG9kc1trZXldO1xuICB9O1xuICBPYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKGtleUNvcGllcik7XG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiZcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1ldGhvZHMpLmZvckVhY2goa2V5Q29waWVyKTtcbiAgcmV0dXJuIGN0b3I7XG59XG5cbmZ1bmN0aW9uIHRvSlModmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICghaXNDb2xsZWN0aW9uKHZhbHVlKSkge1xuICAgIGlmICghaXNEYXRhU3RydWN0dXJlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IFNlcSh2YWx1ZSk7XG4gIH1cbiAgaWYgKGlzS2V5ZWQodmFsdWUpKSB7XG4gICAgdmFyIHJlc3VsdCQxID0ge307XG4gICAgdmFsdWUuX19pdGVyYXRlKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICByZXN1bHQkMVtrXSA9IHRvSlModik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdCQxO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFsdWUuX19pdGVyYXRlKGZ1bmN0aW9uICh2KSB7XG4gICAgcmVzdWx0LnB1c2godG9KUyh2KSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoU2V0Q29sbGVjdGlvbikge1xuICBmdW5jdGlvbiBTZXQodmFsdWUpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09IG51bGxcbiAgICAgID8gZW1wdHlTZXQoKVxuICAgICAgOiBpc1NldCh2YWx1ZSkgJiYgIWlzT3JkZXJlZCh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogZW1wdHlTZXQoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChzZXQpIHtcbiAgICAgICAgICB2YXIgaXRlciA9IFNldENvbGxlY3Rpb24odmFsdWUpO1xuICAgICAgICAgIGFzc2VydE5vdEluZmluaXRlKGl0ZXIuc2l6ZSk7XG4gICAgICAgICAgaXRlci5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7IHJldHVybiBzZXQuYWRkKHYpOyB9KTtcbiAgICAgICAgfSk7XG4gIH1cblxuICBpZiAoIFNldENvbGxlY3Rpb24gKSBTZXQuX19wcm90b19fID0gU2V0Q29sbGVjdGlvbjtcbiAgU2V0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNldENvbGxlY3Rpb24gJiYgU2V0Q29sbGVjdGlvbi5wcm90b3R5cGUgKTtcbiAgU2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFNldDtcblxuICBTZXQub2YgPSBmdW5jdGlvbiBvZiAoLyouLi52YWx1ZXMqLykge1xuICAgIHJldHVybiB0aGlzKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgU2V0LmZyb21LZXlzID0gZnVuY3Rpb24gZnJvbUtleXMgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMoS2V5ZWRDb2xsZWN0aW9uKHZhbHVlKS5rZXlTZXEoKSk7XG4gIH07XG5cbiAgU2V0LmludGVyc2VjdCA9IGZ1bmN0aW9uIGludGVyc2VjdCAoc2V0cykge1xuICAgIHNldHMgPSBDb2xsZWN0aW9uKHNldHMpLnRvQXJyYXkoKTtcbiAgICByZXR1cm4gc2V0cy5sZW5ndGhcbiAgICAgID8gU2V0UHJvdG90eXBlLmludGVyc2VjdC5hcHBseShTZXQoc2V0cy5wb3AoKSksIHNldHMpXG4gICAgICA6IGVtcHR5U2V0KCk7XG4gIH07XG5cbiAgU2V0LnVuaW9uID0gZnVuY3Rpb24gdW5pb24gKHNldHMpIHtcbiAgICBzZXRzID0gQ29sbGVjdGlvbihzZXRzKS50b0FycmF5KCk7XG4gICAgcmV0dXJuIHNldHMubGVuZ3RoXG4gICAgICA/IFNldFByb3RvdHlwZS51bmlvbi5hcHBseShTZXQoc2V0cy5wb3AoKSksIHNldHMpXG4gICAgICA6IGVtcHR5U2V0KCk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgICByZXR1cm4gdGhpcy5fX3RvU3RyaW5nKCdTZXQgeycsICd9Jyk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBBY2Nlc3NcblxuICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLmhhcyh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAodmFsdWUpIHtcbiAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5zZXQodmFsdWUsIHZhbHVlKSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHVwZGF0ZVNldCh0aGlzLCB0aGlzLl9tYXAucmVtb3ZlKHZhbHVlKSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICByZXR1cm4gdXBkYXRlU2V0KHRoaXMsIHRoaXMuX21hcC5jbGVhcigpKTtcbiAgfTtcblxuICAvLyBAcHJhZ21hIENvbXBvc2l0aW9uXG5cbiAgU2V0LnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiBtYXAgKG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICAvLyBrZWVwIHRyYWNrIGlmIHRoZSBzZXQgaXMgYWx0ZXJlZCBieSB0aGUgbWFwIGZ1bmN0aW9uXG4gICAgdmFyIGRpZENoYW5nZXMgPSBmYWxzZTtcblxuICAgIHZhciBuZXdNYXAgPSB1cGRhdGVTZXQoXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy5fbWFwLm1hcEVudHJpZXMoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICB2YXIgdiA9IHJlZlsxXTtcblxuICAgICAgICB2YXIgbWFwcGVkID0gbWFwcGVyLmNhbGwoY29udGV4dCwgdiwgdiwgdGhpcyQxJDEpO1xuXG4gICAgICAgIGlmIChtYXBwZWQgIT09IHYpIHtcbiAgICAgICAgICBkaWRDaGFuZ2VzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbbWFwcGVkLCBtYXBwZWRdO1xuICAgICAgfSwgY29udGV4dClcbiAgICApO1xuXG4gICAgcmV0dXJuIGRpZENoYW5nZXMgPyBuZXdNYXAgOiB0aGlzO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUudW5pb24gPSBmdW5jdGlvbiB1bmlvbiAoKSB7XG4gICAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGl0ZXJzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpdGVycyA9IGl0ZXJzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5zaXplICE9PSAwOyB9KTtcbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCAmJiAhdGhpcy5fX293bmVySUQgJiYgaXRlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcihpdGVyc1swXSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLndpdGhNdXRhdGlvbnMoZnVuY3Rpb24gKHNldCkge1xuICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGl0ZXJzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZXJzW2lpXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBzZXQuYWRkKGl0ZXJzW2lpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgU2V0Q29sbGVjdGlvbihpdGVyc1tpaV0pLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBzZXQuYWRkKHZhbHVlKTsgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLmludGVyc2VjdCA9IGZ1bmN0aW9uIGludGVyc2VjdCAoKSB7XG4gICAgdmFyIGl0ZXJzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGl0ZXJzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoaXRlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgaXRlcnMgPSBpdGVycy5tYXAoZnVuY3Rpb24gKGl0ZXIpIHsgcmV0dXJuIFNldENvbGxlY3Rpb24oaXRlcik7IH0pO1xuICAgIHZhciB0b1JlbW92ZSA9IFtdO1xuICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghaXRlcnMuZXZlcnkoZnVuY3Rpb24gKGl0ZXIpIHsgcmV0dXJuIGl0ZXIuaW5jbHVkZXModmFsdWUpOyB9KSkge1xuICAgICAgICB0b1JlbW92ZS5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChzZXQpIHtcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5zdWJ0cmFjdCA9IGZ1bmN0aW9uIHN1YnRyYWN0ICgpIHtcbiAgICB2YXIgaXRlcnMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgaXRlcnNbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGlmIChpdGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpdGVycyA9IGl0ZXJzLm1hcChmdW5jdGlvbiAoaXRlcikgeyByZXR1cm4gU2V0Q29sbGVjdGlvbihpdGVyKTsgfSk7XG4gICAgdmFyIHRvUmVtb3ZlID0gW107XG4gICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKGl0ZXJzLnNvbWUoZnVuY3Rpb24gKGl0ZXIpIHsgcmV0dXJuIGl0ZXIuaW5jbHVkZXModmFsdWUpOyB9KSkge1xuICAgICAgICB0b1JlbW92ZS5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChzZXQpIHtcbiAgICAgIHRvUmVtb3ZlLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHNldC5yZW1vdmUodmFsdWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gc29ydCAoY29tcGFyYXRvcikge1xuICAgIC8vIExhdGUgYmluZGluZ1xuICAgIHJldHVybiBPcmRlcmVkU2V0KHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IpKTtcbiAgfTtcblxuICBTZXQucHJvdG90eXBlLnNvcnRCeSA9IGZ1bmN0aW9uIHNvcnRCeSAobWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgLy8gTGF0ZSBiaW5kaW5nXG4gICAgcmV0dXJuIE9yZGVyZWRTZXQoc29ydEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS53YXNBbHRlcmVkID0gZnVuY3Rpb24gd2FzQWx0ZXJlZCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcC53YXNBbHRlcmVkKCk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5fX2l0ZXJhdGUgPSBmdW5jdGlvbiBfX2l0ZXJhdGUgKGZuLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHJldHVybiB0aGlzLl9tYXAuX19pdGVyYXRlKGZ1bmN0aW9uIChrKSB7IHJldHVybiBmbihrLCBrLCB0aGlzJDEkMSk7IH0sIHJldmVyc2UpO1xuICB9O1xuXG4gIFNldC5wcm90b3R5cGUuX19pdGVyYXRvciA9IGZ1bmN0aW9uIF9faXRlcmF0b3IgKHR5cGUsIHJldmVyc2UpIHtcbiAgICByZXR1cm4gdGhpcy5fbWFwLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG4gIH07XG5cbiAgU2V0LnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICAgIGlmIChvd25lcklEID09PSB0aGlzLl9fb3duZXJJRCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHZhciBuZXdNYXAgPSB0aGlzLl9tYXAuX19lbnN1cmVPd25lcihvd25lcklEKTtcbiAgICBpZiAoIW93bmVySUQpIHtcbiAgICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX19lbXB0eSgpO1xuICAgICAgfVxuICAgICAgdGhpcy5fX293bmVySUQgPSBvd25lcklEO1xuICAgICAgdGhpcy5fbWFwID0gbmV3TWFwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9fbWFrZShuZXdNYXAsIG93bmVySUQpO1xuICB9O1xuXG4gIHJldHVybiBTZXQ7XG59KFNldENvbGxlY3Rpb24pKTtcblxuU2V0LmlzU2V0ID0gaXNTZXQ7XG5cbnZhciBTZXRQcm90b3R5cGUgPSBTZXQucHJvdG90eXBlO1xuU2V0UHJvdG90eXBlW0lTX1NFVF9TWU1CT0xdID0gdHJ1ZTtcblNldFByb3RvdHlwZVtERUxFVEVdID0gU2V0UHJvdG90eXBlLnJlbW92ZTtcblNldFByb3RvdHlwZS5tZXJnZSA9IFNldFByb3RvdHlwZS5jb25jYXQgPSBTZXRQcm90b3R5cGUudW5pb247XG5TZXRQcm90b3R5cGUud2l0aE11dGF0aW9ucyA9IHdpdGhNdXRhdGlvbnM7XG5TZXRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBhc0ltbXV0YWJsZTtcblNldFByb3RvdHlwZVsnQEB0cmFuc2R1Y2VyL2luaXQnXSA9IFNldFByb3RvdHlwZS5hc011dGFibGUgPSBhc011dGFibGU7XG5TZXRQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9zdGVwJ10gPSBmdW5jdGlvbiAocmVzdWx0LCBhcnIpIHtcbiAgcmV0dXJuIHJlc3VsdC5hZGQoYXJyKTtcbn07XG5TZXRQcm90b3R5cGVbJ0BAdHJhbnNkdWNlci9yZXN1bHQnXSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iai5hc0ltbXV0YWJsZSgpO1xufTtcblxuU2V0UHJvdG90eXBlLl9fZW1wdHkgPSBlbXB0eVNldDtcblNldFByb3RvdHlwZS5fX21ha2UgPSBtYWtlU2V0O1xuXG5mdW5jdGlvbiB1cGRhdGVTZXQoc2V0LCBuZXdNYXApIHtcbiAgaWYgKHNldC5fX293bmVySUQpIHtcbiAgICBzZXQuc2l6ZSA9IG5ld01hcC5zaXplO1xuICAgIHNldC5fbWFwID0gbmV3TWFwO1xuICAgIHJldHVybiBzZXQ7XG4gIH1cbiAgcmV0dXJuIG5ld01hcCA9PT0gc2V0Ll9tYXBcbiAgICA/IHNldFxuICAgIDogbmV3TWFwLnNpemUgPT09IDBcbiAgICA/IHNldC5fX2VtcHR5KClcbiAgICA6IHNldC5fX21ha2UobmV3TWFwKTtcbn1cblxuZnVuY3Rpb24gbWFrZVNldChtYXAsIG93bmVySUQpIHtcbiAgdmFyIHNldCA9IE9iamVjdC5jcmVhdGUoU2V0UHJvdG90eXBlKTtcbiAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gIHNldC5fbWFwID0gbWFwO1xuICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgcmV0dXJuIHNldDtcbn1cblxudmFyIEVNUFRZX1NFVDtcbmZ1bmN0aW9uIGVtcHR5U2V0KCkge1xuICByZXR1cm4gRU1QVFlfU0VUIHx8IChFTVBUWV9TRVQgPSBtYWtlU2V0KGVtcHR5TWFwKCkpKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGF6eSBzZXEgb2YgbnVtcyBmcm9tIHN0YXJ0IChpbmNsdXNpdmUpIHRvIGVuZFxuICogKGV4Y2x1c2l2ZSksIGJ5IHN0ZXAsIHdoZXJlIHN0YXJ0IGRlZmF1bHRzIHRvIDAsIHN0ZXAgdG8gMSwgYW5kIGVuZCB0b1xuICogaW5maW5pdHkuIFdoZW4gc3RhcnQgaXMgZXF1YWwgdG8gZW5kLCByZXR1cm5zIGVtcHR5IGxpc3QuXG4gKi9cbnZhciBSYW5nZSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEluZGV4ZWRTZXEpIHtcbiAgZnVuY3Rpb24gUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBSYW5nZSkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCk7XG4gICAgfVxuICAgIGludmFyaWFudChzdGVwICE9PSAwLCAnQ2Fubm90IHN0ZXAgYSBSYW5nZSBieSAwJyk7XG4gICAgc3RhcnQgPSBzdGFydCB8fCAwO1xuICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZW5kID0gSW5maW5pdHk7XG4gICAgfVxuICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAxIDogTWF0aC5hYnMoc3RlcCk7XG4gICAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gLXN0ZXA7XG4gICAgfVxuICAgIHRoaXMuX3N0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5fZW5kID0gZW5kO1xuICAgIHRoaXMuX3N0ZXAgPSBzdGVwO1xuICAgIHRoaXMuc2l6ZSA9IE1hdGgubWF4KDAsIE1hdGguY2VpbCgoZW5kIC0gc3RhcnQpIC8gc3RlcCAtIDEpICsgMSk7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgaWYgKEVNUFRZX1JBTkdFKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgICAgcmV0dXJuIEVNUFRZX1JBTkdFO1xuICAgICAgfVxuICAgICAgRU1QVFlfUkFOR0UgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIGlmICggSW5kZXhlZFNlcSApIFJhbmdlLl9fcHJvdG9fXyA9IEluZGV4ZWRTZXE7XG4gIFJhbmdlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEluZGV4ZWRTZXEgJiYgSW5kZXhlZFNlcS5wcm90b3R5cGUgKTtcbiAgUmFuZ2UucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmFuZ2U7XG5cbiAgUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiAnUmFuZ2UgW10nO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgJ1JhbmdlIFsgJyArXG4gICAgICB0aGlzLl9zdGFydCArXG4gICAgICAnLi4uJyArXG4gICAgICB0aGlzLl9lbmQgK1xuICAgICAgKHRoaXMuX3N0ZXAgIT09IDEgPyAnIGJ5ICcgKyB0aGlzLl9zdGVwIDogJycpICtcbiAgICAgICcgXSdcbiAgICApO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGluZGV4LCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmhhcyhpbmRleClcbiAgICAgID8gdGhpcy5fc3RhcnQgKyB3cmFwSW5kZXgodGhpcywgaW5kZXgpICogdGhpcy5fc3RlcFxuICAgICAgOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICBSYW5nZS5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAoc2VhcmNoVmFsdWUpIHtcbiAgICB2YXIgcG9zc2libGVJbmRleCA9IChzZWFyY2hWYWx1ZSAtIHRoaXMuX3N0YXJ0KSAvIHRoaXMuX3N0ZXA7XG4gICAgcmV0dXJuIChcbiAgICAgIHBvc3NpYmxlSW5kZXggPj0gMCAmJlxuICAgICAgcG9zc2libGVJbmRleCA8IHRoaXMuc2l6ZSAmJlxuICAgICAgcG9zc2libGVJbmRleCA9PT0gTWF0aC5mbG9vcihwb3NzaWJsZUluZGV4KVxuICAgICk7XG4gIH07XG5cbiAgUmFuZ2UucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKGJlZ2luLCBlbmQpIHtcbiAgICBpZiAod2hvbGVTbGljZShiZWdpbiwgZW5kLCB0aGlzLnNpemUpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYmVnaW4gPSByZXNvbHZlQmVnaW4oYmVnaW4sIHRoaXMuc2l6ZSk7XG4gICAgZW5kID0gcmVzb2x2ZUVuZChlbmQsIHRoaXMuc2l6ZSk7XG4gICAgaWYgKGVuZCA8PSBiZWdpbikge1xuICAgICAgcmV0dXJuIG5ldyBSYW5nZSgwLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSYW5nZShcbiAgICAgIHRoaXMuZ2V0KGJlZ2luLCB0aGlzLl9lbmQpLFxuICAgICAgdGhpcy5nZXQoZW5kLCB0aGlzLl9lbmQpLFxuICAgICAgdGhpcy5fc3RlcFxuICAgICk7XG4gIH07XG5cbiAgUmFuZ2UucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mIChzZWFyY2hWYWx1ZSkge1xuICAgIHZhciBvZmZzZXRWYWx1ZSA9IHNlYXJjaFZhbHVlIC0gdGhpcy5fc3RhcnQ7XG4gICAgaWYgKG9mZnNldFZhbHVlICUgdGhpcy5fc3RlcCA9PT0gMCkge1xuICAgICAgdmFyIGluZGV4ID0gb2Zmc2V0VmFsdWUgLyB0aGlzLl9zdGVwO1xuICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLnNpemUpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgUmFuZ2UucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHNlYXJjaFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhPZihzZWFyY2hWYWx1ZSk7XG4gIH07XG5cbiAgUmFuZ2UucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc2l6ZTtcbiAgICB2YXIgc3RlcCA9IHRoaXMuX3N0ZXA7XG4gICAgdmFyIHZhbHVlID0gcmV2ZXJzZSA/IHRoaXMuX3N0YXJ0ICsgKHNpemUgLSAxKSAqIHN0ZXAgOiB0aGlzLl9zdGFydDtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgIT09IHNpemUpIHtcbiAgICAgIGlmIChmbih2YWx1ZSwgcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKyssIHRoaXMpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHZhbHVlICs9IHJldmVyc2UgPyAtc3RlcCA6IHN0ZXA7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICB2YXIgdmFsdWUgPSByZXZlcnNlID8gdGhpcy5fc3RhcnQgKyAoc2l6ZSAtIDEpICogc3RlcCA6IHRoaXMuX3N0YXJ0O1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpID09PSBzaXplKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvckRvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciB2ID0gdmFsdWU7XG4gICAgICB2YWx1ZSArPSByZXZlcnNlID8gLXN0ZXAgOiBzdGVwO1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKyssIHYpO1xuICAgIH0pO1xuICB9O1xuXG4gIFJhbmdlLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKG90aGVyKSB7XG4gICAgcmV0dXJuIG90aGVyIGluc3RhbmNlb2YgUmFuZ2VcbiAgICAgID8gdGhpcy5fc3RhcnQgPT09IG90aGVyLl9zdGFydCAmJlxuICAgICAgICAgIHRoaXMuX2VuZCA9PT0gb3RoZXIuX2VuZCAmJlxuICAgICAgICAgIHRoaXMuX3N0ZXAgPT09IG90aGVyLl9zdGVwXG4gICAgICA6IGRlZXBFcXVhbCh0aGlzLCBvdGhlcik7XG4gIH07XG5cbiAgcmV0dXJuIFJhbmdlO1xufShJbmRleGVkU2VxKSk7XG5cbnZhciBFTVBUWV9SQU5HRTtcblxuZnVuY3Rpb24gZ2V0SW4kMShjb2xsZWN0aW9uLCBzZWFyY2hLZXlQYXRoLCBub3RTZXRWYWx1ZSkge1xuICB2YXIga2V5UGF0aCA9IGNvZXJjZUtleVBhdGgoc2VhcmNoS2V5UGF0aCk7XG4gIHZhciBpID0gMDtcbiAgd2hpbGUgKGkgIT09IGtleVBhdGgubGVuZ3RoKSB7XG4gICAgY29sbGVjdGlvbiA9IGdldChjb2xsZWN0aW9uLCBrZXlQYXRoW2krK10sIE5PVF9TRVQpO1xuICAgIGlmIChjb2xsZWN0aW9uID09PSBOT1RfU0VUKSB7XG4gICAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiBnZXRJbihzZWFyY2hLZXlQYXRoLCBub3RTZXRWYWx1ZSkge1xuICByZXR1cm4gZ2V0SW4kMSh0aGlzLCBzZWFyY2hLZXlQYXRoLCBub3RTZXRWYWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGhhc0luJDEoY29sbGVjdGlvbiwga2V5UGF0aCkge1xuICByZXR1cm4gZ2V0SW4kMShjb2xsZWN0aW9uLCBrZXlQYXRoLCBOT1RfU0VUKSAhPT0gTk9UX1NFVDtcbn1cblxuZnVuY3Rpb24gaGFzSW4oc2VhcmNoS2V5UGF0aCkge1xuICByZXR1cm4gaGFzSW4kMSh0aGlzLCBzZWFyY2hLZXlQYXRoKTtcbn1cblxuZnVuY3Rpb24gdG9PYmplY3QoKSB7XG4gIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gIHZhciBvYmplY3QgPSB7fTtcbiAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGspIHtcbiAgICBvYmplY3Rba10gPSB2O1xuICB9KTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuLy8gTm90ZTogYWxsIG9mIHRoZXNlIG1ldGhvZHMgYXJlIGRlcHJlY2F0ZWQuXG5Db2xsZWN0aW9uLmlzSXRlcmFibGUgPSBpc0NvbGxlY3Rpb247XG5Db2xsZWN0aW9uLmlzS2V5ZWQgPSBpc0tleWVkO1xuQ29sbGVjdGlvbi5pc0luZGV4ZWQgPSBpc0luZGV4ZWQ7XG5Db2xsZWN0aW9uLmlzQXNzb2NpYXRpdmUgPSBpc0Fzc29jaWF0aXZlO1xuQ29sbGVjdGlvbi5pc09yZGVyZWQgPSBpc09yZGVyZWQ7XG5cbkNvbGxlY3Rpb24uSXRlcmF0b3IgPSBJdGVyYXRvcjtcblxubWl4aW4oQ29sbGVjdGlvbiwge1xuICAvLyAjIyMgQ29udmVyc2lvbiB0byBvdGhlciB0eXBlc1xuXG4gIHRvQXJyYXk6IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgYXNzZXJ0Tm90SW5maW5pdGUodGhpcy5zaXplKTtcbiAgICB2YXIgYXJyYXkgPSBuZXcgQXJyYXkodGhpcy5zaXplIHx8IDApO1xuICAgIHZhciB1c2VUdXBsZXMgPSBpc0tleWVkKHRoaXMpO1xuICAgIHZhciBpID0gMDtcbiAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaykge1xuICAgICAgLy8gS2V5ZWQgY29sbGVjdGlvbnMgcHJvZHVjZSBhbiBhcnJheSBvZiB0dXBsZXMuXG4gICAgICBhcnJheVtpKytdID0gdXNlVHVwbGVzID8gW2ssIHZdIDogdjtcbiAgICB9KTtcbiAgICByZXR1cm4gYXJyYXk7XG4gIH0sXG5cbiAgdG9JbmRleGVkU2VxOiBmdW5jdGlvbiB0b0luZGV4ZWRTZXEoKSB7XG4gICAgcmV0dXJuIG5ldyBUb0luZGV4ZWRTZXF1ZW5jZSh0aGlzKTtcbiAgfSxcblxuICB0b0pTOiBmdW5jdGlvbiB0b0pTJDEoKSB7XG4gICAgcmV0dXJuIHRvSlModGhpcyk7XG4gIH0sXG5cbiAgdG9LZXllZFNlcTogZnVuY3Rpb24gdG9LZXllZFNlcSgpIHtcbiAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCB0cnVlKTtcbiAgfSxcblxuICB0b01hcDogZnVuY3Rpb24gdG9NYXAoKSB7XG4gICAgLy8gVXNlIExhdGUgQmluZGluZyBoZXJlIHRvIHNvbHZlIHRoZSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgIHJldHVybiBNYXAodGhpcy50b0tleWVkU2VxKCkpO1xuICB9LFxuXG4gIHRvT2JqZWN0OiB0b09iamVjdCxcblxuICB0b09yZGVyZWRNYXA6IGZ1bmN0aW9uIHRvT3JkZXJlZE1hcCgpIHtcbiAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgcmV0dXJuIE9yZGVyZWRNYXAodGhpcy50b0tleWVkU2VxKCkpO1xuICB9LFxuXG4gIHRvT3JkZXJlZFNldDogZnVuY3Rpb24gdG9PcmRlcmVkU2V0KCkge1xuICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICByZXR1cm4gT3JkZXJlZFNldChpc0tleWVkKHRoaXMpID8gdGhpcy52YWx1ZVNlcSgpIDogdGhpcyk7XG4gIH0sXG5cbiAgdG9TZXQ6IGZ1bmN0aW9uIHRvU2V0KCkge1xuICAgIC8vIFVzZSBMYXRlIEJpbmRpbmcgaGVyZSB0byBzb2x2ZSB0aGUgY2lyY3VsYXIgZGVwZW5kZW5jeS5cbiAgICByZXR1cm4gU2V0KGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgfSxcblxuICB0b1NldFNlcTogZnVuY3Rpb24gdG9TZXRTZXEoKSB7XG4gICAgcmV0dXJuIG5ldyBUb1NldFNlcXVlbmNlKHRoaXMpO1xuICB9LFxuXG4gIHRvU2VxOiBmdW5jdGlvbiB0b1NlcSgpIHtcbiAgICByZXR1cm4gaXNJbmRleGVkKHRoaXMpXG4gICAgICA/IHRoaXMudG9JbmRleGVkU2VxKClcbiAgICAgIDogaXNLZXllZCh0aGlzKVxuICAgICAgPyB0aGlzLnRvS2V5ZWRTZXEoKVxuICAgICAgOiB0aGlzLnRvU2V0U2VxKCk7XG4gIH0sXG5cbiAgdG9TdGFjazogZnVuY3Rpb24gdG9TdGFjaygpIHtcbiAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgcmV0dXJuIFN0YWNrKGlzS2V5ZWQodGhpcykgPyB0aGlzLnZhbHVlU2VxKCkgOiB0aGlzKTtcbiAgfSxcblxuICB0b0xpc3Q6IGZ1bmN0aW9uIHRvTGlzdCgpIHtcbiAgICAvLyBVc2UgTGF0ZSBCaW5kaW5nIGhlcmUgdG8gc29sdmUgdGhlIGNpcmN1bGFyIGRlcGVuZGVuY3kuXG4gICAgcmV0dXJuIExpc3QoaXNLZXllZCh0aGlzKSA/IHRoaXMudmFsdWVTZXEoKSA6IHRoaXMpO1xuICB9LFxuXG4gIC8vICMjIyBDb21tb24gSmF2YVNjcmlwdCBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzXG5cbiAgdG9TdHJpbmc6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiAnW0NvbGxlY3Rpb25dJztcbiAgfSxcblxuICBfX3RvU3RyaW5nOiBmdW5jdGlvbiBfX3RvU3RyaW5nKGhlYWQsIHRhaWwpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gaGVhZCArIHRhaWw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICBoZWFkICtcbiAgICAgICcgJyArXG4gICAgICB0aGlzLnRvU2VxKCkubWFwKHRoaXMuX190b1N0cmluZ01hcHBlcikuam9pbignLCAnKSArXG4gICAgICAnICcgK1xuICAgICAgdGFpbFxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KCkge1xuICAgIHZhciB2YWx1ZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgdmFsdWVzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gcmVpZnkodGhpcywgY29uY2F0RmFjdG9yeSh0aGlzLCB2YWx1ZXMpKTtcbiAgfSxcblxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoVmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5zb21lKGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gaXModmFsdWUsIHNlYXJjaFZhbHVlKTsgfSk7XG4gIH0sXG5cbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHtcbiAgICByZXR1cm4gdGhpcy5fX2l0ZXJhdG9yKElURVJBVEVfRU5UUklFUyk7XG4gIH0sXG5cbiAgZXZlcnk6IGZ1bmN0aW9uIGV2ZXJ5KHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgdmFyIHJldHVyblZhbHVlID0gdHJ1ZTtcbiAgICB0aGlzLl9faXRlcmF0ZShmdW5jdGlvbiAodiwgaywgYykge1xuICAgICAgaWYgKCFwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICByZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICB9LFxuXG4gIHBhcnRpdGlvbjogZnVuY3Rpb24gcGFydGl0aW9uKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBwYXJ0aXRpb25GYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIH0sXG5cbiAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5maW5kRW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZW50cnkgPyBlbnRyeVsxXSA6IG5vdFNldFZhbHVlO1xuICB9LFxuXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goc2lkZUVmZmVjdCwgY29udGV4dCkge1xuICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRlKGNvbnRleHQgPyBzaWRlRWZmZWN0LmJpbmQoY29udGV4dCkgOiBzaWRlRWZmZWN0KTtcbiAgfSxcblxuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xuICAgIGFzc2VydE5vdEluZmluaXRlKHRoaXMuc2l6ZSk7XG4gICAgc2VwYXJhdG9yID0gc2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyAnJyArIHNlcGFyYXRvciA6ICcsJztcbiAgICB2YXIgam9pbmVkID0gJyc7XG4gICAgdmFyIGlzRmlyc3QgPSB0cnVlO1xuICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uICh2KSB7XG4gICAgICBpc0ZpcnN0ID8gKGlzRmlyc3QgPSBmYWxzZSkgOiAoam9pbmVkICs9IHNlcGFyYXRvcik7XG4gICAgICBqb2luZWQgKz0gdiAhPT0gbnVsbCAmJiB2ICE9PSB1bmRlZmluZWQgPyB2LnRvU3RyaW5nKCkgOiAnJztcbiAgICB9KTtcbiAgICByZXR1cm4gam9pbmVkO1xuICB9LFxuXG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0tFWVMpO1xuICB9LFxuXG4gIG1hcDogZnVuY3Rpb24gbWFwKG1hcHBlciwgY29udGV4dCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBtYXBGYWN0b3J5KHRoaXMsIG1hcHBlciwgY29udGV4dCkpO1xuICB9LFxuXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlJDEocmVkdWNlciwgaW5pdGlhbFJlZHVjdGlvbiwgY29udGV4dCkge1xuICAgIHJldHVybiByZWR1Y2UoXG4gICAgICB0aGlzLFxuICAgICAgcmVkdWNlcixcbiAgICAgIGluaXRpYWxSZWR1Y3Rpb24sXG4gICAgICBjb250ZXh0LFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA8IDIsXG4gICAgICBmYWxzZVxuICAgICk7XG4gIH0sXG5cbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KHJlZHVjZXIsIGluaXRpYWxSZWR1Y3Rpb24sIGNvbnRleHQpIHtcbiAgICByZXR1cm4gcmVkdWNlKFxuICAgICAgdGhpcyxcbiAgICAgIHJlZHVjZXIsXG4gICAgICBpbml0aWFsUmVkdWN0aW9uLFxuICAgICAgY29udGV4dCxcbiAgICAgIGFyZ3VtZW50cy5sZW5ndGggPCAyLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH0sXG5cbiAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgcmV2ZXJzZUZhY3RvcnkodGhpcywgdHJ1ZSkpO1xuICB9LFxuXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShiZWdpbiwgZW5kKSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNsaWNlRmFjdG9yeSh0aGlzLCBiZWdpbiwgZW5kLCB0cnVlKSk7XG4gIH0sXG5cbiAgc29tZTogZnVuY3Rpb24gc29tZShwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBhc3NlcnROb3RJbmZpbml0ZSh0aGlzLnNpemUpO1xuICAgIHZhciByZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHRoaXMuX19pdGVyYXRlKGZ1bmN0aW9uICh2LCBrLCBjKSB7XG4gICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdiwgaywgYykpIHtcbiAgICAgICAgcmV0dXJuVmFsdWUgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xuICB9LFxuXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyYXRvcikge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBzb3J0RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKSk7XG4gIH0sXG5cbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX1ZBTFVFUyk7XG4gIH0sXG5cbiAgLy8gIyMjIE1vcmUgc2VxdWVudGlhbCBtZXRob2RzXG5cbiAgYnV0TGFzdDogZnVuY3Rpb24gYnV0TGFzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5zbGljZSgwLCAtMSk7XG4gIH0sXG5cbiAgaXNFbXB0eTogZnVuY3Rpb24gaXNFbXB0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zaXplICE9PSB1bmRlZmluZWQgPyB0aGlzLnNpemUgPT09IDAgOiAhdGhpcy5zb21lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0pO1xuICB9LFxuXG4gIGNvdW50OiBmdW5jdGlvbiBjb3VudChwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZW5zdXJlU2l6ZShcbiAgICAgIHByZWRpY2F0ZSA/IHRoaXMudG9TZXEoKS5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KSA6IHRoaXNcbiAgICApO1xuICB9LFxuXG4gIGNvdW50Qnk6IGZ1bmN0aW9uIGNvdW50QnkoZ3JvdXBlciwgY29udGV4dCkge1xuICAgIHJldHVybiBjb3VudEJ5RmFjdG9yeSh0aGlzLCBncm91cGVyLCBjb250ZXh0KTtcbiAgfSxcblxuICBlcXVhbHM6IGZ1bmN0aW9uIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICB9LFxuXG4gIGVudHJ5U2VxOiBmdW5jdGlvbiBlbnRyeVNlcSgpIHtcbiAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgaWYgKGNvbGxlY3Rpb24uX2NhY2hlKSB7XG4gICAgICAvLyBXZSBjYWNoZSBhcyBhbiBlbnRyaWVzIGFycmF5LCBzbyB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGNhY2hlIVxuICAgICAgcmV0dXJuIG5ldyBBcnJheVNlcShjb2xsZWN0aW9uLl9jYWNoZSk7XG4gICAgfVxuICAgIHZhciBlbnRyaWVzU2VxdWVuY2UgPSBjb2xsZWN0aW9uLnRvU2VxKCkubWFwKGVudHJ5TWFwcGVyKS50b0luZGV4ZWRTZXEoKTtcbiAgICBlbnRyaWVzU2VxdWVuY2UuZnJvbUVudHJ5U2VxID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY29sbGVjdGlvbi50b1NlcSgpOyB9O1xuICAgIHJldHVybiBlbnRyaWVzU2VxdWVuY2U7XG4gIH0sXG5cbiAgZmlsdGVyTm90OiBmdW5jdGlvbiBmaWx0ZXJOb3QocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuZmlsdGVyKG5vdChwcmVkaWNhdGUpLCBjb250ZXh0KTtcbiAgfSxcblxuICBmaW5kRW50cnk6IGZ1bmN0aW9uIGZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgdmFyIGZvdW5kID0gbm90U2V0VmFsdWU7XG4gICAgdGhpcy5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2LCBrLCBjKSkge1xuICAgICAgICBmb3VuZCA9IFtrLCB2XTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmb3VuZDtcbiAgfSxcblxuICBmaW5kS2V5OiBmdW5jdGlvbiBmaW5kS2V5KHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuZmluZEVudHJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5WzBdO1xuICB9LFxuXG4gIGZpbmRMYXN0OiBmdW5jdGlvbiBmaW5kTGFzdChwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kKHByZWRpY2F0ZSwgY29udGV4dCwgbm90U2V0VmFsdWUpO1xuICB9LFxuXG4gIGZpbmRMYXN0RW50cnk6IGZ1bmN0aW9uIGZpbmRMYXN0RW50cnkocHJlZGljYXRlLCBjb250ZXh0LCBub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKVxuICAgICAgLnJldmVyc2UoKVxuICAgICAgLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQsIG5vdFNldFZhbHVlKTtcbiAgfSxcblxuICBmaW5kTGFzdEtleTogZnVuY3Rpb24gZmluZExhc3RLZXkocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMudG9LZXllZFNlcSgpLnJldmVyc2UoKS5maW5kS2V5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gIH0sXG5cbiAgZmlyc3Q6IGZ1bmN0aW9uIGZpcnN0KG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZChyZXR1cm5UcnVlLCBudWxsLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChtYXBwZXIsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgZmxhdE1hcEZhY3RvcnkodGhpcywgbWFwcGVyLCBjb250ZXh0KSk7XG4gIH0sXG5cbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbihkZXB0aCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgdHJ1ZSkpO1xuICB9LFxuXG4gIGZyb21FbnRyeVNlcTogZnVuY3Rpb24gZnJvbUVudHJ5U2VxKCkge1xuICAgIHJldHVybiBuZXcgRnJvbUVudHJpZXNTZXF1ZW5jZSh0aGlzKTtcbiAgfSxcblxuICBnZXQ6IGZ1bmN0aW9uIGdldChzZWFyY2hLZXksIG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZChmdW5jdGlvbiAoXywga2V5KSB7IHJldHVybiBpcyhrZXksIHNlYXJjaEtleSk7IH0sIHVuZGVmaW5lZCwgbm90U2V0VmFsdWUpO1xuICB9LFxuXG4gIGdldEluOiBnZXRJbixcblxuICBncm91cEJ5OiBmdW5jdGlvbiBncm91cEJ5KGdyb3VwZXIsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZ3JvdXBCeUZhY3RvcnkodGhpcywgZ3JvdXBlciwgY29udGV4dCk7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbiBoYXMoc2VhcmNoS2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KHNlYXJjaEtleSwgTk9UX1NFVCkgIT09IE5PVF9TRVQ7XG4gIH0sXG5cbiAgaGFzSW46IGhhc0luLFxuXG4gIGlzU3Vic2V0OiBmdW5jdGlvbiBpc1N1YnNldChpdGVyKSB7XG4gICAgaXRlciA9IHR5cGVvZiBpdGVyLmluY2x1ZGVzID09PSAnZnVuY3Rpb24nID8gaXRlciA6IENvbGxlY3Rpb24oaXRlcik7XG4gICAgcmV0dXJuIHRoaXMuZXZlcnkoZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBpdGVyLmluY2x1ZGVzKHZhbHVlKTsgfSk7XG4gIH0sXG5cbiAgaXNTdXBlcnNldDogZnVuY3Rpb24gaXNTdXBlcnNldChpdGVyKSB7XG4gICAgaXRlciA9IHR5cGVvZiBpdGVyLmlzU3Vic2V0ID09PSAnZnVuY3Rpb24nID8gaXRlciA6IENvbGxlY3Rpb24oaXRlcik7XG4gICAgcmV0dXJuIGl0ZXIuaXNTdWJzZXQodGhpcyk7XG4gIH0sXG5cbiAga2V5T2Y6IGZ1bmN0aW9uIGtleU9mKHNlYXJjaFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmluZEtleShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIGlzKHZhbHVlLCBzZWFyY2hWYWx1ZSk7IH0pO1xuICB9LFxuXG4gIGtleVNlcTogZnVuY3Rpb24ga2V5U2VxKCkge1xuICAgIHJldHVybiB0aGlzLnRvU2VxKCkubWFwKGtleU1hcHBlcikudG9JbmRleGVkU2VxKCk7XG4gIH0sXG5cbiAgbGFzdDogZnVuY3Rpb24gbGFzdChub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRvU2VxKCkucmV2ZXJzZSgpLmZpcnN0KG5vdFNldFZhbHVlKTtcbiAgfSxcblxuICBsYXN0S2V5T2Y6IGZ1bmN0aW9uIGxhc3RLZXlPZihzZWFyY2hWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLnRvS2V5ZWRTZXEoKS5yZXZlcnNlKCkua2V5T2Yoc2VhcmNoVmFsdWUpO1xuICB9LFxuXG4gIG1heDogZnVuY3Rpb24gbWF4KGNvbXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbWF4RmFjdG9yeSh0aGlzLCBjb21wYXJhdG9yKTtcbiAgfSxcblxuICBtYXhCeTogZnVuY3Rpb24gbWF4QnkobWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIG1heEZhY3RvcnkodGhpcywgY29tcGFyYXRvciwgbWFwcGVyKTtcbiAgfSxcblxuICBtaW46IGZ1bmN0aW9uIG1pbihjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIG1heEZhY3RvcnkoXG4gICAgICB0aGlzLFxuICAgICAgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yXG4gICAgKTtcbiAgfSxcblxuICBtaW5CeTogZnVuY3Rpb24gbWluQnkobWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIG1heEZhY3RvcnkoXG4gICAgICB0aGlzLFxuICAgICAgY29tcGFyYXRvciA/IG5lZyhjb21wYXJhdG9yKSA6IGRlZmF1bHROZWdDb21wYXJhdG9yLFxuICAgICAgbWFwcGVyXG4gICAgKTtcbiAgfSxcblxuICByZXN0OiBmdW5jdGlvbiByZXN0KCkge1xuICAgIHJldHVybiB0aGlzLnNsaWNlKDEpO1xuICB9LFxuXG4gIHNraXA6IGZ1bmN0aW9uIHNraXAoYW1vdW50KSB7XG4gICAgcmV0dXJuIGFtb3VudCA9PT0gMCA/IHRoaXMgOiB0aGlzLnNsaWNlKE1hdGgubWF4KDAsIGFtb3VudCkpO1xuICB9LFxuXG4gIHNraXBMYXN0OiBmdW5jdGlvbiBza2lwTGFzdChhbW91bnQpIHtcbiAgICByZXR1cm4gYW1vdW50ID09PSAwID8gdGhpcyA6IHRoaXMuc2xpY2UoMCwgLU1hdGgubWF4KDAsIGFtb3VudCkpO1xuICB9LFxuXG4gIHNraXBXaGlsZTogZnVuY3Rpb24gc2tpcFdoaWxlKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBza2lwV2hpbGVGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgdHJ1ZSkpO1xuICB9LFxuXG4gIHNraXBVbnRpbDogZnVuY3Rpb24gc2tpcFVudGlsKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiB0aGlzLnNraXBXaGlsZShub3QocHJlZGljYXRlKSwgY29udGV4dCk7XG4gIH0sXG5cbiAgc29ydEJ5OiBmdW5jdGlvbiBzb3J0QnkobWFwcGVyLCBjb21wYXJhdG9yKSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNvcnRGYWN0b3J5KHRoaXMsIGNvbXBhcmF0b3IsIG1hcHBlcikpO1xuICB9LFxuXG4gIHRha2U6IGZ1bmN0aW9uIHRha2UoYW1vdW50KSB7XG4gICAgcmV0dXJuIHRoaXMuc2xpY2UoMCwgTWF0aC5tYXgoMCwgYW1vdW50KSk7XG4gIH0sXG5cbiAgdGFrZUxhc3Q6IGZ1bmN0aW9uIHRha2VMYXN0KGFtb3VudCkge1xuICAgIHJldHVybiB0aGlzLnNsaWNlKC1NYXRoLm1heCgwLCBhbW91bnQpKTtcbiAgfSxcblxuICB0YWtlV2hpbGU6IGZ1bmN0aW9uIHRha2VXaGlsZShwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgdGFrZVdoaWxlRmFjdG9yeSh0aGlzLCBwcmVkaWNhdGUsIGNvbnRleHQpKTtcbiAgfSxcblxuICB0YWtlVW50aWw6IGZ1bmN0aW9uIHRha2VVbnRpbChwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gdGhpcy50YWtlV2hpbGUobm90KHByZWRpY2F0ZSksIGNvbnRleHQpO1xuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKGZuKSB7XG4gICAgcmV0dXJuIGZuKHRoaXMpO1xuICB9LFxuXG4gIHZhbHVlU2VxOiBmdW5jdGlvbiB2YWx1ZVNlcSgpIHtcbiAgICByZXR1cm4gdGhpcy50b0luZGV4ZWRTZXEoKTtcbiAgfSxcblxuICAvLyAjIyMgSGFzaGFibGUgT2JqZWN0XG5cbiAgaGFzaENvZGU6IGZ1bmN0aW9uIGhhc2hDb2RlKCkge1xuICAgIHJldHVybiB0aGlzLl9faGFzaCB8fCAodGhpcy5fX2hhc2ggPSBoYXNoQ29sbGVjdGlvbih0aGlzKSk7XG4gIH0sXG5cbiAgLy8gIyMjIEludGVybmFsXG5cbiAgLy8gYWJzdHJhY3QgX19pdGVyYXRlKGZuLCByZXZlcnNlKVxuXG4gIC8vIGFic3RyYWN0IF9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSlcbn0pO1xuXG52YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24ucHJvdG90eXBlO1xuQ29sbGVjdGlvblByb3RvdHlwZVtJU19DT0xMRUNUSU9OX1NZTUJPTF0gPSB0cnVlO1xuQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gQ29sbGVjdGlvblByb3RvdHlwZS52YWx1ZXM7XG5Db2xsZWN0aW9uUHJvdG90eXBlLnRvSlNPTiA9IENvbGxlY3Rpb25Qcm90b3R5cGUudG9BcnJheTtcbkNvbGxlY3Rpb25Qcm90b3R5cGUuX190b1N0cmluZ01hcHBlciA9IHF1b3RlU3RyaW5nO1xuQ29sbGVjdGlvblByb3RvdHlwZS5pbnNwZWN0ID0gQ29sbGVjdGlvblByb3RvdHlwZS50b1NvdXJjZSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbn07XG5Db2xsZWN0aW9uUHJvdG90eXBlLmNoYWluID0gQ29sbGVjdGlvblByb3RvdHlwZS5mbGF0TWFwO1xuQ29sbGVjdGlvblByb3RvdHlwZS5jb250YWlucyA9IENvbGxlY3Rpb25Qcm90b3R5cGUuaW5jbHVkZXM7XG5cbm1peGluKEtleWVkQ29sbGVjdGlvbiwge1xuICAvLyAjIyMgTW9yZSBzZXF1ZW50aWFsIG1ldGhvZHNcblxuICBmbGlwOiBmdW5jdGlvbiBmbGlwKCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGlwRmFjdG9yeSh0aGlzKSk7XG4gIH0sXG5cbiAgbWFwRW50cmllczogZnVuY3Rpb24gbWFwRW50cmllcyhtYXBwZXIsIGNvbnRleHQpIHtcbiAgICB2YXIgdGhpcyQxJDEgPSB0aGlzO1xuXG4gICAgdmFyIGl0ZXJhdGlvbnMgPSAwO1xuICAgIHJldHVybiByZWlmeShcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnRvU2VxKClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgW2ssIHZdLCBpdGVyYXRpb25zKyssIHRoaXMkMSQxKTsgfSlcbiAgICAgICAgLmZyb21FbnRyeVNlcSgpXG4gICAgKTtcbiAgfSxcblxuICBtYXBLZXlzOiBmdW5jdGlvbiBtYXBLZXlzKG1hcHBlciwgY29udGV4dCkge1xuICAgIHZhciB0aGlzJDEkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4gcmVpZnkoXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy50b1NlcSgpXG4gICAgICAgIC5mbGlwKClcbiAgICAgICAgLm1hcChmdW5jdGlvbiAoaywgdikgeyByZXR1cm4gbWFwcGVyLmNhbGwoY29udGV4dCwgaywgdiwgdGhpcyQxJDEpOyB9KVxuICAgICAgICAuZmxpcCgpXG4gICAgKTtcbiAgfSxcbn0pO1xuXG52YXIgS2V5ZWRDb2xsZWN0aW9uUHJvdG90eXBlID0gS2V5ZWRDb2xsZWN0aW9uLnByb3RvdHlwZTtcbktleWVkQ29sbGVjdGlvblByb3RvdHlwZVtJU19LRVlFRF9TWU1CT0xdID0gdHJ1ZTtcbktleWVkQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gQ29sbGVjdGlvblByb3RvdHlwZS5lbnRyaWVzO1xuS2V5ZWRDb2xsZWN0aW9uUHJvdG90eXBlLnRvSlNPTiA9IHRvT2JqZWN0O1xuS2V5ZWRDb2xsZWN0aW9uUHJvdG90eXBlLl9fdG9TdHJpbmdNYXBwZXIgPSBmdW5jdGlvbiAodiwgaykgeyByZXR1cm4gcXVvdGVTdHJpbmcoaykgKyAnOiAnICsgcXVvdGVTdHJpbmcodik7IH07XG5cbm1peGluKEluZGV4ZWRDb2xsZWN0aW9uLCB7XG4gIC8vICMjIyBDb252ZXJzaW9uIHRvIG90aGVyIHR5cGVzXG5cbiAgdG9LZXllZFNlcTogZnVuY3Rpb24gdG9LZXllZFNlcSgpIHtcbiAgICByZXR1cm4gbmV3IFRvS2V5ZWRTZXF1ZW5jZSh0aGlzLCBmYWxzZSk7XG4gIH0sXG5cbiAgLy8gIyMjIEVTNiBDb2xsZWN0aW9uIG1ldGhvZHMgKEVTNiBBcnJheSBhbmQgTWFwKVxuXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBmaWx0ZXJGYWN0b3J5KHRoaXMsIHByZWRpY2F0ZSwgY29udGV4dCwgZmFsc2UpKTtcbiAgfSxcblxuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRFbnRyeShwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHJldHVybiBlbnRyeSA/IGVudHJ5WzBdIDogLTE7XG4gIH0sXG5cbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hWYWx1ZSkge1xuICAgIHZhciBrZXkgPSB0aGlzLmtleU9mKHNlYXJjaFZhbHVlKTtcbiAgICByZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgPyAtMSA6IGtleTtcbiAgfSxcblxuICBsYXN0SW5kZXhPZjogZnVuY3Rpb24gbGFzdEluZGV4T2Yoc2VhcmNoVmFsdWUpIHtcbiAgICB2YXIga2V5ID0gdGhpcy5sYXN0S2V5T2Yoc2VhcmNoVmFsdWUpO1xuICAgIHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/IC0xIDoga2V5O1xuICB9LFxuXG4gIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHJldmVyc2VGYWN0b3J5KHRoaXMsIGZhbHNlKSk7XG4gIH0sXG5cbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgc2xpY2VGYWN0b3J5KHRoaXMsIGJlZ2luLCBlbmQsIGZhbHNlKSk7XG4gIH0sXG5cbiAgc3BsaWNlOiBmdW5jdGlvbiBzcGxpY2UoaW5kZXgsIHJlbW92ZU51bSAvKiwgLi4udmFsdWVzKi8pIHtcbiAgICB2YXIgbnVtQXJncyA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmVtb3ZlTnVtID0gTWF0aC5tYXgocmVtb3ZlTnVtIHx8IDAsIDApO1xuICAgIGlmIChudW1BcmdzID09PSAwIHx8IChudW1BcmdzID09PSAyICYmICFyZW1vdmVOdW0pKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gSWYgaW5kZXggaXMgbmVnYXRpdmUsIGl0IHNob3VsZCByZXNvbHZlIHJlbGF0aXZlIHRvIHRoZSBzaXplIG9mIHRoZVxuICAgIC8vIGNvbGxlY3Rpb24uIEhvd2V2ZXIgc2l6ZSBtYXkgYmUgZXhwZW5zaXZlIHRvIGNvbXB1dGUgaWYgbm90IGNhY2hlZCwgc29cbiAgICAvLyBvbmx5IGNhbGwgY291bnQoKSBpZiB0aGUgbnVtYmVyIGlzIGluIGZhY3QgbmVnYXRpdmUuXG4gICAgaW5kZXggPSByZXNvbHZlQmVnaW4oaW5kZXgsIGluZGV4IDwgMCA/IHRoaXMuY291bnQoKSA6IHRoaXMuc2l6ZSk7XG4gICAgdmFyIHNwbGljZWQgPSB0aGlzLnNsaWNlKDAsIGluZGV4KTtcbiAgICByZXR1cm4gcmVpZnkoXG4gICAgICB0aGlzLFxuICAgICAgbnVtQXJncyA9PT0gMVxuICAgICAgICA/IHNwbGljZWRcbiAgICAgICAgOiBzcGxpY2VkLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cywgMiksIHRoaXMuc2xpY2UoaW5kZXggKyByZW1vdmVOdW0pKVxuICAgICk7XG4gIH0sXG5cbiAgLy8gIyMjIE1vcmUgY29sbGVjdGlvbiBtZXRob2RzXG5cbiAgZmluZExhc3RJbmRleDogZnVuY3Rpb24gZmluZExhc3RJbmRleChwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgZW50cnkgPSB0aGlzLmZpbmRMYXN0RW50cnkocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICByZXR1cm4gZW50cnkgPyBlbnRyeVswXSA6IC0xO1xuICB9LFxuXG4gIGZpcnN0OiBmdW5jdGlvbiBmaXJzdChub3RTZXRWYWx1ZSkge1xuICAgIHJldHVybiB0aGlzLmdldCgwLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbihkZXB0aCkge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBmbGF0dGVuRmFjdG9yeSh0aGlzLCBkZXB0aCwgZmFsc2UpKTtcbiAgfSxcblxuICBnZXQ6IGZ1bmN0aW9uIGdldChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgcmV0dXJuIGluZGV4IDwgMCB8fFxuICAgICAgdGhpcy5zaXplID09PSBJbmZpbml0eSB8fFxuICAgICAgKHRoaXMuc2l6ZSAhPT0gdW5kZWZpbmVkICYmIGluZGV4ID4gdGhpcy5zaXplKVxuICAgICAgPyBub3RTZXRWYWx1ZVxuICAgICAgOiB0aGlzLmZpbmQoZnVuY3Rpb24gKF8sIGtleSkgeyByZXR1cm4ga2V5ID09PSBpbmRleDsgfSwgdW5kZWZpbmVkLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgaGFzOiBmdW5jdGlvbiBoYXMoaW5kZXgpIHtcbiAgICBpbmRleCA9IHdyYXBJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgcmV0dXJuIChcbiAgICAgIGluZGV4ID49IDAgJiZcbiAgICAgICh0aGlzLnNpemUgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IHRoaXMuc2l6ZSA9PT0gSW5maW5pdHkgfHwgaW5kZXggPCB0aGlzLnNpemVcbiAgICAgICAgOiB0aGlzLmluZGV4T2YoaW5kZXgpICE9PSAtMSlcbiAgICApO1xuICB9LFxuXG4gIGludGVycG9zZTogZnVuY3Rpb24gaW50ZXJwb3NlKHNlcGFyYXRvcikge1xuICAgIHJldHVybiByZWlmeSh0aGlzLCBpbnRlcnBvc2VGYWN0b3J5KHRoaXMsIHNlcGFyYXRvcikpO1xuICB9LFxuXG4gIGludGVybGVhdmU6IGZ1bmN0aW9uIGludGVybGVhdmUoLyouLi5jb2xsZWN0aW9ucyovKSB7XG4gICAgdmFyIGNvbGxlY3Rpb25zID0gW3RoaXNdLmNvbmNhdChhcnJDb3B5KGFyZ3VtZW50cykpO1xuICAgIHZhciB6aXBwZWQgPSB6aXBXaXRoRmFjdG9yeSh0aGlzLnRvU2VxKCksIEluZGV4ZWRTZXEub2YsIGNvbGxlY3Rpb25zKTtcbiAgICB2YXIgaW50ZXJsZWF2ZWQgPSB6aXBwZWQuZmxhdHRlbih0cnVlKTtcbiAgICBpZiAoemlwcGVkLnNpemUpIHtcbiAgICAgIGludGVybGVhdmVkLnNpemUgPSB6aXBwZWQuc2l6ZSAqIGNvbGxlY3Rpb25zLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIGludGVybGVhdmVkKTtcbiAgfSxcblxuICBrZXlTZXE6IGZ1bmN0aW9uIGtleVNlcSgpIHtcbiAgICByZXR1cm4gUmFuZ2UoMCwgdGhpcy5zaXplKTtcbiAgfSxcblxuICBsYXN0OiBmdW5jdGlvbiBsYXN0KG5vdFNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KC0xLCBub3RTZXRWYWx1ZSk7XG4gIH0sXG5cbiAgc2tpcFdoaWxlOiBmdW5jdGlvbiBza2lwV2hpbGUocHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHNraXBXaGlsZUZhY3RvcnkodGhpcywgcHJlZGljYXRlLCBjb250ZXh0LCBmYWxzZSkpO1xuICB9LFxuXG4gIHppcDogZnVuY3Rpb24gemlwKC8qLCAuLi5jb2xsZWN0aW9ucyAqLykge1xuICAgIHZhciBjb2xsZWN0aW9ucyA9IFt0aGlzXS5jb25jYXQoYXJyQ29weShhcmd1bWVudHMpKTtcbiAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgZGVmYXVsdFppcHBlciwgY29sbGVjdGlvbnMpKTtcbiAgfSxcblxuICB6aXBBbGw6IGZ1bmN0aW9uIHppcEFsbCgvKiwgLi4uY29sbGVjdGlvbnMgKi8pIHtcbiAgICB2YXIgY29sbGVjdGlvbnMgPSBbdGhpc10uY29uY2F0KGFyckNvcHkoYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHJlaWZ5KHRoaXMsIHppcFdpdGhGYWN0b3J5KHRoaXMsIGRlZmF1bHRaaXBwZXIsIGNvbGxlY3Rpb25zLCB0cnVlKSk7XG4gIH0sXG5cbiAgemlwV2l0aDogZnVuY3Rpb24gemlwV2l0aCh6aXBwZXIgLyosIC4uLmNvbGxlY3Rpb25zICovKSB7XG4gICAgdmFyIGNvbGxlY3Rpb25zID0gYXJyQ29weShhcmd1bWVudHMpO1xuICAgIGNvbGxlY3Rpb25zWzBdID0gdGhpcztcbiAgICByZXR1cm4gcmVpZnkodGhpcywgemlwV2l0aEZhY3RvcnkodGhpcywgemlwcGVyLCBjb2xsZWN0aW9ucykpO1xuICB9LFxufSk7XG5cbnZhciBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZSA9IEluZGV4ZWRDb2xsZWN0aW9uLnByb3RvdHlwZTtcbkluZGV4ZWRDb2xsZWN0aW9uUHJvdG90eXBlW0lTX0lOREVYRURfU1lNQk9MXSA9IHRydWU7XG5JbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuXG5taXhpbihTZXRDb2xsZWN0aW9uLCB7XG4gIC8vICMjIyBFUzYgQ29sbGVjdGlvbiBtZXRob2RzIChFUzYgQXJyYXkgYW5kIE1hcClcblxuICBnZXQ6IGZ1bmN0aW9uIGdldCh2YWx1ZSwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpID8gdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgfSxcblxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXModmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXModmFsdWUpO1xuICB9LFxuXG4gIC8vICMjIyBNb3JlIHNlcXVlbnRpYWwgbWV0aG9kc1xuXG4gIGtleVNlcTogZnVuY3Rpb24ga2V5U2VxKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlU2VxKCk7XG4gIH0sXG59KTtcblxudmFyIFNldENvbGxlY3Rpb25Qcm90b3R5cGUgPSBTZXRDb2xsZWN0aW9uLnByb3RvdHlwZTtcblNldENvbGxlY3Rpb25Qcm90b3R5cGUuaGFzID0gQ29sbGVjdGlvblByb3RvdHlwZS5pbmNsdWRlcztcblNldENvbGxlY3Rpb25Qcm90b3R5cGUuY29udGFpbnMgPSBTZXRDb2xsZWN0aW9uUHJvdG90eXBlLmluY2x1ZGVzO1xuU2V0Q29sbGVjdGlvblByb3RvdHlwZS5rZXlzID0gU2V0Q29sbGVjdGlvblByb3RvdHlwZS52YWx1ZXM7XG5cbi8vIE1peGluIHN1YmNsYXNzZXNcblxubWl4aW4oS2V5ZWRTZXEsIEtleWVkQ29sbGVjdGlvblByb3RvdHlwZSk7XG5taXhpbihJbmRleGVkU2VxLCBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZSk7XG5taXhpbihTZXRTZXEsIFNldENvbGxlY3Rpb25Qcm90b3R5cGUpO1xuXG4vLyAjcHJhZ21hIEhlbHBlciBmdW5jdGlvbnNcblxuZnVuY3Rpb24gcmVkdWNlKGNvbGxlY3Rpb24sIHJlZHVjZXIsIHJlZHVjdGlvbiwgY29udGV4dCwgdXNlRmlyc3QsIHJldmVyc2UpIHtcbiAgYXNzZXJ0Tm90SW5maW5pdGUoY29sbGVjdGlvbi5zaXplKTtcbiAgY29sbGVjdGlvbi5fX2l0ZXJhdGUoZnVuY3Rpb24gKHYsIGssIGMpIHtcbiAgICBpZiAodXNlRmlyc3QpIHtcbiAgICAgIHVzZUZpcnN0ID0gZmFsc2U7XG4gICAgICByZWR1Y3Rpb24gPSB2O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWR1Y3Rpb24gPSByZWR1Y2VyLmNhbGwoY29udGV4dCwgcmVkdWN0aW9uLCB2LCBrLCBjKTtcbiAgICB9XG4gIH0sIHJldmVyc2UpO1xuICByZXR1cm4gcmVkdWN0aW9uO1xufVxuXG5mdW5jdGlvbiBrZXlNYXBwZXIodiwgaykge1xuICByZXR1cm4gaztcbn1cblxuZnVuY3Rpb24gZW50cnlNYXBwZXIodiwgaykge1xuICByZXR1cm4gW2ssIHZdO1xufVxuXG5mdW5jdGlvbiBub3QocHJlZGljYXRlKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmVnKHByZWRpY2F0ZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAtcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRaaXBwZXIoKSB7XG4gIHJldHVybiBhcnJDb3B5KGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHROZWdDb21wYXJhdG9yKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gMSA6IGEgPiBiID8gLTEgOiAwO1xufVxuXG5mdW5jdGlvbiBoYXNoQ29sbGVjdGlvbihjb2xsZWN0aW9uKSB7XG4gIGlmIChjb2xsZWN0aW9uLnNpemUgPT09IEluZmluaXR5KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgdmFyIG9yZGVyZWQgPSBpc09yZGVyZWQoY29sbGVjdGlvbik7XG4gIHZhciBrZXllZCA9IGlzS2V5ZWQoY29sbGVjdGlvbik7XG4gIHZhciBoID0gb3JkZXJlZCA/IDEgOiAwO1xuICB2YXIgc2l6ZSA9IGNvbGxlY3Rpb24uX19pdGVyYXRlKFxuICAgIGtleWVkXG4gICAgICA/IG9yZGVyZWRcbiAgICAgICAgPyBmdW5jdGlvbiAodiwgaykge1xuICAgICAgICAgICAgaCA9ICgzMSAqIGggKyBoYXNoTWVyZ2UoaGFzaCh2KSwgaGFzaChrKSkpIHwgMDtcbiAgICAgICAgICB9XG4gICAgICAgIDogZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgICAgIGggPSAoaCArIGhhc2hNZXJnZShoYXNoKHYpLCBoYXNoKGspKSkgfCAwO1xuICAgICAgICAgIH1cbiAgICAgIDogb3JkZXJlZFxuICAgICAgPyBmdW5jdGlvbiAodikge1xuICAgICAgICAgIGggPSAoMzEgKiBoICsgaGFzaCh2KSkgfCAwO1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgaCA9IChoICsgaGFzaCh2KSkgfCAwO1xuICAgICAgICB9XG4gICk7XG4gIHJldHVybiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpO1xufVxuXG5mdW5jdGlvbiBtdXJtdXJIYXNoT2ZTaXplKHNpemUsIGgpIHtcbiAgaCA9IGltdWwoaCwgMHhjYzllMmQ1MSk7XG4gIGggPSBpbXVsKChoIDw8IDE1KSB8IChoID4+PiAtMTUpLCAweDFiODczNTkzKTtcbiAgaCA9IGltdWwoKGggPDwgMTMpIHwgKGggPj4+IC0xMyksIDUpO1xuICBoID0gKChoICsgMHhlNjU0NmI2NCkgfCAwKSBeIHNpemU7XG4gIGggPSBpbXVsKGggXiAoaCA+Pj4gMTYpLCAweDg1ZWJjYTZiKTtcbiAgaCA9IGltdWwoaCBeIChoID4+PiAxMyksIDB4YzJiMmFlMzUpO1xuICBoID0gc21pKGggXiAoaCA+Pj4gMTYpKTtcbiAgcmV0dXJuIGg7XG59XG5cbmZ1bmN0aW9uIGhhc2hNZXJnZShhLCBiKSB7XG4gIHJldHVybiAoYSBeIChiICsgMHg5ZTM3NzliOSArIChhIDw8IDYpICsgKGEgPj4gMikpKSB8IDA7IC8vIGludFxufVxuXG52YXIgT3JkZXJlZFNldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKFNldCkge1xuICBmdW5jdGlvbiBPcmRlcmVkU2V0KHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsXG4gICAgICA/IGVtcHR5T3JkZXJlZFNldCgpXG4gICAgICA6IGlzT3JkZXJlZFNldCh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogZW1wdHlPcmRlcmVkU2V0KCkud2l0aE11dGF0aW9ucyhmdW5jdGlvbiAoc2V0KSB7XG4gICAgICAgICAgdmFyIGl0ZXIgPSBTZXRDb2xsZWN0aW9uKHZhbHVlKTtcbiAgICAgICAgICBhc3NlcnROb3RJbmZpbml0ZShpdGVyLnNpemUpO1xuICAgICAgICAgIGl0ZXIuZm9yRWFjaChmdW5jdGlvbiAodikgeyByZXR1cm4gc2V0LmFkZCh2KTsgfSk7XG4gICAgICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTZXQgKSBPcmRlcmVkU2V0Ll9fcHJvdG9fXyA9IFNldDtcbiAgT3JkZXJlZFNldC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTZXQgJiYgU2V0LnByb3RvdHlwZSApO1xuICBPcmRlcmVkU2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE9yZGVyZWRTZXQ7XG5cbiAgT3JkZXJlZFNldC5vZiA9IGZ1bmN0aW9uIG9mICgvKi4uLnZhbHVlcyovKSB7XG4gICAgcmV0dXJuIHRoaXMoYXJndW1lbnRzKTtcbiAgfTtcblxuICBPcmRlcmVkU2V0LmZyb21LZXlzID0gZnVuY3Rpb24gZnJvbUtleXMgKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMoS2V5ZWRDb2xsZWN0aW9uKHZhbHVlKS5rZXlTZXEoKSk7XG4gIH07XG5cbiAgT3JkZXJlZFNldC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX190b1N0cmluZygnT3JkZXJlZFNldCB7JywgJ30nKTtcbiAgfTtcblxuICByZXR1cm4gT3JkZXJlZFNldDtcbn0oU2V0KSk7XG5cbk9yZGVyZWRTZXQuaXNPcmRlcmVkU2V0ID0gaXNPcmRlcmVkU2V0O1xuXG52YXIgT3JkZXJlZFNldFByb3RvdHlwZSA9IE9yZGVyZWRTZXQucHJvdG90eXBlO1xuT3JkZXJlZFNldFByb3RvdHlwZVtJU19PUkRFUkVEX1NZTUJPTF0gPSB0cnVlO1xuT3JkZXJlZFNldFByb3RvdHlwZS56aXAgPSBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZS56aXA7XG5PcmRlcmVkU2V0UHJvdG90eXBlLnppcFdpdGggPSBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZS56aXBXaXRoO1xuT3JkZXJlZFNldFByb3RvdHlwZS56aXBBbGwgPSBJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZS56aXBBbGw7XG5cbk9yZGVyZWRTZXRQcm90b3R5cGUuX19lbXB0eSA9IGVtcHR5T3JkZXJlZFNldDtcbk9yZGVyZWRTZXRQcm90b3R5cGUuX19tYWtlID0gbWFrZU9yZGVyZWRTZXQ7XG5cbmZ1bmN0aW9uIG1ha2VPcmRlcmVkU2V0KG1hcCwgb3duZXJJRCkge1xuICB2YXIgc2V0ID0gT2JqZWN0LmNyZWF0ZShPcmRlcmVkU2V0UHJvdG90eXBlKTtcbiAgc2V0LnNpemUgPSBtYXAgPyBtYXAuc2l6ZSA6IDA7XG4gIHNldC5fbWFwID0gbWFwO1xuICBzZXQuX19vd25lcklEID0gb3duZXJJRDtcbiAgcmV0dXJuIHNldDtcbn1cblxudmFyIEVNUFRZX09SREVSRURfU0VUO1xuZnVuY3Rpb24gZW1wdHlPcmRlcmVkU2V0KCkge1xuICByZXR1cm4gKFxuICAgIEVNUFRZX09SREVSRURfU0VUIHx8IChFTVBUWV9PUkRFUkVEX1NFVCA9IG1ha2VPcmRlcmVkU2V0KGVtcHR5T3JkZXJlZE1hcCgpKSlcbiAgKTtcbn1cblxudmFyIFBhaXJTb3J0aW5nID0ge1xuICBMZWZ0VGhlblJpZ2h0OiAtMSxcbiAgUmlnaHRUaGVuTGVmdDogKzEsXG59O1xuXG5mdW5jdGlvbiB0aHJvd09uSW52YWxpZERlZmF1bHRWYWx1ZXMoZGVmYXVsdFZhbHVlcykge1xuICBpZiAoaXNSZWNvcmQoZGVmYXVsdFZhbHVlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ2FuIG5vdCBjYWxsIGBSZWNvcmRgIHdpdGggYW4gaW1tdXRhYmxlIFJlY29yZCBhcyBkZWZhdWx0IHZhbHVlcy4gVXNlIGEgcGxhaW4gamF2YXNjcmlwdCBvYmplY3QgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuXG4gIGlmIChpc0ltbXV0YWJsZShkZWZhdWx0VmFsdWVzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDYW4gbm90IGNhbGwgYFJlY29yZGAgd2l0aCBhbiBpbW11dGFibGUgQ29sbGVjdGlvbiBhcyBkZWZhdWx0IHZhbHVlcy4gVXNlIGEgcGxhaW4gamF2YXNjcmlwdCBvYmplY3QgaW5zdGVhZC4nXG4gICAgKTtcbiAgfVxuXG4gIGlmIChkZWZhdWx0VmFsdWVzID09PSBudWxsIHx8IHR5cGVvZiBkZWZhdWx0VmFsdWVzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDYW4gbm90IGNhbGwgYFJlY29yZGAgd2l0aCBhIG5vbi1vYmplY3QgYXMgZGVmYXVsdCB2YWx1ZXMuIFVzZSBhIHBsYWluIGphdmFzY3JpcHQgb2JqZWN0IGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbn1cblxudmFyIFJlY29yZCA9IGZ1bmN0aW9uIFJlY29yZChkZWZhdWx0VmFsdWVzLCBuYW1lKSB7XG4gIHZhciBoYXNJbml0aWFsaXplZDtcblxuICB0aHJvd09uSW52YWxpZERlZmF1bHRWYWx1ZXMoZGVmYXVsdFZhbHVlcyk7XG5cbiAgdmFyIFJlY29yZFR5cGUgPSBmdW5jdGlvbiBSZWNvcmQodmFsdWVzKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBSZWNvcmRUeXBlKSB7XG4gICAgICByZXR1cm4gdmFsdWVzO1xuICAgIH1cbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUmVjb3JkVHlwZSkpIHtcbiAgICAgIHJldHVybiBuZXcgUmVjb3JkVHlwZSh2YWx1ZXMpO1xuICAgIH1cbiAgICBpZiAoIWhhc0luaXRpYWxpemVkKSB7XG4gICAgICBoYXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRlZmF1bHRWYWx1ZXMpO1xuICAgICAgdmFyIGluZGljZXMgPSAoUmVjb3JkVHlwZVByb3RvdHlwZS5faW5kaWNlcyA9IHt9KTtcbiAgICAgIC8vIERlcHJlY2F0ZWQ6IGxlZnQgdG8gYXR0ZW1wdCBub3QgdG8gYnJlYWsgYW55IGV4dGVybmFsIGNvZGUgd2hpY2hcbiAgICAgIC8vIHJlbGllcyBvbiBhIC5fbmFtZSBwcm9wZXJ0eSBleGlzdGluZyBvbiByZWNvcmQgaW5zdGFuY2VzLlxuICAgICAgLy8gVXNlIFJlY29yZC5nZXREZXNjcmlwdGl2ZU5hbWUoKSBpbnN0ZWFkXG4gICAgICBSZWNvcmRUeXBlUHJvdG90eXBlLl9uYW1lID0gbmFtZTtcbiAgICAgIFJlY29yZFR5cGVQcm90b3R5cGUuX2tleXMgPSBrZXlzO1xuICAgICAgUmVjb3JkVHlwZVByb3RvdHlwZS5fZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRWYWx1ZXM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0ga2V5c1tpXTtcbiAgICAgICAgaW5kaWNlc1twcm9wTmFtZV0gPSBpO1xuICAgICAgICBpZiAoUmVjb3JkVHlwZVByb3RvdHlwZVtwcm9wTmFtZV0pIHtcbiAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgICAgdHlwZW9mIGNvbnNvbGUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICBjb25zb2xlLndhcm4gJiZcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgJ0Nhbm5vdCBkZWZpbmUgJyArXG4gICAgICAgICAgICAgICAgcmVjb3JkTmFtZSh0aGlzKSArXG4gICAgICAgICAgICAgICAgJyB3aXRoIHByb3BlcnR5IFwiJyArXG4gICAgICAgICAgICAgICAgcHJvcE5hbWUgK1xuICAgICAgICAgICAgICAgICdcIiBzaW5jZSB0aGF0IHByb3BlcnR5IG5hbWUgaXMgcGFydCBvZiB0aGUgUmVjb3JkIEFQSS4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tY29uc29sZSAqL1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNldFByb3AoUmVjb3JkVHlwZVByb3RvdHlwZSwgcHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuX19vd25lcklEID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3ZhbHVlcyA9IExpc3QoKS53aXRoTXV0YXRpb25zKGZ1bmN0aW9uIChsKSB7XG4gICAgICBsLnNldFNpemUodGhpcyQxJDEuX2tleXMubGVuZ3RoKTtcbiAgICAgIEtleWVkQ29sbGVjdGlvbih2YWx1ZXMpLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHtcbiAgICAgICAgbC5zZXQodGhpcyQxJDEuX2luZGljZXNba10sIHYgPT09IHRoaXMkMSQxLl9kZWZhdWx0VmFsdWVzW2tdID8gdW5kZWZpbmVkIDogdik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgUmVjb3JkVHlwZVByb3RvdHlwZSA9IChSZWNvcmRUeXBlLnByb3RvdHlwZSA9XG4gICAgT2JqZWN0LmNyZWF0ZShSZWNvcmRQcm90b3R5cGUpKTtcbiAgUmVjb3JkVHlwZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlY29yZFR5cGU7XG5cbiAgaWYgKG5hbWUpIHtcbiAgICBSZWNvcmRUeXBlLmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgcmV0dXJuIFJlY29yZFR5cGU7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgc3RyID0gcmVjb3JkTmFtZSh0aGlzKSArICcgeyAnO1xuICB2YXIga2V5cyA9IHRoaXMuX2tleXM7XG4gIHZhciBrO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpICE9PSBsOyBpKyspIHtcbiAgICBrID0ga2V5c1tpXTtcbiAgICBzdHIgKz0gKGkgPyAnLCAnIDogJycpICsgayArICc6ICcgKyBxdW90ZVN0cmluZyh0aGlzLmdldChrKSk7XG4gIH1cbiAgcmV0dXJuIHN0ciArICcgfSc7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAob3RoZXIpIHtcbiAgcmV0dXJuIChcbiAgICB0aGlzID09PSBvdGhlciB8fFxuICAgIChpc1JlY29yZChvdGhlcikgJiYgcmVjb3JkU2VxKHRoaXMpLmVxdWFscyhyZWNvcmRTZXEob3RoZXIpKSlcbiAgKTtcbn07XG5cblJlY29yZC5wcm90b3R5cGUuaGFzaENvZGUgPSBmdW5jdGlvbiBoYXNoQ29kZSAoKSB7XG4gIHJldHVybiByZWNvcmRTZXEodGhpcykuaGFzaENvZGUoKTtcbn07XG5cbi8vIEBwcmFnbWEgQWNjZXNzXG5cblJlY29yZC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrKSB7XG4gIHJldHVybiB0aGlzLl9pbmRpY2VzLmhhc093blByb3BlcnR5KGspO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKGssIG5vdFNldFZhbHVlKSB7XG4gIGlmICghdGhpcy5oYXMoaykpIHtcbiAgICByZXR1cm4gbm90U2V0VmFsdWU7XG4gIH1cbiAgdmFyIGluZGV4ID0gdGhpcy5faW5kaWNlc1trXTtcbiAgdmFyIHZhbHVlID0gdGhpcy5fdmFsdWVzLmdldChpbmRleCk7XG4gIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdGhpcy5fZGVmYXVsdFZhbHVlc1trXSA6IHZhbHVlO1xufTtcblxuLy8gQHByYWdtYSBNb2RpZmljYXRpb25cblxuUmVjb3JkLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiBzZXQgKGssIHYpIHtcbiAgaWYgKHRoaXMuaGFzKGspKSB7XG4gICAgdmFyIG5ld1ZhbHVlcyA9IHRoaXMuX3ZhbHVlcy5zZXQoXG4gICAgICB0aGlzLl9pbmRpY2VzW2tdLFxuICAgICAgdiA9PT0gdGhpcy5fZGVmYXVsdFZhbHVlc1trXSA/IHVuZGVmaW5lZCA6IHZcbiAgICApO1xuICAgIGlmIChuZXdWYWx1ZXMgIT09IHRoaXMuX3ZhbHVlcyAmJiAhdGhpcy5fX293bmVySUQpIHtcbiAgICAgIHJldHVybiBtYWtlUmVjb3JkKHRoaXMsIG5ld1ZhbHVlcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGspIHtcbiAgcmV0dXJuIHRoaXMuc2V0KGspO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgdmFyIG5ld1ZhbHVlcyA9IHRoaXMuX3ZhbHVlcy5jbGVhcigpLnNldFNpemUodGhpcy5fa2V5cy5sZW5ndGgpO1xuXG4gIHJldHVybiB0aGlzLl9fb3duZXJJRCA/IHRoaXMgOiBtYWtlUmVjb3JkKHRoaXMsIG5ld1ZhbHVlcyk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLndhc0FsdGVyZWQgPSBmdW5jdGlvbiB3YXNBbHRlcmVkICgpIHtcbiAgcmV0dXJuIHRoaXMuX3ZhbHVlcy53YXNBbHRlcmVkKCk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLnRvU2VxID0gZnVuY3Rpb24gdG9TZXEgKCkge1xuICByZXR1cm4gcmVjb3JkU2VxKHRoaXMpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS50b0pTID0gZnVuY3Rpb24gdG9KUyQxICgpIHtcbiAgcmV0dXJuIHRvSlModGhpcyk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbiBlbnRyaWVzICgpIHtcbiAgcmV0dXJuIHRoaXMuX19pdGVyYXRvcihJVEVSQVRFX0VOVFJJRVMpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5fX2l0ZXJhdG9yID0gZnVuY3Rpb24gX19pdGVyYXRvciAodHlwZSwgcmV2ZXJzZSkge1xuICByZXR1cm4gcmVjb3JkU2VxKHRoaXMpLl9faXRlcmF0b3IodHlwZSwgcmV2ZXJzZSk7XG59O1xuXG5SZWNvcmQucHJvdG90eXBlLl9faXRlcmF0ZSA9IGZ1bmN0aW9uIF9faXRlcmF0ZSAoZm4sIHJldmVyc2UpIHtcbiAgcmV0dXJuIHJlY29yZFNlcSh0aGlzKS5fX2l0ZXJhdGUoZm4sIHJldmVyc2UpO1xufTtcblxuUmVjb3JkLnByb3RvdHlwZS5fX2Vuc3VyZU93bmVyID0gZnVuY3Rpb24gX19lbnN1cmVPd25lciAob3duZXJJRCkge1xuICBpZiAob3duZXJJRCA9PT0gdGhpcy5fX293bmVySUQpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB2YXIgbmV3VmFsdWVzID0gdGhpcy5fdmFsdWVzLl9fZW5zdXJlT3duZXIob3duZXJJRCk7XG4gIGlmICghb3duZXJJRCkge1xuICAgIHRoaXMuX19vd25lcklEID0gb3duZXJJRDtcbiAgICB0aGlzLl92YWx1ZXMgPSBuZXdWYWx1ZXM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgcmV0dXJuIG1ha2VSZWNvcmQodGhpcywgbmV3VmFsdWVzLCBvd25lcklEKTtcbn07XG5cblJlY29yZC5pc1JlY29yZCA9IGlzUmVjb3JkO1xuUmVjb3JkLmdldERlc2NyaXB0aXZlTmFtZSA9IHJlY29yZE5hbWU7XG52YXIgUmVjb3JkUHJvdG90eXBlID0gUmVjb3JkLnByb3RvdHlwZTtcblJlY29yZFByb3RvdHlwZVtJU19SRUNPUkRfU1lNQk9MXSA9IHRydWU7XG5SZWNvcmRQcm90b3R5cGVbREVMRVRFXSA9IFJlY29yZFByb3RvdHlwZS5yZW1vdmU7XG5SZWNvcmRQcm90b3R5cGUuZGVsZXRlSW4gPSBSZWNvcmRQcm90b3R5cGUucmVtb3ZlSW4gPSBkZWxldGVJbjtcblJlY29yZFByb3RvdHlwZS5nZXRJbiA9IGdldEluO1xuUmVjb3JkUHJvdG90eXBlLmhhc0luID0gQ29sbGVjdGlvblByb3RvdHlwZS5oYXNJbjtcblJlY29yZFByb3RvdHlwZS5tZXJnZSA9IG1lcmdlJDE7XG5SZWNvcmRQcm90b3R5cGUubWVyZ2VXaXRoID0gbWVyZ2VXaXRoJDE7XG5SZWNvcmRQcm90b3R5cGUubWVyZ2VJbiA9IG1lcmdlSW47XG5SZWNvcmRQcm90b3R5cGUubWVyZ2VEZWVwID0gbWVyZ2VEZWVwO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcFdpdGggPSBtZXJnZURlZXBXaXRoO1xuUmVjb3JkUHJvdG90eXBlLm1lcmdlRGVlcEluID0gbWVyZ2VEZWVwSW47XG5SZWNvcmRQcm90b3R5cGUuc2V0SW4gPSBzZXRJbjtcblJlY29yZFByb3RvdHlwZS51cGRhdGUgPSB1cGRhdGU7XG5SZWNvcmRQcm90b3R5cGUudXBkYXRlSW4gPSB1cGRhdGVJbjtcblJlY29yZFByb3RvdHlwZS53aXRoTXV0YXRpb25zID0gd2l0aE11dGF0aW9ucztcblJlY29yZFByb3RvdHlwZS5hc011dGFibGUgPSBhc011dGFibGU7XG5SZWNvcmRQcm90b3R5cGUuYXNJbW11dGFibGUgPSBhc0ltbXV0YWJsZTtcblJlY29yZFByb3RvdHlwZVtJVEVSQVRPUl9TWU1CT0xdID0gUmVjb3JkUHJvdG90eXBlLmVudHJpZXM7XG5SZWNvcmRQcm90b3R5cGUudG9KU09OID0gUmVjb3JkUHJvdG90eXBlLnRvT2JqZWN0ID1cbiAgQ29sbGVjdGlvblByb3RvdHlwZS50b09iamVjdDtcblJlY29yZFByb3RvdHlwZS5pbnNwZWN0ID0gUmVjb3JkUHJvdG90eXBlLnRvU291cmNlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xufTtcblxuZnVuY3Rpb24gbWFrZVJlY29yZChsaWtlUmVjb3JkLCB2YWx1ZXMsIG93bmVySUQpIHtcbiAgdmFyIHJlY29yZCA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGxpa2VSZWNvcmQpKTtcbiAgcmVjb3JkLl92YWx1ZXMgPSB2YWx1ZXM7XG4gIHJlY29yZC5fX293bmVySUQgPSBvd25lcklEO1xuICByZXR1cm4gcmVjb3JkO1xufVxuXG5mdW5jdGlvbiByZWNvcmROYW1lKHJlY29yZCkge1xuICByZXR1cm4gcmVjb3JkLmNvbnN0cnVjdG9yLmRpc3BsYXlOYW1lIHx8IHJlY29yZC5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdSZWNvcmQnO1xufVxuXG5mdW5jdGlvbiByZWNvcmRTZXEocmVjb3JkKSB7XG4gIHJldHVybiBrZXllZFNlcUZyb21WYWx1ZShyZWNvcmQuX2tleXMubWFwKGZ1bmN0aW9uIChrKSB7IHJldHVybiBbaywgcmVjb3JkLmdldChrKV07IH0pKTtcbn1cblxuZnVuY3Rpb24gc2V0UHJvcChwcm90b3R5cGUsIG5hbWUpIHtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCBuYW1lLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KG5hbWUpO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGludmFyaWFudCh0aGlzLl9fb3duZXJJRCwgJ0Nhbm5vdCBzZXQgb24gYW4gaW1tdXRhYmxlIHJlY29yZC4nKTtcbiAgICAgICAgdGhpcy5zZXQobmFtZSwgdmFsdWUpO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkgZmFpbGVkLiBQcm9iYWJseSBJRTguXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbGF6eSBTZXEgb2YgYHZhbHVlYCByZXBlYXRlZCBgdGltZXNgIHRpbWVzLiBXaGVuIGB0aW1lc2AgaXNcbiAqIHVuZGVmaW5lZCwgcmV0dXJucyBhbiBpbmZpbml0ZSBzZXF1ZW5jZSBvZiBgdmFsdWVgLlxuICovXG52YXIgUmVwZWF0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSW5kZXhlZFNlcSkge1xuICBmdW5jdGlvbiBSZXBlYXQodmFsdWUsIHRpbWVzKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlcGVhdCkpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBuZXcgUmVwZWF0KHZhbHVlLCB0aW1lcyk7XG4gICAgfVxuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5zaXplID0gdGltZXMgPT09IHVuZGVmaW5lZCA/IEluZmluaXR5IDogTWF0aC5tYXgoMCwgdGltZXMpO1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIGlmIChFTVBUWV9SRVBFQVQpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgICAgICByZXR1cm4gRU1QVFlfUkVQRUFUO1xuICAgICAgfVxuICAgICAgRU1QVFlfUkVQRUFUID0gdGhpcztcbiAgICB9XG4gIH1cblxuICBpZiAoIEluZGV4ZWRTZXEgKSBSZXBlYXQuX19wcm90b19fID0gSW5kZXhlZFNlcTtcbiAgUmVwZWF0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEluZGV4ZWRTZXEgJiYgSW5kZXhlZFNlcS5wcm90b3R5cGUgKTtcbiAgUmVwZWF0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlcGVhdDtcblxuICBSZXBlYXQucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICAgIGlmICh0aGlzLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybiAnUmVwZWF0IFtdJztcbiAgICB9XG4gICAgcmV0dXJuICdSZXBlYXQgWyAnICsgdGhpcy5fdmFsdWUgKyAnICcgKyB0aGlzLnNpemUgKyAnIHRpbWVzIF0nO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChpbmRleCwgbm90U2V0VmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5oYXMoaW5kZXgpID8gdGhpcy5fdmFsdWUgOiBub3RTZXRWYWx1ZTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHNlYXJjaFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzKHRoaXMuX3ZhbHVlLCBzZWFyY2hWYWx1ZSk7XG4gIH07XG5cbiAgUmVwZWF0LnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChiZWdpbiwgZW5kKSB7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemU7XG4gICAgcmV0dXJuIHdob2xlU2xpY2UoYmVnaW4sIGVuZCwgc2l6ZSlcbiAgICAgID8gdGhpc1xuICAgICAgOiBuZXcgUmVwZWF0KFxuICAgICAgICAgIHRoaXMuX3ZhbHVlLFxuICAgICAgICAgIHJlc29sdmVFbmQoZW5kLCBzaXplKSAtIHJlc29sdmVCZWdpbihiZWdpbiwgc2l6ZSlcbiAgICAgICAgKTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLnJldmVyc2UgPSBmdW5jdGlvbiByZXZlcnNlICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mIChzZWFyY2hWYWx1ZSkge1xuICAgIGlmIChpcyh0aGlzLl92YWx1ZSwgc2VhcmNoVmFsdWUpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAoc2VhcmNoVmFsdWUpIHtcbiAgICBpZiAoaXModGhpcy5fdmFsdWUsIHNlYXJjaFZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUuX19pdGVyYXRlID0gZnVuY3Rpb24gX19pdGVyYXRlIChmbiwgcmV2ZXJzZSkge1xuICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSAhPT0gc2l6ZSkge1xuICAgICAgaWYgKGZuKHRoaXMuX3ZhbHVlLCByZXZlcnNlID8gc2l6ZSAtICsraSA6IGkrKywgdGhpcykgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfTtcblxuICBSZXBlYXQucHJvdG90eXBlLl9faXRlcmF0b3IgPSBmdW5jdGlvbiBfX2l0ZXJhdG9yICh0eXBlLCByZXZlcnNlKSB7XG4gICAgdmFyIHRoaXMkMSQxID0gdGhpcztcblxuICAgIHZhciBzaXplID0gdGhpcy5zaXplO1xuICAgIHZhciBpID0gMDtcbiAgICByZXR1cm4gbmV3IEl0ZXJhdG9yKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGkgPT09IHNpemVcbiAgICAgICAgPyBpdGVyYXRvckRvbmUoKVxuICAgICAgICA6IGl0ZXJhdG9yVmFsdWUodHlwZSwgcmV2ZXJzZSA/IHNpemUgLSArK2kgOiBpKyssIHRoaXMkMSQxLl92YWx1ZSk7IH1cbiAgICApO1xuICB9O1xuXG4gIFJlcGVhdC5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChvdGhlcikge1xuICAgIHJldHVybiBvdGhlciBpbnN0YW5jZW9mIFJlcGVhdFxuICAgICAgPyBpcyh0aGlzLl92YWx1ZSwgb3RoZXIuX3ZhbHVlKVxuICAgICAgOiBkZWVwRXF1YWwodGhpcywgb3RoZXIpO1xuICB9O1xuXG4gIHJldHVybiBSZXBlYXQ7XG59KEluZGV4ZWRTZXEpKTtcblxudmFyIEVNUFRZX1JFUEVBVDtcblxuZnVuY3Rpb24gZnJvbUpTKHZhbHVlLCBjb252ZXJ0ZXIpIHtcbiAgcmV0dXJuIGZyb21KU1dpdGgoXG4gICAgW10sXG4gICAgY29udmVydGVyIHx8IGRlZmF1bHRDb252ZXJ0ZXIsXG4gICAgdmFsdWUsXG4gICAgJycsXG4gICAgY29udmVydGVyICYmIGNvbnZlcnRlci5sZW5ndGggPiAyID8gW10gOiB1bmRlZmluZWQsXG4gICAgeyAnJzogdmFsdWUgfVxuICApO1xufVxuXG5mdW5jdGlvbiBmcm9tSlNXaXRoKHN0YWNrLCBjb252ZXJ0ZXIsIHZhbHVlLCBrZXksIGtleVBhdGgsIHBhcmVudFZhbHVlKSB7XG4gIGlmIChcbiAgICB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnICYmXG4gICAgIWlzSW1tdXRhYmxlKHZhbHVlKSAmJlxuICAgIChpc0FycmF5TGlrZSh2YWx1ZSkgfHwgaGFzSXRlcmF0b3IodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKVxuICApIHtcbiAgICBpZiAofnN0YWNrLmluZGV4T2YodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBjaXJjdWxhciBzdHJ1Y3R1cmUgdG8gSW1tdXRhYmxlJyk7XG4gICAgfVxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuICAgIGtleVBhdGggJiYga2V5ICE9PSAnJyAmJiBrZXlQYXRoLnB1c2goa2V5KTtcbiAgICB2YXIgY29udmVydGVkID0gY29udmVydGVyLmNhbGwoXG4gICAgICBwYXJlbnRWYWx1ZSxcbiAgICAgIGtleSxcbiAgICAgIFNlcSh2YWx1ZSkubWFwKGZ1bmN0aW9uICh2LCBrKSB7IHJldHVybiBmcm9tSlNXaXRoKHN0YWNrLCBjb252ZXJ0ZXIsIHYsIGssIGtleVBhdGgsIHZhbHVlKTsgfVxuICAgICAgKSxcbiAgICAgIGtleVBhdGggJiYga2V5UGF0aC5zbGljZSgpXG4gICAgKTtcbiAgICBzdGFjay5wb3AoKTtcbiAgICBrZXlQYXRoICYmIGtleVBhdGgucG9wKCk7XG4gICAgcmV0dXJuIGNvbnZlcnRlZDtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb252ZXJ0ZXIoaywgdikge1xuICAvLyBFZmZlY3RpdmVseSB0aGUgb3Bwb3NpdGUgb2YgXCJDb2xsZWN0aW9uLnRvU2VxKClcIlxuICByZXR1cm4gaXNJbmRleGVkKHYpID8gdi50b0xpc3QoKSA6IGlzS2V5ZWQodikgPyB2LnRvTWFwKCkgOiB2LnRvU2V0KCk7XG59XG5cbnZhciB2ZXJzaW9uID0gXCI0LjMuNlwiO1xuXG52YXIgSW1tdXRhYmxlID0ge1xuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuXG4gIENvbGxlY3Rpb246IENvbGxlY3Rpb24sXG4gIC8vIE5vdGU6IEl0ZXJhYmxlIGlzIGRlcHJlY2F0ZWRcbiAgSXRlcmFibGU6IENvbGxlY3Rpb24sXG5cbiAgU2VxOiBTZXEsXG4gIE1hcDogTWFwLFxuICBPcmRlcmVkTWFwOiBPcmRlcmVkTWFwLFxuICBMaXN0OiBMaXN0LFxuICBTdGFjazogU3RhY2ssXG4gIFNldDogU2V0LFxuICBPcmRlcmVkU2V0OiBPcmRlcmVkU2V0LFxuICBQYWlyU29ydGluZzogUGFpclNvcnRpbmcsXG5cbiAgUmVjb3JkOiBSZWNvcmQsXG4gIFJhbmdlOiBSYW5nZSxcbiAgUmVwZWF0OiBSZXBlYXQsXG5cbiAgaXM6IGlzLFxuICBmcm9tSlM6IGZyb21KUyxcbiAgaGFzaDogaGFzaCxcblxuICBpc0ltbXV0YWJsZTogaXNJbW11dGFibGUsXG4gIGlzQ29sbGVjdGlvbjogaXNDb2xsZWN0aW9uLFxuICBpc0tleWVkOiBpc0tleWVkLFxuICBpc0luZGV4ZWQ6IGlzSW5kZXhlZCxcbiAgaXNBc3NvY2lhdGl2ZTogaXNBc3NvY2lhdGl2ZSxcbiAgaXNPcmRlcmVkOiBpc09yZGVyZWQsXG4gIGlzVmFsdWVPYmplY3Q6IGlzVmFsdWVPYmplY3QsXG4gIGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG4gIGlzU2VxOiBpc1NlcSxcbiAgaXNMaXN0OiBpc0xpc3QsXG4gIGlzTWFwOiBpc01hcCxcbiAgaXNPcmRlcmVkTWFwOiBpc09yZGVyZWRNYXAsXG4gIGlzU3RhY2s6IGlzU3RhY2ssXG4gIGlzU2V0OiBpc1NldCxcbiAgaXNPcmRlcmVkU2V0OiBpc09yZGVyZWRTZXQsXG4gIGlzUmVjb3JkOiBpc1JlY29yZCxcblxuICBnZXQ6IGdldCxcbiAgZ2V0SW46IGdldEluJDEsXG4gIGhhczogaGFzLFxuICBoYXNJbjogaGFzSW4kMSxcbiAgbWVyZ2U6IG1lcmdlLFxuICBtZXJnZURlZXA6IG1lcmdlRGVlcCQxLFxuICBtZXJnZVdpdGg6IG1lcmdlV2l0aCxcbiAgbWVyZ2VEZWVwV2l0aDogbWVyZ2VEZWVwV2l0aCQxLFxuICByZW1vdmU6IHJlbW92ZSxcbiAgcmVtb3ZlSW46IHJlbW92ZUluLFxuICBzZXQ6IHNldCxcbiAgc2V0SW46IHNldEluJDEsXG4gIHVwZGF0ZTogdXBkYXRlJDEsXG4gIHVwZGF0ZUluOiB1cGRhdGVJbiQxLFxufTtcblxuLy8gTm90ZTogSXRlcmFibGUgaXMgZGVwcmVjYXRlZFxudmFyIEl0ZXJhYmxlID0gQ29sbGVjdGlvbjtcblxuZXhwb3J0IGRlZmF1bHQgSW1tdXRhYmxlO1xuZXhwb3J0IHsgQ29sbGVjdGlvbiwgSXRlcmFibGUsIExpc3QsIE1hcCwgT3JkZXJlZE1hcCwgT3JkZXJlZFNldCwgUGFpclNvcnRpbmcsIFJhbmdlLCBSZWNvcmQsIFJlcGVhdCwgU2VxLCBTZXQsIFN0YWNrLCBmcm9tSlMsIGdldCwgZ2V0SW4kMSBhcyBnZXRJbiwgaGFzLCBoYXNJbiQxIGFzIGhhc0luLCBoYXNoLCBpcywgaXNBc3NvY2lhdGl2ZSwgaXNDb2xsZWN0aW9uLCBpc0ltbXV0YWJsZSwgaXNJbmRleGVkLCBpc0tleWVkLCBpc0xpc3QsIGlzTWFwLCBpc09yZGVyZWQsIGlzT3JkZXJlZE1hcCwgaXNPcmRlcmVkU2V0LCBpc1BsYWluT2JqZWN0LCBpc1JlY29yZCwgaXNTZXEsIGlzU2V0LCBpc1N0YWNrLCBpc1ZhbHVlT2JqZWN0LCBtZXJnZSwgbWVyZ2VEZWVwJDEgYXMgbWVyZ2VEZWVwLCBtZXJnZURlZXBXaXRoJDEgYXMgbWVyZ2VEZWVwV2l0aCwgbWVyZ2VXaXRoLCByZW1vdmUsIHJlbW92ZUluLCBzZXQsIHNldEluJDEgYXMgc2V0SW4sIHVwZGF0ZSQxIGFzIHVwZGF0ZSwgdXBkYXRlSW4kMSBhcyB1cGRhdGVJbiwgdmVyc2lvbiB9O1xuIiwiaW1wb3J0IHtcbiAgRElTUExBWV9DQVJUX0RSQVdFUixcbiAgSElERV9DQVJUX0RSQVdFUixcbiAgTE9HSU4sXG4gIExPR0lOX0ZBSUxVUkUsXG4gIExPR0lOX1NVQ0NFU1MsXG4gIExPR09VVCxcbiAgU0lHTlVQLFxuICBTSUdOVVBfRkFJTFVSRSxcbiAgU0lHTlVQX1NVQ0NFU1Ncbn0gZnJvbSBcIi4uL2FjdGlvbnMvdWlBY3Rpb25UeXBlXCI7XG5pbXBvcnQgeyBNYXAgfSBmcm9tICdpbW11dGFibGUnO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlVWkgPSB7XG4gIGlzQ2FydERyYXdlclZpc2libGUgOiBmYWxzZSxcbiAgSXNVU2VyTG9nZ2VkSW46IGZhbHNlLFxuICB1c2VyOiBudWxsLFxufTtcblxuZXhwb3J0IGNvbnN0IHVzZXJJbnRlcmFjdGlvblJlZHVjZXIgPSAoc3RhdGUgPSBNYXAoaW5pdGlhbFN0YXRlVWkpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRElTUExBWV9DQVJUX0RSQVdFUjoge1xuICAgICAgcmV0dXJuIHN0YXRlLnNldCgnaXNDYXJ0RHJhd2VyVmlzaWJsZScsIHRydWUpO1xuICAgIH1cbiAgICBjYXNlIEhJREVfQ0FSVF9EUkFXRVI6IHtcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ2lzQ2FydERyYXdlclZpc2libGUnLCBmYWxzZSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9naW5SZWR1Y2VyID0gKHN0YXRlID0gTWFwKGluaXRpYWxTdGF0ZVVpKSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIExPR0lOOiB7XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCd1c2VyJywgYWN0aW9uLnVzZXIpO1xuICAgIH1cbiAgICBjYXNlIExPR0lOX1NVQ0NFU1M6IHtcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ0lzVVNlckxvZ2dlZEluJywgdHJ1ZSk7XG4gICAgfVxuICAgIGNhc2UgTE9HSU5fRkFJTFVSRToge1xuICAgICAgcmV0dXJuIHN0YXRlLnNldCgnSXNVU2VyTG9nZ2VkSW4nLCBmYWxzZSk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgY29uc3QgdXNlclNpZ25VcFJlZHVjZXIgPSAoc3RhdGUgPSBNYXAoaW5pdGlhbFN0YXRlVWkpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgU0lHTlVQOiB7XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCd1c2VyJywgYWN0aW9uLnVzZXIpO1xuICAgIH1cbiAgICBjYXNlIFNJR05VUF9TVUNDRVNTOiB7XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCdJc1VTZXJMb2dnZWRJbicsIHRydWUpO1xuICAgIH1cbiAgICBjYXNlIFNJR05VUF9GQUlMVVJFOiB7XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCdJc1VTZXJMb2dnZWRJbicsIGZhbHNlKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCB1c2VyTG9nb3V0UmVkdWNlciA9IChzdGF0ZSA9IE1hcChpbml0aWFsU3RhdGVVaSksIGFjdGlvbikgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBMT0dPVVQ6IHtcbiAgICAgIHJldHVybiBzdGF0ZS5zZXQoJ0lzVVNlckxvZ2dlZEluJywgZmFsc2UpLnNldCgndXNlcicsIG51bGwpO1xuICAgIH1cbiAgfVxufTsiLCJpbXBvcnQgeyBGRVRDSF9QUk9EVUNUU19TVUNDRVNTLCBTRVRfTE9BRElOR19TVEFURSB9IGZyb20gXCIuLi9hY3Rpb25zL3Byb2R1Y3RBY3Rpb25UeXBlXCI7XG5pbXBvcnQgeyBNYXAgfSBmcm9tIFwiaW1tdXRhYmxlXCI7XG5cbmV4cG9ydCBjb25zdCBpbml0aWFsU3RhdGVQcm9kdWN0cyA9IHtcbiAgcHJvZHVjdHM6IFtdLFxuICBsb2FkaW5nOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBjb25zdCBwcm9kdWN0c1JlZHVjZXIgPSAoc3RhdGUgPSBNYXAoaW5pdGlhbFN0YXRlUHJvZHVjdHMpLCBhY3Rpb24pID0+IHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgRkVUQ0hfUFJPRFVDVFNfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIHN0YXRlLnNldCgncHJvZHVjdHMnLCBhY3Rpb24ucHJvZHVjdHMpO1xuICAgIH1cbiAgICBjYXNlIFNFVF9MT0FESU5HX1NUQVRFOiB7XG4gICAgICByZXR1cm4gc3RhdGUuc2V0KCdsb2FkaW5nJywgYWN0aW9uLmxvYWRpbmdTdGF0ZSk7XG4gICAgfVxuICAgIGRlZmF1bHQ6IFxuICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcC9BcHAnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7XG4gIGNyZWF0ZVN0b3JlLFxuICBhcHBseU1pZGRsZXdhcmUsXG4gIGNvbXBvc2UsXG4gIGNvbWJpbmVSZWR1Y2Vycyxcbn0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHRodW5rIGZyb20gJ3JlZHV4LXRodW5rJztcbmltcG9ydCB7IE1hcCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5pbXBvcnQgeyB1c2VySW50ZXJhY3Rpb25SZWR1Y2VyLCBpbml0aWFsU3RhdGVVaSB9IGZyb20gJy4vcmVkdWNlcnMvdWlSZWR1Y2VyJztcbmltcG9ydCB7IGluaXRpYWxTdGF0ZVByb2R1Y3RzLCBwcm9kdWN0c1JlZHVjZXIgfSBmcm9tICcuL3JlZHVjZXJzL3Byb2R1Y3RSZWR1Y2VyJztcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICB1aTogTWFwKGluaXRpYWxTdGF0ZVVpKSxcbiAgcHJvZHVjdHM6IE1hcChpbml0aWFsU3RhdGVQcm9kdWN0cylcbn07XG5cbmNvbnN0IHJvb3RSZWR1Y2VyID0ge1xuICB1aTogdXNlckludGVyYWN0aW9uUmVkdWNlcixcbiAgcHJvZHVjdHM6IHByb2R1Y3RzUmVkdWNlclxufVxuXG5jb25zdCBzdG9yZSA9IGNyZWF0ZVN0b3JlKFxuICBjb21iaW5lUmVkdWNlcnMocm9vdFJlZHVjZXIpLFxuICBpbml0aWFsU3RhdGUsXG4gIGFwcGx5TWlkZGxld2FyZSh0aHVuaylcbik7XG5cblJlYWN0RE9NLnJlbmRlcihcbiAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgICA8QnJvd3NlclJvdXRlcj5cbiAgICAgICAgPEFwcCAvPlxuICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbiAgPC9Qcm92aWRlcj4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Jylcbik7XG4iXSwibmFtZXMiOlsibGVhZlByb3RvdHlwZXMiLCJnZXRQcm90byIsInJhd0FzYXAiLCJmcmVlVGFza3MiLCJwZW5kaW5nRXJyb3JzIiwicmVxdWVzdEVycm9yVGhyb3ciLCJtYWtlUmVxdWVzdENhbGxGcm9tVGltZXIiLCJsZW5ndGgiLCJzaGlmdCIsImFzYXAiLCJ0YXNrIiwicmF3VGFzayIsInBvcCIsIlJhd1Rhc2siLCJ0aGlzIiwibW9kdWxlIiwiZXhwb3J0cyIsInByb3RvdHlwZSIsImNhbGwiLCJlcnJvciIsIm9uZXJyb3IiLCJwdXNoIiwicXVldWUiLCJyZXF1ZXN0Rmx1c2giLCJpbmRleCIsImZsdXNoIiwiY3VycmVudEluZGV4Iiwic2NhbiIsIm5ld0xlbmd0aCIsInRvZ2dsZSIsIm9ic2VydmVyIiwibm9kZSIsInNjb3BlIiwiZyIsInNlbGYiLCJCcm93c2VyTXV0YXRpb25PYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiY2FsbGJhY2siLCJ0aW1lb3V0SGFuZGxlIiwic2V0VGltZW91dCIsImhhbmRsZVRpbWVyIiwiaW50ZXJ2YWxIYW5kbGUiLCJzZXRJbnRlcnZhbCIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJkYXRhIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsIm5hbWUiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcmd1bWVudHMiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJkZWZpbmVQcm9wZXJ0eSIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50Iiwia2V5cyIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiaSIsImtleSIsImRlc2NyaXB0b3IiLCJlIiwiZ2xvYmFsT2JqZWN0Iiwid2luZG93IiwiRXJyb3IiLCJnZXRHbG9iYWwiLCJmZXRjaCIsImJpbmQiLCJIZWFkZXJzIiwiUmVxdWVzdCIsIlJlc3BvbnNlIiwiaGFzT3duUHJvcGVydHkiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibWFwIiwibiIsImpvaW4iLCJ0ZXN0MyIsInNwbGl0IiwiZm9yRWFjaCIsImxldHRlciIsImVyciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsInNvdXJjZSIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJ2YWwiLCJUeXBlRXJyb3IiLCJ0b09iamVjdCIsInMiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BGdWxsTmFtZSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJpZ2ludCIsImJvb2wiLCJmdW5jIiwibnVtYmVyIiwib2JqZWN0Iiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImVsZW1lbnQiLCJlbGVtZW50VHlwZSIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiYWEiLCJyIiwidSIsImEiLCJiIiwiYyIsImVuY29kZVVSSUNvbXBvbmVudCIsImJhIiwiZCIsImYiLCJoIiwiayIsImwiLCJBcnJheSIsInNsaWNlIiwiYXBwbHkiLCJtIiwib25FcnJvciIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwiaW5kZXhPZiIsInNhIiwiZXh0cmFjdEV2ZW50cyIsImV2ZW50VHlwZXMiLCJ0YSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwidWEiLCJyZWdpc3RyYXRpb25OYW1lIiwidmEiLCJ3YSIsImRlcGVuZGVuY2llcyIsInhhIiwieWEiLCJjcmVhdGVFbGVtZW50IiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwidiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIkMiLCJ0b0xvd2VyQ2FzZSIsIlVhIiwiVmEiLCJ0b1VwcGVyQ2FzZSIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJXYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiWGEiLCJTYSIsImlzTmFOIiwiVGEiLCJ0ZXN0IiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJjdXJyZW50IiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIllhIiwiRSIsIlN5bWJvbCIsImZvciIsIlphIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIml0ZXJhdG9yIiwibmIiLCJwYiIsIiQkdHlwZW9mIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJzZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJjaGVja2VkIiwidmFsdWUiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsIkZiIiwiSGIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsIkliIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJKYiIsImlzQXJyYXkiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJ0b1N0cmluZyIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIlJiIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwic3R5bGUiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiV2Vha01hcCIsIk1hcCIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJoYXMiLCJ2YyIsIkYiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJpZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwidHJpbSIsIm1kIiwic2V0UHJvcGVydHkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsInhkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiemQiLCJBZCIsIkJkIiwiQ2QiLCJEZCIsIkVkIiwiRmQiLCJhdXRvRm9jdXMiLCJHZCIsIl9faHRtbCIsIkhkIiwiSWQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNYXRoIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkciLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsInJlIiwiZGV0YWlsIiwic2UiLCJ2ZSIsImxvY2FsZSIsIndoaWNoIiwidGUiLCJjdHJsS2V5IiwiYWx0S2V5IiwibWV0YUtleSIsImNoYXIiLCJ1ZSIsIndlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiWGUiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsIlllIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJwIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwicmYiLCJyZXBlYXQiLCJzZiIsImRhdGFUcmFuc2ZlciIsInRmIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsInVmIiwidmYiLCJkZWx0YVgiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSIsIndmIiwiU2ltcGxlRXZlbnRQbHVnaW4iLCJFbnRlckxlYXZlRXZlbnRQbHVnaW4iLCJDaGFuZ2VFdmVudFBsdWdpbiIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiQmVmb3JlSW5wdXRFdmVudFBsdWdpbiIsInlmIiwiemYiLCJIIiwiSSIsIkFmIiwiSiIsIksiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiTCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsIl9jb250ZXh0IiwiX2N1cnJlbnRWYWx1ZSIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsIm5leHQiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwieCIsInoiLCJjYSIsIkFnIiwiRCIsInQiLCJCZyIsIkNnIiwiRGciLCJFZyIsIkNvbXBvbmVudCIsInJlZnMiLCJGZyIsIkpnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsImVucXVldWVTZXRTdGF0ZSIsIkdnIiwiSGciLCJJZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTGciLCJzdGF0ZSIsInVwZGF0ZXIiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsIm1vZGUiLCJVZyIsImltcGxlbWVudGF0aW9uIiwiVmciLCJXZyIsInkiLCJBIiwicSIsImRvbmUiLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwidGFnTmFtZSIsImVoIiwiZmgiLCJnaCIsIk0iLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwiTiIsIk8iLCJQIiwibWgiLCJRIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJ1aCIsInZoIiwid2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwiYWN0aW9uIiwiZWFnZXJSZWR1Y2VyIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJ4aCIsInloIiwiemgiLCJBaCIsImNyZWF0ZSIsImRlc3Ryb3kiLCJkZXBzIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJJaCIsIkpoIiwiS2giLCJMaCIsIk1oIiwiTmgiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZVJlc3BvbmRlciIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwiT2giLCJQaCIsIlFoIiwiUmgiLCJTaCIsIlRoIiwicGVuZGluZ1Byb3BzIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlJlYWN0Q3VycmVudE93bmVyIiwiUiIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsImVpIiwiZmkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJnaSIsImhpIiwicGVuZGluZ0NvbnRleHQiLCJuaSIsIm9pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsIlMiLCJ0aSIsInVpIiwidmkiLCJ3aSIsIlQiLCJ4aSIsIlUiLCJ5aSIsInppIiwiQWkiLCJzdGFjayIsIkJpIiwiV2Vha1NldCIsIlNldCIsIkNpIiwiY29uc29sZSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJSaSIsImluc3RhbmNlIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlNpIiwiVGkiLCJkaXNwbGF5IiwiVWkiLCJWaSIsImFkZCIsInRoZW4iLCJXaSIsIlhpIiwiWWkiLCJaaSIsIiRpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJhaiIsImNvbXBvbmVudFN0YWNrIiwiUmoiLCJiaiIsImNlaWwiLCJjaiIsImRqIiwiViIsImVqIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlciLCJYIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInBqIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsIloiLCJ6aiIsImxhc3RFeHBpcmVkVGltZSIsIkFqIiwiZmlyc3RQZW5kaW5nVGltZSIsImxhc3RQaW5nZWRUaW1lIiwibmV4dEtub3duUGVuZGluZ0xldmVsIiwiY2FsbGJhY2tFeHBpcmF0aW9uVGltZSIsImNhbGxiYWNrUHJpb3JpdHkiLCJjYWxsYmFja05vZGUiLCJCaiIsInRpbWVvdXQiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidyIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJCIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsIl9jdG9yIiwiZGVmYXVsdCIsIm9iIiwiWGoiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJaaiIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJKYyIsIl9pbnRlcm5hbFJvb3QiLCJnayIsImlrIiwiaGFzQXR0cmlidXRlIiwiaGsiLCJrayIsImprIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJKU09OIiwic3RyaW5naWZ5IiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIllqIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZVByb3BzIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsImZsdXNoU3luYyIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY2hlY2tEQ0UiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsInJlc3VsdCIsImtleVByZWZpeCIsImNvdW50IiwiZXNjYXBlIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJ0b0FycmF5Iiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInBlcmZvcm1hbmNlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJzdHIiLCJoYXNoIiwiY2hhckNvZGVBdCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwib2JqIiwibnMiLCJkZWYiLCJkZWZpbml0aW9uIiwibyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInByb3AiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiQWN0aW9uIiwiX2V4dGVuZHMiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsIm1lc3NhZ2UiLCJ3YXJuaW5nIiwiY29uZCIsIndhcm4iLCJnZXRIaXN0b3J5U3RhdGUiLCJ1c3IiLCJpZHgiLCJjcmVhdGVMb2NhdGlvbiIsInBhdGhuYW1lIiwicGFyc2VQYXRoIiwic3Vic3RyIiwiX3JlZiIsInBhdGgiLCJwYXJzZWRQYXRoIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJSZXN1bHRUeXBlIiwibWF0Y2hSb3V0ZXMiLCJyb3V0ZXMiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwiYnJhbmNoZXMiLCJmbGF0dGVuUm91dGVzIiwic29ydCIsInNjb3JlIiwic2libGluZ3MiLCJldmVyeSIsImNvbXBhcmVJbmRleGVzIiwicm91dGVzTWV0YSIsImNoaWxkcmVuSW5kZXgiLCJyYW5rUm91dGVCcmFuY2hlcyIsIm1hdGNoZXMiLCJkZWNvZGVkIiwiZGVjb2RlUGF0aCIsIm1hdGNoUm91dGVCcmFuY2giLCJwYXJlbnRzTWV0YSIsInBhcmVudFBhdGgiLCJmbGF0dGVuUm91dGUiLCJyb3V0ZSIsInJlbGF0aXZlUGF0aCIsImNhc2VTZW5zaXRpdmUiLCJzdGFydHNXaXRoIiwiY29tcHV0ZVNjb3JlIiwiX3JvdXRlJHBhdGgiLCJpbmNsdWRlcyIsImV4cGxvZGVkIiwiZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMiLCJzZWdtZW50cyIsImZpcnN0IiwicmVzdCIsImlzT3B0aW9uYWwiLCJlbmRzV2l0aCIsInJlcXVpcmVkIiwicmVzdEV4cGxvZGVkIiwic3VicGF0aCIsInBhcmFtUmUiLCJkeW5hbWljU2VnbWVudFZhbHVlIiwiaW5kZXhSb3V0ZVZhbHVlIiwiZW1wdHlTZWdtZW50VmFsdWUiLCJzdGF0aWNTZWdtZW50VmFsdWUiLCJzcGxhdFBlbmFsdHkiLCJpc1NwbGF0IiwiaW5pdGlhbFNjb3JlIiwic29tZSIsImZpbHRlciIsInJlZHVjZSIsInNlZ21lbnQiLCJicmFuY2giLCJtYXRjaGVkUGFyYW1zIiwibWF0Y2hlZFBhdGhuYW1lIiwicmVtYWluaW5nUGF0aG5hbWUiLCJtYXRjaCIsInBhcmFtcyIsInBhdGhuYW1lQmFzZSIsIm5vcm1hbGl6ZVBhdGhuYW1lIiwicGF0dGVybiIsIm1hdGNoZXIiLCJjb21waWxlZFBhcmFtcyIsInJlZ2V4cFNvdXJjZSIsIl8iLCJwYXJhbU5hbWUiLCJSZWdFeHAiLCJjb21waWxlUGF0aCIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50Iiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwiZ2V0SW52YWxpZFBhdGhFcnJvciIsImZpZWxkIiwiZGVzdCIsImdldFJlc29sdmVUb01hdGNoZXMiLCJ2N19yZWxhdGl2ZVNwbGF0UGF0aCIsInBhdGhNYXRjaGVzIiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiaXNFbXB0eVBhdGgiLCJ0b1BhdGhuYW1lIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsImZyb21QYXRobmFtZSIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwicGF0aHMiLCJ2YWxpZE11dGF0aW9uTWV0aG9kc0FyciIsInZhbGlkUmVxdWVzdE1ldGhvZHNBcnIiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsImlzRGF0YVJvdXRlIiwiUm91dGVFcnJvckNvbnRleHQiLCJ1c2VJblJvdXRlckNvbnRleHQiLCJzdGF0aWMiLCJyb3V0ZXIiLCJob29rTmFtZSIsImN0eCIsInVzZURhdGFSb3V0ZXJDb250ZXh0IiwiRGF0YVJvdXRlckhvb2siLCJVc2VOYXZpZ2F0ZVN0YWJsZSIsInVzZUN1cnJlbnRSb3V0ZUlkIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsImFjdGl2ZVJlZiIsIm5hdmlnYXRlIiwiZnJvbVJvdXRlSWQiLCJ1c2VOYXZpZ2F0ZVN0YWJsZSIsImRhdGFSb3V0ZXJDb250ZXh0IiwiZnV0dXJlIiwibmF2aWdhdG9yIiwicm91dGVQYXRobmFtZXNKc29uIiwiZ28iLCJwYXJzZSIsInJlbGF0aXZlIiwidXNlTmF2aWdhdGVVbnN0YWJsZSIsIl90ZW1wMiIsInVzZVJvdXRlc0ltcGwiLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicm91dGVNYXRjaCIsInBhcmVudFBhcmFtcyIsInBhcmVudFBhdGhuYW1lQmFzZSIsImxvY2F0aW9uRnJvbUNvbnRleHQiLCJfcGFyc2VkTG9jYXRpb25BcmckcGEiLCJwYXJzZWRMb2NhdGlvbkFyZyIsInBhcmVudFNlZ21lbnRzIiwicmVuZGVyZWRNYXRjaGVzIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JzIiwiZXJyb3JJbmRleCIsImZpbmRJbmRleCIsInJlbmRlckZhbGxiYWNrIiwiZmFsbGJhY2tJbmRleCIsInY3X3BhcnRpYWxIeWRyYXRpb24iLCJIeWRyYXRlRmFsbGJhY2siLCJoeWRyYXRlRmFsbGJhY2tFbGVtZW50IiwibG9hZGVyRGF0YSIsIm5lZWRzVG9SdW5Mb2FkZXIiLCJsb2FkZXIiLCJyZWR1Y2VSaWdodCIsInNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayIsImVycm9yRWxlbWVudCIsImRlZmF1bHRFcnJvckVsZW1lbnQiLCJhbHJlYWR5V2FybmVkIiwiZ2V0Q2hpbGRyZW4iLCJSZW5kZXJlZFJvdXRlIiwicm91dGVDb250ZXh0IiwiRXJyb3JCb3VuZGFyeSIsIlJlbmRlckVycm9yQm91bmRhcnkiLCJyZXZhbGlkYXRpb24iLCJfcmVuZGVyTWF0Y2hlcyIsImVuY29kZUxvY2F0aW9uIiwibmF2aWdhdGlvblR5cGUiLCJQb3AiLCJEZWZhdWx0RXJyb3JDb21wb25lbnQiLCJfc3RhdGUkZXJyb3JzIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiVXNlUm91dGVFcnJvciIsInJvdXRlSWQiLCJ1c2VSb3V0ZUVycm9yIiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImludGVybmFsIiwiaXNSb3V0ZUVycm9yUmVzcG9uc2UiLCJwcmVTdHlsZXMiLCJwYWRkaW5nIiwiYmFja2dyb3VuZENvbG9yIiwiZm9udFN0eWxlIiwic3VwZXIiLCJlcnJvckluZm8iLCJzdGF0aWNDb250ZXh0IiwiX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQiLCJ1c2VSb3V0ZUNvbnRleHQiLCJ0aGlzUm91dGUiLCJSb3V0ZSIsIl9wcm9wcyIsIl9yZWY1IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3RhdGljUHJvcCIsIm5hdmlnYXRpb25Db250ZXh0IiwibG9jYXRpb25Db250ZXh0IiwidHJhaWxpbmdQYXRobmFtZSIsIlJvdXRlcyIsIl9yZWY2IiwiY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIiwidHJlZVBhdGgiLCJoYXNFcnJvckJvdW5kYXJ5Iiwic2hvdWxkUmV2YWxpZGF0ZSIsImhhbmRsZSIsIlByb21pc2UiLCJiYXRjaCIsImdldEJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJsaXN0ZW5lcnMiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwic3Vic2NyaXB0aW9uIiwib25TdGF0ZUNoYW5nZSIsInRyeVN1YnNjcmliZSIsImFkZE5lc3RlZFN1YiIsInN1YnNjcmliZSIsImNsZWFyIiwibGlzdGVuZXIiLCJpc1N1YnNjcmliZWQiLCJwcmV2IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwibm90aWZ5TmVzdGVkU3VicyIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsImdldExpc3RlbmVycyIsImNvbnRleHRWYWx1ZSIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9leGNsdWRlZCIsIl9leGNsdWRlZDIiLCJFTVBUWV9BUlJBWSIsIk5PX1NVQlNDUklQVElPTl9BUlJBWSIsInN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciIsInVwZGF0ZUNvdW50IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzIiwiZWZmZWN0RnVuYyIsImVmZmVjdEFyZ3MiLCJjYXB0dXJlV3JhcHBlclByb3BzIiwibGFzdFdyYXBwZXJQcm9wcyIsImxhc3RDaGlsZFByb3BzIiwicmVuZGVySXNTY2hlZHVsZWQiLCJ3cmFwcGVyUHJvcHMiLCJhY3R1YWxDaGlsZFByb3BzIiwiY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZSIsInN1YnNjcmliZVVwZGF0ZXMiLCJzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMiLCJjaGlsZFByb3BzU2VsZWN0b3IiLCJmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoIiwiZGlkVW5zdWJzY3JpYmUiLCJsYXN0VGhyb3duRXJyb3IiLCJjaGVja0ZvclVwZGF0ZXMiLCJuZXdDaGlsZFByb3BzIiwibGF0ZXN0U3RvcmVTdGF0ZSIsImluaXRTdGF0ZVVwZGF0ZXMiLCJjb25uZWN0QWR2YW5jZWQiLCJzZWxlY3RvckZhY3RvcnkiLCJfcmVmMiIsIl9yZWYyJGdldERpc3BsYXlOYW1lIiwiZ2V0RGlzcGxheU5hbWUiLCJfcmVmMiRtZXRob2ROYW1lIiwibWV0aG9kTmFtZSIsIl9yZWYyJHJlbmRlckNvdW50UHJvcCIsInJlbmRlckNvdW50UHJvcCIsIl9yZWYyJHNob3VsZEhhbmRsZVN0YSIsIl9yZWYyJHN0b3JlS2V5Iiwic3RvcmVLZXkiLCJfcmVmMiRmb3J3YXJkUmVmIiwid2l0aFJlZiIsIl9yZWYyJGNvbnRleHQiLCJjb25uZWN0T3B0aW9ucyIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsInNlbGVjdG9yRmFjdG9yeU9wdGlvbnMiLCJwdXJlIiwidXNlUHVyZU9ubHlNZW1vIiwiQ29ubmVjdEZ1bmN0aW9uIiwiX3VzZU1lbW8iLCJyZWFjdFJlZHV4Rm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwid3JhcE1hcFRvUHJvcHNDb25zdGFudCIsImdldENvbnN0YW50IiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJnZXREZXBlbmRzT25Pd25Qcm9wcyIsIm1hcFRvUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJwcm94eSIsInN0YXRlT3JEaXNwYXRjaCIsIm93blByb3BzIiwibWFwRGlzcGF0Y2hUb1Byb3BzIiwiYWN0aW9uQ3JlYXRvcnMiLCJib3VuZEFjdGlvbkNyZWF0b3JzIiwiX2xvb3AiLCJhY3Rpb25DcmVhdG9yIiwiYmluZEFjdGlvbkNyZWF0b3JzIiwibWFwU3RhdGVUb1Byb3BzIiwiZGVmYXVsdE1lcmdlUHJvcHMiLCJzdGF0ZVByb3BzIiwiZGlzcGF0Y2hQcm9wcyIsIm1lcmdlUHJvcHMiLCJtZXJnZWRQcm9wcyIsImFyZU1lcmdlZFByb3BzRXF1YWwiLCJoYXNSdW5PbmNlIiwibmV4dE1lcmdlZFByb3BzIiwid3JhcE1lcmdlUHJvcHNGdW5jIiwiaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsInB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5IiwiYXJlU3RhdGVzRXF1YWwiLCJhcmVPd25Qcm9wc0VxdWFsIiwiYXJlU3RhdGVQcm9wc0VxdWFsIiwiaGFzUnVuQXRMZWFzdE9uY2UiLCJuZXh0U3RhdGUiLCJuZXh0T3duUHJvcHMiLCJuZXh0U3RhdGVQcm9wcyIsInN0YXRlUHJvcHNDaGFuZ2VkIiwicHJvcHNDaGFuZ2VkIiwic3RhdGVDaGFuZ2VkIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwiZmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImluaXRNYXBTdGF0ZVRvUHJvcHMiLCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzIiwiaW5pdE1lcmdlUHJvcHMiLCJhcmciLCJmYWN0b3JpZXMiLCJzdHJpY3RFcXVhbCIsImNyZWF0ZUNvbm5lY3QiLCJfdGVtcCIsIl9yZWYkY29ubmVjdEhPQyIsImNvbm5lY3RIT0MiLCJfcmVmJG1hcFN0YXRlVG9Qcm9wc0YiLCJtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1hcERpc3BhdGNoVG9Qcm8iLCJtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMiLCJfcmVmJG1lcmdlUHJvcHNGYWN0b3IiLCJtZXJnZVByb3BzRmFjdG9yaWVzIiwiX3JlZiRzZWxlY3RvckZhY3RvcnkiLCJfcmVmMyIsIl9yZWYzJHB1cmUiLCJfcmVmMyRhcmVTdGF0ZXNFcXVhbCIsIl9yZWYzJGFyZU93blByb3BzRXF1YSIsIl9yZWYzJGFyZVN0YXRlUHJvcHNFcSIsIl9yZWYzJGFyZU1lcmdlZFByb3BzRSIsImV4dHJhT3B0aW9ucyIsIm5ld0JhdGNoIiwiX3R5cGVvZiIsIl9kZWZpbmVQcm9wZXJ0eSIsIndyaXRhYmxlIiwiX29iamVjdFNwcmVhZCIsIm93bktleXMiLCJzeW0iLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJhcnIyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiaXRlciIsIl9pdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVTcHJlYWQiLCJVUFBFUkNBU0VfUkUiLCJVUFBFUkNBU0VfUkVfVE9fS0VCQUIiLCJpc1VuaXRsZXNzTnVtYmVyIiwicHJlZml4ZXMiLCJwcmVmaXgiLCJwcmVmaXhLZXkiLCJzdHJpbmdpZnlWYWx1ZSIsInN0cmluZ2lmeUFuZEltcG9ydGFudGlmeVZhbHVlIiwiaW1wb3J0YW50aWZ5IiwiaGFzaFN0cmluZyIsIk1BUF9FWElTVFMiLCJPcmRlcmVkRWxlbWVudHMiLCJlbGVtZW50cyIsImtleU9yZGVyIiwiX3Byb3RvIiwic2hvdWxkUmVvcmRlciIsInNwbGljZSIsIm5lc3RlZCIsIl9uZXN0ZWQiLCJhZGRTdHlsZVR5cGUiLCJzdHlsZVR5cGUiLCJfdGhpcyIsInVud3JhcEV4cG9ydHMiLCJjcmVhdGVDb21tb25qc01vZHVsZSIsImZuIiwiY2FwaXRhbGl6ZVN0cmluZ18xIiwicHJlZml4UHJvcGVydHlfMSIsInByZWZpeFByb3BlcnRpZXMiLCJwcm9wZXJ0eSIsIm5ld1N0eWxlIiwicmVxdWlyZWRQcmVmaXhlcyIsImNhcGl0YWxpemVkUHJvcGVydHkiLCJfY2FwaXRhbGl6ZVN0cmluZzIiLCJzdHlsZVByb3BlcnR5IiwiaiIsInByZWZpeFZhbHVlXzEiLCJwbHVnaW5zIiwibWV0YURhdGEiLCJsZW4iLCJwcm9jZXNzZWRWYWx1ZSIsImFkZE5ld1ZhbHVlc09ubHlfMSIsImFkZElmTmV3IiwibGlzdCIsInZhbHVlcyIsImlzT2JqZWN0XzEiLCJjcmVhdGVQcmVmaXhlciIsInByZWZpeE1hcCIsIl9pc09iamVjdDIiLCJjb21iaW5lZFZhbHVlIiwiX3ByZWZpeFZhbHVlMiIsIl9hZGROZXdWYWx1ZXNPbmx5MiIsIl9wcm9jZXNzZWRWYWx1ZSIsIl9wcmVmaXhQcm9wZXJ0eTIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiYmFja2dyb3VuZENsaXAiLCJpc1ByZWZpeGVkVmFsdWVfMSIsInJlZ2V4IiwiY2FsY18xIiwiX2lzUHJlZml4ZWRWYWx1ZTIiLCJjYWxjIiwiY3Jvc3NGYWRlXzEiLCJjcm9zc0ZhZGUiLCJjdXJzb3JfMSIsImdyYWIiLCJncmFiYmluZyIsImN1cnNvciIsImZpbHRlcl8xIiwiZmxleGJveElFXzEiLCJhbHRlcm5hdGl2ZVByb3BzIiwiYWx0ZXJuYXRpdmVWYWx1ZXMiLCJmbGV4U2hvcnRoYW5kTWFwcGluZ3MiLCJtc0ZsZXgiLCJmbGV4VmFsdWVzIiwiYWxpZ25Db250ZW50IiwiYWxpZ25TZWxmIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwiZmxleEJhc2lzIiwiYXV0byIsImluaGVyaXQiLCJpbml0aWFsIiwibm9uZSIsInVuc2V0IiwiZmxleGJveElFIiwiZmxleGJveE9sZCIsIldlYmtpdEJveE9yaWVudCIsIldlYmtpdEJveERpcmVjdGlvbiIsIndyYXAiLCJmbGV4V3JhcCIsImdyYWRpZW50XzEiLCJncmFkIiwiZ3JhZGllbnQiLCJncmlkXzEiLCJfc2xpY2VkVG9BcnJheSIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwic2xpY2VJdGVyYXRvciIsImlzU2ltcGxlUG9zaXRpb25WYWx1ZSIsImRpc3BsYXlWYWx1ZXMiLCJwcm9wZXJ0eUNvbnZlcnRlcnMiLCJwcm9wZXJ0eUNvbnZlcnRlciIsImFsaWdubWVudFZhbHVlcyIsImdyaWQiLCJtc0dyaWRSb3dBbGlnbiIsIm1zR3JpZENvbHVtbiIsIl92YWx1ZSRzcGxpdCRtYXAiLCJwb3NpdGlvbiIsIl92YWx1ZSRzcGxpdCRtYXAyIiwibXNHcmlkQ29sdW1uU3BhbiIsIm1zR3JpZFJvdyIsIl92YWx1ZSRzcGxpdCRtYXAzIiwiX3ZhbHVlJHNwbGl0JG1hcDQiLCJtc0dyaWRSb3dTcGFuIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsIm1zR3JpZENvbHVtbnMiLCJncmlkVGVtcGxhdGVSb3dzIiwibXNHcmlkUm93cyIsImp1c3RpZnlTZWxmIiwibXNHcmlkQ29sdW1uQWxpZ24iLCJpbWFnZVNldF8xIiwiaW1hZ2VTZXQiLCJsb2dpY2FsIiwiYWx0ZXJuYXRpdmVQcm9wTGlzdCIsIm1hcmdpbkJsb2NrU3RhcnQiLCJtYXJnaW5CbG9ja0VuZCIsIm1hcmdpbklubGluZVN0YXJ0IiwibWFyZ2luSW5saW5lRW5kIiwicGFkZGluZ0Jsb2NrU3RhcnQiLCJwYWRkaW5nQmxvY2tFbmQiLCJwYWRkaW5nSW5saW5lU3RhcnQiLCJwYWRkaW5nSW5saW5lRW5kIiwiYm9yZGVyQmxvY2tTdGFydCIsImJvcmRlckJsb2NrU3RhcnRDb2xvciIsImJvcmRlckJsb2NrU3RhcnRTdHlsZSIsImJvcmRlckJsb2NrU3RhcnRXaWR0aCIsImJvcmRlckJsb2NrRW5kIiwiYm9yZGVyQmxvY2tFbmRDb2xvciIsImJvcmRlckJsb2NrRW5kU3R5bGUiLCJib3JkZXJCbG9ja0VuZFdpZHRoIiwiYm9yZGVySW5saW5lU3RhcnQiLCJib3JkZXJJbmxpbmVTdGFydENvbG9yIiwiYm9yZGVySW5saW5lU3RhcnRTdHlsZSIsImJvcmRlcklubGluZVN0YXJ0V2lkdGgiLCJib3JkZXJJbmxpbmVFbmQiLCJib3JkZXJJbmxpbmVFbmRDb2xvciIsImJvcmRlcklubGluZUVuZFN0eWxlIiwiYm9yZGVySW5saW5lRW5kV2lkdGgiLCJzaXppbmdfMSIsInByb3BlcnRpZXMiLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsImNvbHVtbldpZHRoIiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJzaXppbmciLCJ1cHBlcmNhc2VQYXR0ZXJuIiwibXNQYXR0ZXJuIiwiY2FjaGUiLCJ0b0h5cGhlbkxvd2VyIiwiX2h5cGhlbmF0ZVN0eWxlTmFtZSIsImZyZWV6ZSIsImhOYW1lIiwiaHlwaGVuYXRlUHJvcGVydHlfMSIsIl9oeXBoZW5hdGVTdHlsZU5hbWUyIiwidHJhbnNpdGlvbl8xIiwicHJvcGVydHlQcmVmaXhNYXAiLCJvdXRwdXRWYWx1ZSIsIm11bHRpcGxlVmFsdWVzIiwic2luZ2xlVmFsdWUiLCJkYXNoQ2FzZVByb3BlcnR5IiwiX2h5cGhlbmF0ZVByb3BlcnR5MiIsInBMZW4iLCJ1bnNoaWZ0IiwicHJlZml4TWFwcGluZyIsInByZWZpeFZhbHVlIiwid2Via2l0T3V0cHV0IiwibW96T3V0cHV0IiwidHJhbnNpdGlvblByb3BlcnR5IiwiV2Via2l0VHJhbnNpdGlvbiIsIldlYmtpdFRyYW5zaXRpb25Qcm9wZXJ0eSIsIk1velRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uUHJvcGVydHkiLCJXZWJraXQiLCJNb3oiLCJtcyIsIndtIiwid21zIiwid21tcyIsInByZWZpeEFsbCIsImRlZmF1bHRTZWxlY3RvckhhbmRsZXJzIiwic2VsZWN0b3IiLCJiYXNlU2VsZWN0b3IiLCJnZW5lcmF0ZVN1YnRyZWVTdHlsZXMiLCJnZW5lcmF0ZWQiLCJnZW5lcmF0ZUNTUyIsInN0eWxlVHlwZXMiLCJzZWxlY3RvckhhbmRsZXJzIiwic3RyaW5nSGFuZGxlcnMiLCJ1c2VJbXBvcnRhbnQiLCJtZXJnZWQiLCJwbGFpbkRlY2xhcmF0aW9ucyIsImdlbmVyYXRlZFN0eWxlcyIsImhhbmRsZXIiLCJuZXdTZWxlY3RvciIsImdlbmVyYXRlZFJ1bGVzZXQiLCJnZW5lcmF0ZUNTU1J1bGVzZXQiLCJ0cmFuc2Zvcm1SdWxlIiwidHJhbnNmb3JtVmFsdWUiLCJhcnJheVRvT2JqZWN0S2V5c1JlZHVjZXIiLCJhY2MiLCJkZWNsYXJhdGlvbnMiLCJzdHJpbmdIYW5kbGVyS2V5cyIsInJ1blN0cmluZ0hhbmRsZXJzIiwib3JpZ2luYWxFbGVtZW50cyIsInByZWZpeGVkRWxlbWVudHMiLCJlbGVtZW50TmFtZXMiLCJvcmlnaW5hbFN0eWxlIiwib3JpZ2luYWxJbmRleCIsInJ1bGVzIiwic3R5bGVUYWciLCJmb250RmFtaWx5IiwibmFtZU1hcCIsImluamVjdFN0eWxlT25jZSIsImZpbmFsVmFsIiwidmFsVmFsIiwidmFsS2V5IiwiaW5qZWN0R2VuZXJhdGVkQ1NTT25jZSIsImFscmVhZHlJbmplY3RlZCIsImluamVjdGlvbkJ1ZmZlciIsImlzQnVmZmVyaW5nIiwiZ2VuZXJhdGVkQ1NTIiwiX2luamVjdGlvbkJ1ZmZlciIsImZsdXNoVG9TdHlsZVRhZyIsImRlZmluaXRpb25zIiwicmVzZXRJbmplY3RlZFN0eWxlIiwiZmx1c2hUb0FycmF5IiwicmV0IiwiY3NzUnVsZXMiLCJxdWVyeVNlbGVjdG9yIiwiaGVhZCIsInNoZWV0Iiwic3R5bGVTaGVldCIsImluc2VydFJ1bGUiLCJudW1SdWxlcyIsInJ1bGUiLCJpbm5lclRleHQiLCJpbmplY3RTdHlsZVRhZyIsInByb2Nlc3NTdHlsZURlZmluaXRpb25zIiwic3R5bGVEZWZpbml0aW9ucyIsImNsYXNzTmFtZUJpdHMiLCJkZWZpbml0aW9uQml0cyIsIl9uYW1lIiwiX2RlZmluaXRpb24iLCJfbGVuIiwiaW5qZWN0QW5kR2V0Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwidW5taW5pZmllZEhhc2hGbiIsImhhc2hGbiIsIlN0eWxlU2hlZXQiLCJzaGVldERlZmluaXRpb24iLCJtYXBwZWRTaGVldERlZmluaXRpb24iLCJzdHJpbmdWYWwiLCJyZWh5ZHJhdGUiLCJTdHlsZVNoZWV0U2VydmVyIiwicmVuZGVyU3RhdGljIiwicmVuZGVyRnVuYyIsInN0YXJ0QnVmZmVyaW5nIiwiaHRtbCIsImNzcyIsImNvbnRlbnQiLCJyZW5kZXJlZENsYXNzTmFtZXMiLCJBcGhyb2RpdGUiLCJtYWtlRXhwb3J0cyIsImV4dGVuc2lvbnMiLCJleHRlbnNpb25TZWxlY3RvckhhbmRsZXJzIiwiZXh0ZW5zaW9uIiwic2VsZWN0b3JIYW5kbGVyIiwiU3R5bGVTaGVldFRlc3RVdGlscyIsIm1pbmlmeSIsInNob3VsZE1pbmlmeSIsIl9rZXkiLCJyZXNldCIsIl9fcmVhY3RSb3V0ZXJWZXJzaW9uIiwiQnJvd3NlclJvdXRlciIsIl9yZWY0IiwiaGlzdG9yeVJlZiIsInY1Q29tcGF0IiwiZ2V0TG9jYXRpb24iLCJjcmVhdGVIcmVmIiwidmFsaWRhdGVMb2NhdGlvbiIsImdsb2JhbEhpc3RvcnkiLCJoaXN0b3J5IiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImNyZWF0ZVVSTCIsIm9yaWdpbiIsIlVSTCIsInJlcGxhY2VTdGF0ZSIsImxpc3RlbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQdXNoIiwiaGlzdG9yeVN0YXRlIiwicHVzaFN0YXRlIiwiRE9NRXhjZXB0aW9uIiwiUmVwbGFjZSIsImdldFVybEJhc2VkSGlzdG9yeSIsInNldFN0YXRlSW1wbCIsInY3X3N0YXJ0VHJhbnNpdGlvbiIsIm5ld1N0YXRlIiwiaXNCcm93c2VyIiwiX3JlZjciLCJhYnNvbHV0ZUhyZWYiLCJyZWxvYWREb2N1bWVudCIsInByZXZlbnRTY3JvbGxSZXNldCIsInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiaXNFeHRlcm5hbCIsImN1cnJlbnRVcmwiLCJ0YXJnZXRVcmwiLCJwcm90b2NvbCIsImpvaW5lZFBhdGhuYW1lIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsInJlcGxhY2VQcm9wIiwiZXZlbnQiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsIk5hdkl0ZW0iLCJfUmVhY3QkQ29tcG9uZW50IiwiX2NsYXNzQ2FsbENoZWNrIiwiX2NhbGxTdXBlciIsIl9pbmhlcml0cyIsIl90aGlzJHByb3BzIiwiUmVhY3QiLCJMaW5rIiwic3R5bGVzIiwicHJvcHR5cGVzIiwidGV4dERlY29yYXRpb24iLCJmaWxsIiwic3Ryb2tlIiwiU3ZnU2VhcmNoIiwidmlld0JveCIsInhtbG5zIiwiZmlsbFJ1bGUiLCJ0cmFuc2Zvcm0iLCJTdmdGYWNlYm9vayIsIlN2Z0luc3RhZ3JhbSIsIlN2Z1R3aXR0ZXIiLCJTdmdQcm9maWwiLCJjeCIsImN5IiwiU3ZnSG9tZSIsIlN2Z1NhbGVzIiwiU3ZnQ2FydCIsIkRJU1BMQVlfQ0FSVF9EUkFXRVIiLCJISURFX0NBUlRfRFJBV0VSIiwiaGlkZUNhcnREcmF3ZXIiLCJIZWFkZXIiLCJkaXNwbGF5Q2FydERyYXdlciIsImhlYWRlciIsImxvZ28iLCJhbHQiLCJuYXZCYXIiLCJmbGV4RGlyZWN0aW9uIiwibGlzdFN0eWxlVHlwZSIsInRleHRBbGlnbiIsInBhZGRpbmdMZWZ0Iiwic3ZnIiwiY29ubmVjdCIsImZvb3RlciIsImZvbnRTaXplIiwiYm9yZGVyVG9wIiwibWFyZ2luIiwiZm9vdGVyTmF2Iiwic29jaWFsTmF2IiwibGlzdFN0eWxlIiwiZ2FwIiwic2FtZUxpbmUiLCJsaUlubGluZSIsImZsb2F0IiwiZ2V0RnVsbFllYXIiLCJQcm9kdWN0Q2FyZCIsImRlc2NyaXB0aW9uIiwicmFtIiwiY2FyZEltYWdlIiwic3BlY3MiLCJib3JkZXJSYWRpdXMiLCJvYmplY3RGaXQiLCJ0aXRsZSIsIlByb2R1Y3RzUHJldmlldyIsImxpc3RQcm9kdWN0cyIsImNhcmQiLCJib3JkZXIiLCJMb2dpbiIsImhhbmRsZUxvZ2luU3VibWl0IiwiaGFuZGxlQ2hhbmdlRW1haWwiLCJoYW5kbGVDaGFuZ2VQYXNzd29yZCIsImhhbmRsZVN1Ym1pdFN0YXRlIiwiZW5hYmxlU3VibWl0IiwibG9nSW4iLCJsb2dpbiIsImh0bWxGb3IiLCJ0ZXh0Qm94Iiwib25DaGFuZ2UiLCJzdWJtaXQiLCJfdXNlU3RhdGUyIiwic2V0Rmlyc3ROYW1lIiwiX3VzZVN0YXRlNCIsInNldExhc3ROYW1lIiwiX3VzZVN0YXRlNiIsInNldEVtYWlsIiwiX3VzZVN0YXRlOCIsInNldFBhc3N3b3JkIiwiX3VzZVN0YXRlMTAiLCJDYXJ0V2luZG93IiwiYm9yZGVyQm90dG9tIiwiYm90dG9tIiwiQ2FydCIsIl9vYmplY3REZXN0cnVjdHVyaW5nRW1wdHkiLCJGRVRDSF9QUk9EVUNUU19TVUNDRVNTIiwiU0VUX0xPQURJTkdfU1RBVEUiLCJzZXRMb2FkaW5nU3RhdGUiLCJsb2FkaW5nU3RhdGUiLCJBcHAiLCJwcm9jIiwibWVtb3J5IiwibWVtb3J5VHlwZSIsImlzTG9nZ2VkSW4iLCJmZXRjaFByb2R1Y3RzIiwibG9nIiwiZGlzcGxheURyYXdlciIsImFwcCIsImNhcnQiLCJTaWduVXAiLCJGb290ZXIiLCJib3JkZXJUb3BMZWZ0UmFkaXVzIiwiYm9yZGVyQm90dG9tTGVmdFJhZGl1cyIsInJpZ2h0IiwicHJvZHVjdHMiLCJyZXMiLCJqc29uIiwidG9QcmltaXRpdmUiLCJ0b1Byb3BlcnR5S2V5IiwiX29iamVjdFNwcmVhZDIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImZvcm1hdFByb2RFcnJvck1lc3NhZ2UiLCJjb2RlIiwiJCRvYnNlcnZhYmxlIiwib2JzZXJ2YWJsZSIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImNvbXBvc2UiLCJmdW5jcyIsImNyZWF0ZVRodW5rTWlkZGxld2FyZSIsImV4dHJhQXJndW1lbnQiLCJ0aHVuayIsIndpdGhFeHRyYUFyZ3VtZW50IiwiREVMRVRFIiwiU0hJRlQiLCJTSVpFIiwiTUFTSyIsIk5PVF9TRVQiLCJTZXRSZWYiLCJPd25lcklEIiwiZW5zdXJlU2l6ZSIsIl9faXRlcmF0ZSIsInJldHVyblRydWUiLCJ3cmFwSW5kZXgiLCJ1aW50MzJJbmRleCIsIk5hTiIsIndob2xlU2xpY2UiLCJiZWdpbiIsImlzTmVnIiwicmVzb2x2ZUJlZ2luIiwicmVzb2x2ZUluZGV4IiwicmVzb2x2ZUVuZCIsImRlZmF1bHRJbmRleCIsIkluZmluaXR5IiwibWF4IiwiSVNfQ09MTEVDVElPTl9TWU1CT0wiLCJpc0NvbGxlY3Rpb24iLCJtYXliZUNvbGxlY3Rpb24iLCJJU19LRVlFRF9TWU1CT0wiLCJpc0tleWVkIiwibWF5YmVLZXllZCIsIklTX0lOREVYRURfU1lNQk9MIiwiaXNJbmRleGVkIiwibWF5YmVJbmRleGVkIiwiaXNBc3NvY2lhdGl2ZSIsIm1heWJlQXNzb2NpYXRpdmUiLCJDb2xsZWN0aW9uIiwiU2VxIiwiS2V5ZWRDb2xsZWN0aW9uIiwiS2V5ZWRTZXEiLCJfX3Byb3RvX18iLCJJbmRleGVkQ29sbGVjdGlvbiIsIkluZGV4ZWRTZXEiLCJTZXRDb2xsZWN0aW9uIiwiU2V0U2VxIiwiS2V5ZWQiLCJJbmRleGVkIiwiSVNfU0VRX1NZTUJPTCIsImlzU2VxIiwibWF5YmVTZXEiLCJJU19SRUNPUkRfU1lNQk9MIiwiaXNSZWNvcmQiLCJtYXliZVJlY29yZCIsImlzSW1tdXRhYmxlIiwibWF5YmVJbW11dGFibGUiLCJJU19PUkRFUkVEX1NZTUJPTCIsImlzT3JkZXJlZCIsIm1heWJlT3JkZXJlZCIsIklURVJBVEVfS0VZUyIsIklURVJBVEVfVkFMVUVTIiwiSVRFUkFURV9FTlRSSUVTIiwiUkVBTF9JVEVSQVRPUl9TWU1CT0wiLCJGQVVYX0lURVJBVE9SX1NZTUJPTCIsIklURVJBVE9SX1NZTUJPTCIsIkl0ZXJhdG9yIiwiaXRlcmF0b3JWYWx1ZSIsIml0ZXJhdG9yUmVzdWx0IiwiaXRlcmF0b3JEb25lIiwiaGFzSXRlcmF0b3IiLCJtYXliZUl0ZXJhYmxlIiwiZ2V0SXRlcmF0b3JGbiIsImlzSXRlcmF0b3IiLCJtYXliZUl0ZXJhdG9yIiwiZ2V0SXRlcmF0b3IiLCJpdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJLRVlTIiwiVkFMVUVTIiwiRU5UUklFUyIsImluc3BlY3QiLCJ0b1NvdXJjZSIsImlzQXJyYXlMaWtlIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiZW1wdHlTZXF1ZW5jZSIsInRvU2VxIiwic2VxIiwibWF5YmVJbmRleGVkU2VxRnJvbVZhbHVlIiwiZW50cmllcyIsImZyb21FbnRyeVNlcSIsImlzS2V5c0l0ZXJhYmxlIiwidG9TZXRTZXEiLCJPYmplY3RTZXEiLCJzZXFGcm9tVmFsdWUiLCJfX3RvU3RyaW5nIiwiY2FjaGVSZXN1bHQiLCJfY2FjaGUiLCJfX2l0ZXJhdGVVbmNhY2hlZCIsImVudHJ5U2VxIiwicmV2ZXJzZSIsImVudHJ5IiwiX19pdGVyYXRvciIsIl9faXRlcmF0b3JVbmNhY2hlZCIsInRvS2V5ZWRTZXEiLCJrZXllZFNlcUZyb21WYWx1ZSIsInRvSW5kZXhlZFNlcSIsImluZGV4ZWRTZXFGcm9tVmFsdWUiLCJBcnJheVNlcSIsIl9hcnJheSIsIm5vdFNldFZhbHVlIiwiX29iamVjdCIsIl9rZXlzIiwiRU1QVFlfU0VRIiwiQ29sbGVjdGlvblNlcSIsImNvbGxlY3Rpb24iLCJfY29sbGVjdGlvbiIsIml0ZXJhdGlvbnMiLCJzdGVwIiwiSVNfTUFQX1NZTUJPTCIsImlzTWFwIiwibWF5YmVNYXAiLCJpc09yZGVyZWRNYXAiLCJtYXliZU9yZGVyZWRNYXAiLCJpc1ZhbHVlT2JqZWN0IiwibWF5YmVWYWx1ZSIsImVxdWFscyIsImhhc2hDb2RlIiwidmFsdWVBIiwidmFsdWVCIiwiaW11bCIsInNtaSIsImkzMiIsImRlZmF1bHRWYWx1ZU9mIiwiaGFzaE51bGxpc2giLCJoYXNoZWQiLCJoYXNoTnVtYmVyIiwiU1RSSU5HX0hBU0hfQ0FDSEVfTUlOX1NUUkxFTiIsInN0cmluZ0hhc2hDYWNoZSIsIlNUUklOR19IQVNIX0NBQ0hFX1NJWkUiLCJTVFJJTkdfSEFTSF9DQUNIRV9NQVhfU0laRSIsInVzaW5nV2Vha01hcCIsIndlYWtNYXAiLCJVSURfSEFTSF9LRVkiLCJjYW5EZWZpbmVQcm9wZXJ0eSIsInVuaXF1ZUlEIiwiZ2V0SUVOb2RlSGFzaCIsIm5leHRIYXNoIiwiaXNFeHRlbnNpYmxlIiwiaGFzaEpTT2JqIiwic3ltYm9sTWFwIiwiaGFzaFN5bWJvbCIsIm51bGxpc2giLCJfb2JqSGFzaFVJRCIsIlRvS2V5ZWRTZXF1ZW5jZSIsImluZGV4ZWQiLCJ1c2VLZXlzIiwiX2l0ZXIiLCJfdXNlS2V5cyIsInZhbHVlU2VxIiwidGhpcyQxJDEiLCJyZXZlcnNlZFNlcXVlbmNlIiwicmV2ZXJzZUZhY3RvcnkiLCJtYXBwZXIiLCJtYXBwZWRTZXF1ZW5jZSIsIm1hcEZhY3RvcnkiLCJUb0luZGV4ZWRTZXF1ZW5jZSIsIlRvU2V0U2VxdWVuY2UiLCJGcm9tRW50cmllc1NlcXVlbmNlIiwidmFsaWRhdGVFbnRyeSIsImluZGV4ZWRDb2xsZWN0aW9uIiwiZmxpcEZhY3RvcnkiLCJmbGlwU2VxdWVuY2UiLCJtYWtlU2VxdWVuY2UiLCJmbGlwIiwiY2FjaGVSZXN1bHRUaHJvdWdoIiwiZmlsdGVyRmFjdG9yeSIsInByZWRpY2F0ZSIsImZpbHRlclNlcXVlbmNlIiwic2xpY2VGYWN0b3J5Iiwib3JpZ2luYWxTaXplIiwicmVzb2x2ZWRCZWdpbiIsInJlc29sdmVkRW5kIiwic2xpY2VTaXplIiwicmVzb2x2ZWRTaXplIiwic2xpY2VTZXEiLCJza2lwcGVkIiwiaXNTa2lwcGluZyIsInNraXBXaGlsZUZhY3RvcnkiLCJza2lwU2VxdWVuY2UiLCJza2lwcGluZyIsImZsYXR0ZW5GYWN0b3J5IiwiZGVwdGgiLCJmbGF0U2VxdWVuY2UiLCJzdG9wcGVkIiwiZmxhdERlZXAiLCJjdXJyZW50RGVwdGgiLCJzb3J0RmFjdG9yeSIsImNvbXBhcmF0b3IiLCJkZWZhdWx0Q29tcGFyYXRvciIsImlzS2V5ZWRDb2xsZWN0aW9uIiwibWF4RmFjdG9yeSIsIm1heENvbXBhcmUiLCJjb21wIiwiemlwV2l0aEZhY3RvcnkiLCJrZXlJdGVyIiwiemlwcGVyIiwiaXRlcnMiLCJ6aXBBbGwiLCJ6aXBTZXF1ZW5jZSIsInNpemVzIiwiaXRlcmF0b3JzIiwiaXNEb25lIiwic3RlcHMiLCJyZWlmeSIsImNvbGxlY3Rpb25DbGFzcyIsImFyckNvcHkiLCJuZXdBcnIiLCJjb25kaXRpb24iLCJhc3NlcnROb3RJbmZpbml0ZSIsImNvZXJjZUtleVBhdGgiLCJrZXlQYXRoIiwiaXNEYXRhU3RydWN0dXJlIiwicHJvdG8iLCJwYXJlbnRQcm90byIsIm5leHRQcm90byIsInF1b3RlU3RyaW5nIiwiX2lnbm9yZUVycm9yIiwic2hhbGxvd0NvcHkiLCJ1cGRhdGVJbiQxIiwidXBkYXRlZFZhbHVlIiwidXBkYXRlSW5EZWVwbHkiLCJpbkltbXV0YWJsZSIsImV4aXN0aW5nIiwid2FzTm90U2V0IiwiZXhpc3RpbmdWYWx1ZSIsIm5ld1ZhbHVlIiwibmV4dEV4aXN0aW5nIiwibmV4dFVwZGF0ZWQiLCJyZW1vdmUiLCJjb2xsZWN0aW9uQ29weSIsImVtcHR5TWFwIiwic2V0SW4iLCJzZXRJbiQxIiwiZGVsZXRlSW4iLCJyZW1vdmVJbiIsInVwZGF0ZSQxIiwidXBkYXRlIiwidXBkYXRlSW4iLCJtZXJnZSQxIiwibWVyZ2VJbnRvS2V5ZWRXaXRoIiwibWVyZ2VXaXRoJDEiLCJtZXJnZXIiLCJjb2xsZWN0aW9ucyIsImNvbGxlY3Rpb24kMSIsIl9fb3duZXJJRCIsIndpdGhNdXRhdGlvbnMiLCJtZXJnZUludG9Db2xsZWN0aW9uIiwib2xkVmFsIiwibWVyZ2VEZWVwV2l0aFNvdXJjZXMiLCJzb3VyY2VzIiwibWVyZ2VXaXRoU291cmNlcyIsImRlZXBNZXJnZXIiLCJvbGRWYWx1ZSIsIm5ld0RhdGFTdHJ1Y3R1cmUiLCJvbGRTZXEiLCJuZXdTZXEiLCJkZWVwTWVyZ2VyV2l0aCIsIm1lcmdlV2l0aCIsIm1lcmdlIiwibWVyZ2VJdGVtIiwiaGFzVmFsIiwibmV4dFZhbCIsIm1lcmdlRGVlcCIsIm1lcmdlRGVlcFdpdGgiLCJtZXJnZUluIiwibWVyZ2VEZWVwSW4iLCJtdXRhYmxlIiwiYXNNdXRhYmxlIiwid2FzQWx0ZXJlZCIsIl9fZW5zdXJlT3duZXIiLCJhc0ltbXV0YWJsZSIsIl9fYWx0ZXJlZCIsImtleVZhbHVlcyIsIl9yb290IiwidXBkYXRlTWFwIiwiZGVsZXRlQWxsIiwiX19oYXNoIiwiT3JkZXJlZE1hcCIsInNvcnRCeSIsIk1hcEl0ZXJhdG9yIiwiaXRlcmF0ZSIsIm93bmVySUQiLCJtYWtlTWFwIiwiTWFwUHJvdG90eXBlIiwicmVtb3ZlQWxsIiwiQXJyYXlNYXBOb2RlIiwia2V5SGFzaCIsImRpZENoYW5nZVNpemUiLCJkaWRBbHRlciIsInJlbW92ZWQiLCJleGlzdHMiLCJNQVhfQVJSQVlfTUFQX1NJWkUiLCJWYWx1ZU5vZGUiLCJjcmVhdGVOb2RlcyIsImlzRWRpdGFibGUiLCJuZXdFbnRyaWVzIiwiQml0bWFwSW5kZXhlZE5vZGUiLCJiaXRtYXAiLCJub2RlcyIsImJpdCIsInBvcENvdW50Iiwia2V5SGFzaEZyYWciLCJuZXdOb2RlIiwidXBkYXRlTm9kZSIsIk1BWF9CSVRNQVBfSU5ERVhFRF9TSVpFIiwiaW5jbHVkaW5nIiwiZXhwYW5kZWROb2RlcyIsIkhhc2hBcnJheU1hcE5vZGUiLCJleHBhbmROb2RlcyIsImlzTGVhZk5vZGUiLCJuZXdCaXRtYXAiLCJuZXdOb2RlcyIsInNldEF0IiwiY2FuRWRpdCIsIm5ld0xlbiIsIm5ld0FycmF5IiwiYWZ0ZXIiLCJzcGxpY2VPdXQiLCJzcGxpY2VJbiIsIm5ld0NvdW50IiwiTUlOX0hBU0hfQVJSQVlfTUFQX1NJWkUiLCJleGNsdWRpbmciLCJwYWNrZWRJSSIsInBhY2tlZE5vZGVzIiwicGFja05vZGVzIiwiSGFzaENvbGxpc2lvbk5vZGUiLCJtZXJnZUludG9Ob2RlIiwia2V5TWF0Y2giLCJtYXhJbmRleCIsIkVNUFRZX01BUCIsIl90eXBlIiwiX3JldmVyc2UiLCJfc3RhY2siLCJtYXBJdGVyYXRvckZyYW1lIiwibWFwSXRlcmF0b3JWYWx1ZSIsInN1Yk5vZGUiLCJfX3ByZXYiLCJyb290IiwibmV3Um9vdCIsIm5ld1NpemUiLCJpZHgxIiwiaWR4MiIsIklTX0xJU1RfU1lNQk9MIiwiaXNMaXN0IiwibWF5YmVMaXN0IiwiTGlzdCIsImVtcHR5IiwiZW1wdHlMaXN0IiwibWFrZUxpc3QiLCJWTm9kZSIsInNldFNpemUiLCJsaXN0Tm9kZUZvciIsIl9vcmlnaW4iLCJzZXRMaXN0Qm91bmRzIiwibmV3VGFpbCIsIl90YWlsIiwiZ2V0VGFpbE9mZnNldCIsIl9jYXBhY2l0eSIsInVwZGF0ZVZOb2RlIiwiX2xldmVsIiwidXBkYXRlTGlzdCIsImluc2VydCIsIm9sZFNpemUiLCJhcmd1bWVudHMkMSIsInNlcXMiLCJhcmd1bWVudCIsIml0ZXJhdGVMaXN0IiwiRE9ORSIsIkxpc3RQcm90b3R5cGUiLCJyZW1vdmVCZWZvcmUiLCJsZXZlbCIsIm9yaWdpbkluZGV4IiwibmV3Q2hpbGQiLCJyZW1vdmluZ0ZpcnN0Iiwib2xkQ2hpbGQiLCJlZGl0YWJsZSIsImVkaXRhYmxlVk5vZGUiLCJyZW1vdmVBZnRlciIsInNpemVJbmRleCIsIkVNUFRZX0xJU1QiLCJ0YWlsUG9zIiwiaXRlcmF0ZU5vZGVPckxlYWYiLCJpdGVyYXRlTGVhZiIsIml0ZXJhdGVOb2RlIiwiY2FwYWNpdHkiLCJub2RlSGFzIiwibG93ZXJOb2RlIiwibmV3TG93ZXJOb2RlIiwicmF3SW5kZXgiLCJvd25lciIsIm9sZE9yaWdpbiIsIm9sZENhcGFjaXR5IiwibmV3T3JpZ2luIiwibmV3Q2FwYWNpdHkiLCJuZXdMZXZlbCIsIm9mZnNldFNoaWZ0Iiwib2xkVGFpbE9mZnNldCIsIm5ld1RhaWxPZmZzZXQiLCJvbGRUYWlsIiwiYmVnaW5JbmRleCIsIkVNUFRZX09SREVSRURfTUFQIiwiZW1wdHlPcmRlcmVkTWFwIiwiX21hcCIsIl9saXN0IiwidXBkYXRlT3JkZXJlZE1hcCIsIm5ld01hcCIsIm5ld0xpc3QiLCJtYWtlT3JkZXJlZE1hcCIsIm9tYXAiLCJ0b01hcCIsIklTX1NUQUNLX1NZTUJPTCIsImlzU3RhY2siLCJtYXliZVN0YWNrIiwiU3RhY2siLCJlbXB0eVN0YWNrIiwicHVzaEFsbCIsIl9oZWFkIiwicGVlayIsIm1ha2VTdGFjayIsIkVNUFRZX1NUQUNLIiwiU3RhY2tQcm90b3R5cGUiLCJ1bnNoaWZ0QWxsIiwiSVNfU0VUX1NZTUJPTCIsImlzU2V0IiwibWF5YmVTZXQiLCJpc09yZGVyZWRTZXQiLCJtYXliZU9yZGVyZWRTZXQiLCJkZWVwRXF1YWwiLCJub3RBc3NvY2lhdGl2ZSIsImZsaXBwZWQiLCJhbGxFcXVhbCIsImJTaXplIiwibWl4aW4iLCJjdG9yIiwibWV0aG9kcyIsImtleUNvcGllciIsInRvSlMiLCJyZXN1bHQkMSIsImVtcHR5U2V0IiwiZnJvbUtleXMiLCJrZXlTZXEiLCJpbnRlcnNlY3QiLCJzZXRzIiwiU2V0UHJvdG90eXBlIiwidW5pb24iLCJ1cGRhdGVTZXQiLCJkaWRDaGFuZ2VzIiwibWFwRW50cmllcyIsIm1hcHBlZCIsInRvUmVtb3ZlIiwic3VidHJhY3QiLCJPcmRlcmVkU2V0IiwiX19tYWtlIiwiX19lbXB0eSIsIkVNUFRZX1NFVCIsIm1ha2VTZXQiLCJFTVBUWV9SQU5HRSIsIlJhbmdlIiwiYWJzIiwiX3N0YXJ0IiwiX2VuZCIsIl9zdGVwIiwic2VhcmNoVmFsdWUiLCJwb3NzaWJsZUluZGV4Iiwib2Zmc2V0VmFsdWUiLCJsYXN0SW5kZXhPZiIsIm90aGVyIiwiZ2V0SW4kMSIsInNlYXJjaEtleVBhdGgiLCJnZXRJbiIsImlzSXRlcmFibGUiLCJ1c2VUdXBsZXMiLCJ0b09yZGVyZWRNYXAiLCJ0b09yZGVyZWRTZXQiLCJ0b1NldCIsInRvU3RhY2siLCJ0b0xpc3QiLCJfX3RvU3RyaW5nTWFwcGVyIiwic2luZ2xldG9uIiwiY29uY2F0U2VxIiwiZmxhdHRlbiIsInN1bSIsImNvbmNhdEZhY3RvcnkiLCJwYXJ0aXRpb24iLCJpc0tleWVkSXRlciIsImdyb3VwcyIsImNvZXJjZSIsInBhcnRpdGlvbkZhY3RvcnkiLCJmaW5kIiwiZmluZEVudHJ5Iiwic2lkZUVmZmVjdCIsInNlcGFyYXRvciIsImpvaW5lZCIsImlzRmlyc3QiLCJyZWR1Y2VyIiwiaW5pdGlhbFJlZHVjdGlvbiIsImJ1dExhc3QiLCJpc0VtcHR5IiwiY291bnRCeSIsImdyb3VwZXIiLCJjb3VudEJ5RmFjdG9yeSIsImVudHJpZXNTZXF1ZW5jZSIsImVudHJ5TWFwcGVyIiwiZmlsdGVyTm90Iiwibm90IiwiZm91bmQiLCJmaW5kS2V5IiwiZmluZExhc3QiLCJmaW5kTGFzdEVudHJ5IiwiZmluZExhc3RLZXkiLCJmbGF0TWFwIiwiZmxhdE1hcEZhY3RvcnkiLCJzZWFyY2hLZXkiLCJncm91cEJ5IiwiZ3JvdXBCeUZhY3RvcnkiLCJoYXNJbiIsImlzU3Vic2V0IiwiaXNTdXBlcnNldCIsImtleU9mIiwia2V5TWFwcGVyIiwibGFzdEtleU9mIiwibWF4QnkiLCJuZWciLCJkZWZhdWx0TmVnQ29tcGFyYXRvciIsIm1pbkJ5Iiwic2tpcCIsImFtb3VudCIsInNraXBMYXN0Iiwic2tpcFdoaWxlIiwic2tpcFVudGlsIiwidGFrZSIsInRha2VMYXN0IiwidGFrZVdoaWxlIiwidGFrZVNlcXVlbmNlIiwiaXRlcmF0aW5nIiwidGFrZVdoaWxlRmFjdG9yeSIsInRha2VVbnRpbCIsIm9yZGVyZWQiLCJrZXllZCIsIm11cm11ckhhc2hPZlNpemUiLCJoYXNoTWVyZ2UiLCJoYXNoQ29sbGVjdGlvbiIsIkNvbGxlY3Rpb25Qcm90b3R5cGUiLCJ0b0pTT04iLCJjaGFpbiIsIm1hcEtleXMiLCJLZXllZENvbGxlY3Rpb25Qcm90b3R5cGUiLCJyZW1vdmVOdW0iLCJudW1BcmdzIiwic3BsaWNlZCIsImZpbmRMYXN0SW5kZXgiLCJpbnRlcnBvc2UiLCJpbnRlcnBvc2VkU2VxdWVuY2UiLCJpbnRlcnBvc2VGYWN0b3J5IiwiaW50ZXJsZWF2ZSIsInppcHBlZCIsImludGVybGVhdmVkIiwiemlwIiwiZGVmYXVsdFppcHBlciIsInppcFdpdGgiLCJJbmRleGVkQ29sbGVjdGlvblByb3RvdHlwZSIsIlNldENvbGxlY3Rpb25Qcm90b3R5cGUiLCJyZWR1Y3Rpb24iLCJ1c2VGaXJzdCIsImVtcHR5T3JkZXJlZFNldCIsIkVNUFRZX09SREVSRURfU0VUIiwiT3JkZXJlZFNldFByb3RvdHlwZSIsIm1ha2VPcmRlcmVkU2V0IiwiUmVjb3JkIiwiZGVmYXVsdFZhbHVlcyIsImhhc0luaXRpYWxpemVkIiwidGhyb3dPbkludmFsaWREZWZhdWx0VmFsdWVzIiwiUmVjb3JkVHlwZSIsImluZGljZXMiLCJSZWNvcmRUeXBlUHJvdG90eXBlIiwiX2luZGljZXMiLCJfZGVmYXVsdFZhbHVlcyIsInJlY29yZE5hbWUiLCJzZXRQcm9wIiwiX3ZhbHVlcyIsIlJlY29yZFByb3RvdHlwZSIsInJlY29yZFNlcSIsIm5ld1ZhbHVlcyIsIm1ha2VSZWNvcmQiLCJnZXREZXNjcmlwdGl2ZU5hbWUiLCJsaWtlUmVjb3JkIiwicmVjb3JkIiwiaW5pdGlhbFN0YXRlVWkiLCJpc0NhcnREcmF3ZXJWaXNpYmxlIiwiSXNVU2VyTG9nZ2VkSW4iLCJ1c2VyIiwiaW5pdGlhbFN0YXRlUHJvZHVjdHMiLCJsb2FkaW5nIiwiaW5pdGlhbFN0YXRlIiwiY3JlYXRlU3RvcmUiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiY3VycmVudFJlZHVjZXIiLCJjdXJyZW50U3RhdGUiLCJjdXJyZW50TGlzdGVuZXJzIiwibmV4dExpc3RlbmVycyIsImlzRGlzcGF0Y2hpbmciLCJlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzIiwiaXNQbGFpbk9iamVjdCIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVTdGF0ZSIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImNvbWJpbmVSZWR1Y2VycyIsIm1pZGRsZXdhcmVzIiwiX2Rpc3BhdGNoIiwibWlkZGxld2FyZUFQSSIsIm1pZGRsZXdhcmUiLCJhcHBseU1pZGRsZXdhcmUiLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIl0sInNvdXJjZVJvb3QiOiIifQ==